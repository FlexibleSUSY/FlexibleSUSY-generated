// ====================================================================
// This file is part of FlexibleSUSY.
//
// FlexibleSUSY is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published
// by the Free Software Foundation, either version 3 of the License,
// or (at your option) any later version.
//
// FlexibleSUSY is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with FlexibleSUSY.  If not, see
// <http://www.gnu.org/licenses/>.
// ====================================================================

// File generated at Mon 27 Feb 2017 13:32:50

/**
 * @file E6SSMtower_mass_eigenstates.cpp
 * @brief implementation of the E6SSMtower model class
 *
 * Contains the definition of the E6SSMtower model class methods
 * which solve EWSB and calculate pole masses and mixings from DRbar
 * parameters.
 *
 * This file was generated at Mon 27 Feb 2017 13:32:50 with FlexibleSUSY
 * 1.7.3 (git commit: 622a80d5da461a0a259a094325cd734ff8e79c61) and SARAH 4.9.3 .
 */

#include "E6SSMtower_mass_eigenstates.hpp"
#include "eigen_utils.hpp"
#include "wrappers.hpp"
#include "linalg2.hpp"
#include "numerics2.hpp"
#include "logger.hpp"
#include "error.hpp"
#include "root_finder.hpp"
#include "fixed_point_iterator.hpp"
#include "gsl_utils.hpp"
#include "config.h"
#include "parallel.hpp"
#include "pv.hpp"
#include "functors.hpp"

#include "sfermions.hpp"
#include "mssm_twoloophiggs.hpp"
#include "nmssm_twoloophiggs.hpp"



#include <cmath>
#include <iostream>
#include <memory>
#include <algorithm>

#include <gsl/gsl_multiroots.h>

namespace flexiblesusy {

#define CLASSNAME E6SSMtower_mass_eigenstates

#define PHYSICAL(parameter) physical.parameter
#define INPUT(parameter) model->get_input().parameter
#define LOCALINPUT(parameter) input.parameter
#define MODELPARAMETER(parameter) model->get_##parameter()

#define HIGGS_2LOOP_CORRECTION_AT_AS     two_loop_corrections.higgs_at_as
#define HIGGS_2LOOP_CORRECTION_AB_AS     two_loop_corrections.higgs_ab_as
#define HIGGS_2LOOP_CORRECTION_AT_AT     two_loop_corrections.higgs_at_at
#define HIGGS_2LOOP_CORRECTION_ATAU_ATAU two_loop_corrections.higgs_atau_atau
#define TOP_POLE_QCD_CORRECTION          two_loop_corrections.top_qcd
#define HIGGS_3LOOP_CORRECTION_AT_AS_AS  1

CLASSNAME::E6SSMtower_mass_eigenstates(const E6SSMtower_input_parameters& input_)
   : E6SSMtower_soft_parameters(input_)
   , number_of_ewsb_iterations(100)
   , number_of_mass_iterations(20)
   , ewsb_loop_order(2)
   , pole_mass_loop_order(2)
   , calculate_sm_pole_masses(false)
   , calculate_bsm_pole_masses(true)
   , force_output(false)
   , precision(1.0e-3)
   , ewsb_iteration_precision(1.0e-5)
   , physical()
   , problems(E6SSMtower_info::particle_names)
   , two_loop_corrections()
   , MVG(0), MGlu(0), MFv(Eigen::Array<double,3,1>::Zero()), MChaP(0), MSd(
      Eigen::Array<double,6,1>::Zero()), MSv(Eigen::Array<double,3,1>::Zero()),
      MSu(Eigen::Array<double,6,1>::Zero()), MSe(Eigen::Array<double,6,1>::Zero())
      , MSDX(Eigen::Array<double,6,1>::Zero()), Mhh(Eigen::Array<double,3,1>::Zero
      ()), MAh(Eigen::Array<double,3,1>::Zero()), MHpm(Eigen::Array<double,2,1>
      ::Zero()), MChi(Eigen::Array<double,6,1>::Zero()), MCha(Eigen::Array<double,
      2,1>::Zero()), MFe(Eigen::Array<double,3,1>::Zero()), MFd(Eigen::Array<
      double,3,1>::Zero()), MFu(Eigen::Array<double,3,1>::Zero()), MFDX(
      Eigen::Array<double,3,1>::Zero()), MSHI0(Eigen::Array<double,4,1>::Zero()),
      MSHIp(Eigen::Array<double,4,1>::Zero()), MChaI(Eigen::Array<double,2,1>
      ::Zero()), MChiI(Eigen::Array<double,4,1>::Zero()), MSSI0(Eigen::Array<
      double,2,1>::Zero()), MFSI(Eigen::Array<double,2,1>::Zero()), MSHp0(
      Eigen::Array<double,2,1>::Zero()), MSHpp(Eigen::Array<double,2,1>::Zero()),
      MChiP(Eigen::Array<double,2,1>::Zero()), MVWm(0), MVP(0), MVZ(0), MVZp(0)

   , ZD(Eigen::Matrix<double,6,6>::Zero()), ZV(Eigen::Matrix<double,3,3>::Zero(
      )), ZU(Eigen::Matrix<double,6,6>::Zero()), ZE(Eigen::Matrix<double,6,6>
      ::Zero()), ZDX(Eigen::Matrix<double,6,6>::Zero()), ZH(Eigen::Matrix<double,3
      ,3>::Zero()), ZA(Eigen::Matrix<double,3,3>::Zero()), ZP(Eigen::Matrix<double
      ,2,2>::Zero()), ZN(Eigen::Matrix<std::complex<double>,6,6>::Zero()), UM(
      Eigen::Matrix<std::complex<double>,2,2>::Zero()), UP(Eigen::Matrix<
      std::complex<double>,2,2>::Zero()), ZEL(Eigen::Matrix<std::complex<double>,3
      ,3>::Zero()), ZER(Eigen::Matrix<std::complex<double>,3,3>::Zero()), ZDL(
      Eigen::Matrix<std::complex<double>,3,3>::Zero()), ZDR(Eigen::Matrix<
      std::complex<double>,3,3>::Zero()), ZUL(Eigen::Matrix<std::complex<double>,3
      ,3>::Zero()), ZUR(Eigen::Matrix<std::complex<double>,3,3>::Zero()), ZDXL(
      Eigen::Matrix<std::complex<double>,3,3>::Zero()), ZDXR(Eigen::Matrix<
      std::complex<double>,3,3>::Zero()), UHI0(Eigen::Matrix<double,4,4>::Zero()),
      UHIp(Eigen::Matrix<double,4,4>::Zero()), ZMI(Eigen::Matrix<std::complex<
      double>,2,2>::Zero()), ZPI(Eigen::Matrix<std::complex<double>,2,2>::Zero()),
      ZNI(Eigen::Matrix<std::complex<double>,4,4>::Zero()), ZSSI(Eigen::Matrix<
      double,2,2>::Zero()), ZFSI(Eigen::Matrix<std::complex<double>,2,2>::Zero()),
      UHp0(Eigen::Matrix<double,2,2>::Zero()), UHpp(Eigen::Matrix<double,2,2>
      ::Zero()), ZNp(Eigen::Matrix<std::complex<double>,2,2>::Zero()), ZZ(
      Eigen::Matrix<double,3,3>::Zero())

   , PhaseGlu(1,0), PhaseFHpup(1,0)

{
}

CLASSNAME::~E6SSMtower_mass_eigenstates()
{
}

void CLASSNAME::do_calculate_sm_pole_masses(bool flag)
{
   calculate_sm_pole_masses = flag;
}

bool CLASSNAME::do_calculate_sm_pole_masses() const
{
   return calculate_sm_pole_masses;
}

void CLASSNAME::do_calculate_bsm_pole_masses(bool flag)
{
   calculate_bsm_pole_masses = flag;
}

bool CLASSNAME::do_calculate_bsm_pole_masses() const
{
   return calculate_bsm_pole_masses;
}

void CLASSNAME::do_force_output(bool flag)
{
   force_output = flag;
}

bool CLASSNAME::do_force_output() const
{
   return force_output;
}

void CLASSNAME::set_ewsb_loop_order(unsigned loop_order)
{
   ewsb_loop_order = loop_order;
}

void CLASSNAME::set_two_loop_corrections(const Two_loop_corrections& two_loop_corrections_)
{
   two_loop_corrections = two_loop_corrections_;
}

const Two_loop_corrections& CLASSNAME::get_two_loop_corrections() const
{
   return two_loop_corrections;
}

void CLASSNAME::set_number_of_ewsb_iterations(std::size_t iterations)
{
   number_of_ewsb_iterations = iterations;
}

std::size_t CLASSNAME::get_number_of_ewsb_iterations() const
{
   return number_of_ewsb_iterations;
}

void CLASSNAME::set_number_of_mass_iterations(std::size_t iterations)
{
   number_of_mass_iterations = iterations;
}

std::size_t CLASSNAME::get_number_of_mass_iterations() const
{
   return number_of_mass_iterations;
}

void CLASSNAME::set_precision(double precision_)
{
   precision = precision_;
   ewsb_iteration_precision = precision_;
}

void CLASSNAME::set_pole_mass_loop_order(unsigned loop_order)
{
   pole_mass_loop_order = loop_order;
}

unsigned CLASSNAME::get_pole_mass_loop_order() const
{
   return pole_mass_loop_order;
}

void CLASSNAME::set_ewsb_iteration_precision(double precision)
{
   ewsb_iteration_precision = precision;
}

double CLASSNAME::get_ewsb_iteration_precision() const
{
   return ewsb_iteration_precision;
}

double CLASSNAME::get_precision() const
{
   return precision;
}

double CLASSNAME::get_ewsb_loop_order() const
{
   return ewsb_loop_order;
}

const E6SSMtower_physical& CLASSNAME::get_physical() const
{
   return physical;
}

E6SSMtower_physical& CLASSNAME::get_physical()
{
   return physical;
}

void CLASSNAME::set_physical(const E6SSMtower_physical& physical_)
{
   physical = physical_;
}

const Problems<E6SSMtower_info::NUMBER_OF_PARTICLES>& CLASSNAME::get_problems() const
{
   return problems;
}

Problems<E6SSMtower_info::NUMBER_OF_PARTICLES>& CLASSNAME::get_problems()
{
   return problems;
}

/**
 * Method which calculates the tadpoles at the current loop order.
 *
 * @return array of tadpoles
 */
Eigen::Matrix<double, CLASSNAME::number_of_ewsb_equations, 1> CLASSNAME::tadpole_equations() const
{
   Eigen::Matrix<double, number_of_ewsb_equations, 1> tadpole(Eigen::Matrix<double, number_of_ewsb_equations, 1>::Zero());

   tadpole[0] = get_ewsb_eq_hh_1();
   tadpole[1] = get_ewsb_eq_hh_2();
   tadpole[2] = get_ewsb_eq_hh_3();

   if (ewsb_loop_order > 0) {
      tadpole[0] -= Re(tadpole_hh(0));
      tadpole[1] -= Re(tadpole_hh(1));
      tadpole[2] -= Re(tadpole_hh(2));

      if (ewsb_loop_order > 1) {
         const auto tadpole_2l(tadpole_hh_2loop());
         tadpole[0] -= tadpole_2l(0);
         tadpole[1] -= tadpole_2l(1);
         tadpole[2] -= tadpole_2l(2);

      }
   }

   return tadpole;
}

/**
 * Method which calculates the tadpoles at the current loop order.
 *
 * @param tadpole array of tadpole
 */
void CLASSNAME::tadpole_equations(double tadpole[number_of_ewsb_equations]) const
{
   const auto tadpole_(tadpole_equations());
   std::copy(tadpole_.data(), tadpole_.data() + number_of_ewsb_equations, tadpole);
}

/**
 * Method which calculates the tadpoles at loop order specified in the
 * pointer to the CLASSNAME::EWSB_args struct.
 *
 * @param x GSL vector of EWSB output parameters
 * @param params pointer to CLASSNAME::EWSB_args struct
 * @param f GSL vector with tadpoles
 *
 * @return GSL_EDOM if x contains Nans, GSL_SUCCESS otherwise.
 */
int CLASSNAME::tadpole_equations(const gsl_vector* x, void* params, gsl_vector* f)
{
   if (!is_finite(x)) {
      gsl_vector_set_all(f, std::numeric_limits<double>::max());
      return GSL_EDOM;
   }

   const CLASSNAME::EWSB_args* ewsb_args
      = static_cast<CLASSNAME::EWSB_args*>(params);
   E6SSMtower_mass_eigenstates* model = ewsb_args->model;
   const unsigned ewsb_loop_order = ewsb_args->ewsb_loop_order;

   model->set_mHd2(gsl_vector_get(x, 0));
   model->set_mHu2(gsl_vector_get(x, 1));
   model->set_ms2(gsl_vector_get(x, 2));


   if (ewsb_loop_order > 0)
      model->calculate_DRbar_masses();

   const auto tadpole(model->tadpole_equations());

   for (std::size_t i = 0; i < number_of_ewsb_equations; ++i)
      gsl_vector_set(f, i, tadpole[i]);

   return IsFinite(tadpole) ? GSL_SUCCESS : GSL_EDOM;
}

/**
 * This method solves the EWSB conditions iteratively, trying several
 * root finding methods until a solution is found.
 */
int CLASSNAME::solve_ewsb_iteratively()
{
   EWSB_args params = {this, ewsb_loop_order};

   std::unique_ptr<EWSB_solver> solvers[] = {
      std::unique_ptr<EWSB_solver>(new Fixed_point_iterator<number_of_ewsb_equations, fixed_point_iterator::Convergence_tester_relative>(CLASSNAME::ewsb_step, &params, number_of_ewsb_iterations, fixed_point_iterator::Convergence_tester_relative(ewsb_iteration_precision))),
      std::unique_ptr<EWSB_solver>(new Root_finder<number_of_ewsb_equations>(CLASSNAME::tadpole_equations, &params, number_of_ewsb_iterations, ewsb_iteration_precision, gsl_multiroot_fsolver_hybrids)),
      std::unique_ptr<EWSB_solver>(new Root_finder<number_of_ewsb_equations>(CLASSNAME::tadpole_equations, &params, number_of_ewsb_iterations, ewsb_iteration_precision, gsl_multiroot_fsolver_broyden))
   };

   const std::size_t number_of_solvers = sizeof(solvers)/sizeof(*solvers);
   const auto x_init(ewsb_initial_guess());

   VERBOSE_MSG("Solving EWSB equations ...");
   VERBOSE_MSG("\tInitial guess: x_init = " << x_init.transpose());

   int status;
   for (std::size_t i = 0; i < number_of_solvers; ++i) {
      VERBOSE_MSG("\tStarting EWSB iteration using solver " << i);
      status = solve_ewsb_iteratively_with(solvers[i].get(), x_init);
      if (status == EWSB_solver::SUCCESS) {
         VERBOSE_MSG("\tSolver " << i << " finished successfully!");
         break;
      }
#ifdef ENABLE_VERBOSE
      else {
         WARNING("\tSolver " << i << " could not find a solution!"
                 " (requested precision: " << ewsb_iteration_precision << ")");
      }
#endif
   }

   if (status == EWSB_solver::SUCCESS) {
      problems.unflag_no_ewsb();
   } else {
      problems.flag_no_ewsb();
#ifdef ENABLE_VERBOSE
      WARNING("\tCould not find a solution to the EWSB equations!"
              " (requested precision: " << ewsb_iteration_precision << ")");
#endif
   }

   return status;
}

/**
 * Solves EWSB equations with given EWSB solver
 *
 * @param solver EWSB solver
 * @param x_init initial values
 *
 * @return status of the EWSB solver
 */
int CLASSNAME::solve_ewsb_iteratively_with(
   EWSB_solver* solver,
   const Eigen::Matrix<double, number_of_ewsb_equations, 1>& x_init
)
{
   const int status = solver->solve(&x_init[0]);

   mHd2 = solver->get_solution(0);
   mHu2 = solver->get_solution(1);
   ms2 = solver->get_solution(2);


   return status;
}

int CLASSNAME::solve_ewsb_iteratively(unsigned loop_order)
{
   // temporarily set `ewsb_loop_order' to `loop_order' and do
   // iteration
   const unsigned old_loop_order = ewsb_loop_order;
   ewsb_loop_order = loop_order;
   const int status = solve_ewsb_iteratively();
   ewsb_loop_order = old_loop_order;
   return status;
}


int CLASSNAME::solve_ewsb_tree_level()
{
   int error = 0;

   const double old_mHd2 = mHd2;
   const double old_mHu2 = mHu2;
   const double old_ms2 = ms2;

   mHd2 = Re((0.0125*(28.284271247461902*vs*vu*Conj(TLambdax) - 6*Power(vd,3)*
      Sqr(g1) - 10*Power(vd,3)*Sqr(g2) - 9*Power(vd,3)*Sqr(gN) - 40*vd*AbsSqr(
      Lambdax)*Sqr(vs) + 15*vd*Sqr(gN)*Sqr(vs) - 40*vd*AbsSqr(Lambdax)*Sqr(vu) + 6
      *vd*Sqr(g1)*Sqr(vu) + 10*vd*Sqr(g2)*Sqr(vu) - 6*vd*Sqr(gN)*Sqr(vu) +
      28.284271247461902*vs*vu*TLambdax))/vd);
   mHu2 = Re((0.025*(14.142135623730951*vd*vs*Conj(TLambdax) - 3*Power(vu,3)*
      Sqr(g1) - 5*Power(vu,3)*Sqr(g2) - 2*Power(vu,3)*Sqr(gN) - 20*vu*AbsSqr(
      Lambdax)*Sqr(vd) + 3*vu*Sqr(g1)*Sqr(vd) + 5*vu*Sqr(g2)*Sqr(vd) - 3*vu*Sqr(gN
      )*Sqr(vd) - 20*vu*AbsSqr(Lambdax)*Sqr(vs) + 5*vu*Sqr(gN)*Sqr(vs) +
      14.142135623730951*vd*vs*TLambdax))/vu);
   ms2 = Re((0.0625*(5.656854249492381*vd*vu*Conj(TLambdax) - 5*Power(vs,3)*Sqr
      (gN) - 8*vs*AbsSqr(Lambdax)*Sqr(vd) + 3*vs*Sqr(gN)*Sqr(vd) - 8*vs*AbsSqr(
      Lambdax)*Sqr(vu) + 2*vs*Sqr(gN)*Sqr(vu) + 5.656854249492381*vd*vu*TLambdax))
      /vs);

   const bool is_finite = IsFinite(mHd2) && IsFinite(mHu2) && IsFinite(ms2);

   if (!is_finite) {
      mHd2 = old_mHd2;
      mHu2 = old_mHu2;
      ms2 = old_ms2;
      error = 1;
   }


   return error;
}

int CLASSNAME::solve_ewsb_tree_level_custom()
{
   int error = 0;

   const double old_mHd2 = mHd2;
   const double old_mHu2 = mHu2;
   const double old_ms2 = ms2;

   mHd2 = Re((0.0125*(28.284271247461902*vs*vu*Conj(TLambdax) - 6*Power(vd,3)*
      Sqr(g1) - 10*Power(vd,3)*Sqr(g2) - 9*Power(vd,3)*Sqr(gN) - 40*vd*AbsSqr(
      Lambdax)*Sqr(vs) + 15*vd*Sqr(gN)*Sqr(vs) - 40*vd*AbsSqr(Lambdax)*Sqr(vu) + 6
      *vd*Sqr(g1)*Sqr(vu) + 10*vd*Sqr(g2)*Sqr(vu) - 6*vd*Sqr(gN)*Sqr(vu) +
      28.284271247461902*vs*vu*TLambdax))/vd);
   mHu2 = Re((0.025*(14.142135623730951*vd*vs*Conj(TLambdax) - 3*Power(vu,3)*
      Sqr(g1) - 5*Power(vu,3)*Sqr(g2) - 2*Power(vu,3)*Sqr(gN) - 20*vu*AbsSqr(
      Lambdax)*Sqr(vd) + 3*vu*Sqr(g1)*Sqr(vd) + 5*vu*Sqr(g2)*Sqr(vd) - 3*vu*Sqr(gN
      )*Sqr(vd) - 20*vu*AbsSqr(Lambdax)*Sqr(vs) + 5*vu*Sqr(gN)*Sqr(vs) +
      14.142135623730951*vd*vs*TLambdax))/vu);
   ms2 = Re((0.0625*(5.656854249492381*vd*vu*Conj(TLambdax) - 5*Power(vs,3)*Sqr
      (gN) - 8*vs*AbsSqr(Lambdax)*Sqr(vd) + 3*vs*Sqr(gN)*Sqr(vd) - 8*vs*AbsSqr(
      Lambdax)*Sqr(vu) + 2*vs*Sqr(gN)*Sqr(vu) + 5.656854249492381*vd*vu*TLambdax))
      /vs);

   const bool is_finite = IsFinite(mHd2) && IsFinite(mHu2) && IsFinite(ms2);

   if (!is_finite) {
      mHd2 = old_mHd2;
      mHu2 = old_mHu2;
      ms2 = old_ms2;
      error = 1;
   }


   return error;
}

int CLASSNAME::solve_ewsb_one_loop()
{
   return solve_ewsb_iteratively(1);
}

int CLASSNAME::solve_ewsb()
{
   VERBOSE_MSG("\tSolving EWSB at " << ewsb_loop_order << "-loop order");

   if (ewsb_loop_order == 0)
      return solve_ewsb_tree_level();

   return solve_ewsb_iteratively(ewsb_loop_order);
}

Eigen::Matrix<double, CLASSNAME::number_of_ewsb_equations, 1> CLASSNAME::ewsb_initial_guess()
{
   Eigen::Matrix<double, number_of_ewsb_equations, 1> x_init(Eigen::Matrix<double, number_of_ewsb_equations, 1>::Zero());

   x_init[0] = mHd2;
   x_init[1] = mHu2;
   x_init[2] = ms2;


   return x_init;
}

/**
 * Calculates EWSB output parameters including loop-corrections.
 *
 * Throws exception of type EEWSBStepFailed if new EWSB parameters are
 * inf or nan.
 *
 * @return new set of EWSB output parameters
 */
Eigen::Matrix<double, CLASSNAME::number_of_ewsb_equations, 1> CLASSNAME::ewsb_step() const
{
   double tadpole[number_of_ewsb_equations] = { 0. };
   Eigen::Matrix<double, number_of_ewsb_equations, 1> ewsb_parameters(Eigen::Matrix<double, number_of_ewsb_equations, 1>::Zero());

   if (ewsb_loop_order > 0) {
      tadpole[0] += Re(tadpole_hh(0));
      tadpole[1] += Re(tadpole_hh(1));
      tadpole[2] += Re(tadpole_hh(2));

      if (ewsb_loop_order > 1) {
         const auto tadpole_2l(tadpole_hh_2loop());
         tadpole[0] += tadpole_2l(0);
         tadpole[1] += tadpole_2l(1);
         tadpole[2] += tadpole_2l(2);

      }
   }

   double mHd2;
   double mHu2;
   double ms2;

   mHd2 = Re((0.0125*(28.284271247461902*vs*vu*Conj(TLambdax) + 80*tadpole[0] -
      6*Power(vd,3)*Sqr(g1) - 10*Power(vd,3)*Sqr(g2) - 9*Power(vd,3)*Sqr(gN) - 40
      *vd*AbsSqr(Lambdax)*Sqr(vs) + 15*vd*Sqr(gN)*Sqr(vs) - 40*vd*AbsSqr(Lambdax)*
      Sqr(vu) + 6*vd*Sqr(g1)*Sqr(vu) + 10*vd*Sqr(g2)*Sqr(vu) - 6*vd*Sqr(gN)*Sqr(vu
      ) + 28.284271247461902*vs*vu*TLambdax))/vd);
   mHu2 = Re((0.025*(14.142135623730951*vd*vs*Conj(TLambdax) + 40*tadpole[1] -
      3*Power(vu,3)*Sqr(g1) - 5*Power(vu,3)*Sqr(g2) - 2*Power(vu,3)*Sqr(gN) - 20*
      vu*AbsSqr(Lambdax)*Sqr(vd) + 3*vu*Sqr(g1)*Sqr(vd) + 5*vu*Sqr(g2)*Sqr(vd) - 3
      *vu*Sqr(gN)*Sqr(vd) - 20*vu*AbsSqr(Lambdax)*Sqr(vs) + 5*vu*Sqr(gN)*Sqr(vs) +
      14.142135623730951*vd*vs*TLambdax))/vu);
   ms2 = Re((0.0625*(5.656854249492381*vd*vu*Conj(TLambdax) + 16*tadpole[2] - 5
      *Power(vs,3)*Sqr(gN) - 8*vs*AbsSqr(Lambdax)*Sqr(vd) + 3*vs*Sqr(gN)*Sqr(vd) -
      8*vs*AbsSqr(Lambdax)*Sqr(vu) + 2*vs*Sqr(gN)*Sqr(vu) + 5.656854249492381*vd*
      vu*TLambdax))/vs);

   const bool is_finite = IsFinite(mHd2) && IsFinite(mHu2) && IsFinite(ms2);


   if (!is_finite)
      throw EEWSBStepFailed();

   ewsb_parameters[0] = mHd2;
   ewsb_parameters[1] = mHu2;
   ewsb_parameters[2] = ms2;


   return ewsb_parameters;
}

/**
 * Calculates EWSB output parameters including loop-corrections.
 *
 * @param x old EWSB output parameters
 * @param params further function parameters
 * @param f new EWSB output parameters
 *
 * @return Returns status of CLASSNAME::ewsb_step
 */
int CLASSNAME::ewsb_step(const gsl_vector* x, void* params, gsl_vector* f)
{
   if (!is_finite(x)) {
      gsl_vector_set_all(f, std::numeric_limits<double>::max());
      return GSL_EDOM;
   }

   const CLASSNAME::EWSB_args* ewsb_args
      = static_cast<CLASSNAME::EWSB_args*>(params);
   E6SSMtower_mass_eigenstates* model = ewsb_args->model;
   const unsigned ewsb_loop_order = ewsb_args->ewsb_loop_order;

   const double mHd2 = gsl_vector_get(x, 0);
   const double mHu2 = gsl_vector_get(x, 1);
   const double ms2 = gsl_vector_get(x, 2);

   model->set_mHd2(mHd2);
   model->set_mHu2(mHu2);
   model->set_ms2(ms2);


   if (ewsb_loop_order > 0)
      model->calculate_DRbar_masses();

   Eigen::Matrix<double, number_of_ewsb_equations, 1> ewsb_parameters;
   ewsb_parameters[0] = mHd2;
   ewsb_parameters[1] = mHu2;
   ewsb_parameters[2] = ms2;


   int status = GSL_SUCCESS;

   try {
      ewsb_parameters = model->ewsb_step();
      status = GSL_SUCCESS;
   } catch (...) {
      status = GSL_EDOM;
   }

   for (std::size_t i = 0; i < number_of_ewsb_equations; ++i)
      gsl_vector_set(f, i, ewsb_parameters[i]);

   return status;
}

void CLASSNAME::print(std::ostream& ostr) const
{
   ostr << "========================================\n"
           "E6SSMtower\n"
           "========================================\n";
   E6SSMtower_soft_parameters::print(ostr);
   ostr << "----------------------------------------\n"
           "tree-level DRbar masses:\n"
           "----------------------------------------\n";
   ostr << "MVG = " << MVG << '\n';
   ostr << "MGlu = " << MGlu << '\n';
   ostr << "MFv = " << MFv.transpose() << '\n';
   ostr << "MChaP = " << MChaP << '\n';
   ostr << "MSd = " << MSd.transpose() << '\n';
   ostr << "MSv = " << MSv.transpose() << '\n';
   ostr << "MSu = " << MSu.transpose() << '\n';
   ostr << "MSe = " << MSe.transpose() << '\n';
   ostr << "MSDX = " << MSDX.transpose() << '\n';
   ostr << "Mhh = " << Mhh.transpose() << '\n';
   ostr << "MAh = " << MAh.transpose() << '\n';
   ostr << "MHpm = " << MHpm.transpose() << '\n';
   ostr << "MChi = " << MChi.transpose() << '\n';
   ostr << "MCha = " << MCha.transpose() << '\n';
   ostr << "MFe = " << MFe.transpose() << '\n';
   ostr << "MFd = " << MFd.transpose() << '\n';
   ostr << "MFu = " << MFu.transpose() << '\n';
   ostr << "MFDX = " << MFDX.transpose() << '\n';
   ostr << "MSHI0 = " << MSHI0.transpose() << '\n';
   ostr << "MSHIp = " << MSHIp.transpose() << '\n';
   ostr << "MChaI = " << MChaI.transpose() << '\n';
   ostr << "MChiI = " << MChiI.transpose() << '\n';
   ostr << "MSSI0 = " << MSSI0.transpose() << '\n';
   ostr << "MFSI = " << MFSI.transpose() << '\n';
   ostr << "MSHp0 = " << MSHp0.transpose() << '\n';
   ostr << "MSHpp = " << MSHpp.transpose() << '\n';
   ostr << "MChiP = " << MChiP.transpose() << '\n';
   ostr << "MVWm = " << MVWm << '\n';

   ostr << "----------------------------------------\n"
           "tree-level DRbar mixing matrices:\n"
           "----------------------------------------\n";
   ostr << "ZD = " << ZD << '\n';
   ostr << "ZV = " << ZV << '\n';
   ostr << "ZU = " << ZU << '\n';
   ostr << "ZE = " << ZE << '\n';
   ostr << "ZDX = " << ZDX << '\n';
   ostr << "ZH = " << ZH << '\n';
   ostr << "ZA = " << ZA << '\n';
   ostr << "ZP = " << ZP << '\n';
   ostr << "ZN = " << ZN << '\n';
   ostr << "UM = " << UM << '\n';
   ostr << "UP = " << UP << '\n';
   ostr << "ZEL = " << ZEL << '\n';
   ostr << "ZER = " << ZER << '\n';
   ostr << "ZDL = " << ZDL << '\n';
   ostr << "ZDR = " << ZDR << '\n';
   ostr << "ZUL = " << ZUL << '\n';
   ostr << "ZUR = " << ZUR << '\n';
   ostr << "ZDXL = " << ZDXL << '\n';
   ostr << "ZDXR = " << ZDXR << '\n';
   ostr << "UHI0 = " << UHI0 << '\n';
   ostr << "UHIp = " << UHIp << '\n';
   ostr << "ZMI = " << ZMI << '\n';
   ostr << "ZPI = " << ZPI << '\n';
   ostr << "ZNI = " << ZNI << '\n';
   ostr << "ZSSI = " << ZSSI << '\n';
   ostr << "ZFSI = " << ZFSI << '\n';
   ostr << "UHp0 = " << UHp0 << '\n';
   ostr << "UHpp = " << UHpp << '\n';
   ostr << "ZNp = " << ZNp << '\n';
   ostr << "ZZ = " << ZZ << '\n';

   physical.print(ostr);
}

/**
 * wrapper routines for passarino Veltman functions
 */

double CLASSNAME::A0(double m) const
{
   return passarino_veltman::ReA0(m*m, Sqr(get_scale()));
}

double CLASSNAME::B0(double p, double m1, double m2) const
{
   return passarino_veltman::ReB0(p*p, m1*m1, m2*m2, Sqr(get_scale()));
}

double CLASSNAME::B1(double p, double m1, double m2) const
{
   return passarino_veltman::ReB1(p*p, m1*m1, m2*m2, Sqr(get_scale()));
}

double CLASSNAME::B00(double p, double m1, double m2) const
{
   return passarino_veltman::ReB00(p*p, m1*m1, m2*m2, Sqr(get_scale()));
}

double CLASSNAME::B22(double p, double m1, double m2) const
{
   return passarino_veltman::ReB22(p*p, m1*m1, m2*m2, Sqr(get_scale()));
}

double CLASSNAME::H0(double p, double m1, double m2) const
{
   return passarino_veltman::ReH0(p*p, m1*m1, m2*m2, Sqr(get_scale()));
}

double CLASSNAME::F0(double p, double m1, double m2) const
{
   return passarino_veltman::ReF0(p*p, m1*m1, m2*m2, Sqr(get_scale()));
}

double CLASSNAME::G0(double p, double m1, double m2) const
{
   return passarino_veltman::ReG0(p*p, m1*m1, m2*m2, Sqr(get_scale()));
}

/**
 * routine which finds the DRbar mass eigenstates and mixings.
 */
void CLASSNAME::calculate_DRbar_masses()
{
   const auto old_mHd2 = mHd2;
   const auto old_mHu2 = mHu2;
   const auto old_ms2 = ms2;

   solve_ewsb_tree_level_custom();

   calculate_MVPVZVZp();
   calculate_MVWm();
   calculate_MChiP();
   calculate_MSHpp();
   calculate_MSHp0();
   calculate_MFSI();
   calculate_MSSI0();
   calculate_MChiI();
   calculate_MChaI();
   calculate_MSHIp();
   calculate_MSHI0();
   calculate_MFDX();
   calculate_MFu();
   calculate_MFd();
   calculate_MFe();
   calculate_MCha();
   calculate_MChi();
   calculate_MHpm();
   calculate_MAh();
   calculate_Mhh();
   calculate_MSDX();
   calculate_MSe();
   calculate_MSu();
   calculate_MSv();
   calculate_MSd();
   calculate_MChaP();
   calculate_MFv();
   calculate_MGlu();
   calculate_MVG();

   mHd2 = old_mHd2;
   mHu2 = old_mHu2;
   ms2 = old_ms2;

}

/**
 * Backward compatibility routine which finds the DRbar mass
 * eigenstates and mixings.
 */
void CLASSNAME::calculate_DRbar_parameters()
{
   calculate_DRbar_masses();
}

/**
 * routine which finds the pole mass eigenstates and mixings.
 */
void CLASSNAME::calculate_pole_masses()
{
#ifdef ENABLE_THREADS
   auto obj_ptr = this;

   std::future<void> fut_MVG;
   std::future<void> fut_MGlu;
   std::future<void> fut_MFv;
   std::future<void> fut_MChaP;
   std::future<void> fut_MVP;
   std::future<void> fut_MVZ;
   std::future<void> fut_MVZp;
   std::future<void> fut_MSd;
   std::future<void> fut_MSv;
   std::future<void> fut_MSu;
   std::future<void> fut_MSe;
   std::future<void> fut_MSDX;
   std::future<void> fut_Mhh;
   std::future<void> fut_MAh;
   std::future<void> fut_MHpm;
   std::future<void> fut_MChi;
   std::future<void> fut_MCha;
   std::future<void> fut_MFe;
   std::future<void> fut_MFd;
   std::future<void> fut_MFu;
   std::future<void> fut_MFDX;
   std::future<void> fut_MSHI0;
   std::future<void> fut_MSHIp;
   std::future<void> fut_MChaI;
   std::future<void> fut_MChiI;
   std::future<void> fut_MSSI0;
   std::future<void> fut_MFSI;
   std::future<void> fut_MSHp0;
   std::future<void> fut_MSHpp;
   std::future<void> fut_MChiP;
   std::future<void> fut_MVWm;

   if (calculate_bsm_pole_masses) {
      fut_MAh = run_async([obj_ptr] () { obj_ptr->calculate_MAh_pole(); });
      fut_MCha = run_async([obj_ptr] () { obj_ptr->calculate_MCha_pole(); });
      fut_MChaI = run_async([obj_ptr] () { obj_ptr->calculate_MChaI_pole(); });
      fut_MChaP = run_async([obj_ptr] () { obj_ptr->calculate_MChaP_pole(); });
      fut_MChi = run_async([obj_ptr] () { obj_ptr->calculate_MChi_pole(); });
      fut_MChiI = run_async([obj_ptr] () { obj_ptr->calculate_MChiI_pole(); });
      fut_MChiP = run_async([obj_ptr] () { obj_ptr->calculate_MChiP_pole(); });
      fut_MFDX = run_async([obj_ptr] () { obj_ptr->calculate_MFDX_pole(); });
      fut_MFSI = run_async([obj_ptr] () { obj_ptr->calculate_MFSI_pole(); });
      fut_MGlu = run_async([obj_ptr] () { obj_ptr->calculate_MGlu_pole(); });
      fut_Mhh = run_async([obj_ptr] () { obj_ptr->calculate_Mhh_pole(); });
      fut_MHpm = run_async([obj_ptr] () { obj_ptr->calculate_MHpm_pole(); });
      fut_MSd = run_async([obj_ptr] () { obj_ptr->calculate_MSd_pole(); });
      fut_MSDX = run_async([obj_ptr] () { obj_ptr->calculate_MSDX_pole(); });
      fut_MSe = run_async([obj_ptr] () { obj_ptr->calculate_MSe_pole(); });
      fut_MSHI0 = run_async([obj_ptr] () { obj_ptr->calculate_MSHI0_pole(); });
      fut_MSHIp = run_async([obj_ptr] () { obj_ptr->calculate_MSHIp_pole(); });
      fut_MSHp0 = run_async([obj_ptr] () { obj_ptr->calculate_MSHp0_pole(); });
      fut_MSHpp = run_async([obj_ptr] () { obj_ptr->calculate_MSHpp_pole(); });
      fut_MSSI0 = run_async([obj_ptr] () { obj_ptr->calculate_MSSI0_pole(); });
      fut_MSu = run_async([obj_ptr] () { obj_ptr->calculate_MSu_pole(); });
      fut_MSv = run_async([obj_ptr] () { obj_ptr->calculate_MSv_pole(); });
      fut_MVZp = run_async([obj_ptr] () { obj_ptr->calculate_MVZp_pole(); });
   }

   if (calculate_sm_pole_masses) {
      fut_MVG = run_async([obj_ptr] () { obj_ptr->calculate_MVG_pole(); });
      fut_MFv = run_async([obj_ptr] () { obj_ptr->calculate_MFv_pole(); });
      fut_MVP = run_async([obj_ptr] () { obj_ptr->calculate_MVP_pole(); });
      fut_MVZ = run_async([obj_ptr] () { obj_ptr->calculate_MVZ_pole(); });
      fut_MFe = run_async([obj_ptr] () { obj_ptr->calculate_MFe_pole(); });
      fut_MFd = run_async([obj_ptr] () { obj_ptr->calculate_MFd_pole(); });
      fut_MFu = run_async([obj_ptr] () { obj_ptr->calculate_MFu_pole(); });
      fut_MVWm = run_async([obj_ptr] () { obj_ptr->calculate_MVWm_pole(); });
   }

   if (fut_MAh.valid()) fut_MAh.get();
   if (fut_MCha.valid()) fut_MCha.get();
   if (fut_MChaI.valid()) fut_MChaI.get();
   if (fut_MChaP.valid()) fut_MChaP.get();
   if (fut_MChi.valid()) fut_MChi.get();
   if (fut_MChiI.valid()) fut_MChiI.get();
   if (fut_MChiP.valid()) fut_MChiP.get();
   if (fut_MFDX.valid()) fut_MFDX.get();
   if (fut_MFSI.valid()) fut_MFSI.get();
   if (fut_MGlu.valid()) fut_MGlu.get();
   if (fut_Mhh.valid()) fut_Mhh.get();
   if (fut_MHpm.valid()) fut_MHpm.get();
   if (fut_MSd.valid()) fut_MSd.get();
   if (fut_MSDX.valid()) fut_MSDX.get();
   if (fut_MSe.valid()) fut_MSe.get();
   if (fut_MSHI0.valid()) fut_MSHI0.get();
   if (fut_MSHIp.valid()) fut_MSHIp.get();
   if (fut_MSHp0.valid()) fut_MSHp0.get();
   if (fut_MSHpp.valid()) fut_MSHpp.get();
   if (fut_MSSI0.valid()) fut_MSSI0.get();
   if (fut_MSu.valid()) fut_MSu.get();
   if (fut_MSv.valid()) fut_MSv.get();
   if (fut_MVZp.valid()) fut_MVZp.get();
   if (fut_MVG.valid()) fut_MVG.get();
   if (fut_MFv.valid()) fut_MFv.get();
   if (fut_MVP.valid()) fut_MVP.get();
   if (fut_MVZ.valid()) fut_MVZ.get();
   if (fut_MFe.valid()) fut_MFe.get();
   if (fut_MFd.valid()) fut_MFd.get();
   if (fut_MFu.valid()) fut_MFu.get();
   if (fut_MVWm.valid()) fut_MVWm.get();

#else
   if (calculate_bsm_pole_masses) {
      calculate_MAh_pole();
      calculate_MCha_pole();
      calculate_MChaI_pole();
      calculate_MChaP_pole();
      calculate_MChi_pole();
      calculate_MChiI_pole();
      calculate_MChiP_pole();
      calculate_MFDX_pole();
      calculate_MFSI_pole();
      calculate_MGlu_pole();
      calculate_Mhh_pole();
      calculate_MHpm_pole();
      calculate_MSd_pole();
      calculate_MSDX_pole();
      calculate_MSe_pole();
      calculate_MSHI0_pole();
      calculate_MSHIp_pole();
      calculate_MSHp0_pole();
      calculate_MSHpp_pole();
      calculate_MSSI0_pole();
      calculate_MSu_pole();
      calculate_MSv_pole();
      calculate_MVZp_pole();
   }

   if (calculate_sm_pole_masses) {
      calculate_MVG_pole();
      calculate_MFv_pole();
      calculate_MVP_pole();
      calculate_MVZ_pole();
      calculate_MFe_pole();
      calculate_MFd_pole();
      calculate_MFu_pole();
      calculate_MVWm_pole();
   }

#endif
}

void CLASSNAME::copy_DRbar_masses_to_pole_masses()
{
   PHYSICAL(MVG) = MVG;
   PHYSICAL(MGlu) = MGlu;
   PHYSICAL(MFv) = MFv;
   PHYSICAL(MChaP) = MChaP;
   PHYSICAL(MSd) = MSd;
   PHYSICAL(ZD) = ZD;
   PHYSICAL(MSv) = MSv;
   PHYSICAL(ZV) = ZV;
   PHYSICAL(MSu) = MSu;
   PHYSICAL(ZU) = ZU;
   PHYSICAL(MSe) = MSe;
   PHYSICAL(ZE) = ZE;
   PHYSICAL(MSDX) = MSDX;
   PHYSICAL(ZDX) = ZDX;
   PHYSICAL(Mhh) = Mhh;
   PHYSICAL(ZH) = ZH;
   PHYSICAL(MAh) = MAh;
   PHYSICAL(ZA) = ZA;
   PHYSICAL(MHpm) = MHpm;
   PHYSICAL(ZP) = ZP;
   PHYSICAL(MChi) = MChi;
   PHYSICAL(ZN) = ZN;
   PHYSICAL(MCha) = MCha;
   PHYSICAL(UM) = UM;
   PHYSICAL(UP) = UP;
   PHYSICAL(MFe) = MFe;
   PHYSICAL(ZEL) = ZEL;
   PHYSICAL(ZER) = ZER;
   PHYSICAL(MFd) = MFd;
   PHYSICAL(ZDL) = ZDL;
   PHYSICAL(ZDR) = ZDR;
   PHYSICAL(MFu) = MFu;
   PHYSICAL(ZUL) = ZUL;
   PHYSICAL(ZUR) = ZUR;
   PHYSICAL(MFDX) = MFDX;
   PHYSICAL(ZDXL) = ZDXL;
   PHYSICAL(ZDXR) = ZDXR;
   PHYSICAL(MSHI0) = MSHI0;
   PHYSICAL(UHI0) = UHI0;
   PHYSICAL(MSHIp) = MSHIp;
   PHYSICAL(UHIp) = UHIp;
   PHYSICAL(MChaI) = MChaI;
   PHYSICAL(ZMI) = ZMI;
   PHYSICAL(ZPI) = ZPI;
   PHYSICAL(MChiI) = MChiI;
   PHYSICAL(ZNI) = ZNI;
   PHYSICAL(MSSI0) = MSSI0;
   PHYSICAL(ZSSI) = ZSSI;
   PHYSICAL(MFSI) = MFSI;
   PHYSICAL(ZFSI) = ZFSI;
   PHYSICAL(MSHp0) = MSHp0;
   PHYSICAL(UHp0) = UHp0;
   PHYSICAL(MSHpp) = MSHpp;
   PHYSICAL(UHpp) = UHpp;
   PHYSICAL(MChiP) = MChiP;
   PHYSICAL(ZNp) = ZNp;
   PHYSICAL(MVWm) = MVWm;
   PHYSICAL(MVP) = MVP;
   PHYSICAL(MVZ) = MVZ;
   PHYSICAL(MVZp) = MVZp;

}

/**
 * reorders DRbar masses so that golstones are placed at the index
 * specified in the model files definition of the associated
 * gauge boson (see Z-boson definition in default particles.m file
 * in the Models directory of your SARAH distribution for example)
 */
void CLASSNAME::reorder_DRbar_masses()
{
   move_goldstone_to(0, MVZ, MAh, ZA);
   move_goldstone_to(1, MVZp, MAh, ZA);
   move_goldstone_to(0, MVWm, MHpm, ZP);

}

/**
 * reorders pole masses so that golstones are placed at the index
 * specified in the model files definition of the associated
 * gauge boson (see Z-boson definition in default particles.m file
 * in the Models directory of your SARAH distribution for example)
 */
void CLASSNAME::reorder_pole_masses()
{
   move_goldstone_to(0, MVZ, PHYSICAL(MAh), PHYSICAL(ZA));
   move_goldstone_to(1, MVZp, PHYSICAL(MAh), PHYSICAL(ZA));
   move_goldstone_to(0, MVWm, PHYSICAL(MHpm), PHYSICAL(ZP));

}

/**
 * Checks the pole masses for tachyons
 */
void CLASSNAME::check_pole_masses_for_tachyons()
{
   if (PHYSICAL(MSd).tail<6>().minCoeff() < 0.) problems.flag_tachyon(E6SSMtower_info::Sd);
   if (PHYSICAL(MSv).tail<3>().minCoeff() < 0.) problems.flag_tachyon(E6SSMtower_info::Sv);
   if (PHYSICAL(MSu).tail<6>().minCoeff() < 0.) problems.flag_tachyon(E6SSMtower_info::Su);
   if (PHYSICAL(MSe).tail<6>().minCoeff() < 0.) problems.flag_tachyon(E6SSMtower_info::Se);
   if (PHYSICAL(MSDX).tail<6>().minCoeff() < 0.) problems.flag_tachyon(E6SSMtower_info::SDX);
   if (PHYSICAL(Mhh).tail<3>().minCoeff() < 0.) problems.flag_tachyon(E6SSMtower_info::hh);
   if (PHYSICAL(MAh).tail<1>().minCoeff() < 0.) problems.flag_tachyon(E6SSMtower_info::Ah);
   if (PHYSICAL(MHpm).tail<1>().minCoeff() < 0.) problems.flag_tachyon(E6SSMtower_info::Hpm);
   if (PHYSICAL(MSHI0).tail<4>().minCoeff() < 0.) problems.flag_tachyon(E6SSMtower_info::SHI0);
   if (PHYSICAL(MSHIp).tail<4>().minCoeff() < 0.) problems.flag_tachyon(E6SSMtower_info::SHIp);
   if (PHYSICAL(MSSI0).tail<2>().minCoeff() < 0.) problems.flag_tachyon(E6SSMtower_info::SSI0);
   if (PHYSICAL(MSHp0).tail<2>().minCoeff() < 0.) problems.flag_tachyon(E6SSMtower_info::SHp0);
   if (PHYSICAL(MSHpp).tail<2>().minCoeff() < 0.) problems.flag_tachyon(E6SSMtower_info::SHpp);

}

/**
 * calculates spectrum for model once the DRbar parameters at
 * at low energies are known
 */
void CLASSNAME::calculate_spectrum()
{
   calculate_DRbar_masses();
   if (pole_mass_loop_order > 0)
      calculate_pole_masses();

   // move goldstone bosons to the front
   reorder_DRbar_masses();
   if (pole_mass_loop_order == 0)
      copy_DRbar_masses_to_pole_masses();
   else
      reorder_pole_masses();

   check_pole_masses_for_tachyons();

   if (problems.have_problem() && !force_output) {
      clear_DRbar_parameters();
      physical.clear();
   }
}

void CLASSNAME::clear_DRbar_parameters()
{
   MVG = 0.;
   MGlu = 0.;
   MFv = Eigen::Matrix<double,3,1>::Zero();
   MChaP = 0.;
   MSd = Eigen::Matrix<double,6,1>::Zero();
   ZD = Eigen::Matrix<double,6,6>::Zero();
   MSv = Eigen::Matrix<double,3,1>::Zero();
   ZV = Eigen::Matrix<double,3,3>::Zero();
   MSu = Eigen::Matrix<double,6,1>::Zero();
   ZU = Eigen::Matrix<double,6,6>::Zero();
   MSe = Eigen::Matrix<double,6,1>::Zero();
   ZE = Eigen::Matrix<double,6,6>::Zero();
   MSDX = Eigen::Matrix<double,6,1>::Zero();
   ZDX = Eigen::Matrix<double,6,6>::Zero();
   Mhh = Eigen::Matrix<double,3,1>::Zero();
   ZH = Eigen::Matrix<double,3,3>::Zero();
   MAh = Eigen::Matrix<double,3,1>::Zero();
   ZA = Eigen::Matrix<double,3,3>::Zero();
   MHpm = Eigen::Matrix<double,2,1>::Zero();
   ZP = Eigen::Matrix<double,2,2>::Zero();
   MChi = Eigen::Matrix<double,6,1>::Zero();
   ZN = Eigen::Matrix<std::complex<double>,6,6>::Zero();
   MCha = Eigen::Matrix<double,2,1>::Zero();
   UM = Eigen::Matrix<std::complex<double>,2,2>::Zero();
   UP = Eigen::Matrix<std::complex<double>,2,2>::Zero();
   MFe = Eigen::Matrix<double,3,1>::Zero();
   ZEL = Eigen::Matrix<std::complex<double>,3,3>::Zero();
   ZER = Eigen::Matrix<std::complex<double>,3,3>::Zero();
   MFd = Eigen::Matrix<double,3,1>::Zero();
   ZDL = Eigen::Matrix<std::complex<double>,3,3>::Zero();
   ZDR = Eigen::Matrix<std::complex<double>,3,3>::Zero();
   MFu = Eigen::Matrix<double,3,1>::Zero();
   ZUL = Eigen::Matrix<std::complex<double>,3,3>::Zero();
   ZUR = Eigen::Matrix<std::complex<double>,3,3>::Zero();
   MFDX = Eigen::Matrix<double,3,1>::Zero();
   ZDXL = Eigen::Matrix<std::complex<double>,3,3>::Zero();
   ZDXR = Eigen::Matrix<std::complex<double>,3,3>::Zero();
   MSHI0 = Eigen::Matrix<double,4,1>::Zero();
   UHI0 = Eigen::Matrix<double,4,4>::Zero();
   MSHIp = Eigen::Matrix<double,4,1>::Zero();
   UHIp = Eigen::Matrix<double,4,4>::Zero();
   MChaI = Eigen::Matrix<double,2,1>::Zero();
   ZMI = Eigen::Matrix<std::complex<double>,2,2>::Zero();
   ZPI = Eigen::Matrix<std::complex<double>,2,2>::Zero();
   MChiI = Eigen::Matrix<double,4,1>::Zero();
   ZNI = Eigen::Matrix<std::complex<double>,4,4>::Zero();
   MSSI0 = Eigen::Matrix<double,2,1>::Zero();
   ZSSI = Eigen::Matrix<double,2,2>::Zero();
   MFSI = Eigen::Matrix<double,2,1>::Zero();
   ZFSI = Eigen::Matrix<std::complex<double>,2,2>::Zero();
   MSHp0 = Eigen::Matrix<double,2,1>::Zero();
   UHp0 = Eigen::Matrix<double,2,2>::Zero();
   MSHpp = Eigen::Matrix<double,2,1>::Zero();
   UHpp = Eigen::Matrix<double,2,2>::Zero();
   MChiP = Eigen::Matrix<double,2,1>::Zero();
   ZNp = Eigen::Matrix<std::complex<double>,2,2>::Zero();
   MVWm = 0.;
   MVP = 0.;
   MVZ = 0.;
   MVZp = 0.;

   PhaseGlu = std::complex<double>(1.,0.);
   PhaseFHpup = std::complex<double>(1.,0.);

}

void CLASSNAME::clear_problems()
{
   problems.unflag_all_tachyons();
}

void CLASSNAME::clear()
{
   E6SSMtower_soft_parameters::clear();
   clear_DRbar_parameters();
   physical.clear();
   problems.clear();
}

void CLASSNAME::set_DRbar_masses(const Eigen::ArrayXd& pars)
{
   MVG = pars(0);
   MGlu = pars(1);
   MFv(0) = pars(2);
   MFv(1) = pars(3);
   MFv(2) = pars(4);
   MChaP = pars(5);
   MSd(0) = pars(6);
   MSd(1) = pars(7);
   MSd(2) = pars(8);
   MSd(3) = pars(9);
   MSd(4) = pars(10);
   MSd(5) = pars(11);
   MSv(0) = pars(12);
   MSv(1) = pars(13);
   MSv(2) = pars(14);
   MSu(0) = pars(15);
   MSu(1) = pars(16);
   MSu(2) = pars(17);
   MSu(3) = pars(18);
   MSu(4) = pars(19);
   MSu(5) = pars(20);
   MSe(0) = pars(21);
   MSe(1) = pars(22);
   MSe(2) = pars(23);
   MSe(3) = pars(24);
   MSe(4) = pars(25);
   MSe(5) = pars(26);
   MSDX(0) = pars(27);
   MSDX(1) = pars(28);
   MSDX(2) = pars(29);
   MSDX(3) = pars(30);
   MSDX(4) = pars(31);
   MSDX(5) = pars(32);
   Mhh(0) = pars(33);
   Mhh(1) = pars(34);
   Mhh(2) = pars(35);
   MAh(0) = pars(36);
   MAh(1) = pars(37);
   MAh(2) = pars(38);
   MHpm(0) = pars(39);
   MHpm(1) = pars(40);
   MChi(0) = pars(41);
   MChi(1) = pars(42);
   MChi(2) = pars(43);
   MChi(3) = pars(44);
   MChi(4) = pars(45);
   MChi(5) = pars(46);
   MCha(0) = pars(47);
   MCha(1) = pars(48);
   MFe(0) = pars(49);
   MFe(1) = pars(50);
   MFe(2) = pars(51);
   MFd(0) = pars(52);
   MFd(1) = pars(53);
   MFd(2) = pars(54);
   MFu(0) = pars(55);
   MFu(1) = pars(56);
   MFu(2) = pars(57);
   MFDX(0) = pars(58);
   MFDX(1) = pars(59);
   MFDX(2) = pars(60);
   MSHI0(0) = pars(61);
   MSHI0(1) = pars(62);
   MSHI0(2) = pars(63);
   MSHI0(3) = pars(64);
   MSHIp(0) = pars(65);
   MSHIp(1) = pars(66);
   MSHIp(2) = pars(67);
   MSHIp(3) = pars(68);
   MChaI(0) = pars(69);
   MChaI(1) = pars(70);
   MChiI(0) = pars(71);
   MChiI(1) = pars(72);
   MChiI(2) = pars(73);
   MChiI(3) = pars(74);
   MSSI0(0) = pars(75);
   MSSI0(1) = pars(76);
   MFSI(0) = pars(77);
   MFSI(1) = pars(78);
   MSHp0(0) = pars(79);
   MSHp0(1) = pars(80);
   MSHpp(0) = pars(81);
   MSHpp(1) = pars(82);
   MChiP(0) = pars(83);
   MChiP(1) = pars(84);
   MVWm = pars(85);
   MVP = pars(86);
   MVZ = pars(87);
   MVZp = pars(88);

}

Eigen::ArrayXd CLASSNAME::get_DRbar_masses() const
{
   Eigen::ArrayXd pars(89);

   pars(0) = MVG;
   pars(1) = MGlu;
   pars(2) = MFv(0);
   pars(3) = MFv(1);
   pars(4) = MFv(2);
   pars(5) = MChaP;
   pars(6) = MSd(0);
   pars(7) = MSd(1);
   pars(8) = MSd(2);
   pars(9) = MSd(3);
   pars(10) = MSd(4);
   pars(11) = MSd(5);
   pars(12) = MSv(0);
   pars(13) = MSv(1);
   pars(14) = MSv(2);
   pars(15) = MSu(0);
   pars(16) = MSu(1);
   pars(17) = MSu(2);
   pars(18) = MSu(3);
   pars(19) = MSu(4);
   pars(20) = MSu(5);
   pars(21) = MSe(0);
   pars(22) = MSe(1);
   pars(23) = MSe(2);
   pars(24) = MSe(3);
   pars(25) = MSe(4);
   pars(26) = MSe(5);
   pars(27) = MSDX(0);
   pars(28) = MSDX(1);
   pars(29) = MSDX(2);
   pars(30) = MSDX(3);
   pars(31) = MSDX(4);
   pars(32) = MSDX(5);
   pars(33) = Mhh(0);
   pars(34) = Mhh(1);
   pars(35) = Mhh(2);
   pars(36) = MAh(0);
   pars(37) = MAh(1);
   pars(38) = MAh(2);
   pars(39) = MHpm(0);
   pars(40) = MHpm(1);
   pars(41) = MChi(0);
   pars(42) = MChi(1);
   pars(43) = MChi(2);
   pars(44) = MChi(3);
   pars(45) = MChi(4);
   pars(46) = MChi(5);
   pars(47) = MCha(0);
   pars(48) = MCha(1);
   pars(49) = MFe(0);
   pars(50) = MFe(1);
   pars(51) = MFe(2);
   pars(52) = MFd(0);
   pars(53) = MFd(1);
   pars(54) = MFd(2);
   pars(55) = MFu(0);
   pars(56) = MFu(1);
   pars(57) = MFu(2);
   pars(58) = MFDX(0);
   pars(59) = MFDX(1);
   pars(60) = MFDX(2);
   pars(61) = MSHI0(0);
   pars(62) = MSHI0(1);
   pars(63) = MSHI0(2);
   pars(64) = MSHI0(3);
   pars(65) = MSHIp(0);
   pars(66) = MSHIp(1);
   pars(67) = MSHIp(2);
   pars(68) = MSHIp(3);
   pars(69) = MChaI(0);
   pars(70) = MChaI(1);
   pars(71) = MChiI(0);
   pars(72) = MChiI(1);
   pars(73) = MChiI(2);
   pars(74) = MChiI(3);
   pars(75) = MSSI0(0);
   pars(76) = MSSI0(1);
   pars(77) = MFSI(0);
   pars(78) = MFSI(1);
   pars(79) = MSHp0(0);
   pars(80) = MSHp0(1);
   pars(81) = MSHpp(0);
   pars(82) = MSHpp(1);
   pars(83) = MChiP(0);
   pars(84) = MChiP(1);
   pars(85) = MVWm;
   pars(86) = MVP;
   pars(87) = MVZ;
   pars(88) = MVZp;

   return pars;
}

std::string CLASSNAME::name() const
{
   return "E6SSMtower";
}

void CLASSNAME::run_to(double scale, double eps)
{
   if (eps < 0.0)
      eps = precision;
   E6SSMtower_soft_parameters::run_to(scale, eps);
}


Eigen::Array<double,1,1> CLASSNAME::get_MChargedHiggs() const
{
   Eigen::Array<double,1,1> MHpm_goldstone;
   MHpm_goldstone(0) = MVWm;

   return remove_if_equal(MHpm, MHpm_goldstone);
}

Eigen::Array<double,1,1> CLASSNAME::get_MPseudoscalarHiggs() const
{
   Eigen::Array<double,2,1> MAh_goldstone;
   MAh_goldstone(0) = MVZ;
   MAh_goldstone(1) = MVZp;

   return remove_if_equal(MAh, MAh_goldstone);
}


/**
 * @brief finds the LSP and returns it's mass
 *
 * This function finds the lightest supersymmetric particle (LSP) and
 * returns it's mass.  The corresponding particle type is retured in
 * the reference parameter.  The list of potential LSPs is set in the
 * model file varible PotentialLSPParticles.  For this model it is set
 * to:
 * {Chi, Sv, Su, Sd, Se, Cha, Glu}
 *
 * @param particle_type particle type
 * @return mass of LSP
 */
double CLASSNAME::get_lsp(E6SSMtower_info::Particles& particle_type) const
{
   double lsp_mass = std::numeric_limits<double>::max();
   double tmp_mass;
   particle_type = E6SSMtower_info::NUMBER_OF_PARTICLES;

   tmp_mass = Abs(PHYSICAL(MChi(0)));
   if (tmp_mass < lsp_mass) {
      lsp_mass = tmp_mass;
      particle_type = E6SSMtower_info::Chi;
   }

   tmp_mass = Abs(PHYSICAL(MSv(0)));
   if (tmp_mass < lsp_mass) {
      lsp_mass = tmp_mass;
      particle_type = E6SSMtower_info::Sv;
   }

   tmp_mass = Abs(PHYSICAL(MSu(0)));
   if (tmp_mass < lsp_mass) {
      lsp_mass = tmp_mass;
      particle_type = E6SSMtower_info::Su;
   }

   tmp_mass = Abs(PHYSICAL(MSd(0)));
   if (tmp_mass < lsp_mass) {
      lsp_mass = tmp_mass;
      particle_type = E6SSMtower_info::Sd;
   }

   tmp_mass = Abs(PHYSICAL(MSe(0)));
   if (tmp_mass < lsp_mass) {
      lsp_mass = tmp_mass;
      particle_type = E6SSMtower_info::Se;
   }

   tmp_mass = Abs(PHYSICAL(MCha(0)));
   if (tmp_mass < lsp_mass) {
      lsp_mass = tmp_mass;
      particle_type = E6SSMtower_info::Cha;
   }

   tmp_mass = Abs(PHYSICAL(MGlu));
   if (tmp_mass < lsp_mass) {
      lsp_mass = tmp_mass;
      particle_type = E6SSMtower_info::Glu;
   }

   return lsp_mass;
}


double CLASSNAME::get_mass_matrix_VG() const
{
   const double mass_matrix_VG = Re(0);

   return mass_matrix_VG;
}

void CLASSNAME::calculate_MVG()
{
   const auto mass_matrix_VG = get_mass_matrix_VG();
   MVG = mass_matrix_VG;
}

double CLASSNAME::get_mass_matrix_Glu() const
{
   const double mass_matrix_Glu = Re(MassG);

   return mass_matrix_Glu;
}

void CLASSNAME::calculate_MGlu()
{
   const auto mass_matrix_Glu = get_mass_matrix_Glu();
   MGlu = calculate_majorana_singlet_mass(mass_matrix_Glu, PhaseGlu);
}

Eigen::Matrix<double,3,3> CLASSNAME::get_mass_matrix_Fv() const
{
   Eigen::Matrix<double,3,3> mass_matrix_Fv;

   mass_matrix_Fv(0,0) = 0;
   mass_matrix_Fv(0,1) = 0;
   mass_matrix_Fv(0,2) = 0;
   mass_matrix_Fv(1,1) = 0;
   mass_matrix_Fv(1,2) = 0;
   mass_matrix_Fv(2,2) = 0;

   Symmetrize(mass_matrix_Fv);

   return mass_matrix_Fv;
}

void CLASSNAME::calculate_MFv()
{
   MFv.setConstant(0);
}

double CLASSNAME::get_mass_matrix_ChaP() const
{
   const double mass_matrix_ChaP = Re(MuPr);

   return mass_matrix_ChaP;
}

void CLASSNAME::calculate_MChaP()
{
   const auto mass_matrix_ChaP = get_mass_matrix_ChaP();
   MChaP = calculate_dirac_singlet_mass(mass_matrix_ChaP, PhaseFHpup);
}

Eigen::Matrix<double,6,6> CLASSNAME::get_mass_matrix_Sd() const
{
   Eigen::Matrix<double,6,6> mass_matrix_Sd;

   mass_matrix_Sd(0,0) = mq2(0,0) + 0.5*AbsSqr(Yd(0,0))*Sqr(vd) - 0.025*
      Sqr(g1)*Sqr(vd) - 0.125*Sqr(g2)*Sqr(vd) - 0.0375*Sqr(gN)*Sqr(vd) + 0.0625
      *Sqr(gN)*Sqr(vs) + 0.025*Sqr(g1)*Sqr(vu) + 0.125*Sqr(g2)*Sqr(vu) - 0.025*
      Sqr(gN)*Sqr(vu);
   mass_matrix_Sd(0,1) = mq2(0,1);
   mass_matrix_Sd(0,2) = mq2(0,2);
   mass_matrix_Sd(0,3) = 0.7071067811865475*vd*Conj(TYd(0,0)) - 0.5*vs*vu
      *Conj(Yd(0,0))*Lambdax;
   mass_matrix_Sd(0,4) = 0;
   mass_matrix_Sd(0,5) = 0;
   mass_matrix_Sd(1,1) = mq2(1,1) + 0.5*AbsSqr(Yd(1,1))*Sqr(vd) - 0.025*
      Sqr(g1)*Sqr(vd) - 0.125*Sqr(g2)*Sqr(vd) - 0.0375*Sqr(gN)*Sqr(vd) + 0.0625
      *Sqr(gN)*Sqr(vs) + 0.025*Sqr(g1)*Sqr(vu) + 0.125*Sqr(g2)*Sqr(vu) - 0.025*
      Sqr(gN)*Sqr(vu);
   mass_matrix_Sd(1,2) = mq2(1,2);
   mass_matrix_Sd(1,3) = 0;
   mass_matrix_Sd(1,4) = 0.7071067811865475*vd*Conj(TYd(1,1)) - 0.5*vs*vu
      *Conj(Yd(1,1))*Lambdax;
   mass_matrix_Sd(1,5) = 0;
   mass_matrix_Sd(2,2) = mq2(2,2) + 0.5*AbsSqr(Yd(2,2))*Sqr(vd) - 0.025*
      Sqr(g1)*Sqr(vd) - 0.125*Sqr(g2)*Sqr(vd) - 0.0375*Sqr(gN)*Sqr(vd) + 0.0625
      *Sqr(gN)*Sqr(vs) + 0.025*Sqr(g1)*Sqr(vu) + 0.125*Sqr(g2)*Sqr(vu) - 0.025*
      Sqr(gN)*Sqr(vu);
   mass_matrix_Sd(2,3) = 0;
   mass_matrix_Sd(2,4) = 0;
   mass_matrix_Sd(2,5) = 0.7071067811865475*vd*Conj(TYd(2,2)) - 0.5*vs*vu
      *Conj(Yd(2,2))*Lambdax;
   mass_matrix_Sd(3,3) = md2(0,0) + 0.5*AbsSqr(Yd(0,0))*Sqr(vd) - 0.05*
      Sqr(g1)*Sqr(vd) - 0.075*Sqr(gN)*Sqr(vd) + 0.125*Sqr(gN)*Sqr(vs) + 0.05*
      Sqr(g1)*Sqr(vu) - 0.05*Sqr(gN)*Sqr(vu);
   mass_matrix_Sd(3,4) = md2(0,1);
   mass_matrix_Sd(3,5) = md2(0,2);
   mass_matrix_Sd(4,4) = md2(1,1) + 0.5*AbsSqr(Yd(1,1))*Sqr(vd) - 0.05*
      Sqr(g1)*Sqr(vd) - 0.075*Sqr(gN)*Sqr(vd) + 0.125*Sqr(gN)*Sqr(vs) + 0.05*
      Sqr(g1)*Sqr(vu) - 0.05*Sqr(gN)*Sqr(vu);
   mass_matrix_Sd(4,5) = md2(1,2);
   mass_matrix_Sd(5,5) = md2(2,2) + 0.5*AbsSqr(Yd(2,2))*Sqr(vd) - 0.05*
      Sqr(g1)*Sqr(vd) - 0.075*Sqr(gN)*Sqr(vd) + 0.125*Sqr(gN)*Sqr(vs) + 0.05*
      Sqr(g1)*Sqr(vu) - 0.05*Sqr(gN)*Sqr(vu);

   Hermitianize(mass_matrix_Sd);

   return mass_matrix_Sd;
}

void CLASSNAME::calculate_MSd()
{
   const auto mass_matrix_Sd(get_mass_matrix_Sd());


#ifdef CHECK_EIGENVALUE_ERROR
   double eigenvalue_error;
   fs_diagonalize_hermitian(mass_matrix_Sd, MSd, ZD, eigenvalue_error);
   problems.flag_bad_mass(E6SSMtower_info::Sd, eigenvalue_error >
      precision * Abs(MSd(0)));
#else
   fs_diagonalize_hermitian(mass_matrix_Sd, MSd, ZD);
#endif


   if (MSd.minCoeff() < 0.) {
      problems.flag_tachyon(E6SSMtower_info::Sd);
   }

   MSd = AbsSqrt(MSd);
}

Eigen::Matrix<double,3,3> CLASSNAME::get_mass_matrix_Sv() const
{
   Eigen::Matrix<double,3,3> mass_matrix_Sv;

   mass_matrix_Sv(0,0) = ml2(0,0) + 0.075*Sqr(g1)*Sqr(vd) + 0.125*Sqr(g2)
      *Sqr(vd) - 0.075*Sqr(gN)*Sqr(vd) + 0.125*Sqr(gN)*Sqr(vs) - 0.075*Sqr(g1)*
      Sqr(vu) - 0.125*Sqr(g2)*Sqr(vu) - 0.05*Sqr(gN)*Sqr(vu);
   mass_matrix_Sv(0,1) = ml2(0,1);
   mass_matrix_Sv(0,2) = ml2(0,2);
   mass_matrix_Sv(1,1) = ml2(1,1) + 0.075*Sqr(g1)*Sqr(vd) + 0.125*Sqr(g2)
      *Sqr(vd) - 0.075*Sqr(gN)*Sqr(vd) + 0.125*Sqr(gN)*Sqr(vs) - 0.075*Sqr(g1)*
      Sqr(vu) - 0.125*Sqr(g2)*Sqr(vu) - 0.05*Sqr(gN)*Sqr(vu);
   mass_matrix_Sv(1,2) = ml2(1,2);
   mass_matrix_Sv(2,2) = ml2(2,2) + 0.075*Sqr(g1)*Sqr(vd) + 0.125*Sqr(g2)
      *Sqr(vd) - 0.075*Sqr(gN)*Sqr(vd) + 0.125*Sqr(gN)*Sqr(vs) - 0.075*Sqr(g1)*
      Sqr(vu) - 0.125*Sqr(g2)*Sqr(vu) - 0.05*Sqr(gN)*Sqr(vu);

   Hermitianize(mass_matrix_Sv);

   return mass_matrix_Sv;
}

void CLASSNAME::calculate_MSv()
{
   const auto mass_matrix_Sv(get_mass_matrix_Sv());


#ifdef CHECK_EIGENVALUE_ERROR
   double eigenvalue_error;
   fs_diagonalize_hermitian(mass_matrix_Sv, MSv, ZV, eigenvalue_error);
   problems.flag_bad_mass(E6SSMtower_info::Sv, eigenvalue_error >
      precision * Abs(MSv(0)));
#else
   fs_diagonalize_hermitian(mass_matrix_Sv, MSv, ZV);
#endif


   if (MSv.minCoeff() < 0.) {
      problems.flag_tachyon(E6SSMtower_info::Sv);
   }

   MSv = AbsSqrt(MSv);
}

Eigen::Matrix<double,6,6> CLASSNAME::get_mass_matrix_Su() const
{
   Eigen::Matrix<double,6,6> mass_matrix_Su;

   mass_matrix_Su(0,0) = mq2(0,0) - 0.025*Sqr(g1)*Sqr(vd) + 0.125*Sqr(g2)
      *Sqr(vd) - 0.0375*Sqr(gN)*Sqr(vd) + 0.0625*Sqr(gN)*Sqr(vs) + 0.5*AbsSqr(
      Yu(0,0))*Sqr(vu) + 0.025*Sqr(g1)*Sqr(vu) - 0.125*Sqr(g2)*Sqr(vu) - 0.025*
      Sqr(gN)*Sqr(vu);
   mass_matrix_Su(0,1) = mq2(0,1);
   mass_matrix_Su(0,2) = mq2(0,2);
   mass_matrix_Su(0,3) = 0.7071067811865475*vu*Conj(TYu(0,0)) - 0.5*vd*vs
      *Conj(Yu(0,0))*Lambdax;
   mass_matrix_Su(0,4) = 0;
   mass_matrix_Su(0,5) = 0;
   mass_matrix_Su(1,1) = mq2(1,1) - 0.025*Sqr(g1)*Sqr(vd) + 0.125*Sqr(g2)
      *Sqr(vd) - 0.0375*Sqr(gN)*Sqr(vd) + 0.0625*Sqr(gN)*Sqr(vs) + 0.5*AbsSqr(
      Yu(1,1))*Sqr(vu) + 0.025*Sqr(g1)*Sqr(vu) - 0.125*Sqr(g2)*Sqr(vu) - 0.025*
      Sqr(gN)*Sqr(vu);
   mass_matrix_Su(1,2) = mq2(1,2);
   mass_matrix_Su(1,3) = 0;
   mass_matrix_Su(1,4) = 0.7071067811865475*vu*Conj(TYu(1,1)) - 0.5*vd*vs
      *Conj(Yu(1,1))*Lambdax;
   mass_matrix_Su(1,5) = 0;
   mass_matrix_Su(2,2) = mq2(2,2) - 0.025*Sqr(g1)*Sqr(vd) + 0.125*Sqr(g2)
      *Sqr(vd) - 0.0375*Sqr(gN)*Sqr(vd) + 0.0625*Sqr(gN)*Sqr(vs) + 0.5*AbsSqr(
      Yu(2,2))*Sqr(vu) + 0.025*Sqr(g1)*Sqr(vu) - 0.125*Sqr(g2)*Sqr(vu) - 0.025*
      Sqr(gN)*Sqr(vu);
   mass_matrix_Su(2,3) = 0;
   mass_matrix_Su(2,4) = 0;
   mass_matrix_Su(2,5) = 0.7071067811865475*vu*Conj(TYu(2,2)) - 0.5*vd*vs
      *Conj(Yu(2,2))*Lambdax;
   mass_matrix_Su(3,3) = mu2(0,0) + 0.1*Sqr(g1)*Sqr(vd) - 0.0375*Sqr(gN)*
      Sqr(vd) + 0.0625*Sqr(gN)*Sqr(vs) + 0.5*AbsSqr(Yu(0,0))*Sqr(vu) - 0.1*Sqr(
      g1)*Sqr(vu) - 0.025*Sqr(gN)*Sqr(vu);
   mass_matrix_Su(3,4) = mu2(0,1);
   mass_matrix_Su(3,5) = mu2(0,2);
   mass_matrix_Su(4,4) = mu2(1,1) + 0.1*Sqr(g1)*Sqr(vd) - 0.0375*Sqr(gN)*
      Sqr(vd) + 0.0625*Sqr(gN)*Sqr(vs) + 0.5*AbsSqr(Yu(1,1))*Sqr(vu) - 0.1*Sqr(
      g1)*Sqr(vu) - 0.025*Sqr(gN)*Sqr(vu);
   mass_matrix_Su(4,5) = mu2(1,2);
   mass_matrix_Su(5,5) = mu2(2,2) + 0.1*Sqr(g1)*Sqr(vd) - 0.0375*Sqr(gN)*
      Sqr(vd) + 0.0625*Sqr(gN)*Sqr(vs) + 0.5*AbsSqr(Yu(2,2))*Sqr(vu) - 0.1*Sqr(
      g1)*Sqr(vu) - 0.025*Sqr(gN)*Sqr(vu);

   Hermitianize(mass_matrix_Su);

   return mass_matrix_Su;
}

void CLASSNAME::calculate_MSu()
{
   const auto mass_matrix_Su(get_mass_matrix_Su());


#ifdef CHECK_EIGENVALUE_ERROR
   double eigenvalue_error;
   fs_diagonalize_hermitian(mass_matrix_Su, MSu, ZU, eigenvalue_error);
   problems.flag_bad_mass(E6SSMtower_info::Su, eigenvalue_error >
      precision * Abs(MSu(0)));
#else
   fs_diagonalize_hermitian(mass_matrix_Su, MSu, ZU);
#endif


   if (MSu.minCoeff() < 0.) {
      problems.flag_tachyon(E6SSMtower_info::Su);
   }

   MSu = AbsSqrt(MSu);
}

Eigen::Matrix<double,6,6> CLASSNAME::get_mass_matrix_Se() const
{
   Eigen::Matrix<double,6,6> mass_matrix_Se;

   mass_matrix_Se(0,0) = ml2(0,0) + 0.5*AbsSqr(Ye(0,0))*Sqr(vd) + 0.075*
      Sqr(g1)*Sqr(vd) - 0.125*Sqr(g2)*Sqr(vd) - 0.075*Sqr(gN)*Sqr(vd) + 0.125*
      Sqr(gN)*Sqr(vs) - 0.075*Sqr(g1)*Sqr(vu) + 0.125*Sqr(g2)*Sqr(vu) - 0.05*
      Sqr(gN)*Sqr(vu);
   mass_matrix_Se(0,1) = ml2(0,1);
   mass_matrix_Se(0,2) = ml2(0,2);
   mass_matrix_Se(0,3) = 0.7071067811865475*vd*Conj(TYe(0,0)) - 0.5*vs*vu
      *Conj(Ye(0,0))*Lambdax;
   mass_matrix_Se(0,4) = 0;
   mass_matrix_Se(0,5) = 0;
   mass_matrix_Se(1,1) = ml2(1,1) + 0.5*AbsSqr(Ye(1,1))*Sqr(vd) + 0.075*
      Sqr(g1)*Sqr(vd) - 0.125*Sqr(g2)*Sqr(vd) - 0.075*Sqr(gN)*Sqr(vd) + 0.125*
      Sqr(gN)*Sqr(vs) - 0.075*Sqr(g1)*Sqr(vu) + 0.125*Sqr(g2)*Sqr(vu) - 0.05*
      Sqr(gN)*Sqr(vu);
   mass_matrix_Se(1,2) = ml2(1,2);
   mass_matrix_Se(1,3) = 0;
   mass_matrix_Se(1,4) = 0.7071067811865475*vd*Conj(TYe(1,1)) - 0.5*vs*vu
      *Conj(Ye(1,1))*Lambdax;
   mass_matrix_Se(1,5) = 0;
   mass_matrix_Se(2,2) = ml2(2,2) + 0.5*AbsSqr(Ye(2,2))*Sqr(vd) + 0.075*
      Sqr(g1)*Sqr(vd) - 0.125*Sqr(g2)*Sqr(vd) - 0.075*Sqr(gN)*Sqr(vd) + 0.125*
      Sqr(gN)*Sqr(vs) - 0.075*Sqr(g1)*Sqr(vu) + 0.125*Sqr(g2)*Sqr(vu) - 0.05*
      Sqr(gN)*Sqr(vu);
   mass_matrix_Se(2,3) = 0;
   mass_matrix_Se(2,4) = 0;
   mass_matrix_Se(2,5) = 0.7071067811865475*vd*Conj(TYe(2,2)) - 0.5*vs*vu
      *Conj(Ye(2,2))*Lambdax;
   mass_matrix_Se(3,3) = me2(0,0) + 0.5*AbsSqr(Ye(0,0))*Sqr(vd) - 0.15*
      Sqr(g1)*Sqr(vd) - 0.0375*Sqr(gN)*Sqr(vd) + 0.0625*Sqr(gN)*Sqr(vs) + 0.15*
      Sqr(g1)*Sqr(vu) - 0.025*Sqr(gN)*Sqr(vu);
   mass_matrix_Se(3,4) = me2(0,1);
   mass_matrix_Se(3,5) = me2(0,2);
   mass_matrix_Se(4,4) = me2(1,1) + 0.5*AbsSqr(Ye(1,1))*Sqr(vd) - 0.15*
      Sqr(g1)*Sqr(vd) - 0.0375*Sqr(gN)*Sqr(vd) + 0.0625*Sqr(gN)*Sqr(vs) + 0.15*
      Sqr(g1)*Sqr(vu) - 0.025*Sqr(gN)*Sqr(vu);
   mass_matrix_Se(4,5) = me2(1,2);
   mass_matrix_Se(5,5) = me2(2,2) + 0.5*AbsSqr(Ye(2,2))*Sqr(vd) - 0.15*
      Sqr(g1)*Sqr(vd) - 0.0375*Sqr(gN)*Sqr(vd) + 0.0625*Sqr(gN)*Sqr(vs) + 0.15*
      Sqr(g1)*Sqr(vu) - 0.025*Sqr(gN)*Sqr(vu);

   Hermitianize(mass_matrix_Se);

   return mass_matrix_Se;
}

void CLASSNAME::calculate_MSe()
{
   const auto mass_matrix_Se(get_mass_matrix_Se());


#ifdef CHECK_EIGENVALUE_ERROR
   double eigenvalue_error;
   fs_diagonalize_hermitian(mass_matrix_Se, MSe, ZE, eigenvalue_error);
   problems.flag_bad_mass(E6SSMtower_info::Se, eigenvalue_error >
      precision * Abs(MSe(0)));
#else
   fs_diagonalize_hermitian(mass_matrix_Se, MSe, ZE);
#endif


   if (MSe.minCoeff() < 0.) {
      problems.flag_tachyon(E6SSMtower_info::Se);
   }

   MSe = AbsSqrt(MSe);
}

Eigen::Matrix<double,6,6> CLASSNAME::get_mass_matrix_SDX() const
{
   Eigen::Matrix<double,6,6> mass_matrix_SDX;

   mass_matrix_SDX(0,0) = mDx2(0,0) + 0.05*Sqr(g1)*Sqr(vd) + 0.075*Sqr(gN
      )*Sqr(vd) + 0.5*AbsSqr(Kappa(0,0))*Sqr(vs) - 0.125*Sqr(gN)*Sqr(vs) - 0.05
      *Sqr(g1)*Sqr(vu) + 0.05*Sqr(gN)*Sqr(vu);
   mass_matrix_SDX(0,1) = 0;
   mass_matrix_SDX(0,2) = 0;
   mass_matrix_SDX(0,3) = 0.7071067811865475*vs*Conj(TKappa(0,0)) - 0.5*
      vd*vu*Conj(Kappa(0,0))*Lambdax;
   mass_matrix_SDX(0,4) = 0;
   mass_matrix_SDX(0,5) = 0;
   mass_matrix_SDX(1,1) = mDx2(1,1) + 0.05*Sqr(g1)*Sqr(vd) + 0.075*Sqr(gN
      )*Sqr(vd) + 0.5*AbsSqr(Kappa(1,1))*Sqr(vs) - 0.125*Sqr(gN)*Sqr(vs) - 0.05
      *Sqr(g1)*Sqr(vu) + 0.05*Sqr(gN)*Sqr(vu);
   mass_matrix_SDX(1,2) = 0;
   mass_matrix_SDX(1,3) = 0;
   mass_matrix_SDX(1,4) = 0.7071067811865475*vs*Conj(TKappa(1,1)) - 0.5*
      vd*vu*Conj(Kappa(1,1))*Lambdax;
   mass_matrix_SDX(1,5) = 0;
   mass_matrix_SDX(2,2) = mDx2(2,2) + 0.05*Sqr(g1)*Sqr(vd) + 0.075*Sqr(gN
      )*Sqr(vd) + 0.5*AbsSqr(Kappa(2,2))*Sqr(vs) - 0.125*Sqr(gN)*Sqr(vs) - 0.05
      *Sqr(g1)*Sqr(vu) + 0.05*Sqr(gN)*Sqr(vu);
   mass_matrix_SDX(2,3) = 0;
   mass_matrix_SDX(2,4) = 0;
   mass_matrix_SDX(2,5) = 0.7071067811865475*vs*Conj(TKappa(2,2)) - 0.5*
      vd*vu*Conj(Kappa(2,2))*Lambdax;
   mass_matrix_SDX(3,3) = mDxbar2(0,0) - 0.05*Sqr(g1)*Sqr(vd) + 0.1125*
      Sqr(gN)*Sqr(vd) + 0.5*AbsSqr(Kappa(0,0))*Sqr(vs) - 0.1875*Sqr(gN)*Sqr(vs)
      + 0.05*Sqr(g1)*Sqr(vu) + 0.075*Sqr(gN)*Sqr(vu);
   mass_matrix_SDX(3,4) = 0;
   mass_matrix_SDX(3,5) = 0;
   mass_matrix_SDX(4,4) = mDxbar2(1,1) - 0.05*Sqr(g1)*Sqr(vd) + 0.1125*
      Sqr(gN)*Sqr(vd) + 0.5*AbsSqr(Kappa(1,1))*Sqr(vs) - 0.1875*Sqr(gN)*Sqr(vs)
      + 0.05*Sqr(g1)*Sqr(vu) + 0.075*Sqr(gN)*Sqr(vu);
   mass_matrix_SDX(4,5) = 0;
   mass_matrix_SDX(5,5) = mDxbar2(2,2) - 0.05*Sqr(g1)*Sqr(vd) + 0.1125*
      Sqr(gN)*Sqr(vd) + 0.5*AbsSqr(Kappa(2,2))*Sqr(vs) - 0.1875*Sqr(gN)*Sqr(vs)
      + 0.05*Sqr(g1)*Sqr(vu) + 0.075*Sqr(gN)*Sqr(vu);

   Hermitianize(mass_matrix_SDX);

   return mass_matrix_SDX;
}

void CLASSNAME::calculate_MSDX()
{
   const auto mass_matrix_SDX(get_mass_matrix_SDX());


#ifdef CHECK_EIGENVALUE_ERROR
   double eigenvalue_error;
   fs_diagonalize_hermitian(mass_matrix_SDX, MSDX, ZDX, eigenvalue_error)
      ;
   problems.flag_bad_mass(E6SSMtower_info::SDX, eigenvalue_error >
      precision * Abs(MSDX(0)));
#else
   fs_diagonalize_hermitian(mass_matrix_SDX, MSDX, ZDX);
#endif


   if (MSDX.minCoeff() < 0.) {
      problems.flag_tachyon(E6SSMtower_info::SDX);
   }

   MSDX = AbsSqrt(MSDX);
}

Eigen::Matrix<double,3,3> CLASSNAME::get_mass_matrix_hh() const
{
   Eigen::Matrix<double,3,3> mass_matrix_hh;

   mass_matrix_hh(0,0) = mHd2 + 0.225*Sqr(g1)*Sqr(vd) + 0.375*Sqr(g2)*Sqr
      (vd) + 0.3375*Sqr(gN)*Sqr(vd) + 0.5*AbsSqr(Lambdax)*Sqr(vs) - 0.1875*Sqr(
      gN)*Sqr(vs) + 0.5*AbsSqr(Lambdax)*Sqr(vu) - 0.075*Sqr(g1)*Sqr(vu) - 0.125
      *Sqr(g2)*Sqr(vu) + 0.075*Sqr(gN)*Sqr(vu);
   mass_matrix_hh(0,1) = vd*vu*AbsSqr(Lambdax) - 0.35355339059327373*vs*
      Conj(TLambdax) - 0.15*vd*vu*Sqr(g1) - 0.25*vd*vu*Sqr(g2) + 0.15*vd*vu*Sqr
      (gN) - 0.35355339059327373*vs*TLambdax;
   mass_matrix_hh(0,2) = vd*vs*AbsSqr(Lambdax) - 0.35355339059327373*vu*
      Conj(TLambdax) - 0.375*vd*vs*Sqr(gN) - 0.35355339059327373*vu*TLambdax;
   mass_matrix_hh(1,1) = mHu2 + 0.5*AbsSqr(Lambdax)*Sqr(vd) - 0.075*Sqr(
      g1)*Sqr(vd) - 0.125*Sqr(g2)*Sqr(vd) + 0.075*Sqr(gN)*Sqr(vd) + 0.5*AbsSqr(
      Lambdax)*Sqr(vs) - 0.125*Sqr(gN)*Sqr(vs) + 0.225*Sqr(g1)*Sqr(vu) + 0.375*
      Sqr(g2)*Sqr(vu) + 0.15*Sqr(gN)*Sqr(vu);
   mass_matrix_hh(1,2) = vs*vu*AbsSqr(Lambdax) - 0.35355339059327373*vd*
      Conj(TLambdax) - 0.25*vs*vu*Sqr(gN) - 0.35355339059327373*vd*TLambdax;
   mass_matrix_hh(2,2) = ms2 + 0.5*AbsSqr(Lambdax)*Sqr(vd) - 0.1875*Sqr(
      gN)*Sqr(vd) + 0.9375*Sqr(gN)*Sqr(vs) + 0.5*AbsSqr(Lambdax)*Sqr(vu) -
      0.125*Sqr(gN)*Sqr(vu);

   Symmetrize(mass_matrix_hh);

   return mass_matrix_hh;
}

void CLASSNAME::calculate_Mhh()
{
   const auto mass_matrix_hh(get_mass_matrix_hh());


#ifdef CHECK_EIGENVALUE_ERROR
   double eigenvalue_error;
   fs_diagonalize_hermitian(mass_matrix_hh, Mhh, ZH, eigenvalue_error);
   problems.flag_bad_mass(E6SSMtower_info::hh, eigenvalue_error >
      precision * Abs(Mhh(0)));
#else
   fs_diagonalize_hermitian(mass_matrix_hh, Mhh, ZH);
#endif


   if (Mhh.minCoeff() < 0.) {
      problems.flag_tachyon(E6SSMtower_info::hh);
   }

   Mhh = AbsSqrt(Mhh);
}

Eigen::Matrix<double,3,3> CLASSNAME::get_mass_matrix_Ah() const
{
   Eigen::Matrix<double,3,3> mass_matrix_Ah;

   mass_matrix_Ah(0,0) = mHd2 + 0.075*Sqr(g1)*Sqr(vd) + 0.125*Sqr(g2)*Sqr
      (vd) + 0.1125*Sqr(gN)*Sqr(vd) + 0.5*AbsSqr(Lambdax)*Sqr(vs) - 0.1875*Sqr(
      gN)*Sqr(vs) + 0.5*AbsSqr(Lambdax)*Sqr(vu) - 0.075*Sqr(g1)*Sqr(vu) - 0.125
      *Sqr(g2)*Sqr(vu) + 0.075*Sqr(gN)*Sqr(vu) + 0.3872983346207417*g1*g2*Cos(
      ThetaW())*Sin(ThetaW())*Sqr(vd)*Sqr(Cos(ThetaWp())) + 0.225*Sqr(gN)*Sqr(
      vd)*Sqr(Cos(ThetaWp())) + 0.25*Sqr(g2)*Sqr(vd)*Sqr(Cos(ThetaW()))*Sqr(Cos
      (ThetaWp())) + 0.15*Sqr(g1)*Sqr(vd)*Sqr(Cos(ThetaWp()))*Sqr(Sin(ThetaW())
      ) + 0.3872983346207417*g1*g2*Cos(ThetaW())*Sin(ThetaW())*Sqr(vd)*Sqr(Sin(
      ThetaWp())) + 0.225*Sqr(gN)*Sqr(vd)*Sqr(Sin(ThetaWp())) + 0.25*Sqr(g2)*
      Sqr(vd)*Sqr(Cos(ThetaW()))*Sqr(Sin(ThetaWp())) + 0.15*Sqr(g1)*Sqr(vd)*Sqr
      (Sin(ThetaW()))*Sqr(Sin(ThetaWp()));
   mass_matrix_Ah(0,1) = 0.35355339059327373*vs*Conj(TLambdax) -
      0.3872983346207417*g1*g2*vd*vu*Cos(ThetaW())*Sin(ThetaW())*Sqr(Cos(
      ThetaWp())) + 0.15*vd*vu*Sqr(gN)*Sqr(Cos(ThetaWp())) - 0.25*vd*vu*Sqr(g2)
      *Sqr(Cos(ThetaW()))*Sqr(Cos(ThetaWp())) - 0.15*vd*vu*Sqr(g1)*Sqr(Cos(
      ThetaWp()))*Sqr(Sin(ThetaW())) - 0.3872983346207417*g1*g2*vd*vu*Cos(
      ThetaW())*Sin(ThetaW())*Sqr(Sin(ThetaWp())) + 0.15*vd*vu*Sqr(gN)*Sqr(Sin(
      ThetaWp())) - 0.25*vd*vu*Sqr(g2)*Sqr(Cos(ThetaW()))*Sqr(Sin(ThetaWp())) -
      0.15*vd*vu*Sqr(g1)*Sqr(Sin(ThetaW()))*Sqr(Sin(ThetaWp())) +
      0.35355339059327373*vs*TLambdax;
   mass_matrix_Ah(0,2) = 0.35355339059327373*vu*Conj(TLambdax) - 0.375*vd
      *vs*Sqr(gN)*Sqr(Cos(ThetaWp())) - 0.375*vd*vs*Sqr(gN)*Sqr(Sin(ThetaWp()))
      + 0.35355339059327373*vu*TLambdax;
   mass_matrix_Ah(1,1) = mHu2 + 0.5*AbsSqr(Lambdax)*Sqr(vd) - 0.075*Sqr(
      g1)*Sqr(vd) - 0.125*Sqr(g2)*Sqr(vd) + 0.075*Sqr(gN)*Sqr(vd) + 0.5*AbsSqr(
      Lambdax)*Sqr(vs) - 0.125*Sqr(gN)*Sqr(vs) + 0.075*Sqr(g1)*Sqr(vu) + 0.125*
      Sqr(g2)*Sqr(vu) + 0.05*Sqr(gN)*Sqr(vu) + 0.3872983346207417*g1*g2*Cos(
      ThetaW())*Sin(ThetaW())*Sqr(vu)*Sqr(Cos(ThetaWp())) + 0.1*Sqr(gN)*Sqr(vu)
      *Sqr(Cos(ThetaWp())) + 0.25*Sqr(g2)*Sqr(vu)*Sqr(Cos(ThetaW()))*Sqr(Cos(
      ThetaWp())) + 0.15*Sqr(g1)*Sqr(vu)*Sqr(Cos(ThetaWp()))*Sqr(Sin(ThetaW()))
      + 0.3872983346207417*g1*g2*Cos(ThetaW())*Sin(ThetaW())*Sqr(vu)*Sqr(Sin(
      ThetaWp())) + 0.1*Sqr(gN)*Sqr(vu)*Sqr(Sin(ThetaWp())) + 0.25*Sqr(g2)*Sqr(
      vu)*Sqr(Cos(ThetaW()))*Sqr(Sin(ThetaWp())) + 0.15*Sqr(g1)*Sqr(vu)*Sqr(Sin
      (ThetaW()))*Sqr(Sin(ThetaWp()));
   mass_matrix_Ah(1,2) = 0.35355339059327373*vd*Conj(TLambdax) - 0.25*vs*
      vu*Sqr(gN)*Sqr(Cos(ThetaWp())) - 0.25*vs*vu*Sqr(gN)*Sqr(Sin(ThetaWp())) +
      0.35355339059327373*vd*TLambdax;
   mass_matrix_Ah(2,2) = ms2 + 0.5*AbsSqr(Lambdax)*Sqr(vd) - 0.1875*Sqr(
      gN)*Sqr(vd) + 0.3125*Sqr(gN)*Sqr(vs) + 0.5*AbsSqr(Lambdax)*Sqr(vu) -
      0.125*Sqr(gN)*Sqr(vu) + 0.625*Sqr(gN)*Sqr(vs)*Sqr(Cos(ThetaWp())) + 0.625
      *Sqr(gN)*Sqr(vs)*Sqr(Sin(ThetaWp()));

   Symmetrize(mass_matrix_Ah);

   return mass_matrix_Ah;
}

void CLASSNAME::calculate_MAh()
{
   const auto mass_matrix_Ah(get_mass_matrix_Ah());


#ifdef CHECK_EIGENVALUE_ERROR
   double eigenvalue_error;
   fs_diagonalize_hermitian(mass_matrix_Ah, MAh, ZA, eigenvalue_error);
   problems.flag_bad_mass(E6SSMtower_info::Ah, eigenvalue_error >
      precision * Abs(MAh(0)));
#else
   fs_diagonalize_hermitian(mass_matrix_Ah, MAh, ZA);
#endif


   if (MAh.minCoeff() < 0.) {
      problems.flag_tachyon(E6SSMtower_info::Ah);
   }

   MAh = AbsSqrt(MAh);
}

Eigen::Matrix<double,2,2> CLASSNAME::get_mass_matrix_Hpm() const
{
   Eigen::Matrix<double,2,2> mass_matrix_Hpm;

   mass_matrix_Hpm(0,0) = mHd2 + 0.075*Sqr(g1)*Sqr(vd) + 0.375*Sqr(g2)*
      Sqr(vd) + 0.1125*Sqr(gN)*Sqr(vd) + 0.5*AbsSqr(Lambdax)*Sqr(vs) - 0.1875*
      Sqr(gN)*Sqr(vs) - 0.075*Sqr(g1)*Sqr(vu) + 0.125*Sqr(g2)*Sqr(vu) + 0.075*
      Sqr(gN)*Sqr(vu);
   mass_matrix_Hpm(0,1) = -0.5*vd*vu*AbsSqr(Lambdax) + 0.7071067811865475
      *vs*Conj(TLambdax);
   mass_matrix_Hpm(1,1) = mHu2 - 0.075*Sqr(g1)*Sqr(vd) + 0.125*Sqr(g2)*
      Sqr(vd) + 0.075*Sqr(gN)*Sqr(vd) + 0.5*AbsSqr(Lambdax)*Sqr(vs) - 0.125*Sqr
      (gN)*Sqr(vs) + 0.075*Sqr(g1)*Sqr(vu) + 0.375*Sqr(g2)*Sqr(vu) + 0.05*Sqr(
      gN)*Sqr(vu);

   Hermitianize(mass_matrix_Hpm);

   return mass_matrix_Hpm;
}

void CLASSNAME::calculate_MHpm()
{
   const auto mass_matrix_Hpm(get_mass_matrix_Hpm());


#ifdef CHECK_EIGENVALUE_ERROR
   double eigenvalue_error;
   fs_diagonalize_hermitian(mass_matrix_Hpm, MHpm, ZP, eigenvalue_error);
   problems.flag_bad_mass(E6SSMtower_info::Hpm, eigenvalue_error >
      precision * Abs(MHpm(0)));
#else
   fs_diagonalize_hermitian(mass_matrix_Hpm, MHpm, ZP);
#endif


   if (MHpm.minCoeff() < 0.) {
      problems.flag_tachyon(E6SSMtower_info::Hpm);
   }

   MHpm = AbsSqrt(MHpm);
}

Eigen::Matrix<double,6,6> CLASSNAME::get_mass_matrix_Chi() const
{
   Eigen::Matrix<double,6,6> mass_matrix_Chi;

   mass_matrix_Chi(0,0) = MassB;
   mass_matrix_Chi(0,1) = 0;
   mass_matrix_Chi(0,2) = -0.3872983346207417*g1*vd;
   mass_matrix_Chi(0,3) = 0.3872983346207417*g1*vu;
   mass_matrix_Chi(0,4) = 0;
   mass_matrix_Chi(0,5) = 0;
   mass_matrix_Chi(1,1) = MassWB;
   mass_matrix_Chi(1,2) = 0.5*g2*vd;
   mass_matrix_Chi(1,3) = -0.5*g2*vu;
   mass_matrix_Chi(1,4) = 0;
   mass_matrix_Chi(1,5) = 0;
   mass_matrix_Chi(2,2) = 0;
   mass_matrix_Chi(2,3) = -0.7071067811865475*vs*Lambdax;
   mass_matrix_Chi(2,4) = -0.7071067811865475*vu*Lambdax;
   mass_matrix_Chi(2,5) = -0.4743416490252569*gN*vd;
   mass_matrix_Chi(3,3) = 0;
   mass_matrix_Chi(3,4) = -0.7071067811865475*vd*Lambdax;
   mass_matrix_Chi(3,5) = -0.31622776601683794*gN*vu;
   mass_matrix_Chi(4,4) = 0;
   mass_matrix_Chi(4,5) = 0.7905694150420949*gN*vs;
   mass_matrix_Chi(5,5) = MassBp;

   Symmetrize(mass_matrix_Chi);

   return mass_matrix_Chi;
}

void CLASSNAME::calculate_MChi()
{
   const auto mass_matrix_Chi(get_mass_matrix_Chi());


#ifdef CHECK_EIGENVALUE_ERROR
   double eigenvalue_error;
   fs_diagonalize_symmetric(mass_matrix_Chi, MChi, ZN, eigenvalue_error);
   problems.flag_bad_mass(E6SSMtower_info::Chi, eigenvalue_error >
      precision * Abs(MChi(0)));
#else
   fs_diagonalize_symmetric(mass_matrix_Chi, MChi, ZN);
#endif

}

Eigen::Matrix<double,2,2> CLASSNAME::get_mass_matrix_Cha() const
{
   Eigen::Matrix<double,2,2> mass_matrix_Cha;

   mass_matrix_Cha(0,0) = MassWB;
   mass_matrix_Cha(0,1) = 0.7071067811865475*g2*vu;
   mass_matrix_Cha(1,0) = 0.7071067811865475*g2*vd;
   mass_matrix_Cha(1,1) = 0.7071067811865475*vs*Lambdax;

   return mass_matrix_Cha;
}

void CLASSNAME::calculate_MCha()
{
   const auto mass_matrix_Cha(get_mass_matrix_Cha());


#ifdef CHECK_EIGENVALUE_ERROR
   double eigenvalue_error;
   fs_svd(mass_matrix_Cha, MCha, UM, UP, eigenvalue_error);
   problems.flag_bad_mass(E6SSMtower_info::Cha, eigenvalue_error >
      precision * Abs(MCha(0)));
#else
   fs_svd(mass_matrix_Cha, MCha, UM, UP);
#endif

}

Eigen::Matrix<double,3,3> CLASSNAME::get_mass_matrix_Fe() const
{
   Eigen::Matrix<double,3,3> mass_matrix_Fe;

   mass_matrix_Fe(0,0) = 0.7071067811865475*vd*Ye(0,0);
   mass_matrix_Fe(0,1) = 0;
   mass_matrix_Fe(0,2) = 0;
   mass_matrix_Fe(1,1) = 0.7071067811865475*vd*Ye(1,1);
   mass_matrix_Fe(1,2) = 0;
   mass_matrix_Fe(2,2) = 0.7071067811865475*vd*Ye(2,2);

   Symmetrize(mass_matrix_Fe);

   return mass_matrix_Fe;
}

void CLASSNAME::calculate_MFe()
{
   const auto mass_matrix_Fe(get_mass_matrix_Fe());


#ifdef CHECK_EIGENVALUE_ERROR
   double eigenvalue_error;
   fs_svd(mass_matrix_Fe, MFe, ZEL, ZER, eigenvalue_error);
   problems.flag_bad_mass(E6SSMtower_info::Fe, eigenvalue_error >
      precision * Abs(MFe(0)));
#else
   fs_svd(mass_matrix_Fe, MFe, ZEL, ZER);
#endif

}

Eigen::Matrix<double,3,3> CLASSNAME::get_mass_matrix_Fd() const
{
   Eigen::Matrix<double,3,3> mass_matrix_Fd;

   mass_matrix_Fd(0,0) = 0.7071067811865475*vd*Yd(0,0);
   mass_matrix_Fd(0,1) = 0;
   mass_matrix_Fd(0,2) = 0;
   mass_matrix_Fd(1,1) = 0.7071067811865475*vd*Yd(1,1);
   mass_matrix_Fd(1,2) = 0;
   mass_matrix_Fd(2,2) = 0.7071067811865475*vd*Yd(2,2);

   Symmetrize(mass_matrix_Fd);

   return mass_matrix_Fd;
}

void CLASSNAME::calculate_MFd()
{
   const auto mass_matrix_Fd(get_mass_matrix_Fd());


#ifdef CHECK_EIGENVALUE_ERROR
   double eigenvalue_error;
   fs_svd(mass_matrix_Fd, MFd, ZDL, ZDR, eigenvalue_error);
   problems.flag_bad_mass(E6SSMtower_info::Fd, eigenvalue_error >
      precision * Abs(MFd(0)));
#else
   fs_svd(mass_matrix_Fd, MFd, ZDL, ZDR);
#endif

}

Eigen::Matrix<double,3,3> CLASSNAME::get_mass_matrix_Fu() const
{
   Eigen::Matrix<double,3,3> mass_matrix_Fu;

   mass_matrix_Fu(0,0) = 0.7071067811865475*vu*Yu(0,0);
   mass_matrix_Fu(0,1) = 0;
   mass_matrix_Fu(0,2) = 0;
   mass_matrix_Fu(1,1) = 0.7071067811865475*vu*Yu(1,1);
   mass_matrix_Fu(1,2) = 0;
   mass_matrix_Fu(2,2) = 0.7071067811865475*vu*Yu(2,2);

   Symmetrize(mass_matrix_Fu);

   return mass_matrix_Fu;
}

void CLASSNAME::calculate_MFu()
{
   const auto mass_matrix_Fu(get_mass_matrix_Fu());


#ifdef CHECK_EIGENVALUE_ERROR
   double eigenvalue_error;
   fs_svd(mass_matrix_Fu, MFu, ZUL, ZUR, eigenvalue_error);
   problems.flag_bad_mass(E6SSMtower_info::Fu, eigenvalue_error >
      precision * Abs(MFu(0)));
#else
   fs_svd(mass_matrix_Fu, MFu, ZUL, ZUR);
#endif

}

Eigen::Matrix<double,3,3> CLASSNAME::get_mass_matrix_FDX() const
{
   Eigen::Matrix<double,3,3> mass_matrix_FDX;

   mass_matrix_FDX(0,0) = 0.7071067811865475*vs*Kappa(0,0);
   mass_matrix_FDX(0,1) = 0;
   mass_matrix_FDX(0,2) = 0;
   mass_matrix_FDX(1,1) = 0.7071067811865475*vs*Kappa(1,1);
   mass_matrix_FDX(1,2) = 0;
   mass_matrix_FDX(2,2) = 0.7071067811865475*vs*Kappa(2,2);

   Symmetrize(mass_matrix_FDX);

   return mass_matrix_FDX;
}

void CLASSNAME::calculate_MFDX()
{
   const auto mass_matrix_FDX(get_mass_matrix_FDX());


#ifdef CHECK_EIGENVALUE_ERROR
   double eigenvalue_error;
   fs_svd(mass_matrix_FDX, MFDX, ZDXL, ZDXR, eigenvalue_error);
   problems.flag_bad_mass(E6SSMtower_info::FDX, eigenvalue_error >
      precision * Abs(MFDX(0)));
#else
   fs_svd(mass_matrix_FDX, MFDX, ZDXL, ZDXR);
#endif

}

Eigen::Matrix<double,4,4> CLASSNAME::get_mass_matrix_SHI0() const
{
   Eigen::Matrix<double,4,4> mass_matrix_SHI0;

   mass_matrix_SHI0(0,0) = mH1I2(0,0) + 0.075*Sqr(g1)*Sqr(vd) + 0.125*Sqr
      (g2)*Sqr(vd) + 0.1125*Sqr(gN)*Sqr(vd) + 0.5*AbsSqr(Lambda12(0,0))*Sqr(vs)
      - 0.1875*Sqr(gN)*Sqr(vs) - 0.075*Sqr(g1)*Sqr(vu) - 0.125*Sqr(g2)*Sqr(vu)
      + 0.075*Sqr(gN)*Sqr(vu);
   mass_matrix_SHI0(0,1) = 0;
   mass_matrix_SHI0(0,2) = -0.7071067811865475*vs*Conj(TLambda12(0,0)) +
      0.5*vd*vu*Conj(Lambda12(0,0))*Lambdax;
   mass_matrix_SHI0(0,3) = 0;
   mass_matrix_SHI0(1,1) = mH1I2(1,1) + 0.075*Sqr(g1)*Sqr(vd) + 0.125*Sqr
      (g2)*Sqr(vd) + 0.1125*Sqr(gN)*Sqr(vd) + 0.5*AbsSqr(Lambda12(1,1))*Sqr(vs)
      - 0.1875*Sqr(gN)*Sqr(vs) - 0.075*Sqr(g1)*Sqr(vu) - 0.125*Sqr(g2)*Sqr(vu)
      + 0.075*Sqr(gN)*Sqr(vu);
   mass_matrix_SHI0(1,2) = 0;
   mass_matrix_SHI0(1,3) = -0.7071067811865475*vs*Conj(TLambda12(1,1)) +
      0.5*vd*vu*Conj(Lambda12(1,1))*Lambdax;
   mass_matrix_SHI0(2,2) = mH2I2(0,0) - 0.075*Sqr(g1)*Sqr(vd) - 0.125*Sqr
      (g2)*Sqr(vd) + 0.075*Sqr(gN)*Sqr(vd) + 0.5*AbsSqr(Lambda12(0,0))*Sqr(vs)
      - 0.125*Sqr(gN)*Sqr(vs) + 0.075*Sqr(g1)*Sqr(vu) + 0.125*Sqr(g2)*Sqr(vu) +
      0.05*Sqr(gN)*Sqr(vu);
   mass_matrix_SHI0(2,3) = 0;
   mass_matrix_SHI0(3,3) = mH2I2(1,1) - 0.075*Sqr(g1)*Sqr(vd) - 0.125*Sqr
      (g2)*Sqr(vd) + 0.075*Sqr(gN)*Sqr(vd) + 0.5*AbsSqr(Lambda12(1,1))*Sqr(vs)
      - 0.125*Sqr(gN)*Sqr(vs) + 0.075*Sqr(g1)*Sqr(vu) + 0.125*Sqr(g2)*Sqr(vu) +
      0.05*Sqr(gN)*Sqr(vu);

   Hermitianize(mass_matrix_SHI0);

   return mass_matrix_SHI0;
}

void CLASSNAME::calculate_MSHI0()
{
   const auto mass_matrix_SHI0(get_mass_matrix_SHI0());


#ifdef CHECK_EIGENVALUE_ERROR
   double eigenvalue_error;
   fs_diagonalize_hermitian(mass_matrix_SHI0, MSHI0, UHI0,
      eigenvalue_error);
   problems.flag_bad_mass(E6SSMtower_info::SHI0, eigenvalue_error >
      precision * Abs(MSHI0(0)));
#else
   fs_diagonalize_hermitian(mass_matrix_SHI0, MSHI0, UHI0);
#endif


   if (MSHI0.minCoeff() < 0.) {
      problems.flag_tachyon(E6SSMtower_info::SHI0);
   }

   MSHI0 = AbsSqrt(MSHI0);
}

Eigen::Matrix<double,4,4> CLASSNAME::get_mass_matrix_SHIp() const
{
   Eigen::Matrix<double,4,4> mass_matrix_SHIp;

   mass_matrix_SHIp(0,0) = mH1I2(0,0) + 0.075*Sqr(g1)*Sqr(vd) - 0.125*Sqr
      (g2)*Sqr(vd) + 0.1125*Sqr(gN)*Sqr(vd) + 0.5*AbsSqr(Lambda12(0,0))*Sqr(vs)
      - 0.1875*Sqr(gN)*Sqr(vs) - 0.075*Sqr(g1)*Sqr(vu) + 0.125*Sqr(g2)*Sqr(vu)
      + 0.075*Sqr(gN)*Sqr(vu);
   mass_matrix_SHIp(0,1) = 0;
   mass_matrix_SHIp(0,2) = 0.7071067811865475*vs*Conj(TLambda12(0,0)) -
      0.5*vd*vu*Conj(Lambda12(0,0))*Lambdax;
   mass_matrix_SHIp(0,3) = 0;
   mass_matrix_SHIp(1,1) = mH1I2(1,1) + 0.075*Sqr(g1)*Sqr(vd) - 0.125*Sqr
      (g2)*Sqr(vd) + 0.1125*Sqr(gN)*Sqr(vd) + 0.5*AbsSqr(Lambda12(1,1))*Sqr(vs)
      - 0.1875*Sqr(gN)*Sqr(vs) - 0.075*Sqr(g1)*Sqr(vu) + 0.125*Sqr(g2)*Sqr(vu)
      + 0.075*Sqr(gN)*Sqr(vu);
   mass_matrix_SHIp(1,2) = 0;
   mass_matrix_SHIp(1,3) = 0.7071067811865475*vs*Conj(TLambda12(1,1)) -
      0.5*vd*vu*Conj(Lambda12(1,1))*Lambdax;
   mass_matrix_SHIp(2,2) = mH2I2(0,0) - 0.075*Sqr(g1)*Sqr(vd) + 0.125*Sqr
      (g2)*Sqr(vd) + 0.075*Sqr(gN)*Sqr(vd) + 0.5*AbsSqr(Lambda12(0,0))*Sqr(vs)
      - 0.125*Sqr(gN)*Sqr(vs) + 0.075*Sqr(g1)*Sqr(vu) - 0.125*Sqr(g2)*Sqr(vu) +
      0.05*Sqr(gN)*Sqr(vu);
   mass_matrix_SHIp(2,3) = 0;
   mass_matrix_SHIp(3,3) = mH2I2(1,1) - 0.075*Sqr(g1)*Sqr(vd) + 0.125*Sqr
      (g2)*Sqr(vd) + 0.075*Sqr(gN)*Sqr(vd) + 0.5*AbsSqr(Lambda12(1,1))*Sqr(vs)
      - 0.125*Sqr(gN)*Sqr(vs) + 0.075*Sqr(g1)*Sqr(vu) - 0.125*Sqr(g2)*Sqr(vu) +
      0.05*Sqr(gN)*Sqr(vu);

   Hermitianize(mass_matrix_SHIp);

   return mass_matrix_SHIp;
}

void CLASSNAME::calculate_MSHIp()
{
   const auto mass_matrix_SHIp(get_mass_matrix_SHIp());


#ifdef CHECK_EIGENVALUE_ERROR
   double eigenvalue_error;
   fs_diagonalize_hermitian(mass_matrix_SHIp, MSHIp, UHIp,
      eigenvalue_error);
   problems.flag_bad_mass(E6SSMtower_info::SHIp, eigenvalue_error >
      precision * Abs(MSHIp(0)));
#else
   fs_diagonalize_hermitian(mass_matrix_SHIp, MSHIp, UHIp);
#endif


   if (MSHIp.minCoeff() < 0.) {
      problems.flag_tachyon(E6SSMtower_info::SHIp);
   }

   MSHIp = AbsSqrt(MSHIp);
}

Eigen::Matrix<double,2,2> CLASSNAME::get_mass_matrix_ChaI() const
{
   Eigen::Matrix<double,2,2> mass_matrix_ChaI;

   mass_matrix_ChaI(0,0) = 0.7071067811865475*vs*Lambda12(0,0);
   mass_matrix_ChaI(0,1) = 0;
   mass_matrix_ChaI(1,1) = 0.7071067811865475*vs*Lambda12(1,1);

   Symmetrize(mass_matrix_ChaI);

   return mass_matrix_ChaI;
}

void CLASSNAME::calculate_MChaI()
{
   const auto mass_matrix_ChaI(get_mass_matrix_ChaI());


#ifdef CHECK_EIGENVALUE_ERROR
   double eigenvalue_error;
   fs_svd(mass_matrix_ChaI, MChaI, ZMI, ZPI, eigenvalue_error);
   problems.flag_bad_mass(E6SSMtower_info::ChaI, eigenvalue_error >
      precision * Abs(MChaI(0)));
#else
   fs_svd(mass_matrix_ChaI, MChaI, ZMI, ZPI);
#endif

}

Eigen::Matrix<double,4,4> CLASSNAME::get_mass_matrix_ChiI() const
{
   Eigen::Matrix<double,4,4> mass_matrix_ChiI;

   mass_matrix_ChiI(0,0) = 0;
   mass_matrix_ChiI(0,1) = 0;
   mass_matrix_ChiI(0,2) = -0.7071067811865475*vs*Lambda12(0,0);
   mass_matrix_ChiI(0,3) = 0;
   mass_matrix_ChiI(1,1) = 0;
   mass_matrix_ChiI(1,2) = 0;
   mass_matrix_ChiI(1,3) = -0.7071067811865475*vs*Lambda12(1,1);
   mass_matrix_ChiI(2,2) = 0;
   mass_matrix_ChiI(2,3) = 0;
   mass_matrix_ChiI(3,3) = 0;

   Symmetrize(mass_matrix_ChiI);

   return mass_matrix_ChiI;
}

void CLASSNAME::calculate_MChiI()
{
   const auto mass_matrix_ChiI(get_mass_matrix_ChiI());


#ifdef CHECK_EIGENVALUE_ERROR
   double eigenvalue_error;
   fs_diagonalize_symmetric(mass_matrix_ChiI, MChiI, ZNI,
      eigenvalue_error);
   problems.flag_bad_mass(E6SSMtower_info::ChiI, eigenvalue_error >
      precision * Abs(MChiI(0)));
#else
   fs_diagonalize_symmetric(mass_matrix_ChiI, MChiI, ZNI);
#endif

}

Eigen::Matrix<double,2,2> CLASSNAME::get_mass_matrix_SSI0() const
{
   Eigen::Matrix<double,2,2> mass_matrix_SSI0;

   mass_matrix_SSI0(0,0) = msI2(0,0) - 0.1875*Sqr(gN)*Sqr(vd) + 0.3125*
      Sqr(gN)*Sqr(vs) - 0.125*Sqr(gN)*Sqr(vu);
   mass_matrix_SSI0(0,1) = 0;
   mass_matrix_SSI0(1,1) = msI2(1,1) - 0.1875*Sqr(gN)*Sqr(vd) + 0.3125*
      Sqr(gN)*Sqr(vs) - 0.125*Sqr(gN)*Sqr(vu);

   Symmetrize(mass_matrix_SSI0);

   return mass_matrix_SSI0;
}

void CLASSNAME::calculate_MSSI0()
{
   const auto mass_matrix_SSI0(get_mass_matrix_SSI0());


#ifdef CHECK_EIGENVALUE_ERROR
   double eigenvalue_error;
   fs_diagonalize_hermitian(mass_matrix_SSI0, MSSI0, ZSSI,
      eigenvalue_error);
   problems.flag_bad_mass(E6SSMtower_info::SSI0, eigenvalue_error >
      precision * Abs(MSSI0(0)));
#else
   fs_diagonalize_hermitian(mass_matrix_SSI0, MSSI0, ZSSI);
#endif


   if (MSSI0.minCoeff() < 0.) {
      problems.flag_tachyon(E6SSMtower_info::SSI0);
   }

   MSSI0 = AbsSqrt(MSSI0);
}

Eigen::Matrix<double,2,2> CLASSNAME::get_mass_matrix_FSI() const
{
   Eigen::Matrix<double,2,2> mass_matrix_FSI;

   mass_matrix_FSI(0,0) = 0;
   mass_matrix_FSI(0,1) = 0;
   mass_matrix_FSI(1,1) = 0;

   Symmetrize(mass_matrix_FSI);

   return mass_matrix_FSI;
}

void CLASSNAME::calculate_MFSI()
{
   const auto mass_matrix_FSI(get_mass_matrix_FSI());


#ifdef CHECK_EIGENVALUE_ERROR
   double eigenvalue_error;
   fs_diagonalize_symmetric(mass_matrix_FSI, MFSI, ZFSI, eigenvalue_error
      );
   problems.flag_bad_mass(E6SSMtower_info::FSI, eigenvalue_error >
      precision * Abs(MFSI(0)));
#else
   fs_diagonalize_symmetric(mass_matrix_FSI, MFSI, ZFSI);
#endif

}

Eigen::Matrix<double,2,2> CLASSNAME::get_mass_matrix_SHp0() const
{
   Eigen::Matrix<double,2,2> mass_matrix_SHp0;

   mass_matrix_SHp0(0,0) = mHp2 + AbsSqr(MuPr) + 0.075*Sqr(g1)*Sqr(vd) +
      0.125*Sqr(g2)*Sqr(vd) - 0.075*Sqr(gN)*Sqr(vd) + 0.125*Sqr(gN)*Sqr(vs) -
      0.075*Sqr(g1)*Sqr(vu) - 0.125*Sqr(g2)*Sqr(vu) - 0.05*Sqr(gN)*Sqr(vu);
   mass_matrix_SHp0(0,1) = -Conj(BMuPr);
   mass_matrix_SHp0(1,1) = mHpbar2 + AbsSqr(MuPr) - 0.075*Sqr(g1)*Sqr(vd)
      - 0.125*Sqr(g2)*Sqr(vd) + 0.075*Sqr(gN)*Sqr(vd) - 0.125*Sqr(gN)*Sqr(vs)
      + 0.075*Sqr(g1)*Sqr(vu) + 0.125*Sqr(g2)*Sqr(vu) + 0.05*Sqr(gN)*Sqr(vu);

   Hermitianize(mass_matrix_SHp0);

   return mass_matrix_SHp0;
}

void CLASSNAME::calculate_MSHp0()
{
   const auto mass_matrix_SHp0(get_mass_matrix_SHp0());


#ifdef CHECK_EIGENVALUE_ERROR
   double eigenvalue_error;
   fs_diagonalize_hermitian(mass_matrix_SHp0, MSHp0, UHp0,
      eigenvalue_error);
   problems.flag_bad_mass(E6SSMtower_info::SHp0, eigenvalue_error >
      precision * Abs(MSHp0(0)));
#else
   fs_diagonalize_hermitian(mass_matrix_SHp0, MSHp0, UHp0);
#endif


   if (MSHp0.minCoeff() < 0.) {
      problems.flag_tachyon(E6SSMtower_info::SHp0);
   }

   MSHp0 = AbsSqrt(MSHp0);
}

Eigen::Matrix<double,2,2> CLASSNAME::get_mass_matrix_SHpp() const
{
   Eigen::Matrix<double,2,2> mass_matrix_SHpp;

   mass_matrix_SHpp(0,0) = mHp2 + AbsSqr(MuPr) + 0.075*Sqr(g1)*Sqr(vd) -
      0.125*Sqr(g2)*Sqr(vd) - 0.075*Sqr(gN)*Sqr(vd) + 0.125*Sqr(gN)*Sqr(vs) -
      0.075*Sqr(g1)*Sqr(vu) + 0.125*Sqr(g2)*Sqr(vu) - 0.05*Sqr(gN)*Sqr(vu);
   mass_matrix_SHpp(0,1) = Conj(BMuPr);
   mass_matrix_SHpp(1,1) = mHpbar2 + AbsSqr(MuPr) - 0.075*Sqr(g1)*Sqr(vd)
      + 0.125*Sqr(g2)*Sqr(vd) + 0.075*Sqr(gN)*Sqr(vd) - 0.125*Sqr(gN)*Sqr(vs)
      + 0.075*Sqr(g1)*Sqr(vu) - 0.125*Sqr(g2)*Sqr(vu) + 0.05*Sqr(gN)*Sqr(vu);

   Hermitianize(mass_matrix_SHpp);

   return mass_matrix_SHpp;
}

void CLASSNAME::calculate_MSHpp()
{
   const auto mass_matrix_SHpp(get_mass_matrix_SHpp());


#ifdef CHECK_EIGENVALUE_ERROR
   double eigenvalue_error;
   fs_diagonalize_hermitian(mass_matrix_SHpp, MSHpp, UHpp,
      eigenvalue_error);
   problems.flag_bad_mass(E6SSMtower_info::SHpp, eigenvalue_error >
      precision * Abs(MSHpp(0)));
#else
   fs_diagonalize_hermitian(mass_matrix_SHpp, MSHpp, UHpp);
#endif


   if (MSHpp.minCoeff() < 0.) {
      problems.flag_tachyon(E6SSMtower_info::SHpp);
   }

   MSHpp = AbsSqrt(MSHpp);
}

Eigen::Matrix<double,2,2> CLASSNAME::get_mass_matrix_ChiP() const
{
   Eigen::Matrix<double,2,2> mass_matrix_ChiP;

   mass_matrix_ChiP(0,0) = 0;
   mass_matrix_ChiP(0,1) = -MuPr;
   mass_matrix_ChiP(1,1) = 0;

   Symmetrize(mass_matrix_ChiP);

   return mass_matrix_ChiP;
}

void CLASSNAME::calculate_MChiP()
{
   const auto mass_matrix_ChiP(get_mass_matrix_ChiP());


#ifdef CHECK_EIGENVALUE_ERROR
   double eigenvalue_error;
   fs_diagonalize_symmetric(mass_matrix_ChiP, MChiP, ZNp,
      eigenvalue_error);
   problems.flag_bad_mass(E6SSMtower_info::ChiP, eigenvalue_error >
      precision * Abs(MChiP(0)));
#else
   fs_diagonalize_symmetric(mass_matrix_ChiP, MChiP, ZNp);
#endif

}

double CLASSNAME::get_mass_matrix_VWm() const
{
   const double mass_matrix_VWm = Re(0.25*Sqr(g2)*(Sqr(vd) + Sqr(vu)));

   return mass_matrix_VWm;
}

void CLASSNAME::calculate_MVWm()
{
   const auto mass_matrix_VWm = get_mass_matrix_VWm();
   MVWm = mass_matrix_VWm;

   if (MVWm < 0.) {
      problems.flag_tachyon(E6SSMtower_info::VWm);
   }

   MVWm = AbsSqrt(MVWm);
}

Eigen::Matrix<double,3,3> CLASSNAME::get_mass_matrix_VPVZVZp() const
{
   Eigen::Matrix<double,3,3> mass_matrix_VPVZVZp;

   mass_matrix_VPVZVZp(0,0) = 0.15*Sqr(g1)*Sqr(vd) + 0.15*Sqr(g1)*Sqr(vu)
      ;
   mass_matrix_VPVZVZp(0,1) = -0.19364916731037085*g1*g2*Sqr(vd) -
      0.19364916731037085*g1*g2*Sqr(vu);
   mass_matrix_VPVZVZp(0,2) = 0.18371173070873834*g1*gN*Sqr(vd) -
      0.1224744871391589*g1*gN*Sqr(vu);
   mass_matrix_VPVZVZp(1,1) = 0.25*Sqr(g2)*Sqr(vd) + 0.25*Sqr(g2)*Sqr(vu)
      ;
   mass_matrix_VPVZVZp(1,2) = -0.23717082451262844*g2*gN*Sqr(vd) +
      0.15811388300841897*g2*gN*Sqr(vu);
   mass_matrix_VPVZVZp(2,2) = 0.225*Sqr(gN)*Sqr(vd) + 0.625*Sqr(gN)*Sqr(
      vs) + 0.1*Sqr(gN)*Sqr(vu);

   Symmetrize(mass_matrix_VPVZVZp);

   return mass_matrix_VPVZVZp;
}

void CLASSNAME::calculate_MVPVZVZp()
{
   const auto mass_matrix_VPVZVZp(get_mass_matrix_VPVZVZp());
   Eigen::Array<double,3,1> MVPVZVZp;


#ifdef CHECK_EIGENVALUE_ERROR
   double eigenvalue_error;
   fs_diagonalize_hermitian(mass_matrix_VPVZVZp, MVPVZVZp, ZZ,
      eigenvalue_error);
   ZZ.transposeInPlace();
#else
   fs_diagonalize_hermitian(mass_matrix_VPVZVZp, MVPVZVZp, ZZ);
   ZZ.transposeInPlace();
#endif


   MVPVZVZp = AbsSqrt(MVPVZVZp);

   MVP = 0.;
   MVZ = MVPVZVZp(1);
   MVZp = MVPVZVZp(2);
}


double CLASSNAME::get_ewsb_eq_hh_1() const
{
   double result = Re(mHd2*vd - 0.35355339059327373*vs*vu*Conj(TLambdax) +
      0.075*Power(vd,3)*Sqr(g1) + 0.125*Power(vd,3)*Sqr(g2) + 0.1125*Power(vd,3)*
      Sqr(gN) + 0.5*vd*AbsSqr(Lambdax)*Sqr(vs) - 0.1875*vd*Sqr(gN)*Sqr(vs) + 0.5*
      vd*AbsSqr(Lambdax)*Sqr(vu) - 0.075*vd*Sqr(g1)*Sqr(vu) - 0.125*vd*Sqr(g2)*Sqr
      (vu) + 0.075*vd*Sqr(gN)*Sqr(vu) - 0.35355339059327373*vs*vu*TLambdax);

   return result;
}

double CLASSNAME::get_ewsb_eq_hh_2() const
{
   double result = Re(mHu2*vu - 0.35355339059327373*vd*vs*Conj(TLambdax) +
      0.075*Power(vu,3)*Sqr(g1) + 0.125*Power(vu,3)*Sqr(g2) + 0.05*Power(vu,3)*Sqr
      (gN) + 0.5*vu*AbsSqr(Lambdax)*Sqr(vd) - 0.075*vu*Sqr(g1)*Sqr(vd) - 0.125*vu*
      Sqr(g2)*Sqr(vd) + 0.075*vu*Sqr(gN)*Sqr(vd) + 0.5*vu*AbsSqr(Lambdax)*Sqr(vs)
      - 0.125*vu*Sqr(gN)*Sqr(vs) - 0.35355339059327373*vd*vs*TLambdax);

   return result;
}

double CLASSNAME::get_ewsb_eq_hh_3() const
{
   double result = Re(ms2*vs - 0.35355339059327373*vd*vu*Conj(TLambdax) +
      0.3125*Power(vs,3)*Sqr(gN) + 0.5*vs*AbsSqr(Lambdax)*Sqr(vd) - 0.1875*vs*Sqr(
      gN)*Sqr(vd) + 0.5*vs*AbsSqr(Lambdax)*Sqr(vu) - 0.125*vs*Sqr(gN)*Sqr(vu) -
      0.35355339059327373*vd*vu*TLambdax);

   return result;
}



std::complex<double> CLASSNAME::CpUSdconjUSdVZVZ(unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   std::complex<double> tmp_0;
   std::complex<double> tmp_1;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_0 += tmp_1;
   result += (0.13333333333333333*Sqr(g1)*Sqr(Cos(ThetaWp()))*Sqr(Sin(ThetaW())
      )) * tmp_0;
   std::complex<double> tmp_2;
   std::complex<double> tmp_3;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_3 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_2 += tmp_3;
   result += (-0.32659863237109044*g1*gN*Cos(ThetaWp())*Sin(ThetaW())*Sin(
      ThetaWp())) * tmp_2;
   std::complex<double> tmp_4;
   std::complex<double> tmp_5;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_5 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_4 += tmp_5;
   result += (0.2*Sqr(gN)*Sqr(Sin(ThetaWp()))) * tmp_4;
   if (gO1 < 3) {
      result += 0.5*KroneckerDelta(gO1,gO2)*Sqr(g2)*Sqr(Cos(ThetaW()))*Sqr(
         Cos(ThetaWp()));
   }
   if (gO1 < 3) {
      result += 0.2581988897471611*g1*g2*Cos(ThetaW())*KroneckerDelta(gO1,
         gO2)*Sin(ThetaW())*Sqr(Cos(ThetaWp()));
   }
   if (gO1 < 3) {
      result += 0.03333333333333333*KroneckerDelta(gO1,gO2)*Sqr(g1)*Sqr(Cos(
         ThetaWp()))*Sqr(Sin(ThetaW()));
   }
   if (gO1 < 3) {
      result += -0.08164965809277262*g1*gN*Cos(ThetaWp())*KroneckerDelta(gO1
         ,gO2)*Sin(ThetaW())*Sin(ThetaWp());
   }
   if (gO1 < 3) {
      result += 0.05*KroneckerDelta(gO1,gO2)*Sqr(gN)*Sqr(Sin(ThetaWp()));
   }
   if (gO1 < 3) {
      result += -0.15811388300841897*g2*gN*Cos(ThetaW())*KroneckerDelta(gO1,
         gO2)*Sin(2*ThetaWp());
   }

   return result;
}

std::complex<double> CLASSNAME::CpUSdconjUSdVZpVZp(unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   std::complex<double> tmp_6;
   std::complex<double> tmp_7;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_7 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_6 += tmp_7;
   result += (0.2*Sqr(gN)*Sqr(Cos(ThetaWp()))) * tmp_6;
   std::complex<double> tmp_8;
   std::complex<double> tmp_9;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_9 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_8 += tmp_9;
   result += (0.32659863237109044*g1*gN*Cos(ThetaWp())*Sin(ThetaW())*Sin(
      ThetaWp())) * tmp_8;
   std::complex<double> tmp_10;
   std::complex<double> tmp_11;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_11 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_10 += tmp_11;
   result += (0.13333333333333333*Sqr(g1)*Sqr(Sin(ThetaW()))*Sqr(Sin(ThetaWp())
      )) * tmp_10;
   if (gO1 < 3) {
      result += 0.05*KroneckerDelta(gO1,gO2)*Sqr(gN)*Sqr(Cos(ThetaWp()));
   }
   if (gO1 < 3) {
      result += 0.08164965809277262*g1*gN*Cos(ThetaWp())*KroneckerDelta(gO1,
         gO2)*Sin(ThetaW())*Sin(ThetaWp());
   }
   if (gO1 < 3) {
      result += 0.5*KroneckerDelta(gO1,gO2)*Sqr(g2)*Sqr(Cos(ThetaW()))*Sqr(
         Sin(ThetaWp()));
   }
   if (gO1 < 3) {
      result += 0.2581988897471611*g1*g2*Cos(ThetaW())*KroneckerDelta(gO1,
         gO2)*Sin(ThetaW())*Sqr(Sin(ThetaWp()));
   }
   if (gO1 < 3) {
      result += 0.03333333333333333*KroneckerDelta(gO1,gO2)*Sqr(g1)*Sqr(Sin(
         ThetaW()))*Sqr(Sin(ThetaWp()));
   }
   if (gO1 < 3) {
      result += 0.15811388300841897*g2*gN*Cos(ThetaW())*KroneckerDelta(gO1,
         gO2)*Sin(2*ThetaWp());
   }

   return result;
}

double CLASSNAME::CpUSdconjUSdconjVWmVWm(unsigned gO1, unsigned gO2) const
{
   double result = 0.0;

   if (gO1 < 3) {
      result += 0.5*KroneckerDelta(gO1,gO2)*Sqr(g2);
   }

   return result;
}

std::complex<double> CLASSNAME::CpUSdconjUSdconjHpmHpm(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_12;
   std::complex<double> tmp_13;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_13 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_12 += tmp_13;
   result += (0.1*Sqr(g1)*ZP(gI1,0)*ZP(gI2,0)) * tmp_12;
   std::complex<double> tmp_14;
   std::complex<double> tmp_15;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_15 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_14 += tmp_15;
   result += (0.15*Sqr(gN)*ZP(gI1,0)*ZP(gI2,0)) * tmp_14;
   std::complex<double> tmp_16;
   std::complex<double> tmp_17;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_17 += AbsSqr(Yd(j2,j2))*KroneckerDelta(gO1,3 + j2)*KroneckerDelta(
         gO2,3 + j2);
   }
   tmp_16 += tmp_17;
   result += (-(ZP(gI1,0)*ZP(gI2,0))) * tmp_16;
   if (gO1 < 3) {
      result += 0.05*KroneckerDelta(gO1,gO2)*Sqr(g1)*ZP(gI1,0)*ZP(gI2,0);
   }
   if (gO1 < 3) {
      result += -0.25*KroneckerDelta(gO1,gO2)*Sqr(g2)*ZP(gI1,0)*ZP(gI2,0);
   }
   if (gO1 < 3) {
      result += 0.075*KroneckerDelta(gO1,gO2)*Sqr(gN)*ZP(gI1,0)*ZP(gI2,0);
   }
   std::complex<double> tmp_18;
   std::complex<double> tmp_19;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_19 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_18 += tmp_19;
   result += (-0.1*Sqr(g1)*ZP(gI1,1)*ZP(gI2,1)) * tmp_18;
   std::complex<double> tmp_20;
   std::complex<double> tmp_21;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_21 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_20 += tmp_21;
   result += (0.1*Sqr(gN)*ZP(gI1,1)*ZP(gI2,1)) * tmp_20;
   if (gO1 < 3) {
      result += -0.05*KroneckerDelta(gO1,gO2)*Sqr(g1)*ZP(gI1,1)*ZP(gI2,1);
   }
   if (gO1 < 3) {
      result += 0.25*KroneckerDelta(gO1,gO2)*Sqr(g2)*ZP(gI1,1)*ZP(gI2,1);
   }
   if (gO1 < 3) {
      result += 0.05*KroneckerDelta(gO1,gO2)*Sqr(gN)*ZP(gI1,1)*ZP(gI2,1);
   }
   if (gO1 < 3) {
      result += -(AbsSqr(Yu(gO1,gO1))*KroneckerDelta(gO1,gO2)*ZP(gI1,1)*ZP(
         gI2,1));
   }

   return result;
}

std::complex<double> CLASSNAME::CpUSdconjUSdconjSHp0SHp0(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_22;
   std::complex<double> tmp_23;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_23 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_22 += tmp_23;
   result += (0.1*Conj(UHp0(gI2,0))*Sqr(g1)*UHp0(gI1,0)) * tmp_22;
   std::complex<double> tmp_24;
   std::complex<double> tmp_25;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_25 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_24 += tmp_25;
   result += (-0.1*Conj(UHp0(gI2,0))*Sqr(gN)*UHp0(gI1,0)) * tmp_24;
   if (gO1 < 3) {
      result += 0.05*Conj(UHp0(gI2,0))*KroneckerDelta(gO1,gO2)*Sqr(g1)*UHp0(
         gI1,0);
   }
   if (gO1 < 3) {
      result += 0.25*Conj(UHp0(gI2,0))*KroneckerDelta(gO1,gO2)*Sqr(g2)*UHp0(
         gI1,0);
   }
   if (gO1 < 3) {
      result += -0.05*Conj(UHp0(gI2,0))*KroneckerDelta(gO1,gO2)*Sqr(gN)*UHp0
         (gI1,0);
   }
   std::complex<double> tmp_26;
   std::complex<double> tmp_27;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_27 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_26 += tmp_27;
   result += (-0.1*Conj(UHp0(gI2,1))*Sqr(g1)*UHp0(gI1,1)) * tmp_26;
   std::complex<double> tmp_28;
   std::complex<double> tmp_29;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_29 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_28 += tmp_29;
   result += (0.1*Conj(UHp0(gI2,1))*Sqr(gN)*UHp0(gI1,1)) * tmp_28;
   if (gO1 < 3) {
      result += -0.05*Conj(UHp0(gI2,1))*KroneckerDelta(gO1,gO2)*Sqr(g1)*UHp0
         (gI1,1);
   }
   if (gO1 < 3) {
      result += -0.25*Conj(UHp0(gI2,1))*KroneckerDelta(gO1,gO2)*Sqr(g2)*UHp0
         (gI1,1);
   }
   if (gO1 < 3) {
      result += 0.05*Conj(UHp0(gI2,1))*KroneckerDelta(gO1,gO2)*Sqr(gN)*UHp0(
         gI1,1);
   }

   return result;
}

std::complex<double> CLASSNAME::CpUSdconjUSdconjSHppSHpp(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_30;
   std::complex<double> tmp_31;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_31 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_30 += tmp_31;
   result += (0.1*Conj(UHpp(gI2,0))*Sqr(g1)*UHpp(gI1,0)) * tmp_30;
   std::complex<double> tmp_32;
   std::complex<double> tmp_33;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_33 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_32 += tmp_33;
   result += (-0.1*Conj(UHpp(gI2,0))*Sqr(gN)*UHpp(gI1,0)) * tmp_32;
   if (gO1 < 3) {
      result += 0.05*Conj(UHpp(gI2,0))*KroneckerDelta(gO1,gO2)*Sqr(g1)*UHpp(
         gI1,0);
   }
   if (gO1 < 3) {
      result += -0.25*Conj(UHpp(gI2,0))*KroneckerDelta(gO1,gO2)*Sqr(g2)*UHpp
         (gI1,0);
   }
   if (gO1 < 3) {
      result += -0.05*Conj(UHpp(gI2,0))*KroneckerDelta(gO1,gO2)*Sqr(gN)*UHpp
         (gI1,0);
   }
   std::complex<double> tmp_34;
   std::complex<double> tmp_35;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_35 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_34 += tmp_35;
   result += (-0.1*Conj(UHpp(gI2,1))*Sqr(g1)*UHpp(gI1,1)) * tmp_34;
   std::complex<double> tmp_36;
   std::complex<double> tmp_37;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_37 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_36 += tmp_37;
   result += (0.1*Conj(UHpp(gI2,1))*Sqr(gN)*UHpp(gI1,1)) * tmp_36;
   if (gO1 < 3) {
      result += -0.05*Conj(UHpp(gI2,1))*KroneckerDelta(gO1,gO2)*Sqr(g1)*UHpp
         (gI1,1);
   }
   if (gO1 < 3) {
      result += 0.25*Conj(UHpp(gI2,1))*KroneckerDelta(gO1,gO2)*Sqr(g2)*UHpp(
         gI1,1);
   }
   if (gO1 < 3) {
      result += 0.05*Conj(UHpp(gI2,1))*KroneckerDelta(gO1,gO2)*Sqr(gN)*UHpp(
         gI1,1);
   }

   return result;
}

std::complex<double> CLASSNAME::CpUSdconjUSdconjSSI0SSI0(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_38;
   std::complex<double> tmp_39;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_39 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_38 += tmp_39;
   result += (-0.25*KroneckerDelta(gI1,gI2)*Sqr(gN)) * tmp_38;
   if (gO1 < 3) {
      result += -0.125*KroneckerDelta(gI1,gI2)*KroneckerDelta(gO1,gO2)*Sqr(
         gN);
   }

   return result;
}

std::complex<double> CLASSNAME::CpUSdconjUSdAhAh(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_40;
   std::complex<double> tmp_41;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_41 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_40 += tmp_41;
   result += (0.1*Sqr(g1)*ZA(gI1,0)*ZA(gI2,0)) * tmp_40;
   std::complex<double> tmp_42;
   std::complex<double> tmp_43;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_43 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_42 += tmp_43;
   result += (0.15*Sqr(gN)*ZA(gI1,0)*ZA(gI2,0)) * tmp_42;
   std::complex<double> tmp_44;
   std::complex<double> tmp_45;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_45 += AbsSqr(Yd(j2,j2))*KroneckerDelta(gO1,3 + j2)*KroneckerDelta(
         gO2,3 + j2);
   }
   tmp_44 += tmp_45;
   result += (-(ZA(gI1,0)*ZA(gI2,0))) * tmp_44;
   if (gO1 < 3) {
      result += 0.05*KroneckerDelta(gO1,gO2)*Sqr(g1)*ZA(gI1,0)*ZA(gI2,0);
   }
   if (gO1 < 3) {
      result += 0.25*KroneckerDelta(gO1,gO2)*Sqr(g2)*ZA(gI1,0)*ZA(gI2,0);
   }
   if (gO1 < 3) {
      result += 0.075*KroneckerDelta(gO1,gO2)*Sqr(gN)*ZA(gI1,0)*ZA(gI2,0);
   }
   if (gO1 < 3) {
      result += -(AbsSqr(Yd(gO1,gO1))*KroneckerDelta(gO1,gO2)*ZA(gI1,0)*ZA(
         gI2,0));
   }
   std::complex<double> tmp_46;
   std::complex<double> tmp_47;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_47 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_46 += tmp_47;
   result += (-0.1*Sqr(g1)*ZA(gI1,1)*ZA(gI2,1)) * tmp_46;
   std::complex<double> tmp_48;
   std::complex<double> tmp_49;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_49 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_48 += tmp_49;
   result += (0.1*Sqr(gN)*ZA(gI1,1)*ZA(gI2,1)) * tmp_48;
   if (gO1 < 3) {
      result += -0.05*KroneckerDelta(gO1,gO2)*Sqr(g1)*ZA(gI1,1)*ZA(gI2,1);
   }
   if (gO1 < 3) {
      result += -0.25*KroneckerDelta(gO1,gO2)*Sqr(g2)*ZA(gI1,1)*ZA(gI2,1);
   }
   if (gO1 < 3) {
      result += 0.05*KroneckerDelta(gO1,gO2)*Sqr(gN)*ZA(gI1,1)*ZA(gI2,1);
   }
   if (gO2 < 3) {
      result += -0.5*Conj(Yd(gO2,gO2))*KroneckerDelta(gO1,3 + gO2)*Lambdax*
         ZA(gI1,2)*ZA(gI2,1);
   }
   if (gO1 < 3) {
      result += -0.5*Conj(Lambdax)*KroneckerDelta(3 + gO1,gO2)*Yd(gO1,gO1)*
         ZA(gI1,2)*ZA(gI2,1);
   }
   if (gO2 < 3) {
      result += -0.5*Conj(Yd(gO2,gO2))*KroneckerDelta(gO1,3 + gO2)*Lambdax*
         ZA(gI1,1)*ZA(gI2,2);
   }
   if (gO1 < 3) {
      result += -0.5*Conj(Lambdax)*KroneckerDelta(3 + gO1,gO2)*Yd(gO1,gO1)*
         ZA(gI1,1)*ZA(gI2,2);
   }
   std::complex<double> tmp_50;
   std::complex<double> tmp_51;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_51 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_50 += tmp_51;
   result += (-0.25*Sqr(gN)*ZA(gI1,2)*ZA(gI2,2)) * tmp_50;
   if (gO1 < 3) {
      result += -0.125*KroneckerDelta(gO1,gO2)*Sqr(gN)*ZA(gI1,2)*ZA(gI2,2);
   }

   return result;
}

std::complex<double> CLASSNAME::CpUSdconjUSdconjSvSv(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_52;
   std::complex<double> tmp_53;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_53 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_52 += tmp_53;
   result += (0.1*KroneckerDelta(gI1,gI2)*Sqr(g1)) * tmp_52;
   std::complex<double> tmp_54;
   std::complex<double> tmp_55;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_55 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_54 += tmp_55;
   result += (-0.1*KroneckerDelta(gI1,gI2)*Sqr(gN)) * tmp_54;
   if (gO1 < 3) {
      result += 0.05*KroneckerDelta(gI1,gI2)*KroneckerDelta(gO1,gO2)*Sqr(g1)
         ;
   }
   if (gO1 < 3) {
      result += 0.25*KroneckerDelta(gI1,gI2)*KroneckerDelta(gO1,gO2)*Sqr(g2)
         ;
   }
   if (gO1 < 3) {
      result += -0.05*KroneckerDelta(gI1,gI2)*KroneckerDelta(gO1,gO2)*Sqr(gN
         );
   }

   return result;
}

std::complex<double> CLASSNAME::CpUSdconjUSdhhhh(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_56;
   std::complex<double> tmp_57;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_57 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_56 += tmp_57;
   result += (0.1*Sqr(g1)*ZH(gI1,0)*ZH(gI2,0)) * tmp_56;
   std::complex<double> tmp_58;
   std::complex<double> tmp_59;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_59 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_58 += tmp_59;
   result += (0.15*Sqr(gN)*ZH(gI1,0)*ZH(gI2,0)) * tmp_58;
   std::complex<double> tmp_60;
   std::complex<double> tmp_61;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_61 += AbsSqr(Yd(j2,j2))*KroneckerDelta(gO1,3 + j2)*KroneckerDelta(
         gO2,3 + j2);
   }
   tmp_60 += tmp_61;
   result += (-(ZH(gI1,0)*ZH(gI2,0))) * tmp_60;
   if (gO1 < 3) {
      result += 0.05*KroneckerDelta(gO1,gO2)*Sqr(g1)*ZH(gI1,0)*ZH(gI2,0);
   }
   if (gO1 < 3) {
      result += 0.25*KroneckerDelta(gO1,gO2)*Sqr(g2)*ZH(gI1,0)*ZH(gI2,0);
   }
   if (gO1 < 3) {
      result += 0.075*KroneckerDelta(gO1,gO2)*Sqr(gN)*ZH(gI1,0)*ZH(gI2,0);
   }
   if (gO1 < 3) {
      result += -(AbsSqr(Yd(gO1,gO1))*KroneckerDelta(gO1,gO2)*ZH(gI1,0)*ZH(
         gI2,0));
   }
   std::complex<double> tmp_62;
   std::complex<double> tmp_63;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_63 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_62 += tmp_63;
   result += (-0.1*Sqr(g1)*ZH(gI1,1)*ZH(gI2,1)) * tmp_62;
   std::complex<double> tmp_64;
   std::complex<double> tmp_65;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_65 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_64 += tmp_65;
   result += (0.1*Sqr(gN)*ZH(gI1,1)*ZH(gI2,1)) * tmp_64;
   if (gO1 < 3) {
      result += -0.05*KroneckerDelta(gO1,gO2)*Sqr(g1)*ZH(gI1,1)*ZH(gI2,1);
   }
   if (gO1 < 3) {
      result += -0.25*KroneckerDelta(gO1,gO2)*Sqr(g2)*ZH(gI1,1)*ZH(gI2,1);
   }
   if (gO1 < 3) {
      result += 0.05*KroneckerDelta(gO1,gO2)*Sqr(gN)*ZH(gI1,1)*ZH(gI2,1);
   }
   if (gO2 < 3) {
      result += 0.5*Conj(Yd(gO2,gO2))*KroneckerDelta(gO1,3 + gO2)*Lambdax*ZH
         (gI1,2)*ZH(gI2,1);
   }
   if (gO1 < 3) {
      result += 0.5*Conj(Lambdax)*KroneckerDelta(3 + gO1,gO2)*Yd(gO1,gO1)*ZH
         (gI1,2)*ZH(gI2,1);
   }
   if (gO2 < 3) {
      result += 0.5*Conj(Yd(gO2,gO2))*KroneckerDelta(gO1,3 + gO2)*Lambdax*ZH
         (gI1,1)*ZH(gI2,2);
   }
   if (gO1 < 3) {
      result += 0.5*Conj(Lambdax)*KroneckerDelta(3 + gO1,gO2)*Yd(gO1,gO1)*ZH
         (gI1,1)*ZH(gI2,2);
   }
   std::complex<double> tmp_66;
   std::complex<double> tmp_67;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_67 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_66 += tmp_67;
   result += (-0.25*Sqr(gN)*ZH(gI1,2)*ZH(gI2,2)) * tmp_66;
   if (gO1 < 3) {
      result += -0.125*KroneckerDelta(gO1,gO2)*Sqr(gN)*ZH(gI1,2)*ZH(gI2,2);
   }

   return result;
}

std::complex<double> CLASSNAME::CpconjUSdFuChaPR(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   if (gO2 < 3) {
      result += Conj(Yu(gO2,gO2))*UP(gI2,1)*ZUR(gI1,gO2);
   }

   return result;
}

std::complex<double> CLASSNAME::CpconjUSdFuChaPL(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_68;
   std::complex<double> tmp_69;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_69 += Conj(ZUL(gI1,j1))*KroneckerDelta(gO1,3 + j1)*Yd(j1,j1);
   }
   tmp_68 += tmp_69;
   result += (Conj(UM(gI2,1))) * tmp_68;
   if (gO1 < 3) {
      result += -(g2*Conj(UM(gI2,0))*Conj(ZUL(gI1,gO1)));
   }

   return result;
}

std::complex<double> CLASSNAME::CpconjUSdFdChiPR(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_70;
   std::complex<double> tmp_71;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_71 += KroneckerDelta(gO2,3 + j1)*ZDR(gI1,j1);
   }
   tmp_70 += tmp_71;
   result += (-0.3651483716701107*g1*ZN(gI2,0)) * tmp_70;
   if (gO2 < 3) {
      result += -(Conj(Yd(gO2,gO2))*ZDR(gI1,gO2)*ZN(gI2,2));
   }
   std::complex<double> tmp_72;
   std::complex<double> tmp_73;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_73 += KroneckerDelta(gO2,3 + j1)*ZDR(gI1,j1);
   }
   tmp_72 += tmp_73;
   result += (-0.4472135954999579*gN*ZN(gI2,5)) * tmp_72;

   return result;
}

std::complex<double> CLASSNAME::CpconjUSdFdChiPL(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_74;
   std::complex<double> tmp_75;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_75 += Conj(ZDL(gI1,j1))*KroneckerDelta(gO1,3 + j1)*Yd(j1,j1);
   }
   tmp_74 += tmp_75;
   result += (-Conj(ZN(gI2,2))) * tmp_74;
   if (gO1 < 3) {
      result += -0.18257418583505536*g1*Conj(ZDL(gI1,gO1))*Conj(ZN(gI2,0));
   }
   if (gO1 < 3) {
      result += 0.7071067811865475*g2*Conj(ZDL(gI1,gO1))*Conj(ZN(gI2,1));
   }
   if (gO1 < 3) {
      result += -0.22360679774997896*gN*Conj(ZDL(gI1,gO1))*Conj(ZN(gI2,5));
   }

   return result;
}

std::complex<double> CLASSNAME::CpUSdconjUSdconjSHI0SHI0(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_76;
   std::complex<double> tmp_78;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_78 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_76 += tmp_78;
   std::complex<double> tmp_77;
   std::complex<double> tmp_79;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_79 += Conj(UHI0(gI2,j2))*UHI0(gI1,j2);
   }
   tmp_77 += tmp_79;
   result += (0.05*Sqr(g1)) * tmp_76 * tmp_77;
   std::complex<double> tmp_80;
   std::complex<double> tmp_82;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_82 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_80 += tmp_82;
   std::complex<double> tmp_81;
   std::complex<double> tmp_83;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_83 += Conj(UHI0(gI2,j2))*UHI0(gI1,j2);
   }
   tmp_81 += tmp_83;
   result += (0.075*Sqr(gN)) * tmp_80 * tmp_81;
   std::complex<double> tmp_84;
   std::complex<double> tmp_86;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_86 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_84 += tmp_86;
   std::complex<double> tmp_85;
   std::complex<double> tmp_87;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_87 += Conj(UHI0(gI2,2 + j2))*UHI0(gI1,2 + j2);
   }
   tmp_85 += tmp_87;
   result += (-0.05*Sqr(g1)) * tmp_84 * tmp_85;
   std::complex<double> tmp_88;
   std::complex<double> tmp_90;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_90 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_88 += tmp_90;
   std::complex<double> tmp_89;
   std::complex<double> tmp_91;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_91 += Conj(UHI0(gI2,2 + j2))*UHI0(gI1,2 + j2);
   }
   tmp_89 += tmp_91;
   result += (0.05*Sqr(gN)) * tmp_88 * tmp_89;
   std::complex<double> tmp_92;
   std::complex<double> tmp_94;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_94 += Conj(UHI0(gI2,j1))*UHI0(gI1,j1);
   }
   tmp_92 += tmp_94;
   std::complex<double> tmp_93;
   std::complex<double> tmp_95;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_95 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_93 += tmp_95;
   result += (0.05*Sqr(g1)) * tmp_92 * tmp_93;
   std::complex<double> tmp_96;
   std::complex<double> tmp_98;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_98 += Conj(UHI0(gI2,j1))*UHI0(gI1,j1);
   }
   tmp_96 += tmp_98;
   std::complex<double> tmp_97;
   std::complex<double> tmp_99;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_99 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_97 += tmp_99;
   result += (0.075*Sqr(gN)) * tmp_96 * tmp_97;
   std::complex<double> tmp_100;
   std::complex<double> tmp_102;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_102 += Conj(UHI0(gI2,2 + j1))*UHI0(gI1,2 + j1);
   }
   tmp_100 += tmp_102;
   std::complex<double> tmp_101;
   std::complex<double> tmp_103;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_103 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_101 += tmp_103;
   result += (-0.05*Sqr(g1)) * tmp_100 * tmp_101;
   std::complex<double> tmp_104;
   std::complex<double> tmp_106;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_106 += Conj(UHI0(gI2,2 + j1))*UHI0(gI1,2 + j1);
   }
   tmp_104 += tmp_106;
   std::complex<double> tmp_105;
   std::complex<double> tmp_107;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_107 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_105 += tmp_107;
   result += (0.05*Sqr(gN)) * tmp_104 * tmp_105;
   if (gO1 < 3) {
      std::complex<double> tmp_108;
      std::complex<double> tmp_109;
      for (unsigned j1 = 0; j1 < 2; ++j1) {
         tmp_109 += Conj(UHI0(gI2,j1))*UHI0(gI1,j1);
      }
      tmp_108 += tmp_109;
      result += (0.025*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_108;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_110;
      std::complex<double> tmp_111;
      for (unsigned j1 = 0; j1 < 2; ++j1) {
         tmp_111 += Conj(UHI0(gI2,j1))*UHI0(gI1,j1);
      }
      tmp_110 += tmp_111;
      result += (0.125*KroneckerDelta(gO1,gO2)*Sqr(g2)) * tmp_110;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_112;
      std::complex<double> tmp_113;
      for (unsigned j1 = 0; j1 < 2; ++j1) {
         tmp_113 += Conj(UHI0(gI2,j1))*UHI0(gI1,j1);
      }
      tmp_112 += tmp_113;
      result += (0.0375*KroneckerDelta(gO1,gO2)*Sqr(gN)) * tmp_112;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_114;
      std::complex<double> tmp_115;
      for (unsigned j1 = 0; j1 < 2; ++j1) {
         tmp_115 += Conj(UHI0(gI2,2 + j1))*UHI0(gI1,2 + j1);
      }
      tmp_114 += tmp_115;
      result += (-0.025*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_114;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_116;
      std::complex<double> tmp_117;
      for (unsigned j1 = 0; j1 < 2; ++j1) {
         tmp_117 += Conj(UHI0(gI2,2 + j1))*UHI0(gI1,2 + j1);
      }
      tmp_116 += tmp_117;
      result += (-0.125*KroneckerDelta(gO1,gO2)*Sqr(g2)) * tmp_116;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_118;
      std::complex<double> tmp_119;
      for (unsigned j1 = 0; j1 < 2; ++j1) {
         tmp_119 += Conj(UHI0(gI2,2 + j1))*UHI0(gI1,2 + j1);
      }
      tmp_118 += tmp_119;
      result += (0.025*KroneckerDelta(gO1,gO2)*Sqr(gN)) * tmp_118;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_120;
      std::complex<double> tmp_121;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         tmp_121 += Conj(UHI0(gI2,j2))*UHI0(gI1,j2);
      }
      tmp_120 += tmp_121;
      result += (0.025*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_120;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_122;
      std::complex<double> tmp_123;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         tmp_123 += Conj(UHI0(gI2,j2))*UHI0(gI1,j2);
      }
      tmp_122 += tmp_123;
      result += (0.125*KroneckerDelta(gO1,gO2)*Sqr(g2)) * tmp_122;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_124;
      std::complex<double> tmp_125;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         tmp_125 += Conj(UHI0(gI2,j2))*UHI0(gI1,j2);
      }
      tmp_124 += tmp_125;
      result += (0.0375*KroneckerDelta(gO1,gO2)*Sqr(gN)) * tmp_124;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_126;
      std::complex<double> tmp_127;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         tmp_127 += Conj(UHI0(gI2,2 + j2))*UHI0(gI1,2 + j2);
      }
      tmp_126 += tmp_127;
      result += (-0.025*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_126;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_128;
      std::complex<double> tmp_129;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         tmp_129 += Conj(UHI0(gI2,2 + j2))*UHI0(gI1,2 + j2);
      }
      tmp_128 += tmp_129;
      result += (-0.125*KroneckerDelta(gO1,gO2)*Sqr(g2)) * tmp_128;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_130;
      std::complex<double> tmp_131;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         tmp_131 += Conj(UHI0(gI2,2 + j2))*UHI0(gI1,2 + j2);
      }
      tmp_130 += tmp_131;
      result += (0.025*KroneckerDelta(gO1,gO2)*Sqr(gN)) * tmp_130;
   }

   return result;
}

std::complex<double> CLASSNAME::CpUSdconjUSdconjSHIpSHIp(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_132;
   std::complex<double> tmp_134;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_134 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_132 += tmp_134;
   std::complex<double> tmp_133;
   std::complex<double> tmp_135;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_135 += Conj(UHIp(gI2,j2))*UHIp(gI1,j2);
   }
   tmp_133 += tmp_135;
   result += (0.05*Sqr(g1)) * tmp_132 * tmp_133;
   std::complex<double> tmp_136;
   std::complex<double> tmp_138;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_138 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_136 += tmp_138;
   std::complex<double> tmp_137;
   std::complex<double> tmp_139;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_139 += Conj(UHIp(gI2,j2))*UHIp(gI1,j2);
   }
   tmp_137 += tmp_139;
   result += (0.075*Sqr(gN)) * tmp_136 * tmp_137;
   std::complex<double> tmp_140;
   std::complex<double> tmp_142;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_142 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_140 += tmp_142;
   std::complex<double> tmp_141;
   std::complex<double> tmp_143;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_143 += Conj(UHIp(gI2,2 + j2))*UHIp(gI1,2 + j2);
   }
   tmp_141 += tmp_143;
   result += (-0.05*Sqr(g1)) * tmp_140 * tmp_141;
   std::complex<double> tmp_144;
   std::complex<double> tmp_146;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_146 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_144 += tmp_146;
   std::complex<double> tmp_145;
   std::complex<double> tmp_147;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_147 += Conj(UHIp(gI2,2 + j2))*UHIp(gI1,2 + j2);
   }
   tmp_145 += tmp_147;
   result += (0.05*Sqr(gN)) * tmp_144 * tmp_145;
   std::complex<double> tmp_148;
   std::complex<double> tmp_150;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_150 += Conj(UHIp(gI2,j1))*UHIp(gI1,j1);
   }
   tmp_148 += tmp_150;
   std::complex<double> tmp_149;
   std::complex<double> tmp_151;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_151 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_149 += tmp_151;
   result += (0.05*Sqr(g1)) * tmp_148 * tmp_149;
   std::complex<double> tmp_152;
   std::complex<double> tmp_154;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_154 += Conj(UHIp(gI2,j1))*UHIp(gI1,j1);
   }
   tmp_152 += tmp_154;
   std::complex<double> tmp_153;
   std::complex<double> tmp_155;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_155 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_153 += tmp_155;
   result += (0.075*Sqr(gN)) * tmp_152 * tmp_153;
   std::complex<double> tmp_156;
   std::complex<double> tmp_158;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_158 += Conj(UHIp(gI2,2 + j1))*UHIp(gI1,2 + j1);
   }
   tmp_156 += tmp_158;
   std::complex<double> tmp_157;
   std::complex<double> tmp_159;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_159 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_157 += tmp_159;
   result += (-0.05*Sqr(g1)) * tmp_156 * tmp_157;
   std::complex<double> tmp_160;
   std::complex<double> tmp_162;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_162 += Conj(UHIp(gI2,2 + j1))*UHIp(gI1,2 + j1);
   }
   tmp_160 += tmp_162;
   std::complex<double> tmp_161;
   std::complex<double> tmp_163;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_163 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_161 += tmp_163;
   result += (0.05*Sqr(gN)) * tmp_160 * tmp_161;
   if (gO1 < 3) {
      std::complex<double> tmp_164;
      std::complex<double> tmp_165;
      for (unsigned j1 = 0; j1 < 2; ++j1) {
         tmp_165 += Conj(UHIp(gI2,j1))*UHIp(gI1,j1);
      }
      tmp_164 += tmp_165;
      result += (0.025*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_164;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_166;
      std::complex<double> tmp_167;
      for (unsigned j1 = 0; j1 < 2; ++j1) {
         tmp_167 += Conj(UHIp(gI2,j1))*UHIp(gI1,j1);
      }
      tmp_166 += tmp_167;
      result += (-0.125*KroneckerDelta(gO1,gO2)*Sqr(g2)) * tmp_166;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_168;
      std::complex<double> tmp_169;
      for (unsigned j1 = 0; j1 < 2; ++j1) {
         tmp_169 += Conj(UHIp(gI2,j1))*UHIp(gI1,j1);
      }
      tmp_168 += tmp_169;
      result += (0.0375*KroneckerDelta(gO1,gO2)*Sqr(gN)) * tmp_168;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_170;
      std::complex<double> tmp_171;
      for (unsigned j1 = 0; j1 < 2; ++j1) {
         tmp_171 += Conj(UHIp(gI2,2 + j1))*UHIp(gI1,2 + j1);
      }
      tmp_170 += tmp_171;
      result += (-0.025*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_170;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_172;
      std::complex<double> tmp_173;
      for (unsigned j1 = 0; j1 < 2; ++j1) {
         tmp_173 += Conj(UHIp(gI2,2 + j1))*UHIp(gI1,2 + j1);
      }
      tmp_172 += tmp_173;
      result += (0.125*KroneckerDelta(gO1,gO2)*Sqr(g2)) * tmp_172;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_174;
      std::complex<double> tmp_175;
      for (unsigned j1 = 0; j1 < 2; ++j1) {
         tmp_175 += Conj(UHIp(gI2,2 + j1))*UHIp(gI1,2 + j1);
      }
      tmp_174 += tmp_175;
      result += (0.025*KroneckerDelta(gO1,gO2)*Sqr(gN)) * tmp_174;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_176;
      std::complex<double> tmp_177;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         tmp_177 += Conj(UHIp(gI2,j2))*UHIp(gI1,j2);
      }
      tmp_176 += tmp_177;
      result += (0.025*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_176;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_178;
      std::complex<double> tmp_179;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         tmp_179 += Conj(UHIp(gI2,j2))*UHIp(gI1,j2);
      }
      tmp_178 += tmp_179;
      result += (-0.125*KroneckerDelta(gO1,gO2)*Sqr(g2)) * tmp_178;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_180;
      std::complex<double> tmp_181;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         tmp_181 += Conj(UHIp(gI2,j2))*UHIp(gI1,j2);
      }
      tmp_180 += tmp_181;
      result += (0.0375*KroneckerDelta(gO1,gO2)*Sqr(gN)) * tmp_180;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_182;
      std::complex<double> tmp_183;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         tmp_183 += Conj(UHIp(gI2,2 + j2))*UHIp(gI1,2 + j2);
      }
      tmp_182 += tmp_183;
      result += (-0.025*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_182;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_184;
      std::complex<double> tmp_185;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         tmp_185 += Conj(UHIp(gI2,2 + j2))*UHIp(gI1,2 + j2);
      }
      tmp_184 += tmp_185;
      result += (0.125*KroneckerDelta(gO1,gO2)*Sqr(g2)) * tmp_184;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_186;
      std::complex<double> tmp_187;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         tmp_187 += Conj(UHIp(gI2,2 + j2))*UHIp(gI1,2 + j2);
      }
      tmp_186 += tmp_187;
      result += (0.025*KroneckerDelta(gO1,gO2)*Sqr(gN)) * tmp_186;
   }

   return result;
}

std::complex<double> CLASSNAME::CpUSdconjUSdconjSdSd(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_188;
   std::complex<double> tmp_190;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_190 += KroneckerDelta(gO1,3 + j1)*ZD(gI1,3 + j1);
   }
   tmp_188 += tmp_190;
   std::complex<double> tmp_189;
   std::complex<double> tmp_191;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_191 += Conj(ZD(gI2,3 + j2))*KroneckerDelta(gO2,3 + j2);
   }
   tmp_189 += tmp_191;
   result += (-0.03333333333333333*Sqr(g1)) * tmp_188 * tmp_189;
   std::complex<double> tmp_192;
   std::complex<double> tmp_194;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_194 += KroneckerDelta(gO1,3 + j1)*ZD(gI1,3 + j1);
   }
   tmp_192 += tmp_194;
   std::complex<double> tmp_193;
   std::complex<double> tmp_195;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_195 += Conj(ZD(gI2,3 + j2))*KroneckerDelta(gO2,3 + j2);
   }
   tmp_193 += tmp_195;
   result += (-0.6666666666666666*Sqr(g3)) * tmp_192 * tmp_193;
   std::complex<double> tmp_196;
   std::complex<double> tmp_198;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_198 += KroneckerDelta(gO1,3 + j1)*ZD(gI1,3 + j1);
   }
   tmp_196 += tmp_198;
   std::complex<double> tmp_197;
   std::complex<double> tmp_199;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_199 += Conj(ZD(gI2,3 + j2))*KroneckerDelta(gO2,3 + j2);
   }
   tmp_197 += tmp_199;
   result += (-0.05*Sqr(gN)) * tmp_196 * tmp_197;
   std::complex<double> tmp_200;
   std::complex<double> tmp_202;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_202 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
   }
   tmp_200 += tmp_202;
   std::complex<double> tmp_201;
   std::complex<double> tmp_203;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_203 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_201 += tmp_203;
   result += (-0.05*Sqr(g1)) * tmp_200 * tmp_201;
   std::complex<double> tmp_204;
   std::complex<double> tmp_206;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_206 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
   }
   tmp_204 += tmp_206;
   std::complex<double> tmp_205;
   std::complex<double> tmp_207;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_207 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_205 += tmp_207;
   result += (-0.075*Sqr(gN)) * tmp_204 * tmp_205;
   std::complex<double> tmp_208;
   std::complex<double> tmp_210;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_210 += Conj(ZD(gI2,3 + j1))*ZD(gI1,3 + j1);
   }
   tmp_208 += tmp_210;
   std::complex<double> tmp_209;
   std::complex<double> tmp_211;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_211 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_209 += tmp_211;
   result += (-0.1*Sqr(g1)) * tmp_208 * tmp_209;
   std::complex<double> tmp_212;
   std::complex<double> tmp_214;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_214 += Conj(ZD(gI2,3 + j1))*ZD(gI1,3 + j1);
   }
   tmp_212 += tmp_214;
   std::complex<double> tmp_213;
   std::complex<double> tmp_215;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_215 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_213 += tmp_215;
   result += (-0.15*Sqr(gN)) * tmp_212 * tmp_213;
   std::complex<double> tmp_216;
   std::complex<double> tmp_218;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_218 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_216 += tmp_218;
   std::complex<double> tmp_217;
   std::complex<double> tmp_219;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_219 += Conj(ZD(gI2,j2))*ZD(gI1,j2);
   }
   tmp_217 += tmp_219;
   result += (-0.05*Sqr(g1)) * tmp_216 * tmp_217;
   std::complex<double> tmp_220;
   std::complex<double> tmp_222;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_222 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_220 += tmp_222;
   std::complex<double> tmp_221;
   std::complex<double> tmp_223;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_223 += Conj(ZD(gI2,j2))*ZD(gI1,j2);
   }
   tmp_221 += tmp_223;
   result += (-0.075*Sqr(gN)) * tmp_220 * tmp_221;
   std::complex<double> tmp_224;
   std::complex<double> tmp_226;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_226 += Conj(ZD(gI2,j1))*KroneckerDelta(gO2,3 + j1)*Yd(j1,j1);
   }
   tmp_224 += tmp_226;
   std::complex<double> tmp_225;
   std::complex<double> tmp_227;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_227 += Conj(Yd(j2,j2))*KroneckerDelta(gO1,3 + j2)*ZD(gI1,j2);
   }
   tmp_225 += tmp_227;
   result += (-1) * tmp_224 * tmp_225;
   std::complex<double> tmp_228;
   std::complex<double> tmp_230;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_230 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_228 += tmp_230;
   std::complex<double> tmp_229;
   std::complex<double> tmp_231;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_231 += Conj(ZD(gI2,3 + j2))*ZD(gI1,3 + j2);
   }
   tmp_229 += tmp_231;
   result += (-0.1*Sqr(g1)) * tmp_228 * tmp_229;
   std::complex<double> tmp_232;
   std::complex<double> tmp_234;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_234 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_232 += tmp_234;
   std::complex<double> tmp_233;
   std::complex<double> tmp_235;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_235 += Conj(ZD(gI2,3 + j2))*ZD(gI1,3 + j2);
   }
   tmp_233 += tmp_235;
   result += (-0.15*Sqr(gN)) * tmp_232 * tmp_233;
   std::complex<double> tmp_236;
   std::complex<double> tmp_238;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_238 += Conj(ZD(gI2,3 + j1))*KroneckerDelta(gO2,3 + j1);
   }
   tmp_236 += tmp_238;
   std::complex<double> tmp_237;
   std::complex<double> tmp_239;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_239 += KroneckerDelta(gO1,3 + j2)*ZD(gI1,3 + j2);
   }
   tmp_237 += tmp_239;
   result += (-0.03333333333333333*Sqr(g1)) * tmp_236 * tmp_237;
   std::complex<double> tmp_240;
   std::complex<double> tmp_242;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_242 += Conj(ZD(gI2,3 + j1))*KroneckerDelta(gO2,3 + j1);
   }
   tmp_240 += tmp_242;
   std::complex<double> tmp_241;
   std::complex<double> tmp_243;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_243 += KroneckerDelta(gO1,3 + j2)*ZD(gI1,3 + j2);
   }
   tmp_241 += tmp_243;
   result += (-0.6666666666666666*Sqr(g3)) * tmp_240 * tmp_241;
   std::complex<double> tmp_244;
   std::complex<double> tmp_246;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_246 += Conj(ZD(gI2,3 + j1))*KroneckerDelta(gO2,3 + j1);
   }
   tmp_244 += tmp_246;
   std::complex<double> tmp_245;
   std::complex<double> tmp_247;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_247 += KroneckerDelta(gO1,3 + j2)*ZD(gI1,3 + j2);
   }
   tmp_245 += tmp_247;
   result += (-0.05*Sqr(gN)) * tmp_244 * tmp_245;
   if (gO1 < 3) {
      std::complex<double> tmp_248;
      std::complex<double> tmp_249;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_249 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
      }
      tmp_248 += tmp_249;
      result += (-0.025*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_248;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_250;
      std::complex<double> tmp_251;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_251 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
      }
      tmp_250 += tmp_251;
      result += (-0.375*KroneckerDelta(gO1,gO2)*Sqr(g2)) * tmp_250;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_252;
      std::complex<double> tmp_253;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_253 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
      }
      tmp_252 += tmp_253;
      result += (-0.0375*KroneckerDelta(gO1,gO2)*Sqr(gN)) * tmp_252;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_254;
      std::complex<double> tmp_255;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_255 += Conj(ZD(gI2,3 + j1))*ZD(gI1,3 + j1);
      }
      tmp_254 += tmp_255;
      result += (-0.05*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_254;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_256;
      std::complex<double> tmp_257;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_257 += Conj(ZD(gI2,3 + j1))*ZD(gI1,3 + j1);
      }
      tmp_256 += tmp_257;
      result += (-0.075*KroneckerDelta(gO1,gO2)*Sqr(gN)) * tmp_256;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_258;
      std::complex<double> tmp_259;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_259 += Conj(ZD(gI2,j2))*ZD(gI1,j2);
      }
      tmp_258 += tmp_259;
      result += (-0.025*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_258;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_260;
      std::complex<double> tmp_261;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_261 += Conj(ZD(gI2,j2))*ZD(gI1,j2);
      }
      tmp_260 += tmp_261;
      result += (-0.375*KroneckerDelta(gO1,gO2)*Sqr(g2)) * tmp_260;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_262;
      std::complex<double> tmp_263;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_263 += Conj(ZD(gI2,j2))*ZD(gI1,j2);
      }
      tmp_262 += tmp_263;
      result += (-0.0375*KroneckerDelta(gO1,gO2)*Sqr(gN)) * tmp_262;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_264;
      std::complex<double> tmp_265;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_265 += Conj(ZD(gI2,3 + j2))*ZD(gI1,3 + j2);
      }
      tmp_264 += tmp_265;
      result += (-0.05*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_264;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_266;
      std::complex<double> tmp_267;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_267 += Conj(ZD(gI2,3 + j2))*ZD(gI1,3 + j2);
      }
      tmp_266 += tmp_267;
      result += (-0.075*KroneckerDelta(gO1,gO2)*Sqr(gN)) * tmp_266;
   }
   if (gO2 < 3) {
      std::complex<double> tmp_268;
      std::complex<double> tmp_269;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_269 += KroneckerDelta(gO1,3 + j1)*ZD(gI1,3 + j1);
      }
      tmp_268 += tmp_269;
      result += (-0.016666666666666666*Conj(ZD(gI2,gO2))*Sqr(g1)) * tmp_268;
   }
   if (gO2 < 3) {
      std::complex<double> tmp_270;
      std::complex<double> tmp_271;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_271 += KroneckerDelta(gO1,3 + j1)*ZD(gI1,3 + j1);
      }
      tmp_270 += tmp_271;
      result += (0.6666666666666666*Conj(ZD(gI2,gO2))*Sqr(g3)) * tmp_270;
   }
   if (gO2 < 3) {
      std::complex<double> tmp_272;
      std::complex<double> tmp_273;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_273 += KroneckerDelta(gO1,3 + j1)*ZD(gI1,3 + j1);
      }
      tmp_272 += tmp_273;
      result += (-0.025*Conj(ZD(gI2,gO2))*Sqr(gN)) * tmp_272;
   }
   if (gO2 < 3) {
      std::complex<double> tmp_274;
      std::complex<double> tmp_275;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_275 += Conj(ZD(gI2,j1))*Yd(j1,j1)*ZD(gI1,3 + j1);
      }
      tmp_274 += tmp_275;
      result += (-3*Conj(Yd(gO2,gO2))*KroneckerDelta(gO1,3 + gO2)) * tmp_274
         ;
   }
   if (gO2 < 3) {
      std::complex<double> tmp_276;
      std::complex<double> tmp_277;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_277 += KroneckerDelta(gO1,3 + j2)*ZD(gI1,3 + j2);
      }
      tmp_276 += tmp_277;
      result += (-0.016666666666666666*Conj(ZD(gI2,gO2))*Sqr(g1)) * tmp_276;
   }
   if (gO2 < 3) {
      std::complex<double> tmp_278;
      std::complex<double> tmp_279;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_279 += KroneckerDelta(gO1,3 + j2)*ZD(gI1,3 + j2);
      }
      tmp_278 += tmp_279;
      result += (0.6666666666666666*Conj(ZD(gI2,gO2))*Sqr(g3)) * tmp_278;
   }
   if (gO2 < 3) {
      std::complex<double> tmp_280;
      std::complex<double> tmp_281;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_281 += KroneckerDelta(gO1,3 + j2)*ZD(gI1,3 + j2);
      }
      tmp_280 += tmp_281;
      result += (-0.025*Conj(ZD(gI2,gO2))*Sqr(gN)) * tmp_280;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_282;
      std::complex<double> tmp_283;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_283 += Conj(Yd(j2,j2))*Conj(ZD(gI2,3 + j2))*ZD(gI1,j2);
      }
      tmp_282 += tmp_283;
      result += (-3*KroneckerDelta(3 + gO1,gO2)*Yd(gO1,gO1)) * tmp_282;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_284;
      std::complex<double> tmp_285;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_285 += Conj(ZD(gI2,3 + j1))*KroneckerDelta(gO2,3 + j1);
      }
      tmp_284 += tmp_285;
      result += (-0.016666666666666666*Sqr(g1)*ZD(gI1,gO1)) * tmp_284;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_286;
      std::complex<double> tmp_287;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_287 += Conj(ZD(gI2,3 + j1))*KroneckerDelta(gO2,3 + j1);
      }
      tmp_286 += tmp_287;
      result += (0.6666666666666666*Sqr(g3)*ZD(gI1,gO1)) * tmp_286;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_288;
      std::complex<double> tmp_289;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_289 += Conj(ZD(gI2,3 + j1))*KroneckerDelta(gO2,3 + j1);
      }
      tmp_288 += tmp_289;
      result += (-0.025*Sqr(gN)*ZD(gI1,gO1)) * tmp_288;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_290;
      std::complex<double> tmp_291;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_291 += Conj(ZD(gI2,3 + j2))*KroneckerDelta(gO2,3 + j2);
      }
      tmp_290 += tmp_291;
      result += (-0.016666666666666666*Sqr(g1)*ZD(gI1,gO1)) * tmp_290;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_292;
      std::complex<double> tmp_293;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_293 += Conj(ZD(gI2,3 + j2))*KroneckerDelta(gO2,3 + j2);
      }
      tmp_292 += tmp_293;
      result += (0.6666666666666666*Sqr(g3)*ZD(gI1,gO1)) * tmp_292;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_294;
      std::complex<double> tmp_295;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_295 += Conj(ZD(gI2,3 + j2))*KroneckerDelta(gO2,3 + j2);
      }
      tmp_294 += tmp_295;
      result += (-0.025*Sqr(gN)*ZD(gI1,gO1)) * tmp_294;
   }
   if (gO1 < 3 && gO2 < 3) {
      result += -0.016666666666666666*Conj(ZD(gI2,gO2))*Sqr(g1)*ZD(gI1,gO1);
   }
   if (gO1 < 3 && gO2 < 3) {
      result += -0.25*Conj(ZD(gI2,gO2))*Sqr(g2)*ZD(gI1,gO1);
   }
   if (gO1 < 3 && gO2 < 3) {
      result += -1.3333333333333333*Conj(ZD(gI2,gO2))*Sqr(g3)*ZD(gI1,gO1);
   }
   if (gO1 < 3 && gO2 < 3) {
      result += -0.025*Conj(ZD(gI2,gO2))*Sqr(gN)*ZD(gI1,gO1);
   }
   if (gO1 < 3 && gO2 < 3) {
      result += -(Conj(Yd(gO2,gO2))*Conj(ZD(gI2,3 + gO2))*Yd(gO1,gO1)*ZD(gI1
         ,3 + gO1));
   }

   return result;
}

std::complex<double> CLASSNAME::CpUSdconjUSdconjSDXSDX(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_296;
   std::complex<double> tmp_298;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_298 += Conj(ZDX(gI2,j1))*ZDX(gI1,j1);
   }
   tmp_296 += tmp_298;
   std::complex<double> tmp_297;
   std::complex<double> tmp_299;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_299 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_297 += tmp_299;
   result += (0.1*Sqr(g1)) * tmp_296 * tmp_297;
   std::complex<double> tmp_300;
   std::complex<double> tmp_302;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_302 += Conj(ZDX(gI2,j1))*ZDX(gI1,j1);
   }
   tmp_300 += tmp_302;
   std::complex<double> tmp_301;
   std::complex<double> tmp_303;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_303 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_301 += tmp_303;
   result += (0.15*Sqr(gN)) * tmp_300 * tmp_301;
   std::complex<double> tmp_304;
   std::complex<double> tmp_306;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_306 += Conj(ZDX(gI2,3 + j1))*ZDX(gI1,3 + j1);
   }
   tmp_304 += tmp_306;
   std::complex<double> tmp_305;
   std::complex<double> tmp_307;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_307 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_305 += tmp_307;
   result += (-0.1*Sqr(g1)) * tmp_304 * tmp_305;
   std::complex<double> tmp_308;
   std::complex<double> tmp_310;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_310 += Conj(ZDX(gI2,3 + j1))*ZDX(gI1,3 + j1);
   }
   tmp_308 += tmp_310;
   std::complex<double> tmp_309;
   std::complex<double> tmp_311;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_311 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_309 += tmp_311;
   result += (0.225*Sqr(gN)) * tmp_308 * tmp_309;
   std::complex<double> tmp_312;
   std::complex<double> tmp_314;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_314 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_312 += tmp_314;
   std::complex<double> tmp_313;
   std::complex<double> tmp_315;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_315 += Conj(ZDX(gI2,j2))*ZDX(gI1,j2);
   }
   tmp_313 += tmp_315;
   result += (0.1*Sqr(g1)) * tmp_312 * tmp_313;
   std::complex<double> tmp_316;
   std::complex<double> tmp_318;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_318 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_316 += tmp_318;
   std::complex<double> tmp_317;
   std::complex<double> tmp_319;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_319 += Conj(ZDX(gI2,j2))*ZDX(gI1,j2);
   }
   tmp_317 += tmp_319;
   result += (0.15*Sqr(gN)) * tmp_316 * tmp_317;
   std::complex<double> tmp_320;
   std::complex<double> tmp_322;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_322 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_320 += tmp_322;
   std::complex<double> tmp_321;
   std::complex<double> tmp_323;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_323 += Conj(ZDX(gI2,3 + j2))*ZDX(gI1,3 + j2);
   }
   tmp_321 += tmp_323;
   result += (-0.1*Sqr(g1)) * tmp_320 * tmp_321;
   std::complex<double> tmp_324;
   std::complex<double> tmp_326;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_326 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_324 += tmp_326;
   std::complex<double> tmp_325;
   std::complex<double> tmp_327;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_327 += Conj(ZDX(gI2,3 + j2))*ZDX(gI1,3 + j2);
   }
   tmp_325 += tmp_327;
   result += (0.225*Sqr(gN)) * tmp_324 * tmp_325;
   if (gO1 < 3) {
      std::complex<double> tmp_328;
      std::complex<double> tmp_329;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_329 += Conj(ZDX(gI2,j1))*ZDX(gI1,j1);
      }
      tmp_328 += tmp_329;
      result += (0.05*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_328;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_330;
      std::complex<double> tmp_331;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_331 += Conj(ZDX(gI2,j1))*ZDX(gI1,j1);
      }
      tmp_330 += tmp_331;
      result += (0.075*KroneckerDelta(gO1,gO2)*Sqr(gN)) * tmp_330;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_332;
      std::complex<double> tmp_333;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_333 += Conj(ZDX(gI2,3 + j1))*ZDX(gI1,3 + j1);
      }
      tmp_332 += tmp_333;
      result += (-0.05*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_332;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_334;
      std::complex<double> tmp_335;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_335 += Conj(ZDX(gI2,3 + j1))*ZDX(gI1,3 + j1);
      }
      tmp_334 += tmp_335;
      result += (0.1125*KroneckerDelta(gO1,gO2)*Sqr(gN)) * tmp_334;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_336;
      std::complex<double> tmp_337;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_337 += Conj(ZDX(gI2,j2))*ZDX(gI1,j2);
      }
      tmp_336 += tmp_337;
      result += (0.05*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_336;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_338;
      std::complex<double> tmp_339;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_339 += Conj(ZDX(gI2,j2))*ZDX(gI1,j2);
      }
      tmp_338 += tmp_339;
      result += (0.075*KroneckerDelta(gO1,gO2)*Sqr(gN)) * tmp_338;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_340;
      std::complex<double> tmp_341;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_341 += Conj(ZDX(gI2,3 + j2))*ZDX(gI1,3 + j2);
      }
      tmp_340 += tmp_341;
      result += (-0.05*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_340;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_342;
      std::complex<double> tmp_343;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_343 += Conj(ZDX(gI2,3 + j2))*ZDX(gI1,3 + j2);
      }
      tmp_342 += tmp_343;
      result += (0.1125*KroneckerDelta(gO1,gO2)*Sqr(gN)) * tmp_342;
   }

   return result;
}

std::complex<double> CLASSNAME::CpUSdconjUSdconjSeSe(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_344;
   std::complex<double> tmp_346;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_346 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
   }
   tmp_344 += tmp_346;
   std::complex<double> tmp_345;
   std::complex<double> tmp_347;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_347 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_345 += tmp_347;
   result += (0.05*Sqr(g1)) * tmp_344 * tmp_345;
   std::complex<double> tmp_348;
   std::complex<double> tmp_350;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_350 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
   }
   tmp_348 += tmp_350;
   std::complex<double> tmp_349;
   std::complex<double> tmp_351;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_351 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_349 += tmp_351;
   result += (-0.05*Sqr(gN)) * tmp_348 * tmp_349;
   std::complex<double> tmp_352;
   std::complex<double> tmp_354;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_354 += Conj(ZE(gI2,3 + j1))*ZE(gI1,3 + j1);
   }
   tmp_352 += tmp_354;
   std::complex<double> tmp_353;
   std::complex<double> tmp_355;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_355 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_353 += tmp_355;
   result += (-0.1*Sqr(g1)) * tmp_352 * tmp_353;
   std::complex<double> tmp_356;
   std::complex<double> tmp_358;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_358 += Conj(ZE(gI2,3 + j1))*ZE(gI1,3 + j1);
   }
   tmp_356 += tmp_358;
   std::complex<double> tmp_357;
   std::complex<double> tmp_359;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_359 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_357 += tmp_359;
   result += (-0.025*Sqr(gN)) * tmp_356 * tmp_357;
   std::complex<double> tmp_360;
   std::complex<double> tmp_362;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_362 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_360 += tmp_362;
   std::complex<double> tmp_361;
   std::complex<double> tmp_363;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_363 += Conj(ZE(gI2,j2))*ZE(gI1,j2);
   }
   tmp_361 += tmp_363;
   result += (0.05*Sqr(g1)) * tmp_360 * tmp_361;
   std::complex<double> tmp_364;
   std::complex<double> tmp_366;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_366 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_364 += tmp_366;
   std::complex<double> tmp_365;
   std::complex<double> tmp_367;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_367 += Conj(ZE(gI2,j2))*ZE(gI1,j2);
   }
   tmp_365 += tmp_367;
   result += (-0.05*Sqr(gN)) * tmp_364 * tmp_365;
   std::complex<double> tmp_368;
   std::complex<double> tmp_370;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_370 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_368 += tmp_370;
   std::complex<double> tmp_369;
   std::complex<double> tmp_371;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_371 += Conj(ZE(gI2,3 + j2))*ZE(gI1,3 + j2);
   }
   tmp_369 += tmp_371;
   result += (-0.1*Sqr(g1)) * tmp_368 * tmp_369;
   std::complex<double> tmp_372;
   std::complex<double> tmp_374;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_374 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_372 += tmp_374;
   std::complex<double> tmp_373;
   std::complex<double> tmp_375;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_375 += Conj(ZE(gI2,3 + j2))*ZE(gI1,3 + j2);
   }
   tmp_373 += tmp_375;
   result += (-0.025*Sqr(gN)) * tmp_372 * tmp_373;
   if (gO1 < 3) {
      std::complex<double> tmp_376;
      std::complex<double> tmp_377;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_377 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
      }
      tmp_376 += tmp_377;
      result += (0.025*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_376;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_378;
      std::complex<double> tmp_379;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_379 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
      }
      tmp_378 += tmp_379;
      result += (-0.125*KroneckerDelta(gO1,gO2)*Sqr(g2)) * tmp_378;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_380;
      std::complex<double> tmp_381;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_381 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
      }
      tmp_380 += tmp_381;
      result += (-0.025*KroneckerDelta(gO1,gO2)*Sqr(gN)) * tmp_380;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_382;
      std::complex<double> tmp_383;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_383 += Conj(ZE(gI2,3 + j1))*ZE(gI1,3 + j1);
      }
      tmp_382 += tmp_383;
      result += (-0.05*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_382;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_384;
      std::complex<double> tmp_385;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_385 += Conj(ZE(gI2,3 + j1))*ZE(gI1,3 + j1);
      }
      tmp_384 += tmp_385;
      result += (-0.0125*KroneckerDelta(gO1,gO2)*Sqr(gN)) * tmp_384;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_386;
      std::complex<double> tmp_387;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_387 += Conj(ZE(gI2,j2))*ZE(gI1,j2);
      }
      tmp_386 += tmp_387;
      result += (0.025*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_386;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_388;
      std::complex<double> tmp_389;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_389 += Conj(ZE(gI2,j2))*ZE(gI1,j2);
      }
      tmp_388 += tmp_389;
      result += (-0.125*KroneckerDelta(gO1,gO2)*Sqr(g2)) * tmp_388;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_390;
      std::complex<double> tmp_391;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_391 += Conj(ZE(gI2,j2))*ZE(gI1,j2);
      }
      tmp_390 += tmp_391;
      result += (-0.025*KroneckerDelta(gO1,gO2)*Sqr(gN)) * tmp_390;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_392;
      std::complex<double> tmp_393;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_393 += Conj(ZE(gI2,3 + j2))*ZE(gI1,3 + j2);
      }
      tmp_392 += tmp_393;
      result += (-0.05*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_392;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_394;
      std::complex<double> tmp_395;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_395 += Conj(ZE(gI2,3 + j2))*ZE(gI1,3 + j2);
      }
      tmp_394 += tmp_395;
      result += (-0.0125*KroneckerDelta(gO1,gO2)*Sqr(gN)) * tmp_394;
   }
   if (gO2 < 3) {
      std::complex<double> tmp_396;
      std::complex<double> tmp_397;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_397 += Conj(ZE(gI2,j1))*Ye(j1,j1)*ZE(gI1,3 + j1);
      }
      tmp_396 += tmp_397;
      result += (-(Conj(Yd(gO2,gO2))*KroneckerDelta(gO1,3 + gO2))) * tmp_396
         ;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_398;
      std::complex<double> tmp_399;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_399 += Conj(Ye(j2,j2))*Conj(ZE(gI2,3 + j2))*ZE(gI1,j2);
      }
      tmp_398 += tmp_399;
      result += (-(KroneckerDelta(3 + gO1,gO2)*Yd(gO1,gO1))) * tmp_398;
   }

   return result;
}

std::complex<double> CLASSNAME::CpUSdconjUSdconjSuSu(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_400;
   std::complex<double> tmp_402;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_402 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
   }
   tmp_400 += tmp_402;
   std::complex<double> tmp_401;
   std::complex<double> tmp_403;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_403 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_401 += tmp_403;
   result += (-0.05*Sqr(g1)) * tmp_400 * tmp_401;
   std::complex<double> tmp_404;
   std::complex<double> tmp_406;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_406 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
   }
   tmp_404 += tmp_406;
   std::complex<double> tmp_405;
   std::complex<double> tmp_407;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_407 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_405 += tmp_407;
   result += (-0.075*Sqr(gN)) * tmp_404 * tmp_405;
   std::complex<double> tmp_408;
   std::complex<double> tmp_410;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_410 += Conj(ZU(gI2,3 + j1))*ZU(gI1,3 + j1);
   }
   tmp_408 += tmp_410;
   std::complex<double> tmp_409;
   std::complex<double> tmp_411;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_411 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_409 += tmp_411;
   result += (0.2*Sqr(g1)) * tmp_408 * tmp_409;
   std::complex<double> tmp_412;
   std::complex<double> tmp_414;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_414 += Conj(ZU(gI2,3 + j1))*ZU(gI1,3 + j1);
   }
   tmp_412 += tmp_414;
   std::complex<double> tmp_413;
   std::complex<double> tmp_415;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_415 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_413 += tmp_415;
   result += (-0.075*Sqr(gN)) * tmp_412 * tmp_413;
   std::complex<double> tmp_416;
   std::complex<double> tmp_418;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_418 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_416 += tmp_418;
   std::complex<double> tmp_417;
   std::complex<double> tmp_419;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_419 += Conj(ZU(gI2,j2))*ZU(gI1,j2);
   }
   tmp_417 += tmp_419;
   result += (-0.05*Sqr(g1)) * tmp_416 * tmp_417;
   std::complex<double> tmp_420;
   std::complex<double> tmp_422;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_422 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_420 += tmp_422;
   std::complex<double> tmp_421;
   std::complex<double> tmp_423;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_423 += Conj(ZU(gI2,j2))*ZU(gI1,j2);
   }
   tmp_421 += tmp_423;
   result += (-0.075*Sqr(gN)) * tmp_420 * tmp_421;
   std::complex<double> tmp_424;
   std::complex<double> tmp_426;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_426 += Conj(ZU(gI2,j1))*KroneckerDelta(gO2,3 + j1)*Yd(j1,j1);
   }
   tmp_424 += tmp_426;
   std::complex<double> tmp_425;
   std::complex<double> tmp_427;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_427 += Conj(Yd(j2,j2))*KroneckerDelta(gO1,3 + j2)*ZU(gI1,j2);
   }
   tmp_425 += tmp_427;
   result += (-1) * tmp_424 * tmp_425;
   std::complex<double> tmp_428;
   std::complex<double> tmp_430;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_430 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_428 += tmp_430;
   std::complex<double> tmp_429;
   std::complex<double> tmp_431;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_431 += Conj(ZU(gI2,3 + j2))*ZU(gI1,3 + j2);
   }
   tmp_429 += tmp_431;
   result += (0.2*Sqr(g1)) * tmp_428 * tmp_429;
   std::complex<double> tmp_432;
   std::complex<double> tmp_434;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_434 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_432 += tmp_434;
   std::complex<double> tmp_433;
   std::complex<double> tmp_435;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_435 += Conj(ZU(gI2,3 + j2))*ZU(gI1,3 + j2);
   }
   tmp_433 += tmp_435;
   result += (-0.075*Sqr(gN)) * tmp_432 * tmp_433;
   if (gO1 < 3) {
      std::complex<double> tmp_436;
      std::complex<double> tmp_437;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_437 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
      }
      tmp_436 += tmp_437;
      result += (-0.025*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_436;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_438;
      std::complex<double> tmp_439;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_439 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
      }
      tmp_438 += tmp_439;
      result += (0.375*KroneckerDelta(gO1,gO2)*Sqr(g2)) * tmp_438;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_440;
      std::complex<double> tmp_441;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_441 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
      }
      tmp_440 += tmp_441;
      result += (-0.0375*KroneckerDelta(gO1,gO2)*Sqr(gN)) * tmp_440;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_442;
      std::complex<double> tmp_443;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_443 += Conj(ZU(gI2,3 + j1))*ZU(gI1,3 + j1);
      }
      tmp_442 += tmp_443;
      result += (0.1*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_442;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_444;
      std::complex<double> tmp_445;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_445 += Conj(ZU(gI2,3 + j1))*ZU(gI1,3 + j1);
      }
      tmp_444 += tmp_445;
      result += (-0.0375*KroneckerDelta(gO1,gO2)*Sqr(gN)) * tmp_444;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_446;
      std::complex<double> tmp_447;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_447 += Conj(ZU(gI2,j2))*ZU(gI1,j2);
      }
      tmp_446 += tmp_447;
      result += (-0.025*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_446;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_448;
      std::complex<double> tmp_449;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_449 += Conj(ZU(gI2,j2))*ZU(gI1,j2);
      }
      tmp_448 += tmp_449;
      result += (0.375*KroneckerDelta(gO1,gO2)*Sqr(g2)) * tmp_448;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_450;
      std::complex<double> tmp_451;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_451 += Conj(ZU(gI2,j2))*ZU(gI1,j2);
      }
      tmp_450 += tmp_451;
      result += (-0.0375*KroneckerDelta(gO1,gO2)*Sqr(gN)) * tmp_450;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_452;
      std::complex<double> tmp_453;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_453 += Conj(ZU(gI2,3 + j2))*ZU(gI1,3 + j2);
      }
      tmp_452 += tmp_453;
      result += (0.1*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_452;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_454;
      std::complex<double> tmp_455;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_455 += Conj(ZU(gI2,3 + j2))*ZU(gI1,3 + j2);
      }
      tmp_454 += tmp_455;
      result += (-0.0375*KroneckerDelta(gO1,gO2)*Sqr(gN)) * tmp_454;
   }
   if (gO1 < 3 && gO2 < 3) {
      result += -0.5*Conj(ZU(gI2,gO2))*Sqr(g2)*ZU(gI1,gO1);
   }
   if (gO1 < 3 && gO2 < 3) {
      result += -(Conj(Yu(gO2,gO2))*Conj(ZU(gI2,3 + gO2))*Yu(gO1,gO1)*ZU(gI1
         ,3 + gO1));
   }

   return result;
}

std::complex<double> CLASSNAME::CpconjUSdSuHpm(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_456;
   std::complex<double> tmp_457;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_457 += Conj(ZU(gI1,j1))*KroneckerDelta(gO2,3 + j1)*TYd(j1,j1);
   }
   tmp_456 += tmp_457;
   result += (ZP(gI2,0)) * tmp_456;
   std::complex<double> tmp_458;
   std::complex<double> tmp_459;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_459 += Conj(Yu(j2,j2))*Conj(ZU(gI1,3 + j2))*KroneckerDelta(gO2,3 +
         j2)*Yd(j2,j2);
   }
   tmp_458 += tmp_459;
   result += (0.7071067811865475*vu*ZP(gI2,0)) * tmp_458;
   if (gO2 < 3) {
      result += -0.35355339059327373*vd*Conj(ZU(gI1,gO2))*Sqr(g2)*ZP(gI2,0);
   }
   if (gO2 < 3) {
      result += 0.7071067811865475*vs*Conj(Yu(gO2,gO2))*Conj(ZU(gI1,3 + gO2)
         )*Lambdax*ZP(gI2,0);
   }
   if (gO2 < 3) {
      result += 0.7071067811865475*vd*AbsSqr(Yd(gO2,gO2))*Conj(ZU(gI1,gO2))*
         ZP(gI2,0);
   }
   std::complex<double> tmp_460;
   std::complex<double> tmp_461;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_461 += Conj(ZU(gI1,j1))*KroneckerDelta(gO2,3 + j1)*Yd(j1,j1);
   }
   tmp_460 += tmp_461;
   result += (0.7071067811865475*vs*Conj(Lambdax)*ZP(gI2,1)) * tmp_460;
   std::complex<double> tmp_462;
   std::complex<double> tmp_463;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_463 += Conj(Yu(j2,j2))*Conj(ZU(gI1,3 + j2))*KroneckerDelta(gO2,3 +
         j2)*Yd(j2,j2);
   }
   tmp_462 += tmp_463;
   result += (0.7071067811865475*vd*ZP(gI2,1)) * tmp_462;
   if (gO2 < 3) {
      result += -0.35355339059327373*vu*Conj(ZU(gI1,gO2))*Sqr(g2)*ZP(gI2,1);
   }
   if (gO2 < 3) {
      result += Conj(ZU(gI1,3 + gO2))*Conj(TYu(gO2,gO2))*ZP(gI2,1);
   }
   if (gO2 < 3) {
      result += 0.7071067811865475*vu*AbsSqr(Yu(gO2,gO2))*Conj(ZU(gI1,gO2))*
         ZP(gI2,1);
   }

   return result;
}

std::complex<double> CLASSNAME::CpconjUSdSdAh(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_464;
   std::complex<double> tmp_465;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_465 += Conj(ZD(gI1,j1))*KroneckerDelta(gO2,3 + j1)*TYd(j1,j1);
   }
   tmp_464 += tmp_465;
   result += (std::complex<double>(0.,-0.7071067811865475)*ZA(gI2,0)) * tmp_464
      ;
   if (gO2 < 3) {
      result += std::complex<double>(0.,0.7071067811865475)*Conj(ZD(gI1,3 +
         gO2))*Conj(TYd(gO2,gO2))*ZA(gI2,0);
   }
   std::complex<double> tmp_466;
   std::complex<double> tmp_467;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_467 += Conj(ZD(gI1,j1))*KroneckerDelta(gO2,3 + j1)*Yd(j1,j1);
   }
   tmp_466 += tmp_467;
   result += (std::complex<double>(0,-0.5)*vs*Conj(Lambdax)*ZA(gI2,1)) *
      tmp_466;
   if (gO2 < 3) {
      result += std::complex<double>(0,0.5)*vs*Conj(Yd(gO2,gO2))*Conj(ZD(gI1
         ,3 + gO2))*Lambdax*ZA(gI2,1);
   }
   std::complex<double> tmp_468;
   std::complex<double> tmp_469;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_469 += Conj(ZD(gI1,j1))*KroneckerDelta(gO2,3 + j1)*Yd(j1,j1);
   }
   tmp_468 += tmp_469;
   result += (std::complex<double>(0,-0.5)*vu*Conj(Lambdax)*ZA(gI2,2)) *
      tmp_468;
   if (gO2 < 3) {
      result += std::complex<double>(0,0.5)*vu*Conj(Yd(gO2,gO2))*Conj(ZD(gI1
         ,3 + gO2))*Lambdax*ZA(gI2,2);
   }

   return result;
}

std::complex<double> CLASSNAME::CpconjUSdSdhh(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_470;
   std::complex<double> tmp_471;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_471 += Conj(ZD(gI1,3 + j1))*KroneckerDelta(gO2,3 + j1);
   }
   tmp_470 += tmp_471;
   result += (0.1*vd*Sqr(g1)*ZH(gI2,0)) * tmp_470;
   std::complex<double> tmp_472;
   std::complex<double> tmp_473;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_473 += Conj(ZD(gI1,3 + j1))*KroneckerDelta(gO2,3 + j1);
   }
   tmp_472 += tmp_473;
   result += (0.15*vd*Sqr(gN)*ZH(gI2,0)) * tmp_472;
   std::complex<double> tmp_474;
   std::complex<double> tmp_475;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_475 += Conj(ZD(gI1,j1))*KroneckerDelta(gO2,3 + j1)*TYd(j1,j1);
   }
   tmp_474 += tmp_475;
   result += (-0.7071067811865475*ZH(gI2,0)) * tmp_474;
   std::complex<double> tmp_476;
   std::complex<double> tmp_477;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_477 += AbsSqr(Yd(j2,j2))*Conj(ZD(gI1,3 + j2))*KroneckerDelta(gO2,3
         + j2);
   }
   tmp_476 += tmp_477;
   result += (-(vd*ZH(gI2,0))) * tmp_476;
   if (gO2 < 3) {
      result += 0.05*vd*Conj(ZD(gI1,gO2))*Sqr(g1)*ZH(gI2,0);
   }
   if (gO2 < 3) {
      result += 0.25*vd*Conj(ZD(gI1,gO2))*Sqr(g2)*ZH(gI2,0);
   }
   if (gO2 < 3) {
      result += 0.075*vd*Conj(ZD(gI1,gO2))*Sqr(gN)*ZH(gI2,0);
   }
   if (gO2 < 3) {
      result += -0.7071067811865475*Conj(ZD(gI1,3 + gO2))*Conj(TYd(gO2,gO2))
         *ZH(gI2,0);
   }
   if (gO2 < 3) {
      result += -(vd*AbsSqr(Yd(gO2,gO2))*Conj(ZD(gI1,gO2))*ZH(gI2,0));
   }
   std::complex<double> tmp_478;
   std::complex<double> tmp_479;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_479 += Conj(ZD(gI1,3 + j1))*KroneckerDelta(gO2,3 + j1);
   }
   tmp_478 += tmp_479;
   result += (-0.1*vu*Sqr(g1)*ZH(gI2,1)) * tmp_478;
   std::complex<double> tmp_480;
   std::complex<double> tmp_481;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_481 += Conj(ZD(gI1,3 + j1))*KroneckerDelta(gO2,3 + j1);
   }
   tmp_480 += tmp_481;
   result += (0.1*vu*Sqr(gN)*ZH(gI2,1)) * tmp_480;
   std::complex<double> tmp_482;
   std::complex<double> tmp_483;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_483 += Conj(ZD(gI1,j1))*KroneckerDelta(gO2,3 + j1)*Yd(j1,j1);
   }
   tmp_482 += tmp_483;
   result += (0.5*vs*Conj(Lambdax)*ZH(gI2,1)) * tmp_482;
   if (gO2 < 3) {
      result += -0.05*vu*Conj(ZD(gI1,gO2))*Sqr(g1)*ZH(gI2,1);
   }
   if (gO2 < 3) {
      result += -0.25*vu*Conj(ZD(gI1,gO2))*Sqr(g2)*ZH(gI2,1);
   }
   if (gO2 < 3) {
      result += 0.05*vu*Conj(ZD(gI1,gO2))*Sqr(gN)*ZH(gI2,1);
   }
   if (gO2 < 3) {
      result += 0.5*vs*Conj(Yd(gO2,gO2))*Conj(ZD(gI1,3 + gO2))*Lambdax*ZH(
         gI2,1);
   }
   std::complex<double> tmp_484;
   std::complex<double> tmp_485;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_485 += Conj(ZD(gI1,3 + j1))*KroneckerDelta(gO2,3 + j1);
   }
   tmp_484 += tmp_485;
   result += (-0.25*vs*Sqr(gN)*ZH(gI2,2)) * tmp_484;
   std::complex<double> tmp_486;
   std::complex<double> tmp_487;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_487 += Conj(ZD(gI1,j1))*KroneckerDelta(gO2,3 + j1)*Yd(j1,j1);
   }
   tmp_486 += tmp_487;
   result += (0.5*vu*Conj(Lambdax)*ZH(gI2,2)) * tmp_486;
   if (gO2 < 3) {
      result += -0.125*vs*Conj(ZD(gI1,gO2))*Sqr(gN)*ZH(gI2,2);
   }
   if (gO2 < 3) {
      result += 0.5*vu*Conj(Yd(gO2,gO2))*Conj(ZD(gI1,3 + gO2))*Lambdax*ZH(
         gI2,2);
   }

   return result;
}

std::complex<double> CLASSNAME::CpconjUSdGluFdPR(unsigned gO2, unsigned , unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_488;
   std::complex<double> tmp_489;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_489 += KroneckerDelta(gO2,3 + j1)*ZDR(gI2,j1);
   }
   tmp_488 += tmp_489;
   result += (1.4142135623730951*g3*Conj(PhaseGlu)) * tmp_488;

   return result;
}

std::complex<double> CLASSNAME::CpconjUSdGluFdPL(unsigned gO1, unsigned , unsigned gI2) const
{
   std::complex<double> result;

   if (gO1 < 3) {
      result += -1.4142135623730951*g3*PhaseGlu*Conj(ZDL(gI2,gO1));
   }

   return result;
}

std::complex<double> CLASSNAME::CpconjUSdVGSd(unsigned gO2, unsigned gI2) const
{
   std::complex<double> result;

   if (gI2 < 6) {
      result += g3*Conj(ZD(gI2,gO2));
   }

   return result;
}

std::complex<double> CLASSNAME::CpconjUSdVPSd(unsigned gO2, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_490;
   std::complex<double> tmp_491;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_491 += Conj(ZD(gI2,3 + j1))*KroneckerDelta(gO2,3 + j1);
   }
   tmp_490 += tmp_491;
   result += (-0.2581988897471611*g1*Cos(ThetaW())) * tmp_490;
   if (gO2 < 3) {
      result += 0.12909944487358055*g1*Conj(ZD(gI2,gO2))*Cos(ThetaW());
   }
   if (gO2 < 3) {
      result += -0.5*g2*Conj(ZD(gI2,gO2))*Sin(ThetaW());
   }

   return result;
}

std::complex<double> CLASSNAME::CpconjUSdVZSd(unsigned gO2, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_492;
   std::complex<double> tmp_493;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_493 += Conj(ZD(gI2,3 + j1))*KroneckerDelta(gO2,3 + j1);
   }
   tmp_492 += tmp_493;
   result += (0.2581988897471611*g1*Cos(ThetaWp())*Sin(ThetaW())) * tmp_492;
   std::complex<double> tmp_494;
   std::complex<double> tmp_495;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_495 += Conj(ZD(gI2,3 + j1))*KroneckerDelta(gO2,3 + j1);
   }
   tmp_494 += tmp_495;
   result += (-0.31622776601683794*gN*Sin(ThetaWp())) * tmp_494;
   if (gO2 < 3) {
      result += -0.5*g2*Conj(ZD(gI2,gO2))*Cos(ThetaW())*Cos(ThetaWp());
   }
   if (gO2 < 3) {
      result += -0.12909944487358055*g1*Conj(ZD(gI2,gO2))*Cos(ThetaWp())*Sin
         (ThetaW());
   }
   if (gO2 < 3) {
      result += 0.15811388300841897*gN*Conj(ZD(gI2,gO2))*Sin(ThetaWp());
   }

   return result;
}

std::complex<double> CLASSNAME::CpconjUSdVZpSd(unsigned gO2, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_496;
   std::complex<double> tmp_497;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_497 += Conj(ZD(gI2,3 + j1))*KroneckerDelta(gO2,3 + j1);
   }
   tmp_496 += tmp_497;
   result += (-0.31622776601683794*gN*Cos(ThetaWp())) * tmp_496;
   std::complex<double> tmp_498;
   std::complex<double> tmp_499;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_499 += Conj(ZD(gI2,3 + j1))*KroneckerDelta(gO2,3 + j1);
   }
   tmp_498 += tmp_499;
   result += (-0.2581988897471611*g1*Sin(ThetaW())*Sin(ThetaWp())) * tmp_498;
   if (gO2 < 3) {
      result += 0.15811388300841897*gN*Conj(ZD(gI2,gO2))*Cos(ThetaWp());
   }
   if (gO2 < 3) {
      result += 0.5*g2*Conj(ZD(gI2,gO2))*Cos(ThetaW())*Sin(ThetaWp());
   }
   if (gO2 < 3) {
      result += 0.12909944487358055*g1*Conj(ZD(gI2,gO2))*Sin(ThetaW())*Sin(
         ThetaWp());
   }

   return result;
}

std::complex<double> CLASSNAME::CpconjUSdVWmSu(unsigned gO2, unsigned gI2) const
{
   std::complex<double> result;

   if (gO2 < 3) {
      result += 0.7071067811865475*g2*Conj(ZU(gI2,gO2));
   }

   return result;
}

std::complex<double> CLASSNAME::CpUSvconjUSvVZVZ(unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   result = 0.1*KroneckerDelta(gO1,gO2)*(3.1622776601683795*g2*gN*Cos(ThetaW())
      *Sin(2*ThetaWp()) + g1*Sin(ThetaW())*(7.745966692414834*g2*Cos(ThetaW()) + 3
      *g1*Sin(ThetaW()))*Sqr(Cos(ThetaWp())) + 5*Sqr(g2)*Sqr(Cos(ThetaW()))*Sqr(
      Cos(ThetaWp())) + gN*(2.449489742783178*g1*Sin(ThetaW())*Sin(2*ThetaWp()) +
      2*gN*Sqr(Sin(ThetaWp()))));

   return result;
}

std::complex<double> CLASSNAME::CpUSvconjUSvVZpVZp(unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   result = 0.1*KroneckerDelta(gO1,gO2)*(-3.1622776601683795*g2*gN*Cos(ThetaW()
      )*Sin(2*ThetaWp()) + 2*Sqr(gN)*Sqr(Cos(ThetaWp())) + 5*Sqr(g2)*Sqr(Cos(
      ThetaW()))*Sqr(Sin(ThetaWp())) + g1*(-2.449489742783178*gN*Sin(ThetaW())*Sin
      (2*ThetaWp()) + 3.872983346207417*g2*Sin(2*ThetaW())*Sqr(Sin(ThetaWp())) + 3
      *g1*Sqr(Sin(ThetaW()))*Sqr(Sin(ThetaWp()))));

   return result;
}

double CLASSNAME::CpUSvconjUSvconjVWmVWm(unsigned gO1, unsigned gO2) const
{
   double result = 0.0;

   result = 0.5*KroneckerDelta(gO1,gO2)*Sqr(g2);

   return result;
}

std::complex<double> CLASSNAME::CpUSvconjUSvconjHpmHpm(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result += -0.15*KroneckerDelta(gO1,gO2)*Sqr(g1)*ZP(gI1,0)*ZP(gI2,0);
   result += 0.25*KroneckerDelta(gO1,gO2)*Sqr(g2)*ZP(gI1,0)*ZP(gI2,0);
   result += 0.15*KroneckerDelta(gO1,gO2)*Sqr(gN)*ZP(gI1,0)*ZP(gI2,0);
   if (gO1 < 3) {
      result += -(AbsSqr(Ye(gO1,gO1))*KroneckerDelta(gO1,gO2)*ZP(gI1,0)*ZP(
         gI2,0));
   }
   result += 0.15*KroneckerDelta(gO1,gO2)*Sqr(g1)*ZP(gI1,1)*ZP(gI2,1);
   result += -0.25*KroneckerDelta(gO1,gO2)*Sqr(g2)*ZP(gI1,1)*ZP(gI2,1);
   result += 0.1*KroneckerDelta(gO1,gO2)*Sqr(gN)*ZP(gI1,1)*ZP(gI2,1);

   return result;
}

std::complex<double> CLASSNAME::CpUSvconjUSvconjSHp0SHp0(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = -0.05*KroneckerDelta(gO1,gO2)*(3*Sqr(g1) + 5*Sqr(g2) + 2*Sqr(gN))*(
      Conj(UHp0(gI2,0))*UHp0(gI1,0) - Conj(UHp0(gI2,1))*UHp0(gI1,1));

   return result;
}

std::complex<double> CLASSNAME::CpUSvconjUSvconjSHppSHpp(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = -0.05*KroneckerDelta(gO1,gO2)*(3*Sqr(g1) - 5*Sqr(g2) + 2*Sqr(gN))*(
      Conj(UHpp(gI2,0))*UHpp(gI1,0) - Conj(UHpp(gI2,1))*UHpp(gI1,1));

   return result;
}

double CLASSNAME::CpUSvconjUSvconjSSI0SSI0(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   double result = 0.0;

   result = -0.25*KroneckerDelta(gI1,gI2)*KroneckerDelta(gO1,gO2)*Sqr(gN);

   return result;
}

std::complex<double> CLASSNAME::CpconjUSvbarChaFePR(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   if (gO2 < 3) {
      result += Conj(Ye(gO2,gO2))*UM(gI1,1)*ZER(gI2,gO2);
   }

   return result;
}

std::complex<double> CLASSNAME::CpconjUSvbarChaFePL(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   if (gO1 < 3) {
      result += -(g2*Conj(UP(gI1,0))*Conj(ZEL(gI2,gO1)));
   }

   return result;
}

std::complex<double> CLASSNAME::CpconjUSvconjHpmSe(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   if (gO2 < 3) {
      result += -0.35355339059327373*vd*Conj(ZE(gI2,gO2))*Sqr(g2)*ZP(gI1,0);
   }
   if (gO2 < 3) {
      result += Conj(ZE(gI2,3 + gO2))*Conj(TYe(gO2,gO2))*ZP(gI1,0);
   }
   if (gO2 < 3) {
      result += 0.7071067811865475*vd*AbsSqr(Ye(gO2,gO2))*Conj(ZE(gI2,gO2))*
         ZP(gI1,0);
   }
   if (gO2 < 3) {
      result += -0.35355339059327373*vu*Conj(ZE(gI2,gO2))*Sqr(g2)*ZP(gI1,1);
   }
   if (gO2 < 3) {
      result += 0.7071067811865475*vs*Conj(Ye(gO2,gO2))*Conj(ZE(gI2,3 + gO2)
         )*Lambdax*ZP(gI1,1);
   }

   return result;
}

std::complex<double> CLASSNAME::CpUSvconjUSvAhAh(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = 0.05*KroneckerDelta(gO1,gO2)*((-3*Sqr(g1) - 5*Sqr(g2) + 3*Sqr(gN))*
      ZA(gI1,0)*ZA(gI2,0) + (3*Sqr(g1) + 5*Sqr(g2) + 2*Sqr(gN))*ZA(gI1,1)*ZA(gI2,1
      ) - 5*Sqr(gN)*ZA(gI1,2)*ZA(gI2,2));

   return result;
}

std::complex<double> CLASSNAME::CpUSvconjUSvconjSvSv(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result += -0.15*KroneckerDelta(gI1,gI2)*KroneckerDelta(gO1,gO2)*Sqr(g1);
   result += -0.25*KroneckerDelta(gI1,gI2)*KroneckerDelta(gO1,gO2)*Sqr(g2);
   result += -0.1*KroneckerDelta(gI1,gI2)*KroneckerDelta(gO1,gO2)*Sqr(gN);
   if (gI1 < 3 && gI2 < 3) {
      result += -0.15*Conj(ZV(gI2,gO2))*Sqr(g1)*ZV(gI1,gO1);
   }
   if (gI1 < 3 && gI2 < 3) {
      result += -0.25*Conj(ZV(gI2,gO2))*Sqr(g2)*ZV(gI1,gO1);
   }
   if (gI1 < 3 && gI2 < 3) {
      result += -0.1*Conj(ZV(gI2,gO2))*Sqr(gN)*ZV(gI1,gO1);
   }

   return result;
}

std::complex<double> CLASSNAME::CpUSvconjUSvhhhh(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = 0.05*KroneckerDelta(gO1,gO2)*((-3*Sqr(g1) - 5*Sqr(g2) + 3*Sqr(gN))*
      ZH(gI1,0)*ZH(gI2,0) + (3*Sqr(g1) + 5*Sqr(g2) + 2*Sqr(gN))*ZH(gI1,1)*ZH(gI2,1
      ) - 5*Sqr(gN)*ZH(gI1,2)*ZH(gI2,2));

   return result;
}

std::complex<double> CLASSNAME::CpconjUSvSvhh(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   if (gI1 < 3) {
      result += -0.15*vd*Conj(ZV(gI1,gO2))*Sqr(g1)*ZH(gI2,0);
   }
   if (gI1 < 3) {
      result += -0.25*vd*Conj(ZV(gI1,gO2))*Sqr(g2)*ZH(gI2,0);
   }
   if (gI1 < 3) {
      result += 0.15*vd*Conj(ZV(gI1,gO2))*Sqr(gN)*ZH(gI2,0);
   }
   if (gI1 < 3) {
      result += 0.15*vu*Conj(ZV(gI1,gO2))*Sqr(g1)*ZH(gI2,1);
   }
   if (gI1 < 3) {
      result += 0.25*vu*Conj(ZV(gI1,gO2))*Sqr(g2)*ZH(gI2,1);
   }
   if (gI1 < 3) {
      result += 0.1*vu*Conj(ZV(gI1,gO2))*Sqr(gN)*ZH(gI2,1);
   }
   if (gI1 < 3) {
      result += -0.25*vs*Conj(ZV(gI1,gO2))*Sqr(gN)*ZH(gI2,2);
   }

   return result;
}

double CLASSNAME::CpconjUSvFvChiPR(unsigned , unsigned , unsigned ) const
{
   double result = 0.0;

   result = 0;

   return result;
}

std::complex<double> CLASSNAME::CpconjUSvFvChiPL(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   if (gI1 < 3) {
      result += 0.5477225575051661*g1*Conj(ZN(gI2,0))*KroneckerDelta(gI1,gO1
         );
   }
   if (gI1 < 3) {
      result += -0.7071067811865475*g2*Conj(ZN(gI2,1))*KroneckerDelta(gI1,
         gO1);
   }
   if (gI1 < 3) {
      result += -0.4472135954999579*gN*Conj(ZN(gI2,5))*KroneckerDelta(gI1,
         gO1);
   }

   return result;
}

std::complex<double> CLASSNAME::CpUSvconjUSvconjSHI0SHI0(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_500;
   std::complex<double> tmp_501;
   std::complex<double> tmp_502;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_502 += Conj(UHI0(gI2,j1))*UHI0(gI1,j1);
   }
   tmp_501 += tmp_502;
   tmp_500 += (std::complex<double>(0,-0.15)*KroneckerDelta(gO1,gO2)*Sqr(g1)) *
      tmp_501;
   std::complex<double> tmp_503;
   std::complex<double> tmp_504;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_504 += Conj(UHI0(gI2,j1))*UHI0(gI1,j1);
   }
   tmp_503 += tmp_504;
   tmp_500 += (std::complex<double>(0,-0.25)*KroneckerDelta(gO1,gO2)*Sqr(g2)) *
      tmp_503;
   std::complex<double> tmp_505;
   std::complex<double> tmp_506;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_506 += Conj(UHI0(gI2,j1))*UHI0(gI1,j1);
   }
   tmp_505 += tmp_506;
   tmp_500 += (std::complex<double>(0,0.15)*KroneckerDelta(gO1,gO2)*Sqr(gN)) *
      tmp_505;
   std::complex<double> tmp_507;
   std::complex<double> tmp_508;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_508 += Conj(UHI0(gI2,2 + j1))*UHI0(gI1,2 + j1);
   }
   tmp_507 += tmp_508;
   tmp_500 += (std::complex<double>(0,0.15)*KroneckerDelta(gO1,gO2)*Sqr(g1)) *
      tmp_507;
   std::complex<double> tmp_509;
   std::complex<double> tmp_510;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_510 += Conj(UHI0(gI2,2 + j1))*UHI0(gI1,2 + j1);
   }
   tmp_509 += tmp_510;
   tmp_500 += (std::complex<double>(0,0.25)*KroneckerDelta(gO1,gO2)*Sqr(g2)) *
      tmp_509;
   std::complex<double> tmp_511;
   std::complex<double> tmp_512;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_512 += Conj(UHI0(gI2,2 + j1))*UHI0(gI1,2 + j1);
   }
   tmp_511 += tmp_512;
   tmp_500 += (std::complex<double>(0,0.1)*KroneckerDelta(gO1,gO2)*Sqr(gN)) *
      tmp_511;
   result += (std::complex<double>(0,-1)) * tmp_500;

   return result;
}

std::complex<double> CLASSNAME::CpUSvconjUSvconjSHIpSHIp(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_513;
   std::complex<double> tmp_514;
   std::complex<double> tmp_515;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_515 += Conj(UHIp(gI2,j1))*UHIp(gI1,j1);
   }
   tmp_514 += tmp_515;
   tmp_513 += (std::complex<double>(0,-0.15)*KroneckerDelta(gO1,gO2)*Sqr(g1)) *
      tmp_514;
   std::complex<double> tmp_516;
   std::complex<double> tmp_517;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_517 += Conj(UHIp(gI2,j1))*UHIp(gI1,j1);
   }
   tmp_516 += tmp_517;
   tmp_513 += (std::complex<double>(0,0.25)*KroneckerDelta(gO1,gO2)*Sqr(g2)) *
      tmp_516;
   std::complex<double> tmp_518;
   std::complex<double> tmp_519;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_519 += Conj(UHIp(gI2,j1))*UHIp(gI1,j1);
   }
   tmp_518 += tmp_519;
   tmp_513 += (std::complex<double>(0,0.15)*KroneckerDelta(gO1,gO2)*Sqr(gN)) *
      tmp_518;
   std::complex<double> tmp_520;
   std::complex<double> tmp_521;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_521 += Conj(UHIp(gI2,2 + j1))*UHIp(gI1,2 + j1);
   }
   tmp_520 += tmp_521;
   tmp_513 += (std::complex<double>(0,0.15)*KroneckerDelta(gO1,gO2)*Sqr(g1)) *
      tmp_520;
   std::complex<double> tmp_522;
   std::complex<double> tmp_523;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_523 += Conj(UHIp(gI2,2 + j1))*UHIp(gI1,2 + j1);
   }
   tmp_522 += tmp_523;
   tmp_513 += (std::complex<double>(0,-0.25)*KroneckerDelta(gO1,gO2)*Sqr(g2)) *
      tmp_522;
   std::complex<double> tmp_524;
   std::complex<double> tmp_525;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_525 += Conj(UHIp(gI2,2 + j1))*UHIp(gI1,2 + j1);
   }
   tmp_524 += tmp_525;
   tmp_513 += (std::complex<double>(0,0.1)*KroneckerDelta(gO1,gO2)*Sqr(gN)) *
      tmp_524;
   result += (std::complex<double>(0,-1)) * tmp_513;

   return result;
}

std::complex<double> CLASSNAME::CpUSvconjUSvconjSdSd(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_526;
   std::complex<double> tmp_527;
   std::complex<double> tmp_528;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_528 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
   }
   tmp_527 += tmp_528;
   tmp_526 += (std::complex<double>(0,0.05)*KroneckerDelta(gO1,gO2)*Sqr(g1)) *
      tmp_527;
   std::complex<double> tmp_529;
   std::complex<double> tmp_530;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_530 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
   }
   tmp_529 += tmp_530;
   tmp_526 += (std::complex<double>(0,0.25)*KroneckerDelta(gO1,gO2)*Sqr(g2)) *
      tmp_529;
   std::complex<double> tmp_531;
   std::complex<double> tmp_532;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_532 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
   }
   tmp_531 += tmp_532;
   tmp_526 += (std::complex<double>(0,-0.05)*KroneckerDelta(gO1,gO2)*Sqr(gN)) *
      tmp_531;
   std::complex<double> tmp_533;
   std::complex<double> tmp_534;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_534 += Conj(ZD(gI2,3 + j1))*ZD(gI1,3 + j1);
   }
   tmp_533 += tmp_534;
   tmp_526 += (std::complex<double>(0,0.1)*KroneckerDelta(gO1,gO2)*Sqr(g1)) *
      tmp_533;
   std::complex<double> tmp_535;
   std::complex<double> tmp_536;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_536 += Conj(ZD(gI2,3 + j1))*ZD(gI1,3 + j1);
   }
   tmp_535 += tmp_536;
   tmp_526 += (std::complex<double>(0,-0.1)*KroneckerDelta(gO1,gO2)*Sqr(gN)) *
      tmp_535;
   result += (std::complex<double>(0,-1)) * tmp_526;

   return result;
}

std::complex<double> CLASSNAME::CpUSvconjUSvconjSDXSDX(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_537;
   std::complex<double> tmp_538;
   std::complex<double> tmp_539;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_539 += Conj(ZDX(gI2,j1))*ZDX(gI1,j1);
   }
   tmp_538 += tmp_539;
   tmp_537 += (std::complex<double>(0,-0.1)*KroneckerDelta(gO1,gO2)*Sqr(g1)) *
      tmp_538;
   std::complex<double> tmp_540;
   std::complex<double> tmp_541;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_541 += Conj(ZDX(gI2,j1))*ZDX(gI1,j1);
   }
   tmp_540 += tmp_541;
   tmp_537 += (std::complex<double>(0,0.1)*KroneckerDelta(gO1,gO2)*Sqr(gN)) *
      tmp_540;
   std::complex<double> tmp_542;
   std::complex<double> tmp_543;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_543 += Conj(ZDX(gI2,3 + j1))*ZDX(gI1,3 + j1);
   }
   tmp_542 += tmp_543;
   tmp_537 += (std::complex<double>(0,0.1)*KroneckerDelta(gO1,gO2)*Sqr(g1)) *
      tmp_542;
   std::complex<double> tmp_544;
   std::complex<double> tmp_545;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_545 += Conj(ZDX(gI2,3 + j1))*ZDX(gI1,3 + j1);
   }
   tmp_544 += tmp_545;
   tmp_537 += (std::complex<double>(0,0.15)*KroneckerDelta(gO1,gO2)*Sqr(gN)) *
      tmp_544;
   result += (std::complex<double>(0,-1)) * tmp_537;

   return result;
}

std::complex<double> CLASSNAME::CpUSvconjUSvconjSeSe(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_546;
   std::complex<double> tmp_547;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_547 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
   }
   tmp_546 += tmp_547;
   result += (-0.15*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_546;
   std::complex<double> tmp_548;
   std::complex<double> tmp_549;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_549 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
   }
   tmp_548 += tmp_549;
   result += (0.25*KroneckerDelta(gO1,gO2)*Sqr(g2)) * tmp_548;
   std::complex<double> tmp_550;
   std::complex<double> tmp_551;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_551 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
   }
   tmp_550 += tmp_551;
   result += (-0.1*KroneckerDelta(gO1,gO2)*Sqr(gN)) * tmp_550;
   std::complex<double> tmp_552;
   std::complex<double> tmp_553;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_553 += Conj(ZE(gI2,3 + j1))*ZE(gI1,3 + j1);
   }
   tmp_552 += tmp_553;
   result += (0.3*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_552;
   std::complex<double> tmp_554;
   std::complex<double> tmp_555;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_555 += Conj(ZE(gI2,3 + j1))*ZE(gI1,3 + j1);
   }
   tmp_554 += tmp_555;
   result += (-0.05*KroneckerDelta(gO1,gO2)*Sqr(gN)) * tmp_554;
   if (gO1 < 3 && gO2 < 3) {
      result += -0.5*Conj(ZE(gI2,gO2))*Sqr(g2)*ZE(gI1,gO1);
   }
   if (gO1 < 3 && gO2 < 3) {
      result += -(Conj(Ye(gO2,gO2))*Conj(ZE(gI2,3 + gO2))*Ye(gO1,gO1)*ZE(gI1
         ,3 + gO1));
   }

   return result;
}

std::complex<double> CLASSNAME::CpUSvconjUSvconjSuSu(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_556;
   std::complex<double> tmp_557;
   std::complex<double> tmp_558;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_558 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
   }
   tmp_557 += tmp_558;
   tmp_556 += (std::complex<double>(0,0.05)*KroneckerDelta(gO1,gO2)*Sqr(g1)) *
      tmp_557;
   std::complex<double> tmp_559;
   std::complex<double> tmp_560;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_560 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
   }
   tmp_559 += tmp_560;
   tmp_556 += (std::complex<double>(0,-0.25)*KroneckerDelta(gO1,gO2)*Sqr(g2)) *
      tmp_559;
   std::complex<double> tmp_561;
   std::complex<double> tmp_562;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_562 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
   }
   tmp_561 += tmp_562;
   tmp_556 += (std::complex<double>(0,-0.05)*KroneckerDelta(gO1,gO2)*Sqr(gN)) *
      tmp_561;
   std::complex<double> tmp_563;
   std::complex<double> tmp_564;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_564 += Conj(ZU(gI2,3 + j1))*ZU(gI1,3 + j1);
   }
   tmp_563 += tmp_564;
   tmp_556 += (std::complex<double>(0,-0.2)*KroneckerDelta(gO1,gO2)*Sqr(g1)) *
      tmp_563;
   std::complex<double> tmp_565;
   std::complex<double> tmp_566;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_566 += Conj(ZU(gI2,3 + j1))*ZU(gI1,3 + j1);
   }
   tmp_565 += tmp_566;
   tmp_556 += (std::complex<double>(0,-0.05)*KroneckerDelta(gO1,gO2)*Sqr(gN)) *
      tmp_565;
   result += (std::complex<double>(0,-1)) * tmp_556;

   return result;
}

std::complex<double> CLASSNAME::CpconjUSvVZSv(unsigned gO2, unsigned gI2) const
{
   std::complex<double> result;

   if (gI2 < 3) {
      result += 0.5*g2*Conj(ZV(gI2,gO2))*Cos(ThetaW())*Cos(ThetaWp());
   }
   if (gI2 < 3) {
      result += 0.3872983346207417*g1*Conj(ZV(gI2,gO2))*Cos(ThetaWp())*Sin(
         ThetaW());
   }
   if (gI2 < 3) {
      result += 0.31622776601683794*gN*Conj(ZV(gI2,gO2))*Sin(ThetaWp());
   }

   return result;
}

std::complex<double> CLASSNAME::CpconjUSvVZpSv(unsigned gO2, unsigned gI2) const
{
   std::complex<double> result;

   if (gI2 < 3) {
      result += 0.31622776601683794*gN*Conj(ZV(gI2,gO2))*Cos(ThetaWp());
   }
   if (gI2 < 3) {
      result += -0.5*g2*Conj(ZV(gI2,gO2))*Cos(ThetaW())*Sin(ThetaWp());
   }
   if (gI2 < 3) {
      result += -0.3872983346207417*g1*Conj(ZV(gI2,gO2))*Sin(ThetaW())*Sin(
         ThetaWp());
   }

   return result;
}

std::complex<double> CLASSNAME::CpconjUSvconjVWmSe(unsigned gO2, unsigned gI2) const
{
   std::complex<double> result;

   if (gO2 < 3) {
      result += 0.7071067811865475*g2*Conj(ZE(gI2,gO2));
   }

   return result;
}

std::complex<double> CLASSNAME::CpUSuconjUSuVZVZ(unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   std::complex<double> tmp_567;
   std::complex<double> tmp_568;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_568 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_567 += tmp_568;
   result += (0.5333333333333333*Sqr(g1)*Sqr(Cos(ThetaWp()))*Sqr(Sin(ThetaW()))
      ) * tmp_567;
   std::complex<double> tmp_569;
   std::complex<double> tmp_570;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_570 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_569 += tmp_570;
   result += (0.32659863237109044*g1*gN*Cos(ThetaWp())*Sin(ThetaW())*Sin(
      ThetaWp())) * tmp_569;
   std::complex<double> tmp_571;
   std::complex<double> tmp_572;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_572 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_571 += tmp_572;
   result += (0.05*Sqr(gN)*Sqr(Sin(ThetaWp()))) * tmp_571;
   if (gO1 < 3) {
      result += 0.5*KroneckerDelta(gO1,gO2)*Sqr(g2)*Sqr(Cos(ThetaW()))*Sqr(
         Cos(ThetaWp()));
   }
   if (gO1 < 3) {
      result += -0.2581988897471611*g1*g2*Cos(ThetaW())*KroneckerDelta(gO1,
         gO2)*Sin(ThetaW())*Sqr(Cos(ThetaWp()));
   }
   if (gO1 < 3) {
      result += 0.03333333333333333*KroneckerDelta(gO1,gO2)*Sqr(g1)*Sqr(Cos(
         ThetaWp()))*Sqr(Sin(ThetaW()));
   }
   if (gO1 < 3) {
      result += -0.08164965809277262*g1*gN*Cos(ThetaWp())*KroneckerDelta(gO1
         ,gO2)*Sin(ThetaW())*Sin(ThetaWp());
   }
   if (gO1 < 3) {
      result += 0.05*KroneckerDelta(gO1,gO2)*Sqr(gN)*Sqr(Sin(ThetaWp()));
   }
   if (gO1 < 3) {
      result += 0.15811388300841897*g2*gN*Cos(ThetaW())*KroneckerDelta(gO1,
         gO2)*Sin(2*ThetaWp());
   }

   return result;
}

std::complex<double> CLASSNAME::CpUSuconjUSuVZpVZp(unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   std::complex<double> tmp_573;
   std::complex<double> tmp_574;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_574 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_573 += tmp_574;
   result += (0.05*Sqr(gN)*Sqr(Cos(ThetaWp()))) * tmp_573;
   std::complex<double> tmp_575;
   std::complex<double> tmp_576;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_576 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_575 += tmp_576;
   result += (-0.32659863237109044*g1*gN*Cos(ThetaWp())*Sin(ThetaW())*Sin(
      ThetaWp())) * tmp_575;
   std::complex<double> tmp_577;
   std::complex<double> tmp_578;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_578 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_577 += tmp_578;
   result += (0.5333333333333333*Sqr(g1)*Sqr(Sin(ThetaW()))*Sqr(Sin(ThetaWp()))
      ) * tmp_577;
   if (gO1 < 3) {
      result += 0.05*KroneckerDelta(gO1,gO2)*Sqr(gN)*Sqr(Cos(ThetaWp()));
   }
   if (gO1 < 3) {
      result += 0.08164965809277262*g1*gN*Cos(ThetaWp())*KroneckerDelta(gO1,
         gO2)*Sin(ThetaW())*Sin(ThetaWp());
   }
   if (gO1 < 3) {
      result += 0.5*KroneckerDelta(gO1,gO2)*Sqr(g2)*Sqr(Cos(ThetaW()))*Sqr(
         Sin(ThetaWp()));
   }
   if (gO1 < 3) {
      result += -0.2581988897471611*g1*g2*Cos(ThetaW())*KroneckerDelta(gO1,
         gO2)*Sin(ThetaW())*Sqr(Sin(ThetaWp()));
   }
   if (gO1 < 3) {
      result += 0.03333333333333333*KroneckerDelta(gO1,gO2)*Sqr(g1)*Sqr(Sin(
         ThetaW()))*Sqr(Sin(ThetaWp()));
   }
   if (gO1 < 3) {
      result += -0.15811388300841897*g2*gN*Cos(ThetaW())*KroneckerDelta(gO1,
         gO2)*Sin(2*ThetaWp());
   }

   return result;
}

double CLASSNAME::CpUSuconjUSuconjVWmVWm(unsigned gO1, unsigned gO2) const
{
   double result = 0.0;

   if (gO1 < 3) {
      result += 0.5*KroneckerDelta(gO1,gO2)*Sqr(g2);
   }

   return result;
}

std::complex<double> CLASSNAME::CpUSuconjUSuconjHpmHpm(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_579;
   std::complex<double> tmp_580;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_580 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_579 += tmp_580;
   result += (-0.2*Sqr(g1)*ZP(gI1,0)*ZP(gI2,0)) * tmp_579;
   std::complex<double> tmp_581;
   std::complex<double> tmp_582;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_582 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_581 += tmp_582;
   result += (0.075*Sqr(gN)*ZP(gI1,0)*ZP(gI2,0)) * tmp_581;
   if (gO1 < 3) {
      result += 0.05*KroneckerDelta(gO1,gO2)*Sqr(g1)*ZP(gI1,0)*ZP(gI2,0);
   }
   if (gO1 < 3) {
      result += 0.25*KroneckerDelta(gO1,gO2)*Sqr(g2)*ZP(gI1,0)*ZP(gI2,0);
   }
   if (gO1 < 3) {
      result += 0.075*KroneckerDelta(gO1,gO2)*Sqr(gN)*ZP(gI1,0)*ZP(gI2,0);
   }
   if (gO1 < 3) {
      result += -(AbsSqr(Yd(gO1,gO1))*KroneckerDelta(gO1,gO2)*ZP(gI1,0)*ZP(
         gI2,0));
   }
   std::complex<double> tmp_583;
   std::complex<double> tmp_584;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_584 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_583 += tmp_584;
   result += (0.2*Sqr(g1)*ZP(gI1,1)*ZP(gI2,1)) * tmp_583;
   std::complex<double> tmp_585;
   std::complex<double> tmp_586;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_586 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_585 += tmp_586;
   result += (0.05*Sqr(gN)*ZP(gI1,1)*ZP(gI2,1)) * tmp_585;
   std::complex<double> tmp_587;
   std::complex<double> tmp_588;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_588 += AbsSqr(Yu(j2,j2))*KroneckerDelta(gO1,3 + j2)*KroneckerDelta
         (gO2,3 + j2);
   }
   tmp_587 += tmp_588;
   result += (-(ZP(gI1,1)*ZP(gI2,1))) * tmp_587;
   if (gO1 < 3) {
      result += -0.05*KroneckerDelta(gO1,gO2)*Sqr(g1)*ZP(gI1,1)*ZP(gI2,1);
   }
   if (gO1 < 3) {
      result += -0.25*KroneckerDelta(gO1,gO2)*Sqr(g2)*ZP(gI1,1)*ZP(gI2,1);
   }
   if (gO1 < 3) {
      result += 0.05*KroneckerDelta(gO1,gO2)*Sqr(gN)*ZP(gI1,1)*ZP(gI2,1);
   }

   return result;
}

std::complex<double> CLASSNAME::CpUSuconjUSuconjSHp0SHp0(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_589;
   std::complex<double> tmp_590;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_590 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_589 += tmp_590;
   result += (-0.2*Conj(UHp0(gI2,0))*Sqr(g1)*UHp0(gI1,0)) * tmp_589;
   std::complex<double> tmp_591;
   std::complex<double> tmp_592;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_592 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_591 += tmp_592;
   result += (-0.05*Conj(UHp0(gI2,0))*Sqr(gN)*UHp0(gI1,0)) * tmp_591;
   if (gO1 < 3) {
      result += 0.05*Conj(UHp0(gI2,0))*KroneckerDelta(gO1,gO2)*Sqr(g1)*UHp0(
         gI1,0);
   }
   if (gO1 < 3) {
      result += -0.25*Conj(UHp0(gI2,0))*KroneckerDelta(gO1,gO2)*Sqr(g2)*UHp0
         (gI1,0);
   }
   if (gO1 < 3) {
      result += -0.05*Conj(UHp0(gI2,0))*KroneckerDelta(gO1,gO2)*Sqr(gN)*UHp0
         (gI1,0);
   }
   std::complex<double> tmp_593;
   std::complex<double> tmp_594;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_594 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_593 += tmp_594;
   result += (0.2*Conj(UHp0(gI2,1))*Sqr(g1)*UHp0(gI1,1)) * tmp_593;
   std::complex<double> tmp_595;
   std::complex<double> tmp_596;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_596 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_595 += tmp_596;
   result += (0.05*Conj(UHp0(gI2,1))*Sqr(gN)*UHp0(gI1,1)) * tmp_595;
   if (gO1 < 3) {
      result += -0.05*Conj(UHp0(gI2,1))*KroneckerDelta(gO1,gO2)*Sqr(g1)*UHp0
         (gI1,1);
   }
   if (gO1 < 3) {
      result += 0.25*Conj(UHp0(gI2,1))*KroneckerDelta(gO1,gO2)*Sqr(g2)*UHp0(
         gI1,1);
   }
   if (gO1 < 3) {
      result += 0.05*Conj(UHp0(gI2,1))*KroneckerDelta(gO1,gO2)*Sqr(gN)*UHp0(
         gI1,1);
   }

   return result;
}

std::complex<double> CLASSNAME::CpUSuconjUSuconjSHppSHpp(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_597;
   std::complex<double> tmp_598;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_598 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_597 += tmp_598;
   result += (-0.2*Conj(UHpp(gI2,0))*Sqr(g1)*UHpp(gI1,0)) * tmp_597;
   std::complex<double> tmp_599;
   std::complex<double> tmp_600;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_600 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_599 += tmp_600;
   result += (-0.05*Conj(UHpp(gI2,0))*Sqr(gN)*UHpp(gI1,0)) * tmp_599;
   if (gO1 < 3) {
      result += 0.05*Conj(UHpp(gI2,0))*KroneckerDelta(gO1,gO2)*Sqr(g1)*UHpp(
         gI1,0);
   }
   if (gO1 < 3) {
      result += 0.25*Conj(UHpp(gI2,0))*KroneckerDelta(gO1,gO2)*Sqr(g2)*UHpp(
         gI1,0);
   }
   if (gO1 < 3) {
      result += -0.05*Conj(UHpp(gI2,0))*KroneckerDelta(gO1,gO2)*Sqr(gN)*UHpp
         (gI1,0);
   }
   std::complex<double> tmp_601;
   std::complex<double> tmp_602;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_602 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_601 += tmp_602;
   result += (0.2*Conj(UHpp(gI2,1))*Sqr(g1)*UHpp(gI1,1)) * tmp_601;
   std::complex<double> tmp_603;
   std::complex<double> tmp_604;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_604 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_603 += tmp_604;
   result += (0.05*Conj(UHpp(gI2,1))*Sqr(gN)*UHpp(gI1,1)) * tmp_603;
   if (gO1 < 3) {
      result += -0.05*Conj(UHpp(gI2,1))*KroneckerDelta(gO1,gO2)*Sqr(g1)*UHpp
         (gI1,1);
   }
   if (gO1 < 3) {
      result += -0.25*Conj(UHpp(gI2,1))*KroneckerDelta(gO1,gO2)*Sqr(g2)*UHpp
         (gI1,1);
   }
   if (gO1 < 3) {
      result += 0.05*Conj(UHpp(gI2,1))*KroneckerDelta(gO1,gO2)*Sqr(gN)*UHpp(
         gI1,1);
   }

   return result;
}

double CLASSNAME::CpUSuconjUSuconjSSI0SSI0(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   double result = 0.0;

   result = -0.125*KroneckerDelta(gI1,gI2)*KroneckerDelta(gO1,gO2)*Sqr(gN);

   return result;
}

std::complex<double> CLASSNAME::CpconjUSubarChaFdPR(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   if (gO2 < 3) {
      result += Conj(Yd(gO2,gO2))*UM(gI1,1)*ZDR(gI2,gO2);
   }

   return result;
}

std::complex<double> CLASSNAME::CpconjUSubarChaFdPL(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_605;
   std::complex<double> tmp_606;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_606 += Conj(ZDL(gI2,j1))*KroneckerDelta(gO1,3 + j1)*Yu(j1,j1);
   }
   tmp_605 += tmp_606;
   result += (Conj(UP(gI1,1))) * tmp_605;
   if (gO1 < 3) {
      result += -(g2*Conj(UP(gI1,0))*Conj(ZDL(gI2,gO1)));
   }

   return result;
}

std::complex<double> CLASSNAME::CpconjUSuconjHpmSd(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_607;
   std::complex<double> tmp_608;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_608 += Conj(ZD(gI2,j1))*KroneckerDelta(gO2,3 + j1)*Yu(j1,j1);
   }
   tmp_607 += tmp_608;
   result += (0.7071067811865475*vs*Conj(Lambdax)*ZP(gI1,0)) * tmp_607;
   std::complex<double> tmp_609;
   std::complex<double> tmp_610;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_610 += Conj(Yd(j2,j2))*Conj(ZD(gI2,3 + j2))*KroneckerDelta(gO2,3 +
         j2)*Yu(j2,j2);
   }
   tmp_609 += tmp_610;
   result += (0.7071067811865475*vu*ZP(gI1,0)) * tmp_609;
   if (gO2 < 3) {
      result += -0.35355339059327373*vd*Conj(ZD(gI2,gO2))*Sqr(g2)*ZP(gI1,0);
   }
   if (gO2 < 3) {
      result += Conj(ZD(gI2,3 + gO2))*Conj(TYd(gO2,gO2))*ZP(gI1,0);
   }
   if (gO2 < 3) {
      result += 0.7071067811865475*vd*AbsSqr(Yd(gO2,gO2))*Conj(ZD(gI2,gO2))*
         ZP(gI1,0);
   }
   std::complex<double> tmp_611;
   std::complex<double> tmp_612;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_612 += Conj(ZD(gI2,j1))*KroneckerDelta(gO2,3 + j1)*TYu(j1,j1);
   }
   tmp_611 += tmp_612;
   result += (ZP(gI1,1)) * tmp_611;
   std::complex<double> tmp_613;
   std::complex<double> tmp_614;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_614 += Conj(Yd(j2,j2))*Conj(ZD(gI2,3 + j2))*KroneckerDelta(gO2,3 +
         j2)*Yu(j2,j2);
   }
   tmp_613 += tmp_614;
   result += (0.7071067811865475*vd*ZP(gI1,1)) * tmp_613;
   if (gO2 < 3) {
      result += -0.35355339059327373*vu*Conj(ZD(gI2,gO2))*Sqr(g2)*ZP(gI1,1);
   }
   if (gO2 < 3) {
      result += 0.7071067811865475*vs*Conj(Yd(gO2,gO2))*Conj(ZD(gI2,3 + gO2)
         )*Lambdax*ZP(gI1,1);
   }
   if (gO2 < 3) {
      result += 0.7071067811865475*vu*AbsSqr(Yu(gO2,gO2))*Conj(ZD(gI2,gO2))*
         ZP(gI1,1);
   }

   return result;
}

std::complex<double> CLASSNAME::CpUSuconjUSuAhAh(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_615;
   std::complex<double> tmp_616;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_616 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_615 += tmp_616;
   result += (-0.2*Sqr(g1)*ZA(gI1,0)*ZA(gI2,0)) * tmp_615;
   std::complex<double> tmp_617;
   std::complex<double> tmp_618;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_618 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_617 += tmp_618;
   result += (0.075*Sqr(gN)*ZA(gI1,0)*ZA(gI2,0)) * tmp_617;
   if (gO1 < 3) {
      result += 0.05*KroneckerDelta(gO1,gO2)*Sqr(g1)*ZA(gI1,0)*ZA(gI2,0);
   }
   if (gO1 < 3) {
      result += -0.25*KroneckerDelta(gO1,gO2)*Sqr(g2)*ZA(gI1,0)*ZA(gI2,0);
   }
   if (gO1 < 3) {
      result += 0.075*KroneckerDelta(gO1,gO2)*Sqr(gN)*ZA(gI1,0)*ZA(gI2,0);
   }
   if (gO2 < 3) {
      result += -0.5*Conj(Yu(gO2,gO2))*KroneckerDelta(gO1,3 + gO2)*Lambdax*
         ZA(gI1,2)*ZA(gI2,0);
   }
   if (gO1 < 3) {
      result += -0.5*Conj(Lambdax)*KroneckerDelta(3 + gO1,gO2)*Yu(gO1,gO1)*
         ZA(gI1,2)*ZA(gI2,0);
   }
   std::complex<double> tmp_619;
   std::complex<double> tmp_620;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_620 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_619 += tmp_620;
   result += (0.2*Sqr(g1)*ZA(gI1,1)*ZA(gI2,1)) * tmp_619;
   std::complex<double> tmp_621;
   std::complex<double> tmp_622;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_622 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_621 += tmp_622;
   result += (0.05*Sqr(gN)*ZA(gI1,1)*ZA(gI2,1)) * tmp_621;
   std::complex<double> tmp_623;
   std::complex<double> tmp_624;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_624 += AbsSqr(Yu(j2,j2))*KroneckerDelta(gO1,3 + j2)*KroneckerDelta
         (gO2,3 + j2);
   }
   tmp_623 += tmp_624;
   result += (-(ZA(gI1,1)*ZA(gI2,1))) * tmp_623;
   if (gO1 < 3) {
      result += -0.05*KroneckerDelta(gO1,gO2)*Sqr(g1)*ZA(gI1,1)*ZA(gI2,1);
   }
   if (gO1 < 3) {
      result += 0.25*KroneckerDelta(gO1,gO2)*Sqr(g2)*ZA(gI1,1)*ZA(gI2,1);
   }
   if (gO1 < 3) {
      result += 0.05*KroneckerDelta(gO1,gO2)*Sqr(gN)*ZA(gI1,1)*ZA(gI2,1);
   }
   if (gO1 < 3) {
      result += -(AbsSqr(Yu(gO1,gO1))*KroneckerDelta(gO1,gO2)*ZA(gI1,1)*ZA(
         gI2,1));
   }
   if (gO2 < 3) {
      result += -0.5*Conj(Yu(gO2,gO2))*KroneckerDelta(gO1,3 + gO2)*Lambdax*
         ZA(gI1,0)*ZA(gI2,2);
   }
   if (gO1 < 3) {
      result += -0.5*Conj(Lambdax)*KroneckerDelta(3 + gO1,gO2)*Yu(gO1,gO1)*
         ZA(gI1,0)*ZA(gI2,2);
   }
   std::complex<double> tmp_625;
   std::complex<double> tmp_626;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_626 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_625 += tmp_626;
   result += (-0.125*Sqr(gN)*ZA(gI1,2)*ZA(gI2,2)) * tmp_625;
   if (gO1 < 3) {
      result += -0.125*KroneckerDelta(gO1,gO2)*Sqr(gN)*ZA(gI1,2)*ZA(gI2,2);
   }

   return result;
}

std::complex<double> CLASSNAME::CpUSuconjUSuconjSvSv(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_627;
   std::complex<double> tmp_628;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_628 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_627 += tmp_628;
   result += (-0.2*KroneckerDelta(gI1,gI2)*Sqr(g1)) * tmp_627;
   std::complex<double> tmp_629;
   std::complex<double> tmp_630;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_630 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_629 += tmp_630;
   result += (-0.05*KroneckerDelta(gI1,gI2)*Sqr(gN)) * tmp_629;
   if (gO1 < 3) {
      result += 0.05*KroneckerDelta(gI1,gI2)*KroneckerDelta(gO1,gO2)*Sqr(g1)
         ;
   }
   if (gO1 < 3) {
      result += -0.25*KroneckerDelta(gI1,gI2)*KroneckerDelta(gO1,gO2)*Sqr(g2
         );
   }
   if (gO1 < 3) {
      result += -0.05*KroneckerDelta(gI1,gI2)*KroneckerDelta(gO1,gO2)*Sqr(gN
         );
   }

   return result;
}

std::complex<double> CLASSNAME::CpUSuconjUSuhhhh(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_631;
   std::complex<double> tmp_632;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_632 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_631 += tmp_632;
   result += (-0.2*Sqr(g1)*ZH(gI1,0)*ZH(gI2,0)) * tmp_631;
   std::complex<double> tmp_633;
   std::complex<double> tmp_634;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_634 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_633 += tmp_634;
   result += (0.075*Sqr(gN)*ZH(gI1,0)*ZH(gI2,0)) * tmp_633;
   if (gO1 < 3) {
      result += 0.05*KroneckerDelta(gO1,gO2)*Sqr(g1)*ZH(gI1,0)*ZH(gI2,0);
   }
   if (gO1 < 3) {
      result += -0.25*KroneckerDelta(gO1,gO2)*Sqr(g2)*ZH(gI1,0)*ZH(gI2,0);
   }
   if (gO1 < 3) {
      result += 0.075*KroneckerDelta(gO1,gO2)*Sqr(gN)*ZH(gI1,0)*ZH(gI2,0);
   }
   if (gO2 < 3) {
      result += 0.5*Conj(Yu(gO2,gO2))*KroneckerDelta(gO1,3 + gO2)*Lambdax*ZH
         (gI1,2)*ZH(gI2,0);
   }
   if (gO1 < 3) {
      result += 0.5*Conj(Lambdax)*KroneckerDelta(3 + gO1,gO2)*Yu(gO1,gO1)*ZH
         (gI1,2)*ZH(gI2,0);
   }
   std::complex<double> tmp_635;
   std::complex<double> tmp_636;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_636 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_635 += tmp_636;
   result += (0.2*Sqr(g1)*ZH(gI1,1)*ZH(gI2,1)) * tmp_635;
   std::complex<double> tmp_637;
   std::complex<double> tmp_638;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_638 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_637 += tmp_638;
   result += (0.05*Sqr(gN)*ZH(gI1,1)*ZH(gI2,1)) * tmp_637;
   std::complex<double> tmp_639;
   std::complex<double> tmp_640;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_640 += AbsSqr(Yu(j2,j2))*KroneckerDelta(gO1,3 + j2)*KroneckerDelta
         (gO2,3 + j2);
   }
   tmp_639 += tmp_640;
   result += (-(ZH(gI1,1)*ZH(gI2,1))) * tmp_639;
   if (gO1 < 3) {
      result += -0.05*KroneckerDelta(gO1,gO2)*Sqr(g1)*ZH(gI1,1)*ZH(gI2,1);
   }
   if (gO1 < 3) {
      result += 0.25*KroneckerDelta(gO1,gO2)*Sqr(g2)*ZH(gI1,1)*ZH(gI2,1);
   }
   if (gO1 < 3) {
      result += 0.05*KroneckerDelta(gO1,gO2)*Sqr(gN)*ZH(gI1,1)*ZH(gI2,1);
   }
   if (gO1 < 3) {
      result += -(AbsSqr(Yu(gO1,gO1))*KroneckerDelta(gO1,gO2)*ZH(gI1,1)*ZH(
         gI2,1));
   }
   if (gO2 < 3) {
      result += 0.5*Conj(Yu(gO2,gO2))*KroneckerDelta(gO1,3 + gO2)*Lambdax*ZH
         (gI1,0)*ZH(gI2,2);
   }
   if (gO1 < 3) {
      result += 0.5*Conj(Lambdax)*KroneckerDelta(3 + gO1,gO2)*Yu(gO1,gO1)*ZH
         (gI1,0)*ZH(gI2,2);
   }
   std::complex<double> tmp_641;
   std::complex<double> tmp_642;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_642 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_641 += tmp_642;
   result += (-0.125*Sqr(gN)*ZH(gI1,2)*ZH(gI2,2)) * tmp_641;
   if (gO1 < 3) {
      result += -0.125*KroneckerDelta(gO1,gO2)*Sqr(gN)*ZH(gI1,2)*ZH(gI2,2);
   }

   return result;
}

std::complex<double> CLASSNAME::CpconjUSuFuChiPR(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_643;
   std::complex<double> tmp_644;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_644 += KroneckerDelta(gO2,3 + j1)*ZUR(gI1,j1);
   }
   tmp_643 += tmp_644;
   result += (0.7302967433402214*g1*ZN(gI2,0)) * tmp_643;
   std::complex<double> tmp_645;
   std::complex<double> tmp_646;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_646 += KroneckerDelta(gO2,3 + j1)*ZUR(gI1,j1);
   }
   tmp_645 += tmp_646;
   result += (-0.22360679774997896*gN*ZN(gI2,5)) * tmp_645;
   if (gO2 < 3) {
      result += -(Conj(Yu(gO2,gO2))*ZN(gI2,3)*ZUR(gI1,gO2));
   }

   return result;
}

std::complex<double> CLASSNAME::CpconjUSuFuChiPL(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_647;
   std::complex<double> tmp_648;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_648 += Conj(ZUL(gI1,j1))*KroneckerDelta(gO1,3 + j1)*Yu(j1,j1);
   }
   tmp_647 += tmp_648;
   result += (-Conj(ZN(gI2,3))) * tmp_647;
   if (gO1 < 3) {
      result += -0.18257418583505536*g1*Conj(ZN(gI2,0))*Conj(ZUL(gI1,gO1));
   }
   if (gO1 < 3) {
      result += -0.7071067811865475*g2*Conj(ZN(gI2,1))*Conj(ZUL(gI1,gO1));
   }
   if (gO1 < 3) {
      result += -0.22360679774997896*gN*Conj(ZN(gI2,5))*Conj(ZUL(gI1,gO1));
   }

   return result;
}

std::complex<double> CLASSNAME::CpUSuconjUSuconjSHI0SHI0(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_649;
   std::complex<double> tmp_651;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_651 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_649 += tmp_651;
   std::complex<double> tmp_650;
   std::complex<double> tmp_652;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_652 += Conj(UHI0(gI2,j2))*UHI0(gI1,j2);
   }
   tmp_650 += tmp_652;
   result += (-0.1*Sqr(g1)) * tmp_649 * tmp_650;
   std::complex<double> tmp_653;
   std::complex<double> tmp_655;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_655 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_653 += tmp_655;
   std::complex<double> tmp_654;
   std::complex<double> tmp_656;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_656 += Conj(UHI0(gI2,j2))*UHI0(gI1,j2);
   }
   tmp_654 += tmp_656;
   result += (0.0375*Sqr(gN)) * tmp_653 * tmp_654;
   std::complex<double> tmp_657;
   std::complex<double> tmp_659;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_659 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_657 += tmp_659;
   std::complex<double> tmp_658;
   std::complex<double> tmp_660;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_660 += Conj(UHI0(gI2,2 + j2))*UHI0(gI1,2 + j2);
   }
   tmp_658 += tmp_660;
   result += (0.1*Sqr(g1)) * tmp_657 * tmp_658;
   std::complex<double> tmp_661;
   std::complex<double> tmp_663;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_663 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_661 += tmp_663;
   std::complex<double> tmp_662;
   std::complex<double> tmp_664;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_664 += Conj(UHI0(gI2,2 + j2))*UHI0(gI1,2 + j2);
   }
   tmp_662 += tmp_664;
   result += (0.025*Sqr(gN)) * tmp_661 * tmp_662;
   std::complex<double> tmp_665;
   std::complex<double> tmp_667;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_667 += Conj(UHI0(gI2,j1))*UHI0(gI1,j1);
   }
   tmp_665 += tmp_667;
   std::complex<double> tmp_666;
   std::complex<double> tmp_668;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_668 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_666 += tmp_668;
   result += (-0.1*Sqr(g1)) * tmp_665 * tmp_666;
   std::complex<double> tmp_669;
   std::complex<double> tmp_671;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_671 += Conj(UHI0(gI2,j1))*UHI0(gI1,j1);
   }
   tmp_669 += tmp_671;
   std::complex<double> tmp_670;
   std::complex<double> tmp_672;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_672 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_670 += tmp_672;
   result += (0.0375*Sqr(gN)) * tmp_669 * tmp_670;
   std::complex<double> tmp_673;
   std::complex<double> tmp_675;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_675 += Conj(UHI0(gI2,2 + j1))*UHI0(gI1,2 + j1);
   }
   tmp_673 += tmp_675;
   std::complex<double> tmp_674;
   std::complex<double> tmp_676;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_676 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_674 += tmp_676;
   result += (0.1*Sqr(g1)) * tmp_673 * tmp_674;
   std::complex<double> tmp_677;
   std::complex<double> tmp_679;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_679 += Conj(UHI0(gI2,2 + j1))*UHI0(gI1,2 + j1);
   }
   tmp_677 += tmp_679;
   std::complex<double> tmp_678;
   std::complex<double> tmp_680;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_680 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_678 += tmp_680;
   result += (0.025*Sqr(gN)) * tmp_677 * tmp_678;
   if (gO1 < 3) {
      std::complex<double> tmp_681;
      std::complex<double> tmp_682;
      for (unsigned j1 = 0; j1 < 2; ++j1) {
         tmp_682 += Conj(UHI0(gI2,j1))*UHI0(gI1,j1);
      }
      tmp_681 += tmp_682;
      result += (0.025*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_681;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_683;
      std::complex<double> tmp_684;
      for (unsigned j1 = 0; j1 < 2; ++j1) {
         tmp_684 += Conj(UHI0(gI2,j1))*UHI0(gI1,j1);
      }
      tmp_683 += tmp_684;
      result += (-0.125*KroneckerDelta(gO1,gO2)*Sqr(g2)) * tmp_683;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_685;
      std::complex<double> tmp_686;
      for (unsigned j1 = 0; j1 < 2; ++j1) {
         tmp_686 += Conj(UHI0(gI2,j1))*UHI0(gI1,j1);
      }
      tmp_685 += tmp_686;
      result += (0.0375*KroneckerDelta(gO1,gO2)*Sqr(gN)) * tmp_685;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_687;
      std::complex<double> tmp_688;
      for (unsigned j1 = 0; j1 < 2; ++j1) {
         tmp_688 += Conj(UHI0(gI2,2 + j1))*UHI0(gI1,2 + j1);
      }
      tmp_687 += tmp_688;
      result += (-0.025*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_687;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_689;
      std::complex<double> tmp_690;
      for (unsigned j1 = 0; j1 < 2; ++j1) {
         tmp_690 += Conj(UHI0(gI2,2 + j1))*UHI0(gI1,2 + j1);
      }
      tmp_689 += tmp_690;
      result += (0.125*KroneckerDelta(gO1,gO2)*Sqr(g2)) * tmp_689;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_691;
      std::complex<double> tmp_692;
      for (unsigned j1 = 0; j1 < 2; ++j1) {
         tmp_692 += Conj(UHI0(gI2,2 + j1))*UHI0(gI1,2 + j1);
      }
      tmp_691 += tmp_692;
      result += (0.025*KroneckerDelta(gO1,gO2)*Sqr(gN)) * tmp_691;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_693;
      std::complex<double> tmp_694;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         tmp_694 += Conj(UHI0(gI2,j2))*UHI0(gI1,j2);
      }
      tmp_693 += tmp_694;
      result += (0.025*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_693;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_695;
      std::complex<double> tmp_696;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         tmp_696 += Conj(UHI0(gI2,j2))*UHI0(gI1,j2);
      }
      tmp_695 += tmp_696;
      result += (-0.125*KroneckerDelta(gO1,gO2)*Sqr(g2)) * tmp_695;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_697;
      std::complex<double> tmp_698;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         tmp_698 += Conj(UHI0(gI2,j2))*UHI0(gI1,j2);
      }
      tmp_697 += tmp_698;
      result += (0.0375*KroneckerDelta(gO1,gO2)*Sqr(gN)) * tmp_697;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_699;
      std::complex<double> tmp_700;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         tmp_700 += Conj(UHI0(gI2,2 + j2))*UHI0(gI1,2 + j2);
      }
      tmp_699 += tmp_700;
      result += (-0.025*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_699;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_701;
      std::complex<double> tmp_702;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         tmp_702 += Conj(UHI0(gI2,2 + j2))*UHI0(gI1,2 + j2);
      }
      tmp_701 += tmp_702;
      result += (0.125*KroneckerDelta(gO1,gO2)*Sqr(g2)) * tmp_701;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_703;
      std::complex<double> tmp_704;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         tmp_704 += Conj(UHI0(gI2,2 + j2))*UHI0(gI1,2 + j2);
      }
      tmp_703 += tmp_704;
      result += (0.025*KroneckerDelta(gO1,gO2)*Sqr(gN)) * tmp_703;
   }

   return result;
}

std::complex<double> CLASSNAME::CpUSuconjUSuconjSHIpSHIp(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_705;
   std::complex<double> tmp_707;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_707 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_705 += tmp_707;
   std::complex<double> tmp_706;
   std::complex<double> tmp_708;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_708 += Conj(UHIp(gI2,j2))*UHIp(gI1,j2);
   }
   tmp_706 += tmp_708;
   result += (-0.1*Sqr(g1)) * tmp_705 * tmp_706;
   std::complex<double> tmp_709;
   std::complex<double> tmp_711;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_711 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_709 += tmp_711;
   std::complex<double> tmp_710;
   std::complex<double> tmp_712;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_712 += Conj(UHIp(gI2,j2))*UHIp(gI1,j2);
   }
   tmp_710 += tmp_712;
   result += (0.0375*Sqr(gN)) * tmp_709 * tmp_710;
   std::complex<double> tmp_713;
   std::complex<double> tmp_715;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_715 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_713 += tmp_715;
   std::complex<double> tmp_714;
   std::complex<double> tmp_716;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_716 += Conj(UHIp(gI2,2 + j2))*UHIp(gI1,2 + j2);
   }
   tmp_714 += tmp_716;
   result += (0.1*Sqr(g1)) * tmp_713 * tmp_714;
   std::complex<double> tmp_717;
   std::complex<double> tmp_719;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_719 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_717 += tmp_719;
   std::complex<double> tmp_718;
   std::complex<double> tmp_720;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_720 += Conj(UHIp(gI2,2 + j2))*UHIp(gI1,2 + j2);
   }
   tmp_718 += tmp_720;
   result += (0.025*Sqr(gN)) * tmp_717 * tmp_718;
   std::complex<double> tmp_721;
   std::complex<double> tmp_723;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_723 += Conj(UHIp(gI2,j1))*UHIp(gI1,j1);
   }
   tmp_721 += tmp_723;
   std::complex<double> tmp_722;
   std::complex<double> tmp_724;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_724 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_722 += tmp_724;
   result += (-0.1*Sqr(g1)) * tmp_721 * tmp_722;
   std::complex<double> tmp_725;
   std::complex<double> tmp_727;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_727 += Conj(UHIp(gI2,j1))*UHIp(gI1,j1);
   }
   tmp_725 += tmp_727;
   std::complex<double> tmp_726;
   std::complex<double> tmp_728;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_728 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_726 += tmp_728;
   result += (0.0375*Sqr(gN)) * tmp_725 * tmp_726;
   std::complex<double> tmp_729;
   std::complex<double> tmp_731;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_731 += Conj(UHIp(gI2,2 + j1))*UHIp(gI1,2 + j1);
   }
   tmp_729 += tmp_731;
   std::complex<double> tmp_730;
   std::complex<double> tmp_732;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_732 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_730 += tmp_732;
   result += (0.1*Sqr(g1)) * tmp_729 * tmp_730;
   std::complex<double> tmp_733;
   std::complex<double> tmp_735;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_735 += Conj(UHIp(gI2,2 + j1))*UHIp(gI1,2 + j1);
   }
   tmp_733 += tmp_735;
   std::complex<double> tmp_734;
   std::complex<double> tmp_736;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_736 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_734 += tmp_736;
   result += (0.025*Sqr(gN)) * tmp_733 * tmp_734;
   if (gO1 < 3) {
      std::complex<double> tmp_737;
      std::complex<double> tmp_738;
      for (unsigned j1 = 0; j1 < 2; ++j1) {
         tmp_738 += Conj(UHIp(gI2,j1))*UHIp(gI1,j1);
      }
      tmp_737 += tmp_738;
      result += (0.025*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_737;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_739;
      std::complex<double> tmp_740;
      for (unsigned j1 = 0; j1 < 2; ++j1) {
         tmp_740 += Conj(UHIp(gI2,j1))*UHIp(gI1,j1);
      }
      tmp_739 += tmp_740;
      result += (0.125*KroneckerDelta(gO1,gO2)*Sqr(g2)) * tmp_739;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_741;
      std::complex<double> tmp_742;
      for (unsigned j1 = 0; j1 < 2; ++j1) {
         tmp_742 += Conj(UHIp(gI2,j1))*UHIp(gI1,j1);
      }
      tmp_741 += tmp_742;
      result += (0.0375*KroneckerDelta(gO1,gO2)*Sqr(gN)) * tmp_741;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_743;
      std::complex<double> tmp_744;
      for (unsigned j1 = 0; j1 < 2; ++j1) {
         tmp_744 += Conj(UHIp(gI2,2 + j1))*UHIp(gI1,2 + j1);
      }
      tmp_743 += tmp_744;
      result += (-0.025*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_743;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_745;
      std::complex<double> tmp_746;
      for (unsigned j1 = 0; j1 < 2; ++j1) {
         tmp_746 += Conj(UHIp(gI2,2 + j1))*UHIp(gI1,2 + j1);
      }
      tmp_745 += tmp_746;
      result += (-0.125*KroneckerDelta(gO1,gO2)*Sqr(g2)) * tmp_745;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_747;
      std::complex<double> tmp_748;
      for (unsigned j1 = 0; j1 < 2; ++j1) {
         tmp_748 += Conj(UHIp(gI2,2 + j1))*UHIp(gI1,2 + j1);
      }
      tmp_747 += tmp_748;
      result += (0.025*KroneckerDelta(gO1,gO2)*Sqr(gN)) * tmp_747;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_749;
      std::complex<double> tmp_750;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         tmp_750 += Conj(UHIp(gI2,j2))*UHIp(gI1,j2);
      }
      tmp_749 += tmp_750;
      result += (0.025*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_749;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_751;
      std::complex<double> tmp_752;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         tmp_752 += Conj(UHIp(gI2,j2))*UHIp(gI1,j2);
      }
      tmp_751 += tmp_752;
      result += (0.125*KroneckerDelta(gO1,gO2)*Sqr(g2)) * tmp_751;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_753;
      std::complex<double> tmp_754;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         tmp_754 += Conj(UHIp(gI2,j2))*UHIp(gI1,j2);
      }
      tmp_753 += tmp_754;
      result += (0.0375*KroneckerDelta(gO1,gO2)*Sqr(gN)) * tmp_753;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_755;
      std::complex<double> tmp_756;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         tmp_756 += Conj(UHIp(gI2,2 + j2))*UHIp(gI1,2 + j2);
      }
      tmp_755 += tmp_756;
      result += (-0.025*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_755;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_757;
      std::complex<double> tmp_758;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         tmp_758 += Conj(UHIp(gI2,2 + j2))*UHIp(gI1,2 + j2);
      }
      tmp_757 += tmp_758;
      result += (-0.125*KroneckerDelta(gO1,gO2)*Sqr(g2)) * tmp_757;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_759;
      std::complex<double> tmp_760;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         tmp_760 += Conj(UHIp(gI2,2 + j2))*UHIp(gI1,2 + j2);
      }
      tmp_759 += tmp_760;
      result += (0.025*KroneckerDelta(gO1,gO2)*Sqr(gN)) * tmp_759;
   }

   return result;
}

std::complex<double> CLASSNAME::CpUSuconjUSuconjSdSd(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_761;
   std::complex<double> tmp_763;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_763 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
   }
   tmp_761 += tmp_763;
   std::complex<double> tmp_762;
   std::complex<double> tmp_764;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_764 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_762 += tmp_764;
   result += (0.1*Sqr(g1)) * tmp_761 * tmp_762;
   std::complex<double> tmp_765;
   std::complex<double> tmp_767;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_767 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
   }
   tmp_765 += tmp_767;
   std::complex<double> tmp_766;
   std::complex<double> tmp_768;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_768 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_766 += tmp_768;
   result += (-0.0375*Sqr(gN)) * tmp_765 * tmp_766;
   std::complex<double> tmp_769;
   std::complex<double> tmp_771;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_771 += Conj(ZD(gI2,3 + j1))*ZD(gI1,3 + j1);
   }
   tmp_769 += tmp_771;
   std::complex<double> tmp_770;
   std::complex<double> tmp_772;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_772 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_770 += tmp_772;
   result += (0.2*Sqr(g1)) * tmp_769 * tmp_770;
   std::complex<double> tmp_773;
   std::complex<double> tmp_775;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_775 += Conj(ZD(gI2,3 + j1))*ZD(gI1,3 + j1);
   }
   tmp_773 += tmp_775;
   std::complex<double> tmp_774;
   std::complex<double> tmp_776;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_776 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_774 += tmp_776;
   result += (-0.075*Sqr(gN)) * tmp_773 * tmp_774;
   std::complex<double> tmp_777;
   std::complex<double> tmp_779;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_779 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_777 += tmp_779;
   std::complex<double> tmp_778;
   std::complex<double> tmp_780;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_780 += Conj(ZD(gI2,j2))*ZD(gI1,j2);
   }
   tmp_778 += tmp_780;
   result += (0.1*Sqr(g1)) * tmp_777 * tmp_778;
   std::complex<double> tmp_781;
   std::complex<double> tmp_783;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_783 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_781 += tmp_783;
   std::complex<double> tmp_782;
   std::complex<double> tmp_784;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_784 += Conj(ZD(gI2,j2))*ZD(gI1,j2);
   }
   tmp_782 += tmp_784;
   result += (-0.0375*Sqr(gN)) * tmp_781 * tmp_782;
   std::complex<double> tmp_785;
   std::complex<double> tmp_787;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_787 += Conj(ZD(gI2,j1))*KroneckerDelta(gO2,3 + j1)*Yu(j1,j1);
   }
   tmp_785 += tmp_787;
   std::complex<double> tmp_786;
   std::complex<double> tmp_788;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_788 += Conj(Yu(j2,j2))*KroneckerDelta(gO1,3 + j2)*ZD(gI1,j2);
   }
   tmp_786 += tmp_788;
   result += (-1) * tmp_785 * tmp_786;
   std::complex<double> tmp_789;
   std::complex<double> tmp_791;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_791 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_789 += tmp_791;
   std::complex<double> tmp_790;
   std::complex<double> tmp_792;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_792 += Conj(ZD(gI2,3 + j2))*ZD(gI1,3 + j2);
   }
   tmp_790 += tmp_792;
   result += (0.2*Sqr(g1)) * tmp_789 * tmp_790;
   std::complex<double> tmp_793;
   std::complex<double> tmp_795;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_795 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_793 += tmp_795;
   std::complex<double> tmp_794;
   std::complex<double> tmp_796;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_796 += Conj(ZD(gI2,3 + j2))*ZD(gI1,3 + j2);
   }
   tmp_794 += tmp_796;
   result += (-0.075*Sqr(gN)) * tmp_793 * tmp_794;
   if (gO1 < 3) {
      std::complex<double> tmp_797;
      std::complex<double> tmp_798;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_798 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
      }
      tmp_797 += tmp_798;
      result += (-0.025*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_797;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_799;
      std::complex<double> tmp_800;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_800 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
      }
      tmp_799 += tmp_800;
      result += (0.375*KroneckerDelta(gO1,gO2)*Sqr(g2)) * tmp_799;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_801;
      std::complex<double> tmp_802;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_802 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
      }
      tmp_801 += tmp_802;
      result += (-0.0375*KroneckerDelta(gO1,gO2)*Sqr(gN)) * tmp_801;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_803;
      std::complex<double> tmp_804;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_804 += Conj(ZD(gI2,3 + j1))*ZD(gI1,3 + j1);
      }
      tmp_803 += tmp_804;
      result += (-0.05*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_803;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_805;
      std::complex<double> tmp_806;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_806 += Conj(ZD(gI2,3 + j1))*ZD(gI1,3 + j1);
      }
      tmp_805 += tmp_806;
      result += (-0.075*KroneckerDelta(gO1,gO2)*Sqr(gN)) * tmp_805;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_807;
      std::complex<double> tmp_808;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_808 += Conj(ZD(gI2,j2))*ZD(gI1,j2);
      }
      tmp_807 += tmp_808;
      result += (-0.025*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_807;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_809;
      std::complex<double> tmp_810;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_810 += Conj(ZD(gI2,j2))*ZD(gI1,j2);
      }
      tmp_809 += tmp_810;
      result += (0.375*KroneckerDelta(gO1,gO2)*Sqr(g2)) * tmp_809;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_811;
      std::complex<double> tmp_812;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_812 += Conj(ZD(gI2,j2))*ZD(gI1,j2);
      }
      tmp_811 += tmp_812;
      result += (-0.0375*KroneckerDelta(gO1,gO2)*Sqr(gN)) * tmp_811;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_813;
      std::complex<double> tmp_814;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_814 += Conj(ZD(gI2,3 + j2))*ZD(gI1,3 + j2);
      }
      tmp_813 += tmp_814;
      result += (-0.05*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_813;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_815;
      std::complex<double> tmp_816;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_816 += Conj(ZD(gI2,3 + j2))*ZD(gI1,3 + j2);
      }
      tmp_815 += tmp_816;
      result += (-0.075*KroneckerDelta(gO1,gO2)*Sqr(gN)) * tmp_815;
   }
   if (gO1 < 3 && gO2 < 3) {
      result += -0.5*Conj(ZD(gI2,gO2))*Sqr(g2)*ZD(gI1,gO1);
   }
   if (gO1 < 3 && gO2 < 3) {
      result += -(Conj(Yd(gO2,gO2))*Conj(ZD(gI2,3 + gO2))*Yd(gO1,gO1)*ZD(gI1
         ,3 + gO1));
   }

   return result;
}

std::complex<double> CLASSNAME::CpUSuconjUSuconjSDXSDX(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_817;
   std::complex<double> tmp_819;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_819 += Conj(ZDX(gI2,j1))*ZDX(gI1,j1);
   }
   tmp_817 += tmp_819;
   std::complex<double> tmp_818;
   std::complex<double> tmp_820;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_820 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_818 += tmp_820;
   result += (-0.2*Sqr(g1)) * tmp_817 * tmp_818;
   std::complex<double> tmp_821;
   std::complex<double> tmp_823;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_823 += Conj(ZDX(gI2,j1))*ZDX(gI1,j1);
   }
   tmp_821 += tmp_823;
   std::complex<double> tmp_822;
   std::complex<double> tmp_824;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_824 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_822 += tmp_824;
   result += (0.075*Sqr(gN)) * tmp_821 * tmp_822;
   std::complex<double> tmp_825;
   std::complex<double> tmp_827;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_827 += Conj(ZDX(gI2,3 + j1))*ZDX(gI1,3 + j1);
   }
   tmp_825 += tmp_827;
   std::complex<double> tmp_826;
   std::complex<double> tmp_828;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_828 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_826 += tmp_828;
   result += (0.2*Sqr(g1)) * tmp_825 * tmp_826;
   std::complex<double> tmp_829;
   std::complex<double> tmp_831;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_831 += Conj(ZDX(gI2,3 + j1))*ZDX(gI1,3 + j1);
   }
   tmp_829 += tmp_831;
   std::complex<double> tmp_830;
   std::complex<double> tmp_832;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_832 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_830 += tmp_832;
   result += (0.1125*Sqr(gN)) * tmp_829 * tmp_830;
   std::complex<double> tmp_833;
   std::complex<double> tmp_835;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_835 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_833 += tmp_835;
   std::complex<double> tmp_834;
   std::complex<double> tmp_836;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_836 += Conj(ZDX(gI2,j2))*ZDX(gI1,j2);
   }
   tmp_834 += tmp_836;
   result += (-0.2*Sqr(g1)) * tmp_833 * tmp_834;
   std::complex<double> tmp_837;
   std::complex<double> tmp_839;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_839 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_837 += tmp_839;
   std::complex<double> tmp_838;
   std::complex<double> tmp_840;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_840 += Conj(ZDX(gI2,j2))*ZDX(gI1,j2);
   }
   tmp_838 += tmp_840;
   result += (0.075*Sqr(gN)) * tmp_837 * tmp_838;
   std::complex<double> tmp_841;
   std::complex<double> tmp_843;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_843 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_841 += tmp_843;
   std::complex<double> tmp_842;
   std::complex<double> tmp_844;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_844 += Conj(ZDX(gI2,3 + j2))*ZDX(gI1,3 + j2);
   }
   tmp_842 += tmp_844;
   result += (0.2*Sqr(g1)) * tmp_841 * tmp_842;
   std::complex<double> tmp_845;
   std::complex<double> tmp_847;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_847 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_845 += tmp_847;
   std::complex<double> tmp_846;
   std::complex<double> tmp_848;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_848 += Conj(ZDX(gI2,3 + j2))*ZDX(gI1,3 + j2);
   }
   tmp_846 += tmp_848;
   result += (0.1125*Sqr(gN)) * tmp_845 * tmp_846;
   if (gO1 < 3) {
      std::complex<double> tmp_849;
      std::complex<double> tmp_850;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_850 += Conj(ZDX(gI2,j1))*ZDX(gI1,j1);
      }
      tmp_849 += tmp_850;
      result += (0.05*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_849;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_851;
      std::complex<double> tmp_852;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_852 += Conj(ZDX(gI2,j1))*ZDX(gI1,j1);
      }
      tmp_851 += tmp_852;
      result += (0.075*KroneckerDelta(gO1,gO2)*Sqr(gN)) * tmp_851;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_853;
      std::complex<double> tmp_854;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_854 += Conj(ZDX(gI2,3 + j1))*ZDX(gI1,3 + j1);
      }
      tmp_853 += tmp_854;
      result += (-0.05*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_853;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_855;
      std::complex<double> tmp_856;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_856 += Conj(ZDX(gI2,3 + j1))*ZDX(gI1,3 + j1);
      }
      tmp_855 += tmp_856;
      result += (0.1125*KroneckerDelta(gO1,gO2)*Sqr(gN)) * tmp_855;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_857;
      std::complex<double> tmp_858;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_858 += Conj(ZDX(gI2,j2))*ZDX(gI1,j2);
      }
      tmp_857 += tmp_858;
      result += (0.05*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_857;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_859;
      std::complex<double> tmp_860;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_860 += Conj(ZDX(gI2,j2))*ZDX(gI1,j2);
      }
      tmp_859 += tmp_860;
      result += (0.075*KroneckerDelta(gO1,gO2)*Sqr(gN)) * tmp_859;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_861;
      std::complex<double> tmp_862;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_862 += Conj(ZDX(gI2,3 + j2))*ZDX(gI1,3 + j2);
      }
      tmp_861 += tmp_862;
      result += (-0.05*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_861;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_863;
      std::complex<double> tmp_864;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_864 += Conj(ZDX(gI2,3 + j2))*ZDX(gI1,3 + j2);
      }
      tmp_863 += tmp_864;
      result += (0.1125*KroneckerDelta(gO1,gO2)*Sqr(gN)) * tmp_863;
   }

   return result;
}

std::complex<double> CLASSNAME::CpUSuconjUSuconjSeSe(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_865;
   std::complex<double> tmp_867;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_867 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
   }
   tmp_865 += tmp_867;
   std::complex<double> tmp_866;
   std::complex<double> tmp_868;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_868 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_866 += tmp_868;
   result += (-0.1*Sqr(g1)) * tmp_865 * tmp_866;
   std::complex<double> tmp_869;
   std::complex<double> tmp_871;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_871 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
   }
   tmp_869 += tmp_871;
   std::complex<double> tmp_870;
   std::complex<double> tmp_872;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_872 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_870 += tmp_872;
   result += (-0.025*Sqr(gN)) * tmp_869 * tmp_870;
   std::complex<double> tmp_873;
   std::complex<double> tmp_875;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_875 += Conj(ZE(gI2,3 + j1))*ZE(gI1,3 + j1);
   }
   tmp_873 += tmp_875;
   std::complex<double> tmp_874;
   std::complex<double> tmp_876;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_876 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_874 += tmp_876;
   result += (0.2*Sqr(g1)) * tmp_873 * tmp_874;
   std::complex<double> tmp_877;
   std::complex<double> tmp_879;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_879 += Conj(ZE(gI2,3 + j1))*ZE(gI1,3 + j1);
   }
   tmp_877 += tmp_879;
   std::complex<double> tmp_878;
   std::complex<double> tmp_880;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_880 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_878 += tmp_880;
   result += (-0.0125*Sqr(gN)) * tmp_877 * tmp_878;
   std::complex<double> tmp_881;
   std::complex<double> tmp_883;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_883 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_881 += tmp_883;
   std::complex<double> tmp_882;
   std::complex<double> tmp_884;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_884 += Conj(ZE(gI2,j2))*ZE(gI1,j2);
   }
   tmp_882 += tmp_884;
   result += (-0.1*Sqr(g1)) * tmp_881 * tmp_882;
   std::complex<double> tmp_885;
   std::complex<double> tmp_887;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_887 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_885 += tmp_887;
   std::complex<double> tmp_886;
   std::complex<double> tmp_888;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_888 += Conj(ZE(gI2,j2))*ZE(gI1,j2);
   }
   tmp_886 += tmp_888;
   result += (-0.025*Sqr(gN)) * tmp_885 * tmp_886;
   std::complex<double> tmp_889;
   std::complex<double> tmp_891;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_891 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_889 += tmp_891;
   std::complex<double> tmp_890;
   std::complex<double> tmp_892;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_892 += Conj(ZE(gI2,3 + j2))*ZE(gI1,3 + j2);
   }
   tmp_890 += tmp_892;
   result += (0.2*Sqr(g1)) * tmp_889 * tmp_890;
   std::complex<double> tmp_893;
   std::complex<double> tmp_895;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_895 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_893 += tmp_895;
   std::complex<double> tmp_894;
   std::complex<double> tmp_896;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_896 += Conj(ZE(gI2,3 + j2))*ZE(gI1,3 + j2);
   }
   tmp_894 += tmp_896;
   result += (-0.0125*Sqr(gN)) * tmp_893 * tmp_894;
   if (gO1 < 3) {
      std::complex<double> tmp_897;
      std::complex<double> tmp_898;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_898 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
      }
      tmp_897 += tmp_898;
      result += (0.025*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_897;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_899;
      std::complex<double> tmp_900;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_900 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
      }
      tmp_899 += tmp_900;
      result += (0.125*KroneckerDelta(gO1,gO2)*Sqr(g2)) * tmp_899;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_901;
      std::complex<double> tmp_902;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_902 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
      }
      tmp_901 += tmp_902;
      result += (-0.025*KroneckerDelta(gO1,gO2)*Sqr(gN)) * tmp_901;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_903;
      std::complex<double> tmp_904;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_904 += Conj(ZE(gI2,3 + j1))*ZE(gI1,3 + j1);
      }
      tmp_903 += tmp_904;
      result += (-0.05*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_903;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_905;
      std::complex<double> tmp_906;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_906 += Conj(ZE(gI2,3 + j1))*ZE(gI1,3 + j1);
      }
      tmp_905 += tmp_906;
      result += (-0.0125*KroneckerDelta(gO1,gO2)*Sqr(gN)) * tmp_905;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_907;
      std::complex<double> tmp_908;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_908 += Conj(ZE(gI2,j2))*ZE(gI1,j2);
      }
      tmp_907 += tmp_908;
      result += (0.025*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_907;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_909;
      std::complex<double> tmp_910;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_910 += Conj(ZE(gI2,j2))*ZE(gI1,j2);
      }
      tmp_909 += tmp_910;
      result += (0.125*KroneckerDelta(gO1,gO2)*Sqr(g2)) * tmp_909;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_911;
      std::complex<double> tmp_912;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_912 += Conj(ZE(gI2,j2))*ZE(gI1,j2);
      }
      tmp_911 += tmp_912;
      result += (-0.025*KroneckerDelta(gO1,gO2)*Sqr(gN)) * tmp_911;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_913;
      std::complex<double> tmp_914;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_914 += Conj(ZE(gI2,3 + j2))*ZE(gI1,3 + j2);
      }
      tmp_913 += tmp_914;
      result += (-0.05*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_913;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_915;
      std::complex<double> tmp_916;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_916 += Conj(ZE(gI2,3 + j2))*ZE(gI1,3 + j2);
      }
      tmp_915 += tmp_916;
      result += (-0.0125*KroneckerDelta(gO1,gO2)*Sqr(gN)) * tmp_915;
   }

   return result;
}

std::complex<double> CLASSNAME::CpUSuconjUSuconjSuSu(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_917;
   std::complex<double> tmp_919;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_919 += KroneckerDelta(gO1,3 + j1)*ZU(gI1,3 + j1);
   }
   tmp_917 += tmp_919;
   std::complex<double> tmp_918;
   std::complex<double> tmp_920;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_920 += Conj(ZU(gI2,3 + j2))*KroneckerDelta(gO2,3 + j2);
   }
   tmp_918 += tmp_920;
   result += (-0.13333333333333333*Sqr(g1)) * tmp_917 * tmp_918;
   std::complex<double> tmp_921;
   std::complex<double> tmp_923;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_923 += KroneckerDelta(gO1,3 + j1)*ZU(gI1,3 + j1);
   }
   tmp_921 += tmp_923;
   std::complex<double> tmp_922;
   std::complex<double> tmp_924;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_924 += Conj(ZU(gI2,3 + j2))*KroneckerDelta(gO2,3 + j2);
   }
   tmp_922 += tmp_924;
   result += (-0.6666666666666666*Sqr(g3)) * tmp_921 * tmp_922;
   std::complex<double> tmp_925;
   std::complex<double> tmp_927;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_927 += KroneckerDelta(gO1,3 + j1)*ZU(gI1,3 + j1);
   }
   tmp_925 += tmp_927;
   std::complex<double> tmp_926;
   std::complex<double> tmp_928;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_928 += Conj(ZU(gI2,3 + j2))*KroneckerDelta(gO2,3 + j2);
   }
   tmp_926 += tmp_928;
   result += (-0.0125*Sqr(gN)) * tmp_925 * tmp_926;
   std::complex<double> tmp_929;
   std::complex<double> tmp_931;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_931 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
   }
   tmp_929 += tmp_931;
   std::complex<double> tmp_930;
   std::complex<double> tmp_932;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_932 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_930 += tmp_932;
   result += (0.1*Sqr(g1)) * tmp_929 * tmp_930;
   std::complex<double> tmp_933;
   std::complex<double> tmp_935;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_935 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
   }
   tmp_933 += tmp_935;
   std::complex<double> tmp_934;
   std::complex<double> tmp_936;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_936 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_934 += tmp_936;
   result += (-0.0375*Sqr(gN)) * tmp_933 * tmp_934;
   std::complex<double> tmp_937;
   std::complex<double> tmp_939;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_939 += Conj(ZU(gI2,3 + j1))*ZU(gI1,3 + j1);
   }
   tmp_937 += tmp_939;
   std::complex<double> tmp_938;
   std::complex<double> tmp_940;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_940 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_938 += tmp_940;
   result += (-0.4*Sqr(g1)) * tmp_937 * tmp_938;
   std::complex<double> tmp_941;
   std::complex<double> tmp_943;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_943 += Conj(ZU(gI2,3 + j1))*ZU(gI1,3 + j1);
   }
   tmp_941 += tmp_943;
   std::complex<double> tmp_942;
   std::complex<double> tmp_944;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_944 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_942 += tmp_944;
   result += (-0.0375*Sqr(gN)) * tmp_941 * tmp_942;
   std::complex<double> tmp_945;
   std::complex<double> tmp_947;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_947 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_945 += tmp_947;
   std::complex<double> tmp_946;
   std::complex<double> tmp_948;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_948 += Conj(ZU(gI2,j2))*ZU(gI1,j2);
   }
   tmp_946 += tmp_948;
   result += (0.1*Sqr(g1)) * tmp_945 * tmp_946;
   std::complex<double> tmp_949;
   std::complex<double> tmp_951;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_951 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_949 += tmp_951;
   std::complex<double> tmp_950;
   std::complex<double> tmp_952;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_952 += Conj(ZU(gI2,j2))*ZU(gI1,j2);
   }
   tmp_950 += tmp_952;
   result += (-0.0375*Sqr(gN)) * tmp_949 * tmp_950;
   std::complex<double> tmp_953;
   std::complex<double> tmp_955;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_955 += Conj(ZU(gI2,j1))*KroneckerDelta(gO2,3 + j1)*Yu(j1,j1);
   }
   tmp_953 += tmp_955;
   std::complex<double> tmp_954;
   std::complex<double> tmp_956;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_956 += Conj(Yu(j2,j2))*KroneckerDelta(gO1,3 + j2)*ZU(gI1,j2);
   }
   tmp_954 += tmp_956;
   result += (-1) * tmp_953 * tmp_954;
   std::complex<double> tmp_957;
   std::complex<double> tmp_959;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_959 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_957 += tmp_959;
   std::complex<double> tmp_958;
   std::complex<double> tmp_960;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_960 += Conj(ZU(gI2,3 + j2))*ZU(gI1,3 + j2);
   }
   tmp_958 += tmp_960;
   result += (-0.4*Sqr(g1)) * tmp_957 * tmp_958;
   std::complex<double> tmp_961;
   std::complex<double> tmp_963;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_963 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_961 += tmp_963;
   std::complex<double> tmp_962;
   std::complex<double> tmp_964;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_964 += Conj(ZU(gI2,3 + j2))*ZU(gI1,3 + j2);
   }
   tmp_962 += tmp_964;
   result += (-0.0375*Sqr(gN)) * tmp_961 * tmp_962;
   std::complex<double> tmp_965;
   std::complex<double> tmp_967;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_967 += Conj(ZU(gI2,3 + j1))*KroneckerDelta(gO2,3 + j1);
   }
   tmp_965 += tmp_967;
   std::complex<double> tmp_966;
   std::complex<double> tmp_968;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_968 += KroneckerDelta(gO1,3 + j2)*ZU(gI1,3 + j2);
   }
   tmp_966 += tmp_968;
   result += (-0.13333333333333333*Sqr(g1)) * tmp_965 * tmp_966;
   std::complex<double> tmp_969;
   std::complex<double> tmp_971;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_971 += Conj(ZU(gI2,3 + j1))*KroneckerDelta(gO2,3 + j1);
   }
   tmp_969 += tmp_971;
   std::complex<double> tmp_970;
   std::complex<double> tmp_972;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_972 += KroneckerDelta(gO1,3 + j2)*ZU(gI1,3 + j2);
   }
   tmp_970 += tmp_972;
   result += (-0.6666666666666666*Sqr(g3)) * tmp_969 * tmp_970;
   std::complex<double> tmp_973;
   std::complex<double> tmp_975;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_975 += Conj(ZU(gI2,3 + j1))*KroneckerDelta(gO2,3 + j1);
   }
   tmp_973 += tmp_975;
   std::complex<double> tmp_974;
   std::complex<double> tmp_976;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_976 += KroneckerDelta(gO1,3 + j2)*ZU(gI1,3 + j2);
   }
   tmp_974 += tmp_976;
   result += (-0.0125*Sqr(gN)) * tmp_973 * tmp_974;
   if (gO1 < 3) {
      std::complex<double> tmp_977;
      std::complex<double> tmp_978;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_978 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
      }
      tmp_977 += tmp_978;
      result += (-0.025*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_977;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_979;
      std::complex<double> tmp_980;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_980 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
      }
      tmp_979 += tmp_980;
      result += (-0.375*KroneckerDelta(gO1,gO2)*Sqr(g2)) * tmp_979;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_981;
      std::complex<double> tmp_982;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_982 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
      }
      tmp_981 += tmp_982;
      result += (-0.0375*KroneckerDelta(gO1,gO2)*Sqr(gN)) * tmp_981;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_983;
      std::complex<double> tmp_984;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_984 += Conj(ZU(gI2,3 + j1))*ZU(gI1,3 + j1);
      }
      tmp_983 += tmp_984;
      result += (0.1*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_983;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_985;
      std::complex<double> tmp_986;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_986 += Conj(ZU(gI2,3 + j1))*ZU(gI1,3 + j1);
      }
      tmp_985 += tmp_986;
      result += (-0.0375*KroneckerDelta(gO1,gO2)*Sqr(gN)) * tmp_985;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_987;
      std::complex<double> tmp_988;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_988 += Conj(ZU(gI2,j2))*ZU(gI1,j2);
      }
      tmp_987 += tmp_988;
      result += (-0.025*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_987;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_989;
      std::complex<double> tmp_990;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_990 += Conj(ZU(gI2,j2))*ZU(gI1,j2);
      }
      tmp_989 += tmp_990;
      result += (-0.375*KroneckerDelta(gO1,gO2)*Sqr(g2)) * tmp_989;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_991;
      std::complex<double> tmp_992;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_992 += Conj(ZU(gI2,j2))*ZU(gI1,j2);
      }
      tmp_991 += tmp_992;
      result += (-0.0375*KroneckerDelta(gO1,gO2)*Sqr(gN)) * tmp_991;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_993;
      std::complex<double> tmp_994;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_994 += Conj(ZU(gI2,3 + j2))*ZU(gI1,3 + j2);
      }
      tmp_993 += tmp_994;
      result += (0.1*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_993;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_995;
      std::complex<double> tmp_996;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_996 += Conj(ZU(gI2,3 + j2))*ZU(gI1,3 + j2);
      }
      tmp_995 += tmp_996;
      result += (-0.0375*KroneckerDelta(gO1,gO2)*Sqr(gN)) * tmp_995;
   }
   if (gO2 < 3) {
      std::complex<double> tmp_997;
      std::complex<double> tmp_998;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_998 += KroneckerDelta(gO1,3 + j1)*ZU(gI1,3 + j1);
      }
      tmp_997 += tmp_998;
      result += (0.03333333333333333*Conj(ZU(gI2,gO2))*Sqr(g1)) * tmp_997;
   }
   if (gO2 < 3) {
      std::complex<double> tmp_999;
      std::complex<double> tmp_1000;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_1000 += KroneckerDelta(gO1,3 + j1)*ZU(gI1,3 + j1);
      }
      tmp_999 += tmp_1000;
      result += (0.6666666666666666*Conj(ZU(gI2,gO2))*Sqr(g3)) * tmp_999;
   }
   if (gO2 < 3) {
      std::complex<double> tmp_1001;
      std::complex<double> tmp_1002;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_1002 += KroneckerDelta(gO1,3 + j1)*ZU(gI1,3 + j1);
      }
      tmp_1001 += tmp_1002;
      result += (-0.0125*Conj(ZU(gI2,gO2))*Sqr(gN)) * tmp_1001;
   }
   if (gO2 < 3) {
      std::complex<double> tmp_1003;
      std::complex<double> tmp_1004;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_1004 += Conj(ZU(gI2,j1))*Yu(j1,j1)*ZU(gI1,3 + j1);
      }
      tmp_1003 += tmp_1004;
      result += (-3*Conj(Yu(gO2,gO2))*KroneckerDelta(gO1,3 + gO2)) *
         tmp_1003;
   }
   if (gO2 < 3) {
      std::complex<double> tmp_1005;
      std::complex<double> tmp_1006;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_1006 += KroneckerDelta(gO1,3 + j2)*ZU(gI1,3 + j2);
      }
      tmp_1005 += tmp_1006;
      result += (0.03333333333333333*Conj(ZU(gI2,gO2))*Sqr(g1)) * tmp_1005;
   }
   if (gO2 < 3) {
      std::complex<double> tmp_1007;
      std::complex<double> tmp_1008;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_1008 += KroneckerDelta(gO1,3 + j2)*ZU(gI1,3 + j2);
      }
      tmp_1007 += tmp_1008;
      result += (0.6666666666666666*Conj(ZU(gI2,gO2))*Sqr(g3)) * tmp_1007;
   }
   if (gO2 < 3) {
      std::complex<double> tmp_1009;
      std::complex<double> tmp_1010;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_1010 += KroneckerDelta(gO1,3 + j2)*ZU(gI1,3 + j2);
      }
      tmp_1009 += tmp_1010;
      result += (-0.0125*Conj(ZU(gI2,gO2))*Sqr(gN)) * tmp_1009;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1011;
      std::complex<double> tmp_1012;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_1012 += Conj(Yu(j2,j2))*Conj(ZU(gI2,3 + j2))*ZU(gI1,j2);
      }
      tmp_1011 += tmp_1012;
      result += (-3*KroneckerDelta(3 + gO1,gO2)*Yu(gO1,gO1)) * tmp_1011;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1013;
      std::complex<double> tmp_1014;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_1014 += Conj(ZU(gI2,3 + j1))*KroneckerDelta(gO2,3 + j1);
      }
      tmp_1013 += tmp_1014;
      result += (0.03333333333333333*Sqr(g1)*ZU(gI1,gO1)) * tmp_1013;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1015;
      std::complex<double> tmp_1016;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_1016 += Conj(ZU(gI2,3 + j1))*KroneckerDelta(gO2,3 + j1);
      }
      tmp_1015 += tmp_1016;
      result += (0.6666666666666666*Sqr(g3)*ZU(gI1,gO1)) * tmp_1015;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1017;
      std::complex<double> tmp_1018;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_1018 += Conj(ZU(gI2,3 + j1))*KroneckerDelta(gO2,3 + j1);
      }
      tmp_1017 += tmp_1018;
      result += (-0.0125*Sqr(gN)*ZU(gI1,gO1)) * tmp_1017;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1019;
      std::complex<double> tmp_1020;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_1020 += Conj(ZU(gI2,3 + j2))*KroneckerDelta(gO2,3 + j2);
      }
      tmp_1019 += tmp_1020;
      result += (0.03333333333333333*Sqr(g1)*ZU(gI1,gO1)) * tmp_1019;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1021;
      std::complex<double> tmp_1022;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_1022 += Conj(ZU(gI2,3 + j2))*KroneckerDelta(gO2,3 + j2);
      }
      tmp_1021 += tmp_1022;
      result += (0.6666666666666666*Sqr(g3)*ZU(gI1,gO1)) * tmp_1021;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1023;
      std::complex<double> tmp_1024;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_1024 += Conj(ZU(gI2,3 + j2))*KroneckerDelta(gO2,3 + j2);
      }
      tmp_1023 += tmp_1024;
      result += (-0.0125*Sqr(gN)*ZU(gI1,gO1)) * tmp_1023;
   }
   if (gO1 < 3 && gO2 < 3) {
      result += -0.016666666666666666*Conj(ZU(gI2,gO2))*Sqr(g1)*ZU(gI1,gO1);
   }
   if (gO1 < 3 && gO2 < 3) {
      result += -0.25*Conj(ZU(gI2,gO2))*Sqr(g2)*ZU(gI1,gO1);
   }
   if (gO1 < 3 && gO2 < 3) {
      result += -1.3333333333333333*Conj(ZU(gI2,gO2))*Sqr(g3)*ZU(gI1,gO1);
   }
   if (gO1 < 3 && gO2 < 3) {
      result += -0.025*Conj(ZU(gI2,gO2))*Sqr(gN)*ZU(gI1,gO1);
   }
   if (gO1 < 3 && gO2 < 3) {
      result += -(Conj(Yu(gO2,gO2))*Conj(ZU(gI2,3 + gO2))*Yu(gO1,gO1)*ZU(gI1
         ,3 + gO1));
   }

   return result;
}

std::complex<double> CLASSNAME::CpconjUSuSuAh(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_1025;
   std::complex<double> tmp_1026;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1026 += Conj(ZU(gI1,j1))*KroneckerDelta(gO2,3 + j1)*Yu(j1,j1);
   }
   tmp_1025 += tmp_1026;
   result += (std::complex<double>(0,-0.5)*vs*Conj(Lambdax)*ZA(gI2,0)) *
      tmp_1025;
   if (gO2 < 3) {
      result += std::complex<double>(0,0.5)*vs*Conj(Yu(gO2,gO2))*Conj(ZU(gI1
         ,3 + gO2))*Lambdax*ZA(gI2,0);
   }
   std::complex<double> tmp_1027;
   std::complex<double> tmp_1028;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1028 += Conj(ZU(gI1,j1))*KroneckerDelta(gO2,3 + j1)*TYu(j1,j1);
   }
   tmp_1027 += tmp_1028;
   result += (std::complex<double>(0.,-0.7071067811865475)*ZA(gI2,1)) *
      tmp_1027;
   if (gO2 < 3) {
      result += std::complex<double>(0.,0.7071067811865475)*Conj(ZU(gI1,3 +
         gO2))*Conj(TYu(gO2,gO2))*ZA(gI2,1);
   }
   std::complex<double> tmp_1029;
   std::complex<double> tmp_1030;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1030 += Conj(ZU(gI1,j1))*KroneckerDelta(gO2,3 + j1)*Yu(j1,j1);
   }
   tmp_1029 += tmp_1030;
   result += (std::complex<double>(0,-0.5)*vd*Conj(Lambdax)*ZA(gI2,2)) *
      tmp_1029;
   if (gO2 < 3) {
      result += std::complex<double>(0,0.5)*vd*Conj(Yu(gO2,gO2))*Conj(ZU(gI1
         ,3 + gO2))*Lambdax*ZA(gI2,2);
   }

   return result;
}

std::complex<double> CLASSNAME::CpconjUSuSuhh(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_1031;
   std::complex<double> tmp_1032;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1032 += Conj(ZU(gI1,3 + j1))*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1031 += tmp_1032;
   result += (-0.2*vd*Sqr(g1)*ZH(gI2,0)) * tmp_1031;
   std::complex<double> tmp_1033;
   std::complex<double> tmp_1034;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1034 += Conj(ZU(gI1,3 + j1))*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1033 += tmp_1034;
   result += (0.075*vd*Sqr(gN)*ZH(gI2,0)) * tmp_1033;
   std::complex<double> tmp_1035;
   std::complex<double> tmp_1036;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1036 += Conj(ZU(gI1,j1))*KroneckerDelta(gO2,3 + j1)*Yu(j1,j1);
   }
   tmp_1035 += tmp_1036;
   result += (0.5*vs*Conj(Lambdax)*ZH(gI2,0)) * tmp_1035;
   if (gO2 < 3) {
      result += 0.05*vd*Conj(ZU(gI1,gO2))*Sqr(g1)*ZH(gI2,0);
   }
   if (gO2 < 3) {
      result += -0.25*vd*Conj(ZU(gI1,gO2))*Sqr(g2)*ZH(gI2,0);
   }
   if (gO2 < 3) {
      result += 0.075*vd*Conj(ZU(gI1,gO2))*Sqr(gN)*ZH(gI2,0);
   }
   if (gO2 < 3) {
      result += 0.5*vs*Conj(Yu(gO2,gO2))*Conj(ZU(gI1,3 + gO2))*Lambdax*ZH(
         gI2,0);
   }
   std::complex<double> tmp_1037;
   std::complex<double> tmp_1038;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1038 += Conj(ZU(gI1,3 + j1))*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1037 += tmp_1038;
   result += (0.2*vu*Sqr(g1)*ZH(gI2,1)) * tmp_1037;
   std::complex<double> tmp_1039;
   std::complex<double> tmp_1040;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1040 += Conj(ZU(gI1,3 + j1))*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1039 += tmp_1040;
   result += (0.05*vu*Sqr(gN)*ZH(gI2,1)) * tmp_1039;
   std::complex<double> tmp_1041;
   std::complex<double> tmp_1042;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1042 += Conj(ZU(gI1,j1))*KroneckerDelta(gO2,3 + j1)*TYu(j1,j1);
   }
   tmp_1041 += tmp_1042;
   result += (-0.7071067811865475*ZH(gI2,1)) * tmp_1041;
   std::complex<double> tmp_1043;
   std::complex<double> tmp_1044;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1044 += AbsSqr(Yu(j2,j2))*Conj(ZU(gI1,3 + j2))*KroneckerDelta(gO2,
         3 + j2);
   }
   tmp_1043 += tmp_1044;
   result += (-(vu*ZH(gI2,1))) * tmp_1043;
   if (gO2 < 3) {
      result += -0.05*vu*Conj(ZU(gI1,gO2))*Sqr(g1)*ZH(gI2,1);
   }
   if (gO2 < 3) {
      result += 0.25*vu*Conj(ZU(gI1,gO2))*Sqr(g2)*ZH(gI2,1);
   }
   if (gO2 < 3) {
      result += 0.05*vu*Conj(ZU(gI1,gO2))*Sqr(gN)*ZH(gI2,1);
   }
   if (gO2 < 3) {
      result += -0.7071067811865475*Conj(ZU(gI1,3 + gO2))*Conj(TYu(gO2,gO2))
         *ZH(gI2,1);
   }
   if (gO2 < 3) {
      result += -(vu*AbsSqr(Yu(gO2,gO2))*Conj(ZU(gI1,gO2))*ZH(gI2,1));
   }
   std::complex<double> tmp_1045;
   std::complex<double> tmp_1046;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1046 += Conj(ZU(gI1,3 + j1))*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1045 += tmp_1046;
   result += (-0.125*vs*Sqr(gN)*ZH(gI2,2)) * tmp_1045;
   std::complex<double> tmp_1047;
   std::complex<double> tmp_1048;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1048 += Conj(ZU(gI1,j1))*KroneckerDelta(gO2,3 + j1)*Yu(j1,j1);
   }
   tmp_1047 += tmp_1048;
   result += (0.5*vd*Conj(Lambdax)*ZH(gI2,2)) * tmp_1047;
   if (gO2 < 3) {
      result += -0.125*vs*Conj(ZU(gI1,gO2))*Sqr(gN)*ZH(gI2,2);
   }
   if (gO2 < 3) {
      result += 0.5*vd*Conj(Yu(gO2,gO2))*Conj(ZU(gI1,3 + gO2))*Lambdax*ZH(
         gI2,2);
   }

   return result;
}

std::complex<double> CLASSNAME::CpconjUSuGluFuPR(unsigned gO2, unsigned , unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_1049;
   std::complex<double> tmp_1050;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1050 += KroneckerDelta(gO2,3 + j1)*ZUR(gI2,j1);
   }
   tmp_1049 += tmp_1050;
   result += (1.4142135623730951*g3*Conj(PhaseGlu)) * tmp_1049;

   return result;
}

std::complex<double> CLASSNAME::CpconjUSuGluFuPL(unsigned gO1, unsigned , unsigned gI2) const
{
   std::complex<double> result;

   if (gO1 < 3) {
      result += -1.4142135623730951*g3*PhaseGlu*Conj(ZUL(gI2,gO1));
   }

   return result;
}

std::complex<double> CLASSNAME::CpconjUSuconjVWmSd(unsigned gO2, unsigned gI2) const
{
   std::complex<double> result;

   if (gO2 < 3) {
      result += 0.7071067811865475*g2*Conj(ZD(gI2,gO2));
   }

   return result;
}

std::complex<double> CLASSNAME::CpconjUSuVGSu(unsigned gO2, unsigned gI2) const
{
   std::complex<double> result;

   if (gI2 < 6) {
      result += g3*Conj(ZU(gI2,gO2));
   }

   return result;
}

std::complex<double> CLASSNAME::CpconjUSuVPSu(unsigned gO2, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_1051;
   std::complex<double> tmp_1052;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1052 += Conj(ZU(gI2,3 + j1))*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1051 += tmp_1052;
   result += (0.5163977794943222*g1*Cos(ThetaW())) * tmp_1051;
   if (gO2 < 3) {
      result += 0.12909944487358055*g1*Conj(ZU(gI2,gO2))*Cos(ThetaW());
   }
   if (gO2 < 3) {
      result += 0.5*g2*Conj(ZU(gI2,gO2))*Sin(ThetaW());
   }

   return result;
}

std::complex<double> CLASSNAME::CpconjUSuVZSu(unsigned gO2, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_1053;
   std::complex<double> tmp_1054;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1054 += Conj(ZU(gI2,3 + j1))*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1053 += tmp_1054;
   result += (-0.5163977794943222*g1*Cos(ThetaWp())*Sin(ThetaW())) * tmp_1053;
   std::complex<double> tmp_1055;
   std::complex<double> tmp_1056;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1056 += Conj(ZU(gI2,3 + j1))*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1055 += tmp_1056;
   result += (-0.15811388300841897*gN*Sin(ThetaWp())) * tmp_1055;
   if (gO2 < 3) {
      result += 0.5*g2*Conj(ZU(gI2,gO2))*Cos(ThetaW())*Cos(ThetaWp());
   }
   if (gO2 < 3) {
      result += -0.12909944487358055*g1*Conj(ZU(gI2,gO2))*Cos(ThetaWp())*Sin
         (ThetaW());
   }
   if (gO2 < 3) {
      result += 0.15811388300841897*gN*Conj(ZU(gI2,gO2))*Sin(ThetaWp());
   }

   return result;
}

std::complex<double> CLASSNAME::CpconjUSuVZpSu(unsigned gO2, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_1057;
   std::complex<double> tmp_1058;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1058 += Conj(ZU(gI2,3 + j1))*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1057 += tmp_1058;
   result += (-0.15811388300841897*gN*Cos(ThetaWp())) * tmp_1057;
   std::complex<double> tmp_1059;
   std::complex<double> tmp_1060;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1060 += Conj(ZU(gI2,3 + j1))*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1059 += tmp_1060;
   result += (0.5163977794943222*g1*Sin(ThetaW())*Sin(ThetaWp())) * tmp_1059;
   if (gO2 < 3) {
      result += 0.15811388300841897*gN*Conj(ZU(gI2,gO2))*Cos(ThetaWp());
   }
   if (gO2 < 3) {
      result += -0.5*g2*Conj(ZU(gI2,gO2))*Cos(ThetaW())*Sin(ThetaWp());
   }
   if (gO2 < 3) {
      result += 0.12909944487358055*g1*Conj(ZU(gI2,gO2))*Sin(ThetaW())*Sin(
         ThetaWp());
   }

   return result;
}

std::complex<double> CLASSNAME::CpUSeconjUSeVZVZ(unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   std::complex<double> tmp_1061;
   std::complex<double> tmp_1062;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1062 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1061 += tmp_1062;
   result += (1.2*Sqr(g1)*Sqr(Cos(ThetaWp()))*Sqr(Sin(ThetaW()))) * tmp_1061;
   std::complex<double> tmp_1063;
   std::complex<double> tmp_1064;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1064 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1063 += tmp_1064;
   result += (-0.4898979485566356*g1*gN*Cos(ThetaWp())*Sin(ThetaW())*Sin(
      ThetaWp())) * tmp_1063;
   std::complex<double> tmp_1065;
   std::complex<double> tmp_1066;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1066 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1065 += tmp_1066;
   result += (0.05*Sqr(gN)*Sqr(Sin(ThetaWp()))) * tmp_1065;
   if (gO1 < 3) {
      result += 0.5*KroneckerDelta(gO1,gO2)*Sqr(g2)*Sqr(Cos(ThetaW()))*Sqr(
         Cos(ThetaWp()));
   }
   if (gO1 < 3) {
      result += -0.7745966692414834*g1*g2*Cos(ThetaW())*KroneckerDelta(gO1,
         gO2)*Sin(ThetaW())*Sqr(Cos(ThetaWp()));
   }
   if (gO1 < 3) {
      result += 0.3*KroneckerDelta(gO1,gO2)*Sqr(g1)*Sqr(Cos(ThetaWp()))*Sqr(
         Sin(ThetaW()));
   }
   if (gO1 < 3) {
      result += -0.6324555320336759*g2*gN*Cos(ThetaW())*Cos(ThetaWp())*
         KroneckerDelta(gO1,gO2)*Sin(ThetaWp());
   }
   if (gO1 < 3) {
      result += 0.2*KroneckerDelta(gO1,gO2)*Sqr(gN)*Sqr(Sin(ThetaWp()));
   }
   if (gO1 < 3) {
      result += 0.2449489742783178*g1*gN*KroneckerDelta(gO1,gO2)*Sin(ThetaW(
         ))*Sin(2*ThetaWp());
   }

   return result;
}

std::complex<double> CLASSNAME::CpUSeconjUSeVZpVZp(unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   std::complex<double> tmp_1067;
   std::complex<double> tmp_1068;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1068 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1067 += tmp_1068;
   result += (0.05*Sqr(gN)*Sqr(Cos(ThetaWp()))) * tmp_1067;
   std::complex<double> tmp_1069;
   std::complex<double> tmp_1070;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1070 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1069 += tmp_1070;
   result += (0.4898979485566356*g1*gN*Cos(ThetaWp())*Sin(ThetaW())*Sin(ThetaWp
      ())) * tmp_1069;
   std::complex<double> tmp_1071;
   std::complex<double> tmp_1072;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1072 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1071 += tmp_1072;
   result += (1.2*Sqr(g1)*Sqr(Sin(ThetaW()))*Sqr(Sin(ThetaWp()))) * tmp_1071;
   if (gO1 < 3) {
      result += 0.2*KroneckerDelta(gO1,gO2)*Sqr(gN)*Sqr(Cos(ThetaWp()));
   }
   if (gO1 < 3) {
      result += -0.4898979485566356*g1*gN*Cos(ThetaWp())*KroneckerDelta(gO1,
         gO2)*Sin(ThetaW())*Sin(ThetaWp());
   }
   if (gO1 < 3) {
      result += 0.5*KroneckerDelta(gO1,gO2)*Sqr(g2)*Sqr(Cos(ThetaW()))*Sqr(
         Sin(ThetaWp()));
   }
   if (gO1 < 3) {
      result += -0.7745966692414834*g1*g2*Cos(ThetaW())*KroneckerDelta(gO1,
         gO2)*Sin(ThetaW())*Sqr(Sin(ThetaWp()));
   }
   if (gO1 < 3) {
      result += 0.3*KroneckerDelta(gO1,gO2)*Sqr(g1)*Sqr(Sin(ThetaW()))*Sqr(
         Sin(ThetaWp()));
   }
   if (gO1 < 3) {
      result += 0.31622776601683794*g2*gN*Cos(ThetaW())*KroneckerDelta(gO1,
         gO2)*Sin(2*ThetaWp());
   }

   return result;
}

double CLASSNAME::CpUSeconjUSeconjVWmVWm(unsigned gO1, unsigned gO2) const
{
   double result = 0.0;

   if (gO1 < 3) {
      result += 0.5*KroneckerDelta(gO1,gO2)*Sqr(g2);
   }

   return result;
}

std::complex<double> CLASSNAME::CpUSeconjUSeconjHpmHpm(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_1073;
   std::complex<double> tmp_1074;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1074 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1073 += tmp_1074;
   result += (0.3*Sqr(g1)*ZP(gI1,0)*ZP(gI2,0)) * tmp_1073;
   std::complex<double> tmp_1075;
   std::complex<double> tmp_1076;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1076 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1075 += tmp_1076;
   result += (0.075*Sqr(gN)*ZP(gI1,0)*ZP(gI2,0)) * tmp_1075;
   std::complex<double> tmp_1077;
   std::complex<double> tmp_1078;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1078 += AbsSqr(Ye(j2,j2))*KroneckerDelta(gO1,3 + j2)*
         KroneckerDelta(gO2,3 + j2);
   }
   tmp_1077 += tmp_1078;
   result += (-(ZP(gI1,0)*ZP(gI2,0))) * tmp_1077;
   if (gO1 < 3) {
      result += -0.15*KroneckerDelta(gO1,gO2)*Sqr(g1)*ZP(gI1,0)*ZP(gI2,0);
   }
   if (gO1 < 3) {
      result += -0.25*KroneckerDelta(gO1,gO2)*Sqr(g2)*ZP(gI1,0)*ZP(gI2,0);
   }
   if (gO1 < 3) {
      result += 0.15*KroneckerDelta(gO1,gO2)*Sqr(gN)*ZP(gI1,0)*ZP(gI2,0);
   }
   std::complex<double> tmp_1079;
   std::complex<double> tmp_1080;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1080 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1079 += tmp_1080;
   result += (-0.3*Sqr(g1)*ZP(gI1,1)*ZP(gI2,1)) * tmp_1079;
   std::complex<double> tmp_1081;
   std::complex<double> tmp_1082;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1082 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1081 += tmp_1082;
   result += (0.05*Sqr(gN)*ZP(gI1,1)*ZP(gI2,1)) * tmp_1081;
   if (gO1 < 3) {
      result += 0.15*KroneckerDelta(gO1,gO2)*Sqr(g1)*ZP(gI1,1)*ZP(gI2,1);
   }
   if (gO1 < 3) {
      result += 0.25*KroneckerDelta(gO1,gO2)*Sqr(g2)*ZP(gI1,1)*ZP(gI2,1);
   }
   if (gO1 < 3) {
      result += 0.1*KroneckerDelta(gO1,gO2)*Sqr(gN)*ZP(gI1,1)*ZP(gI2,1);
   }

   return result;
}

std::complex<double> CLASSNAME::CpUSeconjUSeconjSHp0SHp0(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_1083;
   std::complex<double> tmp_1084;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1084 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1083 += tmp_1084;
   result += (0.3*Conj(UHp0(gI2,0))*Sqr(g1)*UHp0(gI1,0)) * tmp_1083;
   std::complex<double> tmp_1085;
   std::complex<double> tmp_1086;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1086 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1085 += tmp_1086;
   result += (-0.05*Conj(UHp0(gI2,0))*Sqr(gN)*UHp0(gI1,0)) * tmp_1085;
   if (gO1 < 3) {
      result += -0.15*Conj(UHp0(gI2,0))*KroneckerDelta(gO1,gO2)*Sqr(g1)*UHp0
         (gI1,0);
   }
   if (gO1 < 3) {
      result += 0.25*Conj(UHp0(gI2,0))*KroneckerDelta(gO1,gO2)*Sqr(g2)*UHp0(
         gI1,0);
   }
   if (gO1 < 3) {
      result += -0.1*Conj(UHp0(gI2,0))*KroneckerDelta(gO1,gO2)*Sqr(gN)*UHp0(
         gI1,0);
   }
   std::complex<double> tmp_1087;
   std::complex<double> tmp_1088;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1088 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1087 += tmp_1088;
   result += (-0.3*Conj(UHp0(gI2,1))*Sqr(g1)*UHp0(gI1,1)) * tmp_1087;
   std::complex<double> tmp_1089;
   std::complex<double> tmp_1090;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1090 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1089 += tmp_1090;
   result += (0.05*Conj(UHp0(gI2,1))*Sqr(gN)*UHp0(gI1,1)) * tmp_1089;
   if (gO1 < 3) {
      result += 0.15*Conj(UHp0(gI2,1))*KroneckerDelta(gO1,gO2)*Sqr(g1)*UHp0(
         gI1,1);
   }
   if (gO1 < 3) {
      result += -0.25*Conj(UHp0(gI2,1))*KroneckerDelta(gO1,gO2)*Sqr(g2)*UHp0
         (gI1,1);
   }
   if (gO1 < 3) {
      result += 0.1*Conj(UHp0(gI2,1))*KroneckerDelta(gO1,gO2)*Sqr(gN)*UHp0(
         gI1,1);
   }

   return result;
}

std::complex<double> CLASSNAME::CpUSeconjUSeconjSHppSHpp(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_1091;
   std::complex<double> tmp_1092;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1092 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1091 += tmp_1092;
   result += (0.3*Conj(UHpp(gI2,0))*Sqr(g1)*UHpp(gI1,0)) * tmp_1091;
   std::complex<double> tmp_1093;
   std::complex<double> tmp_1094;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1094 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1093 += tmp_1094;
   result += (-0.05*Conj(UHpp(gI2,0))*Sqr(gN)*UHpp(gI1,0)) * tmp_1093;
   if (gO1 < 3) {
      result += -0.15*Conj(UHpp(gI2,0))*KroneckerDelta(gO1,gO2)*Sqr(g1)*UHpp
         (gI1,0);
   }
   if (gO1 < 3) {
      result += -0.25*Conj(UHpp(gI2,0))*KroneckerDelta(gO1,gO2)*Sqr(g2)*UHpp
         (gI1,0);
   }
   if (gO1 < 3) {
      result += -0.1*Conj(UHpp(gI2,0))*KroneckerDelta(gO1,gO2)*Sqr(gN)*UHpp(
         gI1,0);
   }
   std::complex<double> tmp_1095;
   std::complex<double> tmp_1096;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1096 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1095 += tmp_1096;
   result += (-0.3*Conj(UHpp(gI2,1))*Sqr(g1)*UHpp(gI1,1)) * tmp_1095;
   std::complex<double> tmp_1097;
   std::complex<double> tmp_1098;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1098 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1097 += tmp_1098;
   result += (0.05*Conj(UHpp(gI2,1))*Sqr(gN)*UHpp(gI1,1)) * tmp_1097;
   if (gO1 < 3) {
      result += 0.15*Conj(UHpp(gI2,1))*KroneckerDelta(gO1,gO2)*Sqr(g1)*UHpp(
         gI1,1);
   }
   if (gO1 < 3) {
      result += 0.25*Conj(UHpp(gI2,1))*KroneckerDelta(gO1,gO2)*Sqr(g2)*UHpp(
         gI1,1);
   }
   if (gO1 < 3) {
      result += 0.1*Conj(UHpp(gI2,1))*KroneckerDelta(gO1,gO2)*Sqr(gN)*UHpp(
         gI1,1);
   }

   return result;
}

std::complex<double> CLASSNAME::CpUSeconjUSeconjSSI0SSI0(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_1099;
   std::complex<double> tmp_1100;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1100 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1099 += tmp_1100;
   result += (-0.125*KroneckerDelta(gI1,gI2)*Sqr(gN)) * tmp_1099;
   if (gO1 < 3) {
      result += -0.25*KroneckerDelta(gI1,gI2)*KroneckerDelta(gO1,gO2)*Sqr(gN
         );
   }

   return result;
}

std::complex<double> CLASSNAME::CpUSeconjUSeAhAh(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_1101;
   std::complex<double> tmp_1102;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1102 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1101 += tmp_1102;
   result += (0.3*Sqr(g1)*ZA(gI1,0)*ZA(gI2,0)) * tmp_1101;
   std::complex<double> tmp_1103;
   std::complex<double> tmp_1104;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1104 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1103 += tmp_1104;
   result += (0.075*Sqr(gN)*ZA(gI1,0)*ZA(gI2,0)) * tmp_1103;
   std::complex<double> tmp_1105;
   std::complex<double> tmp_1106;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1106 += AbsSqr(Ye(j2,j2))*KroneckerDelta(gO1,3 + j2)*
         KroneckerDelta(gO2,3 + j2);
   }
   tmp_1105 += tmp_1106;
   result += (-(ZA(gI1,0)*ZA(gI2,0))) * tmp_1105;
   if (gO1 < 3) {
      result += -0.15*KroneckerDelta(gO1,gO2)*Sqr(g1)*ZA(gI1,0)*ZA(gI2,0);
   }
   if (gO1 < 3) {
      result += 0.25*KroneckerDelta(gO1,gO2)*Sqr(g2)*ZA(gI1,0)*ZA(gI2,0);
   }
   if (gO1 < 3) {
      result += 0.15*KroneckerDelta(gO1,gO2)*Sqr(gN)*ZA(gI1,0)*ZA(gI2,0);
   }
   if (gO1 < 3) {
      result += -(AbsSqr(Ye(gO1,gO1))*KroneckerDelta(gO1,gO2)*ZA(gI1,0)*ZA(
         gI2,0));
   }
   std::complex<double> tmp_1107;
   std::complex<double> tmp_1108;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1108 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1107 += tmp_1108;
   result += (-0.3*Sqr(g1)*ZA(gI1,1)*ZA(gI2,1)) * tmp_1107;
   std::complex<double> tmp_1109;
   std::complex<double> tmp_1110;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1110 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1109 += tmp_1110;
   result += (0.05*Sqr(gN)*ZA(gI1,1)*ZA(gI2,1)) * tmp_1109;
   if (gO1 < 3) {
      result += 0.15*KroneckerDelta(gO1,gO2)*Sqr(g1)*ZA(gI1,1)*ZA(gI2,1);
   }
   if (gO1 < 3) {
      result += -0.25*KroneckerDelta(gO1,gO2)*Sqr(g2)*ZA(gI1,1)*ZA(gI2,1);
   }
   if (gO1 < 3) {
      result += 0.1*KroneckerDelta(gO1,gO2)*Sqr(gN)*ZA(gI1,1)*ZA(gI2,1);
   }
   if (gO2 < 3) {
      result += -0.5*Conj(Ye(gO2,gO2))*KroneckerDelta(gO1,3 + gO2)*Lambdax*
         ZA(gI1,2)*ZA(gI2,1);
   }
   if (gO1 < 3) {
      result += -0.5*Conj(Lambdax)*KroneckerDelta(3 + gO1,gO2)*Ye(gO1,gO1)*
         ZA(gI1,2)*ZA(gI2,1);
   }
   if (gO2 < 3) {
      result += -0.5*Conj(Ye(gO2,gO2))*KroneckerDelta(gO1,3 + gO2)*Lambdax*
         ZA(gI1,1)*ZA(gI2,2);
   }
   if (gO1 < 3) {
      result += -0.5*Conj(Lambdax)*KroneckerDelta(3 + gO1,gO2)*Ye(gO1,gO1)*
         ZA(gI1,1)*ZA(gI2,2);
   }
   std::complex<double> tmp_1111;
   std::complex<double> tmp_1112;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1112 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1111 += tmp_1112;
   result += (-0.125*Sqr(gN)*ZA(gI1,2)*ZA(gI2,2)) * tmp_1111;
   if (gO1 < 3) {
      result += -0.25*KroneckerDelta(gO1,gO2)*Sqr(gN)*ZA(gI1,2)*ZA(gI2,2);
   }

   return result;
}

std::complex<double> CLASSNAME::CpUSeconjUSeconjSvSv(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_1113;
   std::complex<double> tmp_1114;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1114 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1113 += tmp_1114;
   result += (0.3*KroneckerDelta(gI1,gI2)*Sqr(g1)) * tmp_1113;
   std::complex<double> tmp_1115;
   std::complex<double> tmp_1116;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1116 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1115 += tmp_1116;
   result += (-0.05*KroneckerDelta(gI1,gI2)*Sqr(gN)) * tmp_1115;
   std::complex<double> tmp_1117;
   std::complex<double> tmp_1119;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1119 += Conj(ZV(gI2,j1))*KroneckerDelta(gO2,3 + j1)*Ye(j1,j1);
   }
   tmp_1117 += tmp_1119;
   std::complex<double> tmp_1118;
   std::complex<double> tmp_1120;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1120 += Conj(Ye(j2,j2))*KroneckerDelta(gO1,3 + j2)*ZV(gI1,j2);
   }
   tmp_1118 += tmp_1120;
   result += (-1) * tmp_1117 * tmp_1118;
   if (gO1 < 3) {
      result += -0.15*KroneckerDelta(gI1,gI2)*KroneckerDelta(gO1,gO2)*Sqr(g1
         );
   }
   if (gO1 < 3) {
      result += 0.25*KroneckerDelta(gI1,gI2)*KroneckerDelta(gO1,gO2)*Sqr(g2)
         ;
   }
   if (gO1 < 3) {
      result += -0.1*KroneckerDelta(gI1,gI2)*KroneckerDelta(gO1,gO2)*Sqr(gN)
         ;
   }
   if (gO1 < 3 && gO2 < 3) {
      result += -0.5*Conj(ZV(gI2,gO2))*Sqr(g2)*ZV(gI1,gO1);
   }

   return result;
}

std::complex<double> CLASSNAME::CpUSeconjUSehhhh(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_1121;
   std::complex<double> tmp_1122;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1122 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1121 += tmp_1122;
   result += (0.3*Sqr(g1)*ZH(gI1,0)*ZH(gI2,0)) * tmp_1121;
   std::complex<double> tmp_1123;
   std::complex<double> tmp_1124;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1124 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1123 += tmp_1124;
   result += (0.075*Sqr(gN)*ZH(gI1,0)*ZH(gI2,0)) * tmp_1123;
   std::complex<double> tmp_1125;
   std::complex<double> tmp_1126;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1126 += AbsSqr(Ye(j2,j2))*KroneckerDelta(gO1,3 + j2)*
         KroneckerDelta(gO2,3 + j2);
   }
   tmp_1125 += tmp_1126;
   result += (-(ZH(gI1,0)*ZH(gI2,0))) * tmp_1125;
   if (gO1 < 3) {
      result += -0.15*KroneckerDelta(gO1,gO2)*Sqr(g1)*ZH(gI1,0)*ZH(gI2,0);
   }
   if (gO1 < 3) {
      result += 0.25*KroneckerDelta(gO1,gO2)*Sqr(g2)*ZH(gI1,0)*ZH(gI2,0);
   }
   if (gO1 < 3) {
      result += 0.15*KroneckerDelta(gO1,gO2)*Sqr(gN)*ZH(gI1,0)*ZH(gI2,0);
   }
   if (gO1 < 3) {
      result += -(AbsSqr(Ye(gO1,gO1))*KroneckerDelta(gO1,gO2)*ZH(gI1,0)*ZH(
         gI2,0));
   }
   std::complex<double> tmp_1127;
   std::complex<double> tmp_1128;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1128 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1127 += tmp_1128;
   result += (-0.3*Sqr(g1)*ZH(gI1,1)*ZH(gI2,1)) * tmp_1127;
   std::complex<double> tmp_1129;
   std::complex<double> tmp_1130;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1130 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1129 += tmp_1130;
   result += (0.05*Sqr(gN)*ZH(gI1,1)*ZH(gI2,1)) * tmp_1129;
   if (gO1 < 3) {
      result += 0.15*KroneckerDelta(gO1,gO2)*Sqr(g1)*ZH(gI1,1)*ZH(gI2,1);
   }
   if (gO1 < 3) {
      result += -0.25*KroneckerDelta(gO1,gO2)*Sqr(g2)*ZH(gI1,1)*ZH(gI2,1);
   }
   if (gO1 < 3) {
      result += 0.1*KroneckerDelta(gO1,gO2)*Sqr(gN)*ZH(gI1,1)*ZH(gI2,1);
   }
   if (gO2 < 3) {
      result += 0.5*Conj(Ye(gO2,gO2))*KroneckerDelta(gO1,3 + gO2)*Lambdax*ZH
         (gI1,2)*ZH(gI2,1);
   }
   if (gO1 < 3) {
      result += 0.5*Conj(Lambdax)*KroneckerDelta(3 + gO1,gO2)*Ye(gO1,gO1)*ZH
         (gI1,2)*ZH(gI2,1);
   }
   if (gO2 < 3) {
      result += 0.5*Conj(Ye(gO2,gO2))*KroneckerDelta(gO1,3 + gO2)*Lambdax*ZH
         (gI1,1)*ZH(gI2,2);
   }
   if (gO1 < 3) {
      result += 0.5*Conj(Lambdax)*KroneckerDelta(3 + gO1,gO2)*Ye(gO1,gO1)*ZH
         (gI1,1)*ZH(gI2,2);
   }
   std::complex<double> tmp_1131;
   std::complex<double> tmp_1132;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1132 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1131 += tmp_1132;
   result += (-0.125*Sqr(gN)*ZH(gI1,2)*ZH(gI2,2)) * tmp_1131;
   if (gO1 < 3) {
      result += -0.25*KroneckerDelta(gO1,gO2)*Sqr(gN)*ZH(gI1,2)*ZH(gI2,2);
   }

   return result;
}

std::complex<double> CLASSNAME::CpconjUSeSvHpm(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_1133;
   std::complex<double> tmp_1134;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1134 += Conj(ZV(gI1,j1))*KroneckerDelta(gO2,3 + j1)*TYe(j1,j1);
   }
   tmp_1133 += tmp_1134;
   result += (ZP(gI2,0)) * tmp_1133;
   if (gO2 < 3) {
      result += -0.35355339059327373*vd*Conj(ZV(gI1,gO2))*Sqr(g2)*ZP(gI2,0);
   }
   if (gO2 < 3) {
      result += 0.7071067811865475*vd*AbsSqr(Ye(gO2,gO2))*Conj(ZV(gI1,gO2))*
         ZP(gI2,0);
   }
   std::complex<double> tmp_1135;
   std::complex<double> tmp_1136;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1136 += Conj(ZV(gI1,j1))*KroneckerDelta(gO2,3 + j1)*Ye(j1,j1);
   }
   tmp_1135 += tmp_1136;
   result += (0.7071067811865475*vs*Conj(Lambdax)*ZP(gI2,1)) * tmp_1135;
   if (gO2 < 3) {
      result += -0.35355339059327373*vu*Conj(ZV(gI1,gO2))*Sqr(g2)*ZP(gI2,1);
   }

   return result;
}

double CLASSNAME::CpconjUSeFvChaPR(unsigned , unsigned , unsigned ) const
{
   double result = 0.0;

   result = 0;

   return result;
}

std::complex<double> CLASSNAME::CpconjUSeFvChaPL(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   if (gI1 < 3) {
      result += -(g2*Conj(UM(gI2,0))*KroneckerDelta(gI1,gO1));
   }
   if (gI1 < 3) {
      result += Conj(UM(gI2,1))*KroneckerDelta(3 + gI1,gO1)*Ye(gI1,gI1);
   }

   return result;
}

std::complex<double> CLASSNAME::CpconjUSeFeChiPR(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_1137;
   std::complex<double> tmp_1138;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1138 += KroneckerDelta(gO2,3 + j1)*ZER(gI1,j1);
   }
   tmp_1137 += tmp_1138;
   result += (-1.0954451150103321*g1*ZN(gI2,0)) * tmp_1137;
   if (gO2 < 3) {
      result += -(Conj(Ye(gO2,gO2))*ZER(gI1,gO2)*ZN(gI2,2));
   }
   std::complex<double> tmp_1139;
   std::complex<double> tmp_1140;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1140 += KroneckerDelta(gO2,3 + j1)*ZER(gI1,j1);
   }
   tmp_1139 += tmp_1140;
   result += (-0.22360679774997896*gN*ZN(gI2,5)) * tmp_1139;

   return result;
}

std::complex<double> CLASSNAME::CpconjUSeFeChiPL(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_1141;
   std::complex<double> tmp_1142;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1142 += Conj(ZEL(gI1,j1))*KroneckerDelta(gO1,3 + j1)*Ye(j1,j1);
   }
   tmp_1141 += tmp_1142;
   result += (-Conj(ZN(gI2,2))) * tmp_1141;
   if (gO1 < 3) {
      result += 0.5477225575051661*g1*Conj(ZEL(gI1,gO1))*Conj(ZN(gI2,0));
   }
   if (gO1 < 3) {
      result += 0.7071067811865475*g2*Conj(ZEL(gI1,gO1))*Conj(ZN(gI2,1));
   }
   if (gO1 < 3) {
      result += -0.4472135954999579*gN*Conj(ZEL(gI1,gO1))*Conj(ZN(gI2,5));
   }

   return result;
}

std::complex<double> CLASSNAME::CpUSeconjUSeconjSHI0SHI0(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_1143;
   std::complex<double> tmp_1145;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1145 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1143 += tmp_1145;
   std::complex<double> tmp_1144;
   std::complex<double> tmp_1146;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_1146 += Conj(UHI0(gI2,j2))*UHI0(gI1,j2);
   }
   tmp_1144 += tmp_1146;
   result += (0.15*Sqr(g1)) * tmp_1143 * tmp_1144;
   std::complex<double> tmp_1147;
   std::complex<double> tmp_1149;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1149 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1147 += tmp_1149;
   std::complex<double> tmp_1148;
   std::complex<double> tmp_1150;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_1150 += Conj(UHI0(gI2,j2))*UHI0(gI1,j2);
   }
   tmp_1148 += tmp_1150;
   result += (0.0375*Sqr(gN)) * tmp_1147 * tmp_1148;
   std::complex<double> tmp_1151;
   std::complex<double> tmp_1153;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1153 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1151 += tmp_1153;
   std::complex<double> tmp_1152;
   std::complex<double> tmp_1154;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_1154 += Conj(UHI0(gI2,2 + j2))*UHI0(gI1,2 + j2);
   }
   tmp_1152 += tmp_1154;
   result += (-0.15*Sqr(g1)) * tmp_1151 * tmp_1152;
   std::complex<double> tmp_1155;
   std::complex<double> tmp_1157;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1157 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1155 += tmp_1157;
   std::complex<double> tmp_1156;
   std::complex<double> tmp_1158;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_1158 += Conj(UHI0(gI2,2 + j2))*UHI0(gI1,2 + j2);
   }
   tmp_1156 += tmp_1158;
   result += (0.025*Sqr(gN)) * tmp_1155 * tmp_1156;
   std::complex<double> tmp_1159;
   std::complex<double> tmp_1161;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_1161 += Conj(UHI0(gI2,j1))*UHI0(gI1,j1);
   }
   tmp_1159 += tmp_1161;
   std::complex<double> tmp_1160;
   std::complex<double> tmp_1162;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1162 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_1160 += tmp_1162;
   result += (0.15*Sqr(g1)) * tmp_1159 * tmp_1160;
   std::complex<double> tmp_1163;
   std::complex<double> tmp_1165;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_1165 += Conj(UHI0(gI2,j1))*UHI0(gI1,j1);
   }
   tmp_1163 += tmp_1165;
   std::complex<double> tmp_1164;
   std::complex<double> tmp_1166;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1166 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_1164 += tmp_1166;
   result += (0.0375*Sqr(gN)) * tmp_1163 * tmp_1164;
   std::complex<double> tmp_1167;
   std::complex<double> tmp_1169;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_1169 += Conj(UHI0(gI2,2 + j1))*UHI0(gI1,2 + j1);
   }
   tmp_1167 += tmp_1169;
   std::complex<double> tmp_1168;
   std::complex<double> tmp_1170;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1170 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_1168 += tmp_1170;
   result += (-0.15*Sqr(g1)) * tmp_1167 * tmp_1168;
   std::complex<double> tmp_1171;
   std::complex<double> tmp_1173;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_1173 += Conj(UHI0(gI2,2 + j1))*UHI0(gI1,2 + j1);
   }
   tmp_1171 += tmp_1173;
   std::complex<double> tmp_1172;
   std::complex<double> tmp_1174;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1174 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_1172 += tmp_1174;
   result += (0.025*Sqr(gN)) * tmp_1171 * tmp_1172;
   if (gO1 < 3) {
      std::complex<double> tmp_1175;
      std::complex<double> tmp_1176;
      for (unsigned j1 = 0; j1 < 2; ++j1) {
         tmp_1176 += Conj(UHI0(gI2,j1))*UHI0(gI1,j1);
      }
      tmp_1175 += tmp_1176;
      result += (-0.075*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_1175;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1177;
      std::complex<double> tmp_1178;
      for (unsigned j1 = 0; j1 < 2; ++j1) {
         tmp_1178 += Conj(UHI0(gI2,j1))*UHI0(gI1,j1);
      }
      tmp_1177 += tmp_1178;
      result += (0.125*KroneckerDelta(gO1,gO2)*Sqr(g2)) * tmp_1177;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1179;
      std::complex<double> tmp_1180;
      for (unsigned j1 = 0; j1 < 2; ++j1) {
         tmp_1180 += Conj(UHI0(gI2,j1))*UHI0(gI1,j1);
      }
      tmp_1179 += tmp_1180;
      result += (0.075*KroneckerDelta(gO1,gO2)*Sqr(gN)) * tmp_1179;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1181;
      std::complex<double> tmp_1182;
      for (unsigned j1 = 0; j1 < 2; ++j1) {
         tmp_1182 += Conj(UHI0(gI2,2 + j1))*UHI0(gI1,2 + j1);
      }
      tmp_1181 += tmp_1182;
      result += (0.075*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_1181;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1183;
      std::complex<double> tmp_1184;
      for (unsigned j1 = 0; j1 < 2; ++j1) {
         tmp_1184 += Conj(UHI0(gI2,2 + j1))*UHI0(gI1,2 + j1);
      }
      tmp_1183 += tmp_1184;
      result += (-0.125*KroneckerDelta(gO1,gO2)*Sqr(g2)) * tmp_1183;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1185;
      std::complex<double> tmp_1186;
      for (unsigned j1 = 0; j1 < 2; ++j1) {
         tmp_1186 += Conj(UHI0(gI2,2 + j1))*UHI0(gI1,2 + j1);
      }
      tmp_1185 += tmp_1186;
      result += (0.05*KroneckerDelta(gO1,gO2)*Sqr(gN)) * tmp_1185;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1187;
      std::complex<double> tmp_1188;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         tmp_1188 += Conj(UHI0(gI2,j2))*UHI0(gI1,j2);
      }
      tmp_1187 += tmp_1188;
      result += (-0.075*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_1187;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1189;
      std::complex<double> tmp_1190;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         tmp_1190 += Conj(UHI0(gI2,j2))*UHI0(gI1,j2);
      }
      tmp_1189 += tmp_1190;
      result += (0.125*KroneckerDelta(gO1,gO2)*Sqr(g2)) * tmp_1189;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1191;
      std::complex<double> tmp_1192;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         tmp_1192 += Conj(UHI0(gI2,j2))*UHI0(gI1,j2);
      }
      tmp_1191 += tmp_1192;
      result += (0.075*KroneckerDelta(gO1,gO2)*Sqr(gN)) * tmp_1191;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1193;
      std::complex<double> tmp_1194;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         tmp_1194 += Conj(UHI0(gI2,2 + j2))*UHI0(gI1,2 + j2);
      }
      tmp_1193 += tmp_1194;
      result += (0.075*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_1193;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1195;
      std::complex<double> tmp_1196;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         tmp_1196 += Conj(UHI0(gI2,2 + j2))*UHI0(gI1,2 + j2);
      }
      tmp_1195 += tmp_1196;
      result += (-0.125*KroneckerDelta(gO1,gO2)*Sqr(g2)) * tmp_1195;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1197;
      std::complex<double> tmp_1198;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         tmp_1198 += Conj(UHI0(gI2,2 + j2))*UHI0(gI1,2 + j2);
      }
      tmp_1197 += tmp_1198;
      result += (0.05*KroneckerDelta(gO1,gO2)*Sqr(gN)) * tmp_1197;
   }

   return result;
}

std::complex<double> CLASSNAME::CpUSeconjUSeconjSHIpSHIp(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_1199;
   std::complex<double> tmp_1201;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1201 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1199 += tmp_1201;
   std::complex<double> tmp_1200;
   std::complex<double> tmp_1202;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_1202 += Conj(UHIp(gI2,j2))*UHIp(gI1,j2);
   }
   tmp_1200 += tmp_1202;
   result += (0.15*Sqr(g1)) * tmp_1199 * tmp_1200;
   std::complex<double> tmp_1203;
   std::complex<double> tmp_1205;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1205 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1203 += tmp_1205;
   std::complex<double> tmp_1204;
   std::complex<double> tmp_1206;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_1206 += Conj(UHIp(gI2,j2))*UHIp(gI1,j2);
   }
   tmp_1204 += tmp_1206;
   result += (0.0375*Sqr(gN)) * tmp_1203 * tmp_1204;
   std::complex<double> tmp_1207;
   std::complex<double> tmp_1209;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1209 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1207 += tmp_1209;
   std::complex<double> tmp_1208;
   std::complex<double> tmp_1210;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_1210 += Conj(UHIp(gI2,2 + j2))*UHIp(gI1,2 + j2);
   }
   tmp_1208 += tmp_1210;
   result += (-0.15*Sqr(g1)) * tmp_1207 * tmp_1208;
   std::complex<double> tmp_1211;
   std::complex<double> tmp_1213;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1213 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1211 += tmp_1213;
   std::complex<double> tmp_1212;
   std::complex<double> tmp_1214;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_1214 += Conj(UHIp(gI2,2 + j2))*UHIp(gI1,2 + j2);
   }
   tmp_1212 += tmp_1214;
   result += (0.025*Sqr(gN)) * tmp_1211 * tmp_1212;
   std::complex<double> tmp_1215;
   std::complex<double> tmp_1217;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_1217 += Conj(UHIp(gI2,j1))*UHIp(gI1,j1);
   }
   tmp_1215 += tmp_1217;
   std::complex<double> tmp_1216;
   std::complex<double> tmp_1218;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1218 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_1216 += tmp_1218;
   result += (0.15*Sqr(g1)) * tmp_1215 * tmp_1216;
   std::complex<double> tmp_1219;
   std::complex<double> tmp_1221;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_1221 += Conj(UHIp(gI2,j1))*UHIp(gI1,j1);
   }
   tmp_1219 += tmp_1221;
   std::complex<double> tmp_1220;
   std::complex<double> tmp_1222;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1222 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_1220 += tmp_1222;
   result += (0.0375*Sqr(gN)) * tmp_1219 * tmp_1220;
   std::complex<double> tmp_1223;
   std::complex<double> tmp_1225;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_1225 += Conj(UHIp(gI2,2 + j1))*UHIp(gI1,2 + j1);
   }
   tmp_1223 += tmp_1225;
   std::complex<double> tmp_1224;
   std::complex<double> tmp_1226;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1226 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_1224 += tmp_1226;
   result += (-0.15*Sqr(g1)) * tmp_1223 * tmp_1224;
   std::complex<double> tmp_1227;
   std::complex<double> tmp_1229;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_1229 += Conj(UHIp(gI2,2 + j1))*UHIp(gI1,2 + j1);
   }
   tmp_1227 += tmp_1229;
   std::complex<double> tmp_1228;
   std::complex<double> tmp_1230;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1230 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_1228 += tmp_1230;
   result += (0.025*Sqr(gN)) * tmp_1227 * tmp_1228;
   if (gO1 < 3) {
      std::complex<double> tmp_1231;
      std::complex<double> tmp_1232;
      for (unsigned j1 = 0; j1 < 2; ++j1) {
         tmp_1232 += Conj(UHIp(gI2,j1))*UHIp(gI1,j1);
      }
      tmp_1231 += tmp_1232;
      result += (-0.075*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_1231;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1233;
      std::complex<double> tmp_1234;
      for (unsigned j1 = 0; j1 < 2; ++j1) {
         tmp_1234 += Conj(UHIp(gI2,j1))*UHIp(gI1,j1);
      }
      tmp_1233 += tmp_1234;
      result += (-0.125*KroneckerDelta(gO1,gO2)*Sqr(g2)) * tmp_1233;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1235;
      std::complex<double> tmp_1236;
      for (unsigned j1 = 0; j1 < 2; ++j1) {
         tmp_1236 += Conj(UHIp(gI2,j1))*UHIp(gI1,j1);
      }
      tmp_1235 += tmp_1236;
      result += (0.075*KroneckerDelta(gO1,gO2)*Sqr(gN)) * tmp_1235;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1237;
      std::complex<double> tmp_1238;
      for (unsigned j1 = 0; j1 < 2; ++j1) {
         tmp_1238 += Conj(UHIp(gI2,2 + j1))*UHIp(gI1,2 + j1);
      }
      tmp_1237 += tmp_1238;
      result += (0.075*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_1237;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1239;
      std::complex<double> tmp_1240;
      for (unsigned j1 = 0; j1 < 2; ++j1) {
         tmp_1240 += Conj(UHIp(gI2,2 + j1))*UHIp(gI1,2 + j1);
      }
      tmp_1239 += tmp_1240;
      result += (0.125*KroneckerDelta(gO1,gO2)*Sqr(g2)) * tmp_1239;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1241;
      std::complex<double> tmp_1242;
      for (unsigned j1 = 0; j1 < 2; ++j1) {
         tmp_1242 += Conj(UHIp(gI2,2 + j1))*UHIp(gI1,2 + j1);
      }
      tmp_1241 += tmp_1242;
      result += (0.05*KroneckerDelta(gO1,gO2)*Sqr(gN)) * tmp_1241;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1243;
      std::complex<double> tmp_1244;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         tmp_1244 += Conj(UHIp(gI2,j2))*UHIp(gI1,j2);
      }
      tmp_1243 += tmp_1244;
      result += (-0.075*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_1243;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1245;
      std::complex<double> tmp_1246;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         tmp_1246 += Conj(UHIp(gI2,j2))*UHIp(gI1,j2);
      }
      tmp_1245 += tmp_1246;
      result += (-0.125*KroneckerDelta(gO1,gO2)*Sqr(g2)) * tmp_1245;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1247;
      std::complex<double> tmp_1248;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         tmp_1248 += Conj(UHIp(gI2,j2))*UHIp(gI1,j2);
      }
      tmp_1247 += tmp_1248;
      result += (0.075*KroneckerDelta(gO1,gO2)*Sqr(gN)) * tmp_1247;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1249;
      std::complex<double> tmp_1250;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         tmp_1250 += Conj(UHIp(gI2,2 + j2))*UHIp(gI1,2 + j2);
      }
      tmp_1249 += tmp_1250;
      result += (0.075*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_1249;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1251;
      std::complex<double> tmp_1252;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         tmp_1252 += Conj(UHIp(gI2,2 + j2))*UHIp(gI1,2 + j2);
      }
      tmp_1251 += tmp_1252;
      result += (0.125*KroneckerDelta(gO1,gO2)*Sqr(g2)) * tmp_1251;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1253;
      std::complex<double> tmp_1254;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         tmp_1254 += Conj(UHIp(gI2,2 + j2))*UHIp(gI1,2 + j2);
      }
      tmp_1253 += tmp_1254;
      result += (0.05*KroneckerDelta(gO1,gO2)*Sqr(gN)) * tmp_1253;
   }

   return result;
}

std::complex<double> CLASSNAME::CpUSeconjUSeconjSdSd(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_1255;
   std::complex<double> tmp_1257;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1257 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
   }
   tmp_1255 += tmp_1257;
   std::complex<double> tmp_1256;
   std::complex<double> tmp_1258;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1258 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_1256 += tmp_1258;
   result += (-0.05*Sqr(g1)) * tmp_1255 * tmp_1256;
   std::complex<double> tmp_1259;
   std::complex<double> tmp_1261;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1261 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
   }
   tmp_1259 += tmp_1261;
   std::complex<double> tmp_1260;
   std::complex<double> tmp_1262;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1262 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_1260 += tmp_1262;
   result += (-0.0125*Sqr(gN)) * tmp_1259 * tmp_1260;
   std::complex<double> tmp_1263;
   std::complex<double> tmp_1265;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1265 += Conj(ZD(gI2,3 + j1))*ZD(gI1,3 + j1);
   }
   tmp_1263 += tmp_1265;
   std::complex<double> tmp_1264;
   std::complex<double> tmp_1266;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1266 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_1264 += tmp_1266;
   result += (-0.1*Sqr(g1)) * tmp_1263 * tmp_1264;
   std::complex<double> tmp_1267;
   std::complex<double> tmp_1269;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1269 += Conj(ZD(gI2,3 + j1))*ZD(gI1,3 + j1);
   }
   tmp_1267 += tmp_1269;
   std::complex<double> tmp_1268;
   std::complex<double> tmp_1270;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1270 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_1268 += tmp_1270;
   result += (-0.025*Sqr(gN)) * tmp_1267 * tmp_1268;
   std::complex<double> tmp_1271;
   std::complex<double> tmp_1273;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1273 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1271 += tmp_1273;
   std::complex<double> tmp_1272;
   std::complex<double> tmp_1274;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1274 += Conj(ZD(gI2,j2))*ZD(gI1,j2);
   }
   tmp_1272 += tmp_1274;
   result += (-0.05*Sqr(g1)) * tmp_1271 * tmp_1272;
   std::complex<double> tmp_1275;
   std::complex<double> tmp_1277;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1277 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1275 += tmp_1277;
   std::complex<double> tmp_1276;
   std::complex<double> tmp_1278;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1278 += Conj(ZD(gI2,j2))*ZD(gI1,j2);
   }
   tmp_1276 += tmp_1278;
   result += (-0.0125*Sqr(gN)) * tmp_1275 * tmp_1276;
   std::complex<double> tmp_1279;
   std::complex<double> tmp_1281;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1281 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1279 += tmp_1281;
   std::complex<double> tmp_1280;
   std::complex<double> tmp_1282;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1282 += Conj(ZD(gI2,3 + j2))*ZD(gI1,3 + j2);
   }
   tmp_1280 += tmp_1282;
   result += (-0.1*Sqr(g1)) * tmp_1279 * tmp_1280;
   std::complex<double> tmp_1283;
   std::complex<double> tmp_1285;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1285 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1283 += tmp_1285;
   std::complex<double> tmp_1284;
   std::complex<double> tmp_1286;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1286 += Conj(ZD(gI2,3 + j2))*ZD(gI1,3 + j2);
   }
   tmp_1284 += tmp_1286;
   result += (-0.025*Sqr(gN)) * tmp_1283 * tmp_1284;
   if (gO1 < 3) {
      std::complex<double> tmp_1287;
      std::complex<double> tmp_1288;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_1288 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
      }
      tmp_1287 += tmp_1288;
      result += (0.025*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_1287;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1289;
      std::complex<double> tmp_1290;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_1290 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
      }
      tmp_1289 += tmp_1290;
      result += (-0.125*KroneckerDelta(gO1,gO2)*Sqr(g2)) * tmp_1289;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1291;
      std::complex<double> tmp_1292;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_1292 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
      }
      tmp_1291 += tmp_1292;
      result += (-0.025*KroneckerDelta(gO1,gO2)*Sqr(gN)) * tmp_1291;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1293;
      std::complex<double> tmp_1294;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_1294 += Conj(ZD(gI2,3 + j1))*ZD(gI1,3 + j1);
      }
      tmp_1293 += tmp_1294;
      result += (0.05*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_1293;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1295;
      std::complex<double> tmp_1296;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_1296 += Conj(ZD(gI2,3 + j1))*ZD(gI1,3 + j1);
      }
      tmp_1295 += tmp_1296;
      result += (-0.05*KroneckerDelta(gO1,gO2)*Sqr(gN)) * tmp_1295;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1297;
      std::complex<double> tmp_1298;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_1298 += Conj(ZD(gI2,j2))*ZD(gI1,j2);
      }
      tmp_1297 += tmp_1298;
      result += (0.025*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_1297;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1299;
      std::complex<double> tmp_1300;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_1300 += Conj(ZD(gI2,j2))*ZD(gI1,j2);
      }
      tmp_1299 += tmp_1300;
      result += (-0.125*KroneckerDelta(gO1,gO2)*Sqr(g2)) * tmp_1299;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1301;
      std::complex<double> tmp_1302;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_1302 += Conj(ZD(gI2,j2))*ZD(gI1,j2);
      }
      tmp_1301 += tmp_1302;
      result += (-0.025*KroneckerDelta(gO1,gO2)*Sqr(gN)) * tmp_1301;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1303;
      std::complex<double> tmp_1304;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_1304 += Conj(ZD(gI2,3 + j2))*ZD(gI1,3 + j2);
      }
      tmp_1303 += tmp_1304;
      result += (0.05*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_1303;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1305;
      std::complex<double> tmp_1306;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_1306 += Conj(ZD(gI2,3 + j2))*ZD(gI1,3 + j2);
      }
      tmp_1305 += tmp_1306;
      result += (-0.05*KroneckerDelta(gO1,gO2)*Sqr(gN)) * tmp_1305;
   }
   if (gO2 < 3) {
      std::complex<double> tmp_1307;
      std::complex<double> tmp_1308;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_1308 += Conj(ZD(gI2,j1))*Yd(j1,j1)*ZD(gI1,3 + j1);
      }
      tmp_1307 += tmp_1308;
      result += (-(Conj(Ye(gO2,gO2))*KroneckerDelta(gO1,3 + gO2))) *
         tmp_1307;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1309;
      std::complex<double> tmp_1310;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_1310 += Conj(Yd(j2,j2))*Conj(ZD(gI2,3 + j2))*ZD(gI1,j2);
      }
      tmp_1309 += tmp_1310;
      result += (-(KroneckerDelta(3 + gO1,gO2)*Ye(gO1,gO1))) * tmp_1309;
   }

   return result;
}

std::complex<double> CLASSNAME::CpUSeconjUSeconjSDXSDX(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_1311;
   std::complex<double> tmp_1313;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1313 += Conj(ZDX(gI2,j1))*ZDX(gI1,j1);
   }
   tmp_1311 += tmp_1313;
   std::complex<double> tmp_1312;
   std::complex<double> tmp_1314;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1314 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_1312 += tmp_1314;
   result += (0.1*Sqr(g1)) * tmp_1311 * tmp_1312;
   std::complex<double> tmp_1315;
   std::complex<double> tmp_1317;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1317 += Conj(ZDX(gI2,j1))*ZDX(gI1,j1);
   }
   tmp_1315 += tmp_1317;
   std::complex<double> tmp_1316;
   std::complex<double> tmp_1318;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1318 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_1316 += tmp_1318;
   result += (0.025*Sqr(gN)) * tmp_1315 * tmp_1316;
   std::complex<double> tmp_1319;
   std::complex<double> tmp_1321;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1321 += Conj(ZDX(gI2,3 + j1))*ZDX(gI1,3 + j1);
   }
   tmp_1319 += tmp_1321;
   std::complex<double> tmp_1320;
   std::complex<double> tmp_1322;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1322 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_1320 += tmp_1322;
   result += (-0.1*Sqr(g1)) * tmp_1319 * tmp_1320;
   std::complex<double> tmp_1323;
   std::complex<double> tmp_1325;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1325 += Conj(ZDX(gI2,3 + j1))*ZDX(gI1,3 + j1);
   }
   tmp_1323 += tmp_1325;
   std::complex<double> tmp_1324;
   std::complex<double> tmp_1326;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1326 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_1324 += tmp_1326;
   result += (0.0375*Sqr(gN)) * tmp_1323 * tmp_1324;
   std::complex<double> tmp_1327;
   std::complex<double> tmp_1329;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1329 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1327 += tmp_1329;
   std::complex<double> tmp_1328;
   std::complex<double> tmp_1330;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1330 += Conj(ZDX(gI2,j2))*ZDX(gI1,j2);
   }
   tmp_1328 += tmp_1330;
   result += (0.1*Sqr(g1)) * tmp_1327 * tmp_1328;
   std::complex<double> tmp_1331;
   std::complex<double> tmp_1333;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1333 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1331 += tmp_1333;
   std::complex<double> tmp_1332;
   std::complex<double> tmp_1334;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1334 += Conj(ZDX(gI2,j2))*ZDX(gI1,j2);
   }
   tmp_1332 += tmp_1334;
   result += (0.025*Sqr(gN)) * tmp_1331 * tmp_1332;
   std::complex<double> tmp_1335;
   std::complex<double> tmp_1337;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1337 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1335 += tmp_1337;
   std::complex<double> tmp_1336;
   std::complex<double> tmp_1338;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1338 += Conj(ZDX(gI2,3 + j2))*ZDX(gI1,3 + j2);
   }
   tmp_1336 += tmp_1338;
   result += (-0.1*Sqr(g1)) * tmp_1335 * tmp_1336;
   std::complex<double> tmp_1339;
   std::complex<double> tmp_1341;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1341 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1339 += tmp_1341;
   std::complex<double> tmp_1340;
   std::complex<double> tmp_1342;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1342 += Conj(ZDX(gI2,3 + j2))*ZDX(gI1,3 + j2);
   }
   tmp_1340 += tmp_1342;
   result += (0.0375*Sqr(gN)) * tmp_1339 * tmp_1340;
   if (gO1 < 3) {
      std::complex<double> tmp_1343;
      std::complex<double> tmp_1344;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_1344 += Conj(ZDX(gI2,j1))*ZDX(gI1,j1);
      }
      tmp_1343 += tmp_1344;
      result += (-0.05*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_1343;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1345;
      std::complex<double> tmp_1346;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_1346 += Conj(ZDX(gI2,j1))*ZDX(gI1,j1);
      }
      tmp_1345 += tmp_1346;
      result += (0.05*KroneckerDelta(gO1,gO2)*Sqr(gN)) * tmp_1345;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1347;
      std::complex<double> tmp_1348;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_1348 += Conj(ZDX(gI2,3 + j1))*ZDX(gI1,3 + j1);
      }
      tmp_1347 += tmp_1348;
      result += (0.05*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_1347;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1349;
      std::complex<double> tmp_1350;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_1350 += Conj(ZDX(gI2,3 + j1))*ZDX(gI1,3 + j1);
      }
      tmp_1349 += tmp_1350;
      result += (0.075*KroneckerDelta(gO1,gO2)*Sqr(gN)) * tmp_1349;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1351;
      std::complex<double> tmp_1352;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_1352 += Conj(ZDX(gI2,j2))*ZDX(gI1,j2);
      }
      tmp_1351 += tmp_1352;
      result += (-0.05*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_1351;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1353;
      std::complex<double> tmp_1354;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_1354 += Conj(ZDX(gI2,j2))*ZDX(gI1,j2);
      }
      tmp_1353 += tmp_1354;
      result += (0.05*KroneckerDelta(gO1,gO2)*Sqr(gN)) * tmp_1353;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1355;
      std::complex<double> tmp_1356;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_1356 += Conj(ZDX(gI2,3 + j2))*ZDX(gI1,3 + j2);
      }
      tmp_1355 += tmp_1356;
      result += (0.05*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_1355;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1357;
      std::complex<double> tmp_1358;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_1358 += Conj(ZDX(gI2,3 + j2))*ZDX(gI1,3 + j2);
      }
      tmp_1357 += tmp_1358;
      result += (0.075*KroneckerDelta(gO1,gO2)*Sqr(gN)) * tmp_1357;
   }

   return result;
}

std::complex<double> CLASSNAME::CpUSeconjUSeconjSeSe(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_1359;
   std::complex<double> tmp_1361;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1361 += KroneckerDelta(gO1,3 + j1)*ZE(gI1,3 + j1);
   }
   tmp_1359 += tmp_1361;
   std::complex<double> tmp_1360;
   std::complex<double> tmp_1362;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1362 += Conj(ZE(gI2,3 + j2))*KroneckerDelta(gO2,3 + j2);
   }
   tmp_1360 += tmp_1362;
   result += (-0.3*Sqr(g1)) * tmp_1359 * tmp_1360;
   std::complex<double> tmp_1363;
   std::complex<double> tmp_1365;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1365 += KroneckerDelta(gO1,3 + j1)*ZE(gI1,3 + j1);
   }
   tmp_1363 += tmp_1365;
   std::complex<double> tmp_1364;
   std::complex<double> tmp_1366;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1366 += Conj(ZE(gI2,3 + j2))*KroneckerDelta(gO2,3 + j2);
   }
   tmp_1364 += tmp_1366;
   result += (-0.0125*Sqr(gN)) * tmp_1363 * tmp_1364;
   std::complex<double> tmp_1367;
   std::complex<double> tmp_1369;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1369 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
   }
   tmp_1367 += tmp_1369;
   std::complex<double> tmp_1368;
   std::complex<double> tmp_1370;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1370 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_1368 += tmp_1370;
   result += (0.15*Sqr(g1)) * tmp_1367 * tmp_1368;
   std::complex<double> tmp_1371;
   std::complex<double> tmp_1373;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1373 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
   }
   tmp_1371 += tmp_1373;
   std::complex<double> tmp_1372;
   std::complex<double> tmp_1374;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1374 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_1372 += tmp_1374;
   result += (-0.025*Sqr(gN)) * tmp_1371 * tmp_1372;
   std::complex<double> tmp_1375;
   std::complex<double> tmp_1377;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1377 += Conj(ZE(gI2,3 + j1))*ZE(gI1,3 + j1);
   }
   tmp_1375 += tmp_1377;
   std::complex<double> tmp_1376;
   std::complex<double> tmp_1378;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1378 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_1376 += tmp_1378;
   result += (-0.3*Sqr(g1)) * tmp_1375 * tmp_1376;
   std::complex<double> tmp_1379;
   std::complex<double> tmp_1381;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1381 += Conj(ZE(gI2,3 + j1))*ZE(gI1,3 + j1);
   }
   tmp_1379 += tmp_1381;
   std::complex<double> tmp_1380;
   std::complex<double> tmp_1382;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1382 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_1380 += tmp_1382;
   result += (-0.0125*Sqr(gN)) * tmp_1379 * tmp_1380;
   std::complex<double> tmp_1383;
   std::complex<double> tmp_1385;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1385 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1383 += tmp_1385;
   std::complex<double> tmp_1384;
   std::complex<double> tmp_1386;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1386 += Conj(ZE(gI2,j2))*ZE(gI1,j2);
   }
   tmp_1384 += tmp_1386;
   result += (0.15*Sqr(g1)) * tmp_1383 * tmp_1384;
   std::complex<double> tmp_1387;
   std::complex<double> tmp_1389;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1389 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1387 += tmp_1389;
   std::complex<double> tmp_1388;
   std::complex<double> tmp_1390;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1390 += Conj(ZE(gI2,j2))*ZE(gI1,j2);
   }
   tmp_1388 += tmp_1390;
   result += (-0.025*Sqr(gN)) * tmp_1387 * tmp_1388;
   std::complex<double> tmp_1391;
   std::complex<double> tmp_1393;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1393 += Conj(ZE(gI2,j1))*KroneckerDelta(gO2,3 + j1)*Ye(j1,j1);
   }
   tmp_1391 += tmp_1393;
   std::complex<double> tmp_1392;
   std::complex<double> tmp_1394;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1394 += Conj(Ye(j2,j2))*KroneckerDelta(gO1,3 + j2)*ZE(gI1,j2);
   }
   tmp_1392 += tmp_1394;
   result += (-1) * tmp_1391 * tmp_1392;
   std::complex<double> tmp_1395;
   std::complex<double> tmp_1397;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1397 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1395 += tmp_1397;
   std::complex<double> tmp_1396;
   std::complex<double> tmp_1398;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1398 += Conj(ZE(gI2,3 + j2))*ZE(gI1,3 + j2);
   }
   tmp_1396 += tmp_1398;
   result += (-0.3*Sqr(g1)) * tmp_1395 * tmp_1396;
   std::complex<double> tmp_1399;
   std::complex<double> tmp_1401;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1401 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1399 += tmp_1401;
   std::complex<double> tmp_1400;
   std::complex<double> tmp_1402;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1402 += Conj(ZE(gI2,3 + j2))*ZE(gI1,3 + j2);
   }
   tmp_1400 += tmp_1402;
   result += (-0.0125*Sqr(gN)) * tmp_1399 * tmp_1400;
   std::complex<double> tmp_1403;
   std::complex<double> tmp_1405;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1405 += Conj(ZE(gI2,3 + j1))*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1403 += tmp_1405;
   std::complex<double> tmp_1404;
   std::complex<double> tmp_1406;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1406 += KroneckerDelta(gO1,3 + j2)*ZE(gI1,3 + j2);
   }
   tmp_1404 += tmp_1406;
   result += (-0.3*Sqr(g1)) * tmp_1403 * tmp_1404;
   std::complex<double> tmp_1407;
   std::complex<double> tmp_1409;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1409 += Conj(ZE(gI2,3 + j1))*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1407 += tmp_1409;
   std::complex<double> tmp_1408;
   std::complex<double> tmp_1410;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1410 += KroneckerDelta(gO1,3 + j2)*ZE(gI1,3 + j2);
   }
   tmp_1408 += tmp_1410;
   result += (-0.0125*Sqr(gN)) * tmp_1407 * tmp_1408;
   if (gO1 < 3) {
      std::complex<double> tmp_1411;
      std::complex<double> tmp_1412;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_1412 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
      }
      tmp_1411 += tmp_1412;
      result += (-0.075*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_1411;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1413;
      std::complex<double> tmp_1414;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_1414 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
      }
      tmp_1413 += tmp_1414;
      result += (-0.125*KroneckerDelta(gO1,gO2)*Sqr(g2)) * tmp_1413;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1415;
      std::complex<double> tmp_1416;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_1416 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
      }
      tmp_1415 += tmp_1416;
      result += (-0.05*KroneckerDelta(gO1,gO2)*Sqr(gN)) * tmp_1415;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1417;
      std::complex<double> tmp_1418;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_1418 += Conj(ZE(gI2,3 + j1))*ZE(gI1,3 + j1);
      }
      tmp_1417 += tmp_1418;
      result += (0.15*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_1417;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1419;
      std::complex<double> tmp_1420;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_1420 += Conj(ZE(gI2,3 + j1))*ZE(gI1,3 + j1);
      }
      tmp_1419 += tmp_1420;
      result += (-0.025*KroneckerDelta(gO1,gO2)*Sqr(gN)) * tmp_1419;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1421;
      std::complex<double> tmp_1422;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_1422 += Conj(ZE(gI2,j2))*ZE(gI1,j2);
      }
      tmp_1421 += tmp_1422;
      result += (-0.075*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_1421;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1423;
      std::complex<double> tmp_1424;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_1424 += Conj(ZE(gI2,j2))*ZE(gI1,j2);
      }
      tmp_1423 += tmp_1424;
      result += (-0.125*KroneckerDelta(gO1,gO2)*Sqr(g2)) * tmp_1423;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1425;
      std::complex<double> tmp_1426;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_1426 += Conj(ZE(gI2,j2))*ZE(gI1,j2);
      }
      tmp_1425 += tmp_1426;
      result += (-0.05*KroneckerDelta(gO1,gO2)*Sqr(gN)) * tmp_1425;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1427;
      std::complex<double> tmp_1428;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_1428 += Conj(ZE(gI2,3 + j2))*ZE(gI1,3 + j2);
      }
      tmp_1427 += tmp_1428;
      result += (0.15*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_1427;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1429;
      std::complex<double> tmp_1430;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_1430 += Conj(ZE(gI2,3 + j2))*ZE(gI1,3 + j2);
      }
      tmp_1429 += tmp_1430;
      result += (-0.025*KroneckerDelta(gO1,gO2)*Sqr(gN)) * tmp_1429;
   }
   if (gO2 < 3) {
      std::complex<double> tmp_1431;
      std::complex<double> tmp_1432;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_1432 += KroneckerDelta(gO1,3 + j1)*ZE(gI1,3 + j1);
      }
      tmp_1431 += tmp_1432;
      result += (0.15*Conj(ZE(gI2,gO2))*Sqr(g1)) * tmp_1431;
   }
   if (gO2 < 3) {
      std::complex<double> tmp_1433;
      std::complex<double> tmp_1434;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_1434 += KroneckerDelta(gO1,3 + j1)*ZE(gI1,3 + j1);
      }
      tmp_1433 += tmp_1434;
      result += (-0.025*Conj(ZE(gI2,gO2))*Sqr(gN)) * tmp_1433;
   }
   if (gO2 < 3) {
      std::complex<double> tmp_1435;
      std::complex<double> tmp_1436;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_1436 += Conj(ZE(gI2,j1))*Ye(j1,j1)*ZE(gI1,3 + j1);
      }
      tmp_1435 += tmp_1436;
      result += (-(Conj(Ye(gO2,gO2))*KroneckerDelta(gO1,3 + gO2))) *
         tmp_1435;
   }
   if (gO2 < 3) {
      std::complex<double> tmp_1437;
      std::complex<double> tmp_1438;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_1438 += KroneckerDelta(gO1,3 + j2)*ZE(gI1,3 + j2);
      }
      tmp_1437 += tmp_1438;
      result += (0.15*Conj(ZE(gI2,gO2))*Sqr(g1)) * tmp_1437;
   }
   if (gO2 < 3) {
      std::complex<double> tmp_1439;
      std::complex<double> tmp_1440;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_1440 += KroneckerDelta(gO1,3 + j2)*ZE(gI1,3 + j2);
      }
      tmp_1439 += tmp_1440;
      result += (-0.025*Conj(ZE(gI2,gO2))*Sqr(gN)) * tmp_1439;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1441;
      std::complex<double> tmp_1442;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_1442 += Conj(Ye(j2,j2))*Conj(ZE(gI2,3 + j2))*ZE(gI1,j2);
      }
      tmp_1441 += tmp_1442;
      result += (-(KroneckerDelta(3 + gO1,gO2)*Ye(gO1,gO1))) * tmp_1441;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1443;
      std::complex<double> tmp_1444;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_1444 += Conj(ZE(gI2,3 + j1))*KroneckerDelta(gO2,3 + j1);
      }
      tmp_1443 += tmp_1444;
      result += (0.15*Sqr(g1)*ZE(gI1,gO1)) * tmp_1443;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1445;
      std::complex<double> tmp_1446;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_1446 += Conj(ZE(gI2,3 + j1))*KroneckerDelta(gO2,3 + j1);
      }
      tmp_1445 += tmp_1446;
      result += (-0.025*Sqr(gN)*ZE(gI1,gO1)) * tmp_1445;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1447;
      std::complex<double> tmp_1448;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_1448 += Conj(ZE(gI2,3 + j2))*KroneckerDelta(gO2,3 + j2);
      }
      tmp_1447 += tmp_1448;
      result += (0.15*Sqr(g1)*ZE(gI1,gO1)) * tmp_1447;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1449;
      std::complex<double> tmp_1450;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_1450 += Conj(ZE(gI2,3 + j2))*KroneckerDelta(gO2,3 + j2);
      }
      tmp_1449 += tmp_1450;
      result += (-0.025*Sqr(gN)*ZE(gI1,gO1)) * tmp_1449;
   }
   if (gO1 < 3 && gO2 < 3) {
      result += -0.15*Conj(ZE(gI2,gO2))*Sqr(g1)*ZE(gI1,gO1);
   }
   if (gO1 < 3 && gO2 < 3) {
      result += -0.25*Conj(ZE(gI2,gO2))*Sqr(g2)*ZE(gI1,gO1);
   }
   if (gO1 < 3 && gO2 < 3) {
      result += -0.1*Conj(ZE(gI2,gO2))*Sqr(gN)*ZE(gI1,gO1);
   }
   if (gO1 < 3 && gO2 < 3) {
      result += -(Conj(Ye(gO2,gO2))*Conj(ZE(gI2,3 + gO2))*Ye(gO1,gO1)*ZE(gI1
         ,3 + gO1));
   }

   return result;
}

std::complex<double> CLASSNAME::CpUSeconjUSeconjSuSu(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_1451;
   std::complex<double> tmp_1453;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1453 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
   }
   tmp_1451 += tmp_1453;
   std::complex<double> tmp_1452;
   std::complex<double> tmp_1454;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1454 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_1452 += tmp_1454;
   result += (-0.05*Sqr(g1)) * tmp_1451 * tmp_1452;
   std::complex<double> tmp_1455;
   std::complex<double> tmp_1457;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1457 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
   }
   tmp_1455 += tmp_1457;
   std::complex<double> tmp_1456;
   std::complex<double> tmp_1458;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1458 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_1456 += tmp_1458;
   result += (-0.0125*Sqr(gN)) * tmp_1455 * tmp_1456;
   std::complex<double> tmp_1459;
   std::complex<double> tmp_1461;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1461 += Conj(ZU(gI2,3 + j1))*ZU(gI1,3 + j1);
   }
   tmp_1459 += tmp_1461;
   std::complex<double> tmp_1460;
   std::complex<double> tmp_1462;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1462 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_1460 += tmp_1462;
   result += (0.2*Sqr(g1)) * tmp_1459 * tmp_1460;
   std::complex<double> tmp_1463;
   std::complex<double> tmp_1465;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1465 += Conj(ZU(gI2,3 + j1))*ZU(gI1,3 + j1);
   }
   tmp_1463 += tmp_1465;
   std::complex<double> tmp_1464;
   std::complex<double> tmp_1466;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1466 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_1464 += tmp_1466;
   result += (-0.0125*Sqr(gN)) * tmp_1463 * tmp_1464;
   std::complex<double> tmp_1467;
   std::complex<double> tmp_1469;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1469 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1467 += tmp_1469;
   std::complex<double> tmp_1468;
   std::complex<double> tmp_1470;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1470 += Conj(ZU(gI2,j2))*ZU(gI1,j2);
   }
   tmp_1468 += tmp_1470;
   result += (-0.05*Sqr(g1)) * tmp_1467 * tmp_1468;
   std::complex<double> tmp_1471;
   std::complex<double> tmp_1473;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1473 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1471 += tmp_1473;
   std::complex<double> tmp_1472;
   std::complex<double> tmp_1474;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1474 += Conj(ZU(gI2,j2))*ZU(gI1,j2);
   }
   tmp_1472 += tmp_1474;
   result += (-0.0125*Sqr(gN)) * tmp_1471 * tmp_1472;
   std::complex<double> tmp_1475;
   std::complex<double> tmp_1477;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1477 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1475 += tmp_1477;
   std::complex<double> tmp_1476;
   std::complex<double> tmp_1478;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1478 += Conj(ZU(gI2,3 + j2))*ZU(gI1,3 + j2);
   }
   tmp_1476 += tmp_1478;
   result += (0.2*Sqr(g1)) * tmp_1475 * tmp_1476;
   std::complex<double> tmp_1479;
   std::complex<double> tmp_1481;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1481 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1479 += tmp_1481;
   std::complex<double> tmp_1480;
   std::complex<double> tmp_1482;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1482 += Conj(ZU(gI2,3 + j2))*ZU(gI1,3 + j2);
   }
   tmp_1480 += tmp_1482;
   result += (-0.0125*Sqr(gN)) * tmp_1479 * tmp_1480;
   if (gO1 < 3) {
      std::complex<double> tmp_1483;
      std::complex<double> tmp_1484;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_1484 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
      }
      tmp_1483 += tmp_1484;
      result += (0.025*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_1483;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1485;
      std::complex<double> tmp_1486;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_1486 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
      }
      tmp_1485 += tmp_1486;
      result += (0.125*KroneckerDelta(gO1,gO2)*Sqr(g2)) * tmp_1485;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1487;
      std::complex<double> tmp_1488;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_1488 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
      }
      tmp_1487 += tmp_1488;
      result += (-0.025*KroneckerDelta(gO1,gO2)*Sqr(gN)) * tmp_1487;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1489;
      std::complex<double> tmp_1490;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_1490 += Conj(ZU(gI2,3 + j1))*ZU(gI1,3 + j1);
      }
      tmp_1489 += tmp_1490;
      result += (-0.1*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_1489;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1491;
      std::complex<double> tmp_1492;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_1492 += Conj(ZU(gI2,3 + j1))*ZU(gI1,3 + j1);
      }
      tmp_1491 += tmp_1492;
      result += (-0.025*KroneckerDelta(gO1,gO2)*Sqr(gN)) * tmp_1491;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1493;
      std::complex<double> tmp_1494;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_1494 += Conj(ZU(gI2,j2))*ZU(gI1,j2);
      }
      tmp_1493 += tmp_1494;
      result += (0.025*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_1493;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1495;
      std::complex<double> tmp_1496;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_1496 += Conj(ZU(gI2,j2))*ZU(gI1,j2);
      }
      tmp_1495 += tmp_1496;
      result += (0.125*KroneckerDelta(gO1,gO2)*Sqr(g2)) * tmp_1495;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1497;
      std::complex<double> tmp_1498;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_1498 += Conj(ZU(gI2,j2))*ZU(gI1,j2);
      }
      tmp_1497 += tmp_1498;
      result += (-0.025*KroneckerDelta(gO1,gO2)*Sqr(gN)) * tmp_1497;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1499;
      std::complex<double> tmp_1500;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_1500 += Conj(ZU(gI2,3 + j2))*ZU(gI1,3 + j2);
      }
      tmp_1499 += tmp_1500;
      result += (-0.1*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_1499;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1501;
      std::complex<double> tmp_1502;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_1502 += Conj(ZU(gI2,3 + j2))*ZU(gI1,3 + j2);
      }
      tmp_1501 += tmp_1502;
      result += (-0.025*KroneckerDelta(gO1,gO2)*Sqr(gN)) * tmp_1501;
   }

   return result;
}

std::complex<double> CLASSNAME::CpconjUSeSeAh(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_1503;
   std::complex<double> tmp_1504;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1504 += Conj(ZE(gI1,j1))*KroneckerDelta(gO2,3 + j1)*TYe(j1,j1);
   }
   tmp_1503 += tmp_1504;
   result += (std::complex<double>(0.,-0.7071067811865475)*ZA(gI2,0)) *
      tmp_1503;
   if (gO2 < 3) {
      result += std::complex<double>(0.,0.7071067811865475)*Conj(ZE(gI1,3 +
         gO2))*Conj(TYe(gO2,gO2))*ZA(gI2,0);
   }
   std::complex<double> tmp_1505;
   std::complex<double> tmp_1506;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1506 += Conj(ZE(gI1,j1))*KroneckerDelta(gO2,3 + j1)*Ye(j1,j1);
   }
   tmp_1505 += tmp_1506;
   result += (std::complex<double>(0,-0.5)*vs*Conj(Lambdax)*ZA(gI2,1)) *
      tmp_1505;
   if (gO2 < 3) {
      result += std::complex<double>(0,0.5)*vs*Conj(Ye(gO2,gO2))*Conj(ZE(gI1
         ,3 + gO2))*Lambdax*ZA(gI2,1);
   }
   std::complex<double> tmp_1507;
   std::complex<double> tmp_1508;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1508 += Conj(ZE(gI1,j1))*KroneckerDelta(gO2,3 + j1)*Ye(j1,j1);
   }
   tmp_1507 += tmp_1508;
   result += (std::complex<double>(0,-0.5)*vu*Conj(Lambdax)*ZA(gI2,2)) *
      tmp_1507;
   if (gO2 < 3) {
      result += std::complex<double>(0,0.5)*vu*Conj(Ye(gO2,gO2))*Conj(ZE(gI1
         ,3 + gO2))*Lambdax*ZA(gI2,2);
   }

   return result;
}

std::complex<double> CLASSNAME::CpconjUSeSehh(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_1509;
   std::complex<double> tmp_1510;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1510 += Conj(ZE(gI1,3 + j1))*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1509 += tmp_1510;
   result += (0.3*vd*Sqr(g1)*ZH(gI2,0)) * tmp_1509;
   std::complex<double> tmp_1511;
   std::complex<double> tmp_1512;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1512 += Conj(ZE(gI1,3 + j1))*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1511 += tmp_1512;
   result += (0.075*vd*Sqr(gN)*ZH(gI2,0)) * tmp_1511;
   std::complex<double> tmp_1513;
   std::complex<double> tmp_1514;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1514 += Conj(ZE(gI1,j1))*KroneckerDelta(gO2,3 + j1)*TYe(j1,j1);
   }
   tmp_1513 += tmp_1514;
   result += (-0.7071067811865475*ZH(gI2,0)) * tmp_1513;
   std::complex<double> tmp_1515;
   std::complex<double> tmp_1516;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1516 += AbsSqr(Ye(j2,j2))*Conj(ZE(gI1,3 + j2))*KroneckerDelta(gO2,
         3 + j2);
   }
   tmp_1515 += tmp_1516;
   result += (-(vd*ZH(gI2,0))) * tmp_1515;
   if (gO2 < 3) {
      result += -0.15*vd*Conj(ZE(gI1,gO2))*Sqr(g1)*ZH(gI2,0);
   }
   if (gO2 < 3) {
      result += 0.25*vd*Conj(ZE(gI1,gO2))*Sqr(g2)*ZH(gI2,0);
   }
   if (gO2 < 3) {
      result += 0.15*vd*Conj(ZE(gI1,gO2))*Sqr(gN)*ZH(gI2,0);
   }
   if (gO2 < 3) {
      result += -0.7071067811865475*Conj(ZE(gI1,3 + gO2))*Conj(TYe(gO2,gO2))
         *ZH(gI2,0);
   }
   if (gO2 < 3) {
      result += -(vd*AbsSqr(Ye(gO2,gO2))*Conj(ZE(gI1,gO2))*ZH(gI2,0));
   }
   std::complex<double> tmp_1517;
   std::complex<double> tmp_1518;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1518 += Conj(ZE(gI1,3 + j1))*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1517 += tmp_1518;
   result += (-0.3*vu*Sqr(g1)*ZH(gI2,1)) * tmp_1517;
   std::complex<double> tmp_1519;
   std::complex<double> tmp_1520;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1520 += Conj(ZE(gI1,3 + j1))*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1519 += tmp_1520;
   result += (0.05*vu*Sqr(gN)*ZH(gI2,1)) * tmp_1519;
   std::complex<double> tmp_1521;
   std::complex<double> tmp_1522;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1522 += Conj(ZE(gI1,j1))*KroneckerDelta(gO2,3 + j1)*Ye(j1,j1);
   }
   tmp_1521 += tmp_1522;
   result += (0.5*vs*Conj(Lambdax)*ZH(gI2,1)) * tmp_1521;
   if (gO2 < 3) {
      result += 0.15*vu*Conj(ZE(gI1,gO2))*Sqr(g1)*ZH(gI2,1);
   }
   if (gO2 < 3) {
      result += -0.25*vu*Conj(ZE(gI1,gO2))*Sqr(g2)*ZH(gI2,1);
   }
   if (gO2 < 3) {
      result += 0.1*vu*Conj(ZE(gI1,gO2))*Sqr(gN)*ZH(gI2,1);
   }
   if (gO2 < 3) {
      result += 0.5*vs*Conj(Ye(gO2,gO2))*Conj(ZE(gI1,3 + gO2))*Lambdax*ZH(
         gI2,1);
   }
   std::complex<double> tmp_1523;
   std::complex<double> tmp_1524;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1524 += Conj(ZE(gI1,3 + j1))*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1523 += tmp_1524;
   result += (-0.125*vs*Sqr(gN)*ZH(gI2,2)) * tmp_1523;
   std::complex<double> tmp_1525;
   std::complex<double> tmp_1526;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1526 += Conj(ZE(gI1,j1))*KroneckerDelta(gO2,3 + j1)*Ye(j1,j1);
   }
   tmp_1525 += tmp_1526;
   result += (0.5*vu*Conj(Lambdax)*ZH(gI2,2)) * tmp_1525;
   if (gO2 < 3) {
      result += -0.25*vs*Conj(ZE(gI1,gO2))*Sqr(gN)*ZH(gI2,2);
   }
   if (gO2 < 3) {
      result += 0.5*vu*Conj(Ye(gO2,gO2))*Conj(ZE(gI1,3 + gO2))*Lambdax*ZH(
         gI2,2);
   }

   return result;
}

std::complex<double> CLASSNAME::CpconjUSeVWmSv(unsigned gO2, unsigned gI2) const
{
   std::complex<double> result;

   if (gO2 < 3) {
      result += 0.7071067811865475*g2*Conj(ZV(gI2,gO2));
   }

   return result;
}

std::complex<double> CLASSNAME::CpconjUSeVPSe(unsigned gO2, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_1527;
   std::complex<double> tmp_1528;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1528 += Conj(ZE(gI2,3 + j1))*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1527 += tmp_1528;
   result += (-0.7745966692414834*g1*Cos(ThetaW())) * tmp_1527;
   if (gO2 < 3) {
      result += -0.3872983346207417*g1*Conj(ZE(gI2,gO2))*Cos(ThetaW());
   }
   if (gO2 < 3) {
      result += -0.5*g2*Conj(ZE(gI2,gO2))*Sin(ThetaW());
   }

   return result;
}

std::complex<double> CLASSNAME::CpconjUSeVZSe(unsigned gO2, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_1529;
   std::complex<double> tmp_1530;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1530 += Conj(ZE(gI2,3 + j1))*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1529 += tmp_1530;
   result += (0.7745966692414834*g1*Cos(ThetaWp())*Sin(ThetaW())) * tmp_1529;
   std::complex<double> tmp_1531;
   std::complex<double> tmp_1532;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1532 += Conj(ZE(gI2,3 + j1))*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1531 += tmp_1532;
   result += (-0.15811388300841897*gN*Sin(ThetaWp())) * tmp_1531;
   if (gO2 < 3) {
      result += -0.5*g2*Conj(ZE(gI2,gO2))*Cos(ThetaW())*Cos(ThetaWp());
   }
   if (gO2 < 3) {
      result += 0.3872983346207417*g1*Conj(ZE(gI2,gO2))*Cos(ThetaWp())*Sin(
         ThetaW());
   }
   if (gO2 < 3) {
      result += 0.31622776601683794*gN*Conj(ZE(gI2,gO2))*Sin(ThetaWp());
   }

   return result;
}

std::complex<double> CLASSNAME::CpconjUSeVZpSe(unsigned gO2, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_1533;
   std::complex<double> tmp_1534;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1534 += Conj(ZE(gI2,3 + j1))*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1533 += tmp_1534;
   result += (-0.15811388300841897*gN*Cos(ThetaWp())) * tmp_1533;
   std::complex<double> tmp_1535;
   std::complex<double> tmp_1536;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1536 += Conj(ZE(gI2,3 + j1))*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1535 += tmp_1536;
   result += (-0.7745966692414834*g1*Sin(ThetaW())*Sin(ThetaWp())) * tmp_1535;
   if (gO2 < 3) {
      result += 0.31622776601683794*gN*Conj(ZE(gI2,gO2))*Cos(ThetaWp());
   }
   if (gO2 < 3) {
      result += 0.5*g2*Conj(ZE(gI2,gO2))*Cos(ThetaW())*Sin(ThetaWp());
   }
   if (gO2 < 3) {
      result += -0.3872983346207417*g1*Conj(ZE(gI2,gO2))*Sin(ThetaW())*Sin(
         ThetaWp());
   }

   return result;
}

std::complex<double> CLASSNAME::CpUSDXconjUSDXVZVZ(unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   std::complex<double> tmp_1537;
   std::complex<double> tmp_1538;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1538 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1537 += tmp_1538;
   result += (0.13333333333333333*Sqr(g1)*Sqr(Cos(ThetaWp()))*Sqr(Sin(ThetaW())
      )) * tmp_1537;
   std::complex<double> tmp_1539;
   std::complex<double> tmp_1540;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1540 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1539 += tmp_1540;
   result += (0.4898979485566356*g1*gN*Cos(ThetaWp())*Sin(ThetaW())*Sin(ThetaWp
      ())) * tmp_1539;
   std::complex<double> tmp_1541;
   std::complex<double> tmp_1542;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1542 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1541 += tmp_1542;
   result += (0.45*Sqr(gN)*Sqr(Sin(ThetaWp()))) * tmp_1541;
   if (gO1 < 3) {
      result += 0.13333333333333333*KroneckerDelta(gO1,gO2)*Sqr(g1)*Sqr(Cos(
         ThetaWp()))*Sqr(Sin(ThetaW()));
   }
   if (gO1 < 3) {
      result += -0.32659863237109044*g1*gN*Cos(ThetaWp())*KroneckerDelta(gO1
         ,gO2)*Sin(ThetaW())*Sin(ThetaWp());
   }
   if (gO1 < 3) {
      result += 0.2*KroneckerDelta(gO1,gO2)*Sqr(gN)*Sqr(Sin(ThetaWp()));
   }

   return result;
}

std::complex<double> CLASSNAME::CpUSDXconjUSDXVZpVZp(unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   std::complex<double> tmp_1543;
   std::complex<double> tmp_1544;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1544 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1543 += tmp_1544;
   result += (0.45*Sqr(gN)*Sqr(Cos(ThetaWp()))) * tmp_1543;
   std::complex<double> tmp_1545;
   std::complex<double> tmp_1546;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1546 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1545 += tmp_1546;
   result += (-0.4898979485566356*g1*gN*Cos(ThetaWp())*Sin(ThetaW())*Sin(
      ThetaWp())) * tmp_1545;
   std::complex<double> tmp_1547;
   std::complex<double> tmp_1548;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1548 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1547 += tmp_1548;
   result += (0.13333333333333333*Sqr(g1)*Sqr(Sin(ThetaW()))*Sqr(Sin(ThetaWp())
      )) * tmp_1547;
   if (gO1 < 3) {
      result += 0.2*KroneckerDelta(gO1,gO2)*Sqr(gN)*Sqr(Cos(ThetaWp()));
   }
   if (gO1 < 3) {
      result += 0.32659863237109044*g1*gN*Cos(ThetaWp())*KroneckerDelta(gO1,
         gO2)*Sin(ThetaW())*Sin(ThetaWp());
   }
   if (gO1 < 3) {
      result += 0.13333333333333333*KroneckerDelta(gO1,gO2)*Sqr(g1)*Sqr(Sin(
         ThetaW()))*Sqr(Sin(ThetaWp()));
   }

   return result;
}

std::complex<double> CLASSNAME::CpUSDXconjUSDXconjHpmHpm(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_1549;
   std::complex<double> tmp_1550;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1550 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1549 += tmp_1550;
   result += (0.1*Sqr(g1)*ZP(gI1,0)*ZP(gI2,0)) * tmp_1549;
   std::complex<double> tmp_1551;
   std::complex<double> tmp_1552;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1552 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1551 += tmp_1552;
   result += (-0.225*Sqr(gN)*ZP(gI1,0)*ZP(gI2,0)) * tmp_1551;
   if (gO1 < 3) {
      result += -0.1*KroneckerDelta(gO1,gO2)*Sqr(g1)*ZP(gI1,0)*ZP(gI2,0);
   }
   if (gO1 < 3) {
      result += -0.15*KroneckerDelta(gO1,gO2)*Sqr(gN)*ZP(gI1,0)*ZP(gI2,0);
   }
   if (gO2 < 3) {
      result += -(Conj(Kappa(gO2,gO2))*KroneckerDelta(gO1,3 + gO2)*Lambdax*
         ZP(gI1,1)*ZP(gI2,0));
   }
   std::complex<double> tmp_1553;
   std::complex<double> tmp_1554;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1554 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1553 += tmp_1554;
   result += (-0.1*Sqr(g1)*ZP(gI1,1)*ZP(gI2,1)) * tmp_1553;
   std::complex<double> tmp_1555;
   std::complex<double> tmp_1556;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1556 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1555 += tmp_1556;
   result += (-0.15*Sqr(gN)*ZP(gI1,1)*ZP(gI2,1)) * tmp_1555;
   if (gO1 < 3) {
      result += 0.1*KroneckerDelta(gO1,gO2)*Sqr(g1)*ZP(gI1,1)*ZP(gI2,1);
   }
   if (gO1 < 3) {
      result += -0.1*KroneckerDelta(gO1,gO2)*Sqr(gN)*ZP(gI1,1)*ZP(gI2,1);
   }
   if (gO1 < 3) {
      result += -(Conj(Lambdax)*KroneckerDelta(3 + gO1,gO2)*ZP(gI1,0)*ZP(gI2
         ,1)*Kappa(gO1,gO1));
   }

   return result;
}

std::complex<double> CLASSNAME::CpUSDXconjUSDXconjSHp0SHp0(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_1557;
   std::complex<double> tmp_1558;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1558 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1557 += tmp_1558;
   result += (0.1*Conj(UHp0(gI2,0))*Sqr(g1)*UHp0(gI1,0)) * tmp_1557;
   std::complex<double> tmp_1559;
   std::complex<double> tmp_1560;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1560 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1559 += tmp_1560;
   result += (0.15*Conj(UHp0(gI2,0))*Sqr(gN)*UHp0(gI1,0)) * tmp_1559;
   if (gO1 < 3) {
      result += -0.1*Conj(UHp0(gI2,0))*KroneckerDelta(gO1,gO2)*Sqr(g1)*UHp0(
         gI1,0);
   }
   if (gO1 < 3) {
      result += 0.1*Conj(UHp0(gI2,0))*KroneckerDelta(gO1,gO2)*Sqr(gN)*UHp0(
         gI1,0);
   }
   std::complex<double> tmp_1561;
   std::complex<double> tmp_1562;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1562 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1561 += tmp_1562;
   result += (-0.1*Conj(UHp0(gI2,1))*Sqr(g1)*UHp0(gI1,1)) * tmp_1561;
   std::complex<double> tmp_1563;
   std::complex<double> tmp_1564;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1564 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1563 += tmp_1564;
   result += (-0.15*Conj(UHp0(gI2,1))*Sqr(gN)*UHp0(gI1,1)) * tmp_1563;
   if (gO1 < 3) {
      result += 0.1*Conj(UHp0(gI2,1))*KroneckerDelta(gO1,gO2)*Sqr(g1)*UHp0(
         gI1,1);
   }
   if (gO1 < 3) {
      result += -0.1*Conj(UHp0(gI2,1))*KroneckerDelta(gO1,gO2)*Sqr(gN)*UHp0(
         gI1,1);
   }

   return result;
}

std::complex<double> CLASSNAME::CpUSDXconjUSDXconjSHppSHpp(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_1565;
   std::complex<double> tmp_1566;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1566 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1565 += tmp_1566;
   result += (0.1*Conj(UHpp(gI2,0))*Sqr(g1)*UHpp(gI1,0)) * tmp_1565;
   std::complex<double> tmp_1567;
   std::complex<double> tmp_1568;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1568 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1567 += tmp_1568;
   result += (0.15*Conj(UHpp(gI2,0))*Sqr(gN)*UHpp(gI1,0)) * tmp_1567;
   if (gO1 < 3) {
      result += -0.1*Conj(UHpp(gI2,0))*KroneckerDelta(gO1,gO2)*Sqr(g1)*UHpp(
         gI1,0);
   }
   if (gO1 < 3) {
      result += 0.1*Conj(UHpp(gI2,0))*KroneckerDelta(gO1,gO2)*Sqr(gN)*UHpp(
         gI1,0);
   }
   std::complex<double> tmp_1569;
   std::complex<double> tmp_1570;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1570 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1569 += tmp_1570;
   result += (-0.1*Conj(UHpp(gI2,1))*Sqr(g1)*UHpp(gI1,1)) * tmp_1569;
   std::complex<double> tmp_1571;
   std::complex<double> tmp_1572;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1572 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1571 += tmp_1572;
   result += (-0.15*Conj(UHpp(gI2,1))*Sqr(gN)*UHpp(gI1,1)) * tmp_1571;
   if (gO1 < 3) {
      result += 0.1*Conj(UHpp(gI2,1))*KroneckerDelta(gO1,gO2)*Sqr(g1)*UHpp(
         gI1,1);
   }
   if (gO1 < 3) {
      result += -0.1*Conj(UHpp(gI2,1))*KroneckerDelta(gO1,gO2)*Sqr(gN)*UHpp(
         gI1,1);
   }

   return result;
}

std::complex<double> CLASSNAME::CpUSDXconjUSDXconjSSI0SSI0(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_1573;
   std::complex<double> tmp_1574;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1574 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1573 += tmp_1574;
   result += (0.375*KroneckerDelta(gI1,gI2)*Sqr(gN)) * tmp_1573;
   if (gO1 < 3) {
      result += 0.25*KroneckerDelta(gI1,gI2)*KroneckerDelta(gO1,gO2)*Sqr(gN)
         ;
   }

   return result;
}

std::complex<double> CLASSNAME::CpUSDXconjUSDXAhAh(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_1575;
   std::complex<double> tmp_1576;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1576 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1575 += tmp_1576;
   result += (0.1*Sqr(g1)*ZA(gI1,0)*ZA(gI2,0)) * tmp_1575;
   std::complex<double> tmp_1577;
   std::complex<double> tmp_1578;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1578 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1577 += tmp_1578;
   result += (-0.225*Sqr(gN)*ZA(gI1,0)*ZA(gI2,0)) * tmp_1577;
   if (gO1 < 3) {
      result += -0.1*KroneckerDelta(gO1,gO2)*Sqr(g1)*ZA(gI1,0)*ZA(gI2,0);
   }
   if (gO1 < 3) {
      result += -0.15*KroneckerDelta(gO1,gO2)*Sqr(gN)*ZA(gI1,0)*ZA(gI2,0);
   }
   if (gO2 < 3) {
      result += -0.5*Conj(Kappa(gO2,gO2))*KroneckerDelta(gO1,3 + gO2)*
         Lambdax*ZA(gI1,1)*ZA(gI2,0);
   }
   if (gO2 < 3) {
      result += -0.5*Conj(Kappa(gO2,gO2))*KroneckerDelta(gO1,3 + gO2)*
         Lambdax*ZA(gI1,0)*ZA(gI2,1);
   }
   std::complex<double> tmp_1579;
   std::complex<double> tmp_1580;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1580 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1579 += tmp_1580;
   result += (-0.1*Sqr(g1)*ZA(gI1,1)*ZA(gI2,1)) * tmp_1579;
   std::complex<double> tmp_1581;
   std::complex<double> tmp_1582;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1582 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1581 += tmp_1582;
   result += (-0.15*Sqr(gN)*ZA(gI1,1)*ZA(gI2,1)) * tmp_1581;
   if (gO1 < 3) {
      result += 0.1*KroneckerDelta(gO1,gO2)*Sqr(g1)*ZA(gI1,1)*ZA(gI2,1);
   }
   if (gO1 < 3) {
      result += -0.1*KroneckerDelta(gO1,gO2)*Sqr(gN)*ZA(gI1,1)*ZA(gI2,1);
   }
   std::complex<double> tmp_1583;
   std::complex<double> tmp_1584;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1584 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1583 += tmp_1584;
   result += (0.375*Sqr(gN)*ZA(gI1,2)*ZA(gI2,2)) * tmp_1583;
   std::complex<double> tmp_1585;
   std::complex<double> tmp_1586;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1586 += AbsSqr(Kappa(j2,j2))*KroneckerDelta(gO1,3 + j2)*
         KroneckerDelta(gO2,3 + j2);
   }
   tmp_1585 += tmp_1586;
   result += (-(ZA(gI1,2)*ZA(gI2,2))) * tmp_1585;
   if (gO1 < 3) {
      result += 0.25*KroneckerDelta(gO1,gO2)*Sqr(gN)*ZA(gI1,2)*ZA(gI2,2);
   }
   if (gO1 < 3) {
      result += -0.5*Conj(Lambdax)*KroneckerDelta(3 + gO1,gO2)*ZA(gI1,1)*ZA(
         gI2,0)*Kappa(gO1,gO1);
   }
   if (gO1 < 3) {
      result += -0.5*Conj(Lambdax)*KroneckerDelta(3 + gO1,gO2)*ZA(gI1,0)*ZA(
         gI2,1)*Kappa(gO1,gO1);
   }
   if (gO1 < 3) {
      result += -(AbsSqr(Kappa(gO1,gO1))*KroneckerDelta(gO1,gO2)*ZA(gI1,2)*
         ZA(gI2,2));
   }

   return result;
}

std::complex<double> CLASSNAME::CpUSDXconjUSDXconjSvSv(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_1587;
   std::complex<double> tmp_1588;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1588 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1587 += tmp_1588;
   result += (0.1*KroneckerDelta(gI1,gI2)*Sqr(g1)) * tmp_1587;
   std::complex<double> tmp_1589;
   std::complex<double> tmp_1590;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1590 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1589 += tmp_1590;
   result += (0.15*KroneckerDelta(gI1,gI2)*Sqr(gN)) * tmp_1589;
   if (gO1 < 3) {
      result += -0.1*KroneckerDelta(gI1,gI2)*KroneckerDelta(gO1,gO2)*Sqr(g1)
         ;
   }
   if (gO1 < 3) {
      result += 0.1*KroneckerDelta(gI1,gI2)*KroneckerDelta(gO1,gO2)*Sqr(gN);
   }

   return result;
}

std::complex<double> CLASSNAME::CpUSDXconjUSDXhhhh(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_1591;
   std::complex<double> tmp_1592;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1592 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1591 += tmp_1592;
   result += (0.1*Sqr(g1)*ZH(gI1,0)*ZH(gI2,0)) * tmp_1591;
   std::complex<double> tmp_1593;
   std::complex<double> tmp_1594;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1594 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1593 += tmp_1594;
   result += (-0.225*Sqr(gN)*ZH(gI1,0)*ZH(gI2,0)) * tmp_1593;
   if (gO1 < 3) {
      result += -0.1*KroneckerDelta(gO1,gO2)*Sqr(g1)*ZH(gI1,0)*ZH(gI2,0);
   }
   if (gO1 < 3) {
      result += -0.15*KroneckerDelta(gO1,gO2)*Sqr(gN)*ZH(gI1,0)*ZH(gI2,0);
   }
   if (gO2 < 3) {
      result += 0.5*Conj(Kappa(gO2,gO2))*KroneckerDelta(gO1,3 + gO2)*Lambdax
         *ZH(gI1,1)*ZH(gI2,0);
   }
   if (gO2 < 3) {
      result += 0.5*Conj(Kappa(gO2,gO2))*KroneckerDelta(gO1,3 + gO2)*Lambdax
         *ZH(gI1,0)*ZH(gI2,1);
   }
   std::complex<double> tmp_1595;
   std::complex<double> tmp_1596;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1596 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1595 += tmp_1596;
   result += (-0.1*Sqr(g1)*ZH(gI1,1)*ZH(gI2,1)) * tmp_1595;
   std::complex<double> tmp_1597;
   std::complex<double> tmp_1598;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1598 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1597 += tmp_1598;
   result += (-0.15*Sqr(gN)*ZH(gI1,1)*ZH(gI2,1)) * tmp_1597;
   if (gO1 < 3) {
      result += 0.1*KroneckerDelta(gO1,gO2)*Sqr(g1)*ZH(gI1,1)*ZH(gI2,1);
   }
   if (gO1 < 3) {
      result += -0.1*KroneckerDelta(gO1,gO2)*Sqr(gN)*ZH(gI1,1)*ZH(gI2,1);
   }
   std::complex<double> tmp_1599;
   std::complex<double> tmp_1600;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1600 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1599 += tmp_1600;
   result += (0.375*Sqr(gN)*ZH(gI1,2)*ZH(gI2,2)) * tmp_1599;
   std::complex<double> tmp_1601;
   std::complex<double> tmp_1602;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1602 += AbsSqr(Kappa(j2,j2))*KroneckerDelta(gO1,3 + j2)*
         KroneckerDelta(gO2,3 + j2);
   }
   tmp_1601 += tmp_1602;
   result += (-(ZH(gI1,2)*ZH(gI2,2))) * tmp_1601;
   if (gO1 < 3) {
      result += 0.25*KroneckerDelta(gO1,gO2)*Sqr(gN)*ZH(gI1,2)*ZH(gI2,2);
   }
   if (gO1 < 3) {
      result += 0.5*Conj(Lambdax)*KroneckerDelta(3 + gO1,gO2)*ZH(gI1,1)*ZH(
         gI2,0)*Kappa(gO1,gO1);
   }
   if (gO1 < 3) {
      result += 0.5*Conj(Lambdax)*KroneckerDelta(3 + gO1,gO2)*ZH(gI1,0)*ZH(
         gI2,1)*Kappa(gO1,gO1);
   }
   if (gO1 < 3) {
      result += -(AbsSqr(Kappa(gO1,gO1))*KroneckerDelta(gO1,gO2)*ZH(gI1,2)*
         ZH(gI2,2));
   }

   return result;
}

std::complex<double> CLASSNAME::CpconjUSDXFDXChiPR(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_1603;
   std::complex<double> tmp_1604;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1604 += KroneckerDelta(gO2,3 + j1)*ZDXR(gI1,j1);
   }
   tmp_1603 += tmp_1604;
   result += (-0.3651483716701107*g1*ZN(gI2,0)) * tmp_1603;
   if (gO2 < 3) {
      result += -(Conj(Kappa(gO2,gO2))*ZDXR(gI1,gO2)*ZN(gI2,4));
   }
   std::complex<double> tmp_1605;
   std::complex<double> tmp_1606;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1606 += KroneckerDelta(gO2,3 + j1)*ZDXR(gI1,j1);
   }
   tmp_1605 += tmp_1606;
   result += (0.6708203932499369*gN*ZN(gI2,5)) * tmp_1605;

   return result;
}

std::complex<double> CLASSNAME::CpconjUSDXFDXChiPL(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_1607;
   std::complex<double> tmp_1608;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1608 += Conj(ZDXL(gI1,j1))*KroneckerDelta(gO1,3 + j1)*Kappa(j1,j1)
         ;
   }
   tmp_1607 += tmp_1608;
   result += (-Conj(ZN(gI2,4))) * tmp_1607;
   if (gO1 < 3) {
      result += 0.3651483716701107*g1*Conj(ZDXL(gI1,gO1))*Conj(ZN(gI2,0));
   }
   if (gO1 < 3) {
      result += 0.4472135954999579*gN*Conj(ZDXL(gI1,gO1))*Conj(ZN(gI2,5));
   }

   return result;
}

std::complex<double> CLASSNAME::CpUSDXconjUSDXconjSHI0SHI0(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_1609;
   std::complex<double> tmp_1611;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1611 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1609 += tmp_1611;
   std::complex<double> tmp_1610;
   std::complex<double> tmp_1612;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_1612 += Conj(UHI0(gI2,j2))*UHI0(gI1,j2);
   }
   tmp_1610 += tmp_1612;
   result += (0.05*Sqr(g1)) * tmp_1609 * tmp_1610;
   std::complex<double> tmp_1613;
   std::complex<double> tmp_1615;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1615 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1613 += tmp_1615;
   std::complex<double> tmp_1614;
   std::complex<double> tmp_1616;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_1616 += Conj(UHI0(gI2,j2))*UHI0(gI1,j2);
   }
   tmp_1614 += tmp_1616;
   result += (-0.1125*Sqr(gN)) * tmp_1613 * tmp_1614;
   std::complex<double> tmp_1617;
   std::complex<double> tmp_1619;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1619 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1617 += tmp_1619;
   std::complex<double> tmp_1618;
   std::complex<double> tmp_1620;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_1620 += Conj(UHI0(gI2,2 + j2))*UHI0(gI1,2 + j2);
   }
   tmp_1618 += tmp_1620;
   result += (-0.05*Sqr(g1)) * tmp_1617 * tmp_1618;
   std::complex<double> tmp_1621;
   std::complex<double> tmp_1623;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1623 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1621 += tmp_1623;
   std::complex<double> tmp_1622;
   std::complex<double> tmp_1624;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_1624 += Conj(UHI0(gI2,2 + j2))*UHI0(gI1,2 + j2);
   }
   tmp_1622 += tmp_1624;
   result += (-0.075*Sqr(gN)) * tmp_1621 * tmp_1622;
   std::complex<double> tmp_1625;
   std::complex<double> tmp_1627;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_1627 += Conj(UHI0(gI2,j1))*UHI0(gI1,j1);
   }
   tmp_1625 += tmp_1627;
   std::complex<double> tmp_1626;
   std::complex<double> tmp_1628;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1628 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_1626 += tmp_1628;
   result += (0.05*Sqr(g1)) * tmp_1625 * tmp_1626;
   std::complex<double> tmp_1629;
   std::complex<double> tmp_1631;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_1631 += Conj(UHI0(gI2,j1))*UHI0(gI1,j1);
   }
   tmp_1629 += tmp_1631;
   std::complex<double> tmp_1630;
   std::complex<double> tmp_1632;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1632 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_1630 += tmp_1632;
   result += (-0.1125*Sqr(gN)) * tmp_1629 * tmp_1630;
   std::complex<double> tmp_1633;
   std::complex<double> tmp_1635;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_1635 += Conj(UHI0(gI2,2 + j1))*UHI0(gI1,2 + j1);
   }
   tmp_1633 += tmp_1635;
   std::complex<double> tmp_1634;
   std::complex<double> tmp_1636;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1636 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_1634 += tmp_1636;
   result += (-0.05*Sqr(g1)) * tmp_1633 * tmp_1634;
   std::complex<double> tmp_1637;
   std::complex<double> tmp_1639;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_1639 += Conj(UHI0(gI2,2 + j1))*UHI0(gI1,2 + j1);
   }
   tmp_1637 += tmp_1639;
   std::complex<double> tmp_1638;
   std::complex<double> tmp_1640;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1640 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_1638 += tmp_1640;
   result += (-0.075*Sqr(gN)) * tmp_1637 * tmp_1638;
   if (gO1 < 3) {
      std::complex<double> tmp_1641;
      std::complex<double> tmp_1642;
      for (unsigned j1 = 0; j1 < 2; ++j1) {
         tmp_1642 += Conj(UHI0(gI2,j1))*UHI0(gI1,j1);
      }
      tmp_1641 += tmp_1642;
      result += (-0.05*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_1641;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1643;
      std::complex<double> tmp_1644;
      for (unsigned j1 = 0; j1 < 2; ++j1) {
         tmp_1644 += Conj(UHI0(gI2,j1))*UHI0(gI1,j1);
      }
      tmp_1643 += tmp_1644;
      result += (-0.075*KroneckerDelta(gO1,gO2)*Sqr(gN)) * tmp_1643;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1645;
      std::complex<double> tmp_1646;
      for (unsigned j1 = 0; j1 < 2; ++j1) {
         tmp_1646 += Conj(UHI0(gI2,2 + j1))*UHI0(gI1,2 + j1);
      }
      tmp_1645 += tmp_1646;
      result += (0.05*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_1645;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1647;
      std::complex<double> tmp_1648;
      for (unsigned j1 = 0; j1 < 2; ++j1) {
         tmp_1648 += Conj(UHI0(gI2,2 + j1))*UHI0(gI1,2 + j1);
      }
      tmp_1647 += tmp_1648;
      result += (-0.05*KroneckerDelta(gO1,gO2)*Sqr(gN)) * tmp_1647;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1649;
      std::complex<double> tmp_1650;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         tmp_1650 += Conj(UHI0(gI2,j2))*UHI0(gI1,j2);
      }
      tmp_1649 += tmp_1650;
      result += (-0.05*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_1649;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1651;
      std::complex<double> tmp_1652;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         tmp_1652 += Conj(UHI0(gI2,j2))*UHI0(gI1,j2);
      }
      tmp_1651 += tmp_1652;
      result += (-0.075*KroneckerDelta(gO1,gO2)*Sqr(gN)) * tmp_1651;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1653;
      std::complex<double> tmp_1654;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         tmp_1654 += Conj(UHI0(gI2,2 + j2))*UHI0(gI1,2 + j2);
      }
      tmp_1653 += tmp_1654;
      result += (0.05*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_1653;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1655;
      std::complex<double> tmp_1656;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         tmp_1656 += Conj(UHI0(gI2,2 + j2))*UHI0(gI1,2 + j2);
      }
      tmp_1655 += tmp_1656;
      result += (-0.05*KroneckerDelta(gO1,gO2)*Sqr(gN)) * tmp_1655;
   }
   if (gO2 < 3) {
      std::complex<double> tmp_1657;
      std::complex<double> tmp_1658;
      for (unsigned j1 = 0; j1 < 2; ++j1) {
         tmp_1658 += Conj(UHI0(gI2,j1))*UHI0(gI1,2 + j1)*Lambda12(j1,j1);
      }
      tmp_1657 += tmp_1658;
      result += (Conj(Kappa(gO2,gO2))*KroneckerDelta(gO1,3 + gO2)) *
         tmp_1657;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1659;
      std::complex<double> tmp_1660;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         tmp_1660 += Conj(UHI0(gI2,2 + j2))*Conj(Lambda12(j2,j2))*UHI0(
            gI1,j2);
      }
      tmp_1659 += tmp_1660;
      result += (KroneckerDelta(3 + gO1,gO2)*Kappa(gO1,gO1)) * tmp_1659;
   }

   return result;
}

std::complex<double> CLASSNAME::CpUSDXconjUSDXconjSHIpSHIp(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_1661;
   std::complex<double> tmp_1663;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1663 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1661 += tmp_1663;
   std::complex<double> tmp_1662;
   std::complex<double> tmp_1664;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_1664 += Conj(UHIp(gI2,j2))*UHIp(gI1,j2);
   }
   tmp_1662 += tmp_1664;
   result += (0.05*Sqr(g1)) * tmp_1661 * tmp_1662;
   std::complex<double> tmp_1665;
   std::complex<double> tmp_1667;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1667 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1665 += tmp_1667;
   std::complex<double> tmp_1666;
   std::complex<double> tmp_1668;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_1668 += Conj(UHIp(gI2,j2))*UHIp(gI1,j2);
   }
   tmp_1666 += tmp_1668;
   result += (-0.1125*Sqr(gN)) * tmp_1665 * tmp_1666;
   std::complex<double> tmp_1669;
   std::complex<double> tmp_1671;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1671 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1669 += tmp_1671;
   std::complex<double> tmp_1670;
   std::complex<double> tmp_1672;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_1672 += Conj(UHIp(gI2,2 + j2))*UHIp(gI1,2 + j2);
   }
   tmp_1670 += tmp_1672;
   result += (-0.05*Sqr(g1)) * tmp_1669 * tmp_1670;
   std::complex<double> tmp_1673;
   std::complex<double> tmp_1675;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1675 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1673 += tmp_1675;
   std::complex<double> tmp_1674;
   std::complex<double> tmp_1676;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_1676 += Conj(UHIp(gI2,2 + j2))*UHIp(gI1,2 + j2);
   }
   tmp_1674 += tmp_1676;
   result += (-0.075*Sqr(gN)) * tmp_1673 * tmp_1674;
   std::complex<double> tmp_1677;
   std::complex<double> tmp_1679;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_1679 += Conj(UHIp(gI2,j1))*UHIp(gI1,j1);
   }
   tmp_1677 += tmp_1679;
   std::complex<double> tmp_1678;
   std::complex<double> tmp_1680;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1680 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_1678 += tmp_1680;
   result += (0.05*Sqr(g1)) * tmp_1677 * tmp_1678;
   std::complex<double> tmp_1681;
   std::complex<double> tmp_1683;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_1683 += Conj(UHIp(gI2,j1))*UHIp(gI1,j1);
   }
   tmp_1681 += tmp_1683;
   std::complex<double> tmp_1682;
   std::complex<double> tmp_1684;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1684 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_1682 += tmp_1684;
   result += (-0.1125*Sqr(gN)) * tmp_1681 * tmp_1682;
   std::complex<double> tmp_1685;
   std::complex<double> tmp_1687;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_1687 += Conj(UHIp(gI2,2 + j1))*UHIp(gI1,2 + j1);
   }
   tmp_1685 += tmp_1687;
   std::complex<double> tmp_1686;
   std::complex<double> tmp_1688;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1688 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_1686 += tmp_1688;
   result += (-0.05*Sqr(g1)) * tmp_1685 * tmp_1686;
   std::complex<double> tmp_1689;
   std::complex<double> tmp_1691;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_1691 += Conj(UHIp(gI2,2 + j1))*UHIp(gI1,2 + j1);
   }
   tmp_1689 += tmp_1691;
   std::complex<double> tmp_1690;
   std::complex<double> tmp_1692;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1692 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_1690 += tmp_1692;
   result += (-0.075*Sqr(gN)) * tmp_1689 * tmp_1690;
   if (gO1 < 3) {
      std::complex<double> tmp_1693;
      std::complex<double> tmp_1694;
      for (unsigned j1 = 0; j1 < 2; ++j1) {
         tmp_1694 += Conj(UHIp(gI2,j1))*UHIp(gI1,j1);
      }
      tmp_1693 += tmp_1694;
      result += (-0.05*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_1693;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1695;
      std::complex<double> tmp_1696;
      for (unsigned j1 = 0; j1 < 2; ++j1) {
         tmp_1696 += Conj(UHIp(gI2,j1))*UHIp(gI1,j1);
      }
      tmp_1695 += tmp_1696;
      result += (-0.075*KroneckerDelta(gO1,gO2)*Sqr(gN)) * tmp_1695;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1697;
      std::complex<double> tmp_1698;
      for (unsigned j1 = 0; j1 < 2; ++j1) {
         tmp_1698 += Conj(UHIp(gI2,2 + j1))*UHIp(gI1,2 + j1);
      }
      tmp_1697 += tmp_1698;
      result += (0.05*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_1697;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1699;
      std::complex<double> tmp_1700;
      for (unsigned j1 = 0; j1 < 2; ++j1) {
         tmp_1700 += Conj(UHIp(gI2,2 + j1))*UHIp(gI1,2 + j1);
      }
      tmp_1699 += tmp_1700;
      result += (-0.05*KroneckerDelta(gO1,gO2)*Sqr(gN)) * tmp_1699;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1701;
      std::complex<double> tmp_1702;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         tmp_1702 += Conj(UHIp(gI2,j2))*UHIp(gI1,j2);
      }
      tmp_1701 += tmp_1702;
      result += (-0.05*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_1701;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1703;
      std::complex<double> tmp_1704;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         tmp_1704 += Conj(UHIp(gI2,j2))*UHIp(gI1,j2);
      }
      tmp_1703 += tmp_1704;
      result += (-0.075*KroneckerDelta(gO1,gO2)*Sqr(gN)) * tmp_1703;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1705;
      std::complex<double> tmp_1706;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         tmp_1706 += Conj(UHIp(gI2,2 + j2))*UHIp(gI1,2 + j2);
      }
      tmp_1705 += tmp_1706;
      result += (0.05*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_1705;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1707;
      std::complex<double> tmp_1708;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         tmp_1708 += Conj(UHIp(gI2,2 + j2))*UHIp(gI1,2 + j2);
      }
      tmp_1707 += tmp_1708;
      result += (-0.05*KroneckerDelta(gO1,gO2)*Sqr(gN)) * tmp_1707;
   }
   if (gO2 < 3) {
      std::complex<double> tmp_1709;
      std::complex<double> tmp_1710;
      for (unsigned j1 = 0; j1 < 2; ++j1) {
         tmp_1710 += Conj(UHIp(gI2,j1))*UHIp(gI1,2 + j1)*Lambda12(j1,j1);
      }
      tmp_1709 += tmp_1710;
      result += (-(Conj(Kappa(gO2,gO2))*KroneckerDelta(gO1,3 + gO2))) *
         tmp_1709;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1711;
      std::complex<double> tmp_1712;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         tmp_1712 += Conj(UHIp(gI2,2 + j2))*Conj(Lambda12(j2,j2))*UHIp(
            gI1,j2);
      }
      tmp_1711 += tmp_1712;
      result += (-(KroneckerDelta(3 + gO1,gO2)*Kappa(gO1,gO1))) * tmp_1711;
   }

   return result;
}

std::complex<double> CLASSNAME::CpUSDXconjUSDXconjSdSd(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_1713;
   std::complex<double> tmp_1715;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1715 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
   }
   tmp_1713 += tmp_1715;
   std::complex<double> tmp_1714;
   std::complex<double> tmp_1716;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1716 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_1714 += tmp_1716;
   result += (-0.05*Sqr(g1)) * tmp_1713 * tmp_1714;
   std::complex<double> tmp_1717;
   std::complex<double> tmp_1719;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1719 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
   }
   tmp_1717 += tmp_1719;
   std::complex<double> tmp_1718;
   std::complex<double> tmp_1720;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1720 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_1718 += tmp_1720;
   result += (0.1125*Sqr(gN)) * tmp_1717 * tmp_1718;
   std::complex<double> tmp_1721;
   std::complex<double> tmp_1723;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1723 += Conj(ZD(gI2,3 + j1))*ZD(gI1,3 + j1);
   }
   tmp_1721 += tmp_1723;
   std::complex<double> tmp_1722;
   std::complex<double> tmp_1724;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1724 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_1722 += tmp_1724;
   result += (-0.1*Sqr(g1)) * tmp_1721 * tmp_1722;
   std::complex<double> tmp_1725;
   std::complex<double> tmp_1727;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1727 += Conj(ZD(gI2,3 + j1))*ZD(gI1,3 + j1);
   }
   tmp_1725 += tmp_1727;
   std::complex<double> tmp_1726;
   std::complex<double> tmp_1728;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1728 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_1726 += tmp_1728;
   result += (0.225*Sqr(gN)) * tmp_1725 * tmp_1726;
   std::complex<double> tmp_1729;
   std::complex<double> tmp_1731;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1731 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1729 += tmp_1731;
   std::complex<double> tmp_1730;
   std::complex<double> tmp_1732;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1732 += Conj(ZD(gI2,j2))*ZD(gI1,j2);
   }
   tmp_1730 += tmp_1732;
   result += (-0.05*Sqr(g1)) * tmp_1729 * tmp_1730;
   std::complex<double> tmp_1733;
   std::complex<double> tmp_1735;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1735 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1733 += tmp_1735;
   std::complex<double> tmp_1734;
   std::complex<double> tmp_1736;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1736 += Conj(ZD(gI2,j2))*ZD(gI1,j2);
   }
   tmp_1734 += tmp_1736;
   result += (0.1125*Sqr(gN)) * tmp_1733 * tmp_1734;
   std::complex<double> tmp_1737;
   std::complex<double> tmp_1739;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1739 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1737 += tmp_1739;
   std::complex<double> tmp_1738;
   std::complex<double> tmp_1740;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1740 += Conj(ZD(gI2,3 + j2))*ZD(gI1,3 + j2);
   }
   tmp_1738 += tmp_1740;
   result += (-0.1*Sqr(g1)) * tmp_1737 * tmp_1738;
   std::complex<double> tmp_1741;
   std::complex<double> tmp_1743;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1743 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1741 += tmp_1743;
   std::complex<double> tmp_1742;
   std::complex<double> tmp_1744;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1744 += Conj(ZD(gI2,3 + j2))*ZD(gI1,3 + j2);
   }
   tmp_1742 += tmp_1744;
   result += (0.225*Sqr(gN)) * tmp_1741 * tmp_1742;
   if (gO1 < 3) {
      std::complex<double> tmp_1745;
      std::complex<double> tmp_1746;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_1746 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
      }
      tmp_1745 += tmp_1746;
      result += (0.05*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_1745;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1747;
      std::complex<double> tmp_1748;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_1748 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
      }
      tmp_1747 += tmp_1748;
      result += (0.075*KroneckerDelta(gO1,gO2)*Sqr(gN)) * tmp_1747;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1749;
      std::complex<double> tmp_1750;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_1750 += Conj(ZD(gI2,3 + j1))*ZD(gI1,3 + j1);
      }
      tmp_1749 += tmp_1750;
      result += (0.1*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_1749;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1751;
      std::complex<double> tmp_1752;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_1752 += Conj(ZD(gI2,3 + j1))*ZD(gI1,3 + j1);
      }
      tmp_1751 += tmp_1752;
      result += (0.15*KroneckerDelta(gO1,gO2)*Sqr(gN)) * tmp_1751;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1753;
      std::complex<double> tmp_1754;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_1754 += Conj(ZD(gI2,j2))*ZD(gI1,j2);
      }
      tmp_1753 += tmp_1754;
      result += (0.05*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_1753;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1755;
      std::complex<double> tmp_1756;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_1756 += Conj(ZD(gI2,j2))*ZD(gI1,j2);
      }
      tmp_1755 += tmp_1756;
      result += (0.075*KroneckerDelta(gO1,gO2)*Sqr(gN)) * tmp_1755;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1757;
      std::complex<double> tmp_1758;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_1758 += Conj(ZD(gI2,3 + j2))*ZD(gI1,3 + j2);
      }
      tmp_1757 += tmp_1758;
      result += (0.1*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_1757;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1759;
      std::complex<double> tmp_1760;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_1760 += Conj(ZD(gI2,3 + j2))*ZD(gI1,3 + j2);
      }
      tmp_1759 += tmp_1760;
      result += (0.15*KroneckerDelta(gO1,gO2)*Sqr(gN)) * tmp_1759;
   }

   return result;
}

std::complex<double> CLASSNAME::CpUSDXconjUSDXconjSDXSDX(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_1761;
   std::complex<double> tmp_1763;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1763 += KroneckerDelta(gO1,3 + j1)*ZDX(gI1,3 + j1);
   }
   tmp_1761 += tmp_1763;
   std::complex<double> tmp_1762;
   std::complex<double> tmp_1764;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1764 += Conj(ZDX(gI2,3 + j2))*KroneckerDelta(gO2,3 + j2);
   }
   tmp_1762 += tmp_1764;
   result += (-0.03333333333333333*Sqr(g1)) * tmp_1761 * tmp_1762;
   std::complex<double> tmp_1765;
   std::complex<double> tmp_1767;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1767 += KroneckerDelta(gO1,3 + j1)*ZDX(gI1,3 + j1);
   }
   tmp_1765 += tmp_1767;
   std::complex<double> tmp_1766;
   std::complex<double> tmp_1768;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1768 += Conj(ZDX(gI2,3 + j2))*KroneckerDelta(gO2,3 + j2);
   }
   tmp_1766 += tmp_1768;
   result += (-0.6666666666666666*Sqr(g3)) * tmp_1765 * tmp_1766;
   std::complex<double> tmp_1769;
   std::complex<double> tmp_1771;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1771 += KroneckerDelta(gO1,3 + j1)*ZDX(gI1,3 + j1);
   }
   tmp_1769 += tmp_1771;
   std::complex<double> tmp_1770;
   std::complex<double> tmp_1772;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1772 += Conj(ZDX(gI2,3 + j2))*KroneckerDelta(gO2,3 + j2);
   }
   tmp_1770 += tmp_1772;
   result += (-0.1125*Sqr(gN)) * tmp_1769 * tmp_1770;
   std::complex<double> tmp_1773;
   std::complex<double> tmp_1775;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1775 += Conj(ZDX(gI2,j1))*ZDX(gI1,j1);
   }
   tmp_1773 += tmp_1775;
   std::complex<double> tmp_1774;
   std::complex<double> tmp_1776;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1776 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_1774 += tmp_1776;
   result += (0.1*Sqr(g1)) * tmp_1773 * tmp_1774;
   std::complex<double> tmp_1777;
   std::complex<double> tmp_1779;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1779 += Conj(ZDX(gI2,j1))*ZDX(gI1,j1);
   }
   tmp_1777 += tmp_1779;
   std::complex<double> tmp_1778;
   std::complex<double> tmp_1780;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1780 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_1778 += tmp_1780;
   result += (-0.225*Sqr(gN)) * tmp_1777 * tmp_1778;
   std::complex<double> tmp_1781;
   std::complex<double> tmp_1783;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1783 += Conj(ZDX(gI2,3 + j1))*ZDX(gI1,3 + j1);
   }
   tmp_1781 += tmp_1783;
   std::complex<double> tmp_1782;
   std::complex<double> tmp_1784;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1784 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_1782 += tmp_1784;
   result += (-0.1*Sqr(g1)) * tmp_1781 * tmp_1782;
   std::complex<double> tmp_1785;
   std::complex<double> tmp_1787;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1787 += Conj(ZDX(gI2,3 + j1))*ZDX(gI1,3 + j1);
   }
   tmp_1785 += tmp_1787;
   std::complex<double> tmp_1786;
   std::complex<double> tmp_1788;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1788 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_1786 += tmp_1788;
   result += (-0.3375*Sqr(gN)) * tmp_1785 * tmp_1786;
   std::complex<double> tmp_1789;
   std::complex<double> tmp_1791;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1791 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1789 += tmp_1791;
   std::complex<double> tmp_1790;
   std::complex<double> tmp_1792;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1792 += Conj(ZDX(gI2,j2))*ZDX(gI1,j2);
   }
   tmp_1790 += tmp_1792;
   result += (0.1*Sqr(g1)) * tmp_1789 * tmp_1790;
   std::complex<double> tmp_1793;
   std::complex<double> tmp_1795;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1795 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1793 += tmp_1795;
   std::complex<double> tmp_1794;
   std::complex<double> tmp_1796;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1796 += Conj(ZDX(gI2,j2))*ZDX(gI1,j2);
   }
   tmp_1794 += tmp_1796;
   result += (-0.225*Sqr(gN)) * tmp_1793 * tmp_1794;
   std::complex<double> tmp_1797;
   std::complex<double> tmp_1799;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1799 += Conj(ZDX(gI2,j1))*KroneckerDelta(gO2,3 + j1)*Kappa(j1,j1);
   }
   tmp_1797 += tmp_1799;
   std::complex<double> tmp_1798;
   std::complex<double> tmp_1800;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1800 += Conj(Kappa(j2,j2))*KroneckerDelta(gO1,3 + j2)*ZDX(gI1,j2);
   }
   tmp_1798 += tmp_1800;
   result += (-1) * tmp_1797 * tmp_1798;
   std::complex<double> tmp_1801;
   std::complex<double> tmp_1803;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1803 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1801 += tmp_1803;
   std::complex<double> tmp_1802;
   std::complex<double> tmp_1804;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1804 += Conj(ZDX(gI2,3 + j2))*ZDX(gI1,3 + j2);
   }
   tmp_1802 += tmp_1804;
   result += (-0.1*Sqr(g1)) * tmp_1801 * tmp_1802;
   std::complex<double> tmp_1805;
   std::complex<double> tmp_1807;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1807 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1805 += tmp_1807;
   std::complex<double> tmp_1806;
   std::complex<double> tmp_1808;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1808 += Conj(ZDX(gI2,3 + j2))*ZDX(gI1,3 + j2);
   }
   tmp_1806 += tmp_1808;
   result += (-0.3375*Sqr(gN)) * tmp_1805 * tmp_1806;
   std::complex<double> tmp_1809;
   std::complex<double> tmp_1811;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1811 += Conj(ZDX(gI2,3 + j1))*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1809 += tmp_1811;
   std::complex<double> tmp_1810;
   std::complex<double> tmp_1812;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1812 += KroneckerDelta(gO1,3 + j2)*ZDX(gI1,3 + j2);
   }
   tmp_1810 += tmp_1812;
   result += (-0.03333333333333333*Sqr(g1)) * tmp_1809 * tmp_1810;
   std::complex<double> tmp_1813;
   std::complex<double> tmp_1815;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1815 += Conj(ZDX(gI2,3 + j1))*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1813 += tmp_1815;
   std::complex<double> tmp_1814;
   std::complex<double> tmp_1816;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1816 += KroneckerDelta(gO1,3 + j2)*ZDX(gI1,3 + j2);
   }
   tmp_1814 += tmp_1816;
   result += (-0.6666666666666666*Sqr(g3)) * tmp_1813 * tmp_1814;
   std::complex<double> tmp_1817;
   std::complex<double> tmp_1819;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1819 += Conj(ZDX(gI2,3 + j1))*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1817 += tmp_1819;
   std::complex<double> tmp_1818;
   std::complex<double> tmp_1820;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1820 += KroneckerDelta(gO1,3 + j2)*ZDX(gI1,3 + j2);
   }
   tmp_1818 += tmp_1820;
   result += (-0.1125*Sqr(gN)) * tmp_1817 * tmp_1818;
   if (gO1 < 3) {
      std::complex<double> tmp_1821;
      std::complex<double> tmp_1822;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_1822 += Conj(ZDX(gI2,j1))*ZDX(gI1,j1);
      }
      tmp_1821 += tmp_1822;
      result += (-0.1*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_1821;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1823;
      std::complex<double> tmp_1824;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_1824 += Conj(ZDX(gI2,j1))*ZDX(gI1,j1);
      }
      tmp_1823 += tmp_1824;
      result += (-0.15*KroneckerDelta(gO1,gO2)*Sqr(gN)) * tmp_1823;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1825;
      std::complex<double> tmp_1826;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_1826 += Conj(ZDX(gI2,3 + j1))*ZDX(gI1,3 + j1);
      }
      tmp_1825 += tmp_1826;
      result += (0.1*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_1825;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1827;
      std::complex<double> tmp_1828;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_1828 += Conj(ZDX(gI2,3 + j1))*ZDX(gI1,3 + j1);
      }
      tmp_1827 += tmp_1828;
      result += (-0.225*KroneckerDelta(gO1,gO2)*Sqr(gN)) * tmp_1827;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1829;
      std::complex<double> tmp_1830;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_1830 += Conj(ZDX(gI2,j2))*ZDX(gI1,j2);
      }
      tmp_1829 += tmp_1830;
      result += (-0.1*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_1829;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1831;
      std::complex<double> tmp_1832;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_1832 += Conj(ZDX(gI2,j2))*ZDX(gI1,j2);
      }
      tmp_1831 += tmp_1832;
      result += (-0.15*KroneckerDelta(gO1,gO2)*Sqr(gN)) * tmp_1831;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1833;
      std::complex<double> tmp_1834;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_1834 += Conj(ZDX(gI2,3 + j2))*ZDX(gI1,3 + j2);
      }
      tmp_1833 += tmp_1834;
      result += (0.1*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_1833;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1835;
      std::complex<double> tmp_1836;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_1836 += Conj(ZDX(gI2,3 + j2))*ZDX(gI1,3 + j2);
      }
      tmp_1835 += tmp_1836;
      result += (-0.225*KroneckerDelta(gO1,gO2)*Sqr(gN)) * tmp_1835;
   }
   if (gO2 < 3) {
      std::complex<double> tmp_1837;
      std::complex<double> tmp_1838;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_1838 += KroneckerDelta(gO1,3 + j1)*ZDX(gI1,3 + j1);
      }
      tmp_1837 += tmp_1838;
      result += (0.03333333333333333*Conj(ZDX(gI2,gO2))*Sqr(g1)) * tmp_1837;
   }
   if (gO2 < 3) {
      std::complex<double> tmp_1839;
      std::complex<double> tmp_1840;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_1840 += KroneckerDelta(gO1,3 + j1)*ZDX(gI1,3 + j1);
      }
      tmp_1839 += tmp_1840;
      result += (0.6666666666666666*Conj(ZDX(gI2,gO2))*Sqr(g3)) * tmp_1839;
   }
   if (gO2 < 3) {
      std::complex<double> tmp_1841;
      std::complex<double> tmp_1842;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_1842 += KroneckerDelta(gO1,3 + j1)*ZDX(gI1,3 + j1);
      }
      tmp_1841 += tmp_1842;
      result += (-0.075*Conj(ZDX(gI2,gO2))*Sqr(gN)) * tmp_1841;
   }
   if (gO2 < 3) {
      std::complex<double> tmp_1843;
      std::complex<double> tmp_1844;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_1844 += Conj(ZDX(gI2,j1))*ZDX(gI1,3 + j1)*Kappa(j1,j1);
      }
      tmp_1843 += tmp_1844;
      result += (-3*Conj(Kappa(gO2,gO2))*KroneckerDelta(gO1,3 + gO2)) *
         tmp_1843;
   }
   if (gO2 < 3) {
      std::complex<double> tmp_1845;
      std::complex<double> tmp_1846;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_1846 += KroneckerDelta(gO1,3 + j2)*ZDX(gI1,3 + j2);
      }
      tmp_1845 += tmp_1846;
      result += (0.03333333333333333*Conj(ZDX(gI2,gO2))*Sqr(g1)) * tmp_1845;
   }
   if (gO2 < 3) {
      std::complex<double> tmp_1847;
      std::complex<double> tmp_1848;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_1848 += KroneckerDelta(gO1,3 + j2)*ZDX(gI1,3 + j2);
      }
      tmp_1847 += tmp_1848;
      result += (0.6666666666666666*Conj(ZDX(gI2,gO2))*Sqr(g3)) * tmp_1847;
   }
   if (gO2 < 3) {
      std::complex<double> tmp_1849;
      std::complex<double> tmp_1850;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_1850 += KroneckerDelta(gO1,3 + j2)*ZDX(gI1,3 + j2);
      }
      tmp_1849 += tmp_1850;
      result += (-0.075*Conj(ZDX(gI2,gO2))*Sqr(gN)) * tmp_1849;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1851;
      std::complex<double> tmp_1852;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_1852 += Conj(ZDX(gI2,3 + j1))*KroneckerDelta(gO2,3 + j1);
      }
      tmp_1851 += tmp_1852;
      result += (0.03333333333333333*Sqr(g1)*ZDX(gI1,gO1)) * tmp_1851;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1853;
      std::complex<double> tmp_1854;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_1854 += Conj(ZDX(gI2,3 + j1))*KroneckerDelta(gO2,3 + j1);
      }
      tmp_1853 += tmp_1854;
      result += (0.6666666666666666*Sqr(g3)*ZDX(gI1,gO1)) * tmp_1853;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1855;
      std::complex<double> tmp_1856;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_1856 += Conj(ZDX(gI2,3 + j1))*KroneckerDelta(gO2,3 + j1);
      }
      tmp_1855 += tmp_1856;
      result += (-0.075*Sqr(gN)*ZDX(gI1,gO1)) * tmp_1855;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1857;
      std::complex<double> tmp_1858;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_1858 += Conj(ZDX(gI2,3 + j2))*KroneckerDelta(gO2,3 + j2);
      }
      tmp_1857 += tmp_1858;
      result += (0.03333333333333333*Sqr(g1)*ZDX(gI1,gO1)) * tmp_1857;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1859;
      std::complex<double> tmp_1860;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_1860 += Conj(ZDX(gI2,3 + j2))*KroneckerDelta(gO2,3 + j2);
      }
      tmp_1859 += tmp_1860;
      result += (0.6666666666666666*Sqr(g3)*ZDX(gI1,gO1)) * tmp_1859;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1861;
      std::complex<double> tmp_1862;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_1862 += Conj(ZDX(gI2,3 + j2))*KroneckerDelta(gO2,3 + j2);
      }
      tmp_1861 += tmp_1862;
      result += (-0.075*Sqr(gN)*ZDX(gI1,gO1)) * tmp_1861;
   }
   if (gO1 < 3 && gO2 < 3) {
      result += -0.06666666666666667*Conj(ZDX(gI2,gO2))*Sqr(g1)*ZDX(gI1,gO1)
         ;
   }
   if (gO1 < 3 && gO2 < 3) {
      result += -1.3333333333333333*Conj(ZDX(gI2,gO2))*Sqr(g3)*ZDX(gI1,gO1);
   }
   if (gO1 < 3 && gO2 < 3) {
      result += -0.1*Conj(ZDX(gI2,gO2))*Sqr(gN)*ZDX(gI1,gO1);
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1863;
      std::complex<double> tmp_1864;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_1864 += Conj(ZDX(gI2,3 + j2))*Conj(Kappa(j2,j2))*ZDX(gI1,j2)
            ;
      }
      tmp_1863 += tmp_1864;
      result += (-3*KroneckerDelta(3 + gO1,gO2)*Kappa(gO1,gO1)) * tmp_1863;
   }
   if (gO1 < 3 && gO2 < 3) {
      result += -(Conj(ZDX(gI2,3 + gO2))*Conj(Kappa(gO2,gO2))*ZDX(gI1,3 +
         gO1)*Kappa(gO1,gO1));
   }

   return result;
}

std::complex<double> CLASSNAME::CpUSDXconjUSDXconjSeSe(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_1865;
   std::complex<double> tmp_1867;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1867 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
   }
   tmp_1865 += tmp_1867;
   std::complex<double> tmp_1866;
   std::complex<double> tmp_1868;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1868 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_1866 += tmp_1868;
   result += (0.05*Sqr(g1)) * tmp_1865 * tmp_1866;
   std::complex<double> tmp_1869;
   std::complex<double> tmp_1871;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1871 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
   }
   tmp_1869 += tmp_1871;
   std::complex<double> tmp_1870;
   std::complex<double> tmp_1872;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1872 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_1870 += tmp_1872;
   result += (0.075*Sqr(gN)) * tmp_1869 * tmp_1870;
   std::complex<double> tmp_1873;
   std::complex<double> tmp_1875;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1875 += Conj(ZE(gI2,3 + j1))*ZE(gI1,3 + j1);
   }
   tmp_1873 += tmp_1875;
   std::complex<double> tmp_1874;
   std::complex<double> tmp_1876;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1876 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_1874 += tmp_1876;
   result += (-0.1*Sqr(g1)) * tmp_1873 * tmp_1874;
   std::complex<double> tmp_1877;
   std::complex<double> tmp_1879;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1879 += Conj(ZE(gI2,3 + j1))*ZE(gI1,3 + j1);
   }
   tmp_1877 += tmp_1879;
   std::complex<double> tmp_1878;
   std::complex<double> tmp_1880;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1880 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_1878 += tmp_1880;
   result += (0.0375*Sqr(gN)) * tmp_1877 * tmp_1878;
   std::complex<double> tmp_1881;
   std::complex<double> tmp_1883;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1883 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1881 += tmp_1883;
   std::complex<double> tmp_1882;
   std::complex<double> tmp_1884;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1884 += Conj(ZE(gI2,j2))*ZE(gI1,j2);
   }
   tmp_1882 += tmp_1884;
   result += (0.05*Sqr(g1)) * tmp_1881 * tmp_1882;
   std::complex<double> tmp_1885;
   std::complex<double> tmp_1887;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1887 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1885 += tmp_1887;
   std::complex<double> tmp_1886;
   std::complex<double> tmp_1888;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1888 += Conj(ZE(gI2,j2))*ZE(gI1,j2);
   }
   tmp_1886 += tmp_1888;
   result += (0.075*Sqr(gN)) * tmp_1885 * tmp_1886;
   std::complex<double> tmp_1889;
   std::complex<double> tmp_1891;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1891 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1889 += tmp_1891;
   std::complex<double> tmp_1890;
   std::complex<double> tmp_1892;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1892 += Conj(ZE(gI2,3 + j2))*ZE(gI1,3 + j2);
   }
   tmp_1890 += tmp_1892;
   result += (-0.1*Sqr(g1)) * tmp_1889 * tmp_1890;
   std::complex<double> tmp_1893;
   std::complex<double> tmp_1895;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1895 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1893 += tmp_1895;
   std::complex<double> tmp_1894;
   std::complex<double> tmp_1896;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1896 += Conj(ZE(gI2,3 + j2))*ZE(gI1,3 + j2);
   }
   tmp_1894 += tmp_1896;
   result += (0.0375*Sqr(gN)) * tmp_1893 * tmp_1894;
   if (gO1 < 3) {
      std::complex<double> tmp_1897;
      std::complex<double> tmp_1898;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_1898 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
      }
      tmp_1897 += tmp_1898;
      result += (-0.05*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_1897;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1899;
      std::complex<double> tmp_1900;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_1900 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
      }
      tmp_1899 += tmp_1900;
      result += (0.05*KroneckerDelta(gO1,gO2)*Sqr(gN)) * tmp_1899;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1901;
      std::complex<double> tmp_1902;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_1902 += Conj(ZE(gI2,3 + j1))*ZE(gI1,3 + j1);
      }
      tmp_1901 += tmp_1902;
      result += (0.1*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_1901;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1903;
      std::complex<double> tmp_1904;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_1904 += Conj(ZE(gI2,3 + j1))*ZE(gI1,3 + j1);
      }
      tmp_1903 += tmp_1904;
      result += (0.025*KroneckerDelta(gO1,gO2)*Sqr(gN)) * tmp_1903;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1905;
      std::complex<double> tmp_1906;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_1906 += Conj(ZE(gI2,j2))*ZE(gI1,j2);
      }
      tmp_1905 += tmp_1906;
      result += (-0.05*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_1905;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1907;
      std::complex<double> tmp_1908;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_1908 += Conj(ZE(gI2,j2))*ZE(gI1,j2);
      }
      tmp_1907 += tmp_1908;
      result += (0.05*KroneckerDelta(gO1,gO2)*Sqr(gN)) * tmp_1907;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1909;
      std::complex<double> tmp_1910;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_1910 += Conj(ZE(gI2,3 + j2))*ZE(gI1,3 + j2);
      }
      tmp_1909 += tmp_1910;
      result += (0.1*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_1909;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1911;
      std::complex<double> tmp_1912;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_1912 += Conj(ZE(gI2,3 + j2))*ZE(gI1,3 + j2);
      }
      tmp_1911 += tmp_1912;
      result += (0.025*KroneckerDelta(gO1,gO2)*Sqr(gN)) * tmp_1911;
   }

   return result;
}

std::complex<double> CLASSNAME::CpUSDXconjUSDXconjSuSu(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_1913;
   std::complex<double> tmp_1915;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1915 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
   }
   tmp_1913 += tmp_1915;
   std::complex<double> tmp_1914;
   std::complex<double> tmp_1916;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1916 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_1914 += tmp_1916;
   result += (-0.05*Sqr(g1)) * tmp_1913 * tmp_1914;
   std::complex<double> tmp_1917;
   std::complex<double> tmp_1919;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1919 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
   }
   tmp_1917 += tmp_1919;
   std::complex<double> tmp_1918;
   std::complex<double> tmp_1920;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1920 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_1918 += tmp_1920;
   result += (0.1125*Sqr(gN)) * tmp_1917 * tmp_1918;
   std::complex<double> tmp_1921;
   std::complex<double> tmp_1923;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1923 += Conj(ZU(gI2,3 + j1))*ZU(gI1,3 + j1);
   }
   tmp_1921 += tmp_1923;
   std::complex<double> tmp_1922;
   std::complex<double> tmp_1924;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1924 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_1922 += tmp_1924;
   result += (0.2*Sqr(g1)) * tmp_1921 * tmp_1922;
   std::complex<double> tmp_1925;
   std::complex<double> tmp_1927;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1927 += Conj(ZU(gI2,3 + j1))*ZU(gI1,3 + j1);
   }
   tmp_1925 += tmp_1927;
   std::complex<double> tmp_1926;
   std::complex<double> tmp_1928;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1928 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_1926 += tmp_1928;
   result += (0.1125*Sqr(gN)) * tmp_1925 * tmp_1926;
   std::complex<double> tmp_1929;
   std::complex<double> tmp_1931;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1931 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1929 += tmp_1931;
   std::complex<double> tmp_1930;
   std::complex<double> tmp_1932;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1932 += Conj(ZU(gI2,j2))*ZU(gI1,j2);
   }
   tmp_1930 += tmp_1932;
   result += (-0.05*Sqr(g1)) * tmp_1929 * tmp_1930;
   std::complex<double> tmp_1933;
   std::complex<double> tmp_1935;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1935 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1933 += tmp_1935;
   std::complex<double> tmp_1934;
   std::complex<double> tmp_1936;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1936 += Conj(ZU(gI2,j2))*ZU(gI1,j2);
   }
   tmp_1934 += tmp_1936;
   result += (0.1125*Sqr(gN)) * tmp_1933 * tmp_1934;
   std::complex<double> tmp_1937;
   std::complex<double> tmp_1939;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1939 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1937 += tmp_1939;
   std::complex<double> tmp_1938;
   std::complex<double> tmp_1940;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1940 += Conj(ZU(gI2,3 + j2))*ZU(gI1,3 + j2);
   }
   tmp_1938 += tmp_1940;
   result += (0.2*Sqr(g1)) * tmp_1937 * tmp_1938;
   std::complex<double> tmp_1941;
   std::complex<double> tmp_1943;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1943 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1941 += tmp_1943;
   std::complex<double> tmp_1942;
   std::complex<double> tmp_1944;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1944 += Conj(ZU(gI2,3 + j2))*ZU(gI1,3 + j2);
   }
   tmp_1942 += tmp_1944;
   result += (0.1125*Sqr(gN)) * tmp_1941 * tmp_1942;
   if (gO1 < 3) {
      std::complex<double> tmp_1945;
      std::complex<double> tmp_1946;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_1946 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
      }
      tmp_1945 += tmp_1946;
      result += (0.05*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_1945;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1947;
      std::complex<double> tmp_1948;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_1948 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
      }
      tmp_1947 += tmp_1948;
      result += (0.075*KroneckerDelta(gO1,gO2)*Sqr(gN)) * tmp_1947;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1949;
      std::complex<double> tmp_1950;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_1950 += Conj(ZU(gI2,3 + j1))*ZU(gI1,3 + j1);
      }
      tmp_1949 += tmp_1950;
      result += (-0.2*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_1949;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1951;
      std::complex<double> tmp_1952;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_1952 += Conj(ZU(gI2,3 + j1))*ZU(gI1,3 + j1);
      }
      tmp_1951 += tmp_1952;
      result += (0.075*KroneckerDelta(gO1,gO2)*Sqr(gN)) * tmp_1951;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1953;
      std::complex<double> tmp_1954;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_1954 += Conj(ZU(gI2,j2))*ZU(gI1,j2);
      }
      tmp_1953 += tmp_1954;
      result += (0.05*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_1953;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1955;
      std::complex<double> tmp_1956;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_1956 += Conj(ZU(gI2,j2))*ZU(gI1,j2);
      }
      tmp_1955 += tmp_1956;
      result += (0.075*KroneckerDelta(gO1,gO2)*Sqr(gN)) * tmp_1955;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1957;
      std::complex<double> tmp_1958;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_1958 += Conj(ZU(gI2,3 + j2))*ZU(gI1,3 + j2);
      }
      tmp_1957 += tmp_1958;
      result += (-0.2*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_1957;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1959;
      std::complex<double> tmp_1960;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_1960 += Conj(ZU(gI2,3 + j2))*ZU(gI1,3 + j2);
      }
      tmp_1959 += tmp_1960;
      result += (0.075*KroneckerDelta(gO1,gO2)*Sqr(gN)) * tmp_1959;
   }

   return result;
}

std::complex<double> CLASSNAME::CpconjUSDXSDXAh(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_1961;
   std::complex<double> tmp_1962;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1962 += Conj(ZDX(gI1,j1))*KroneckerDelta(gO2,3 + j1)*Kappa(j1,j1);
   }
   tmp_1961 += tmp_1962;
   result += (std::complex<double>(0,-0.5)*vu*Conj(Lambdax)*ZA(gI2,0)) *
      tmp_1961;
   if (gO2 < 3) {
      result += std::complex<double>(0,0.5)*vu*Conj(ZDX(gI1,3 + gO2))*Conj(
         Kappa(gO2,gO2))*Lambdax*ZA(gI2,0);
   }
   std::complex<double> tmp_1963;
   std::complex<double> tmp_1964;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1964 += Conj(ZDX(gI1,j1))*KroneckerDelta(gO2,3 + j1)*Kappa(j1,j1);
   }
   tmp_1963 += tmp_1964;
   result += (std::complex<double>(0,-0.5)*vd*Conj(Lambdax)*ZA(gI2,1)) *
      tmp_1963;
   if (gO2 < 3) {
      result += std::complex<double>(0,0.5)*vd*Conj(ZDX(gI1,3 + gO2))*Conj(
         Kappa(gO2,gO2))*Lambdax*ZA(gI2,1);
   }
   std::complex<double> tmp_1965;
   std::complex<double> tmp_1966;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1966 += Conj(ZDX(gI1,j1))*KroneckerDelta(gO2,3 + j1)*TKappa(j1,j1)
         ;
   }
   tmp_1965 += tmp_1966;
   result += (std::complex<double>(0.,-0.7071067811865475)*ZA(gI2,2)) *
      tmp_1965;
   if (gO2 < 3) {
      result += std::complex<double>(0.,0.7071067811865475)*Conj(ZDX(gI1,3 +
         gO2))*Conj(TKappa(gO2,gO2))*ZA(gI2,2);
   }

   return result;
}

std::complex<double> CLASSNAME::CpconjUSDXSDXhh(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_1967;
   std::complex<double> tmp_1968;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1968 += Conj(ZDX(gI1,3 + j1))*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1967 += tmp_1968;
   result += (0.1*vd*Sqr(g1)*ZH(gI2,0)) * tmp_1967;
   std::complex<double> tmp_1969;
   std::complex<double> tmp_1970;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1970 += Conj(ZDX(gI1,3 + j1))*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1969 += tmp_1970;
   result += (-0.225*vd*Sqr(gN)*ZH(gI2,0)) * tmp_1969;
   std::complex<double> tmp_1971;
   std::complex<double> tmp_1972;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1972 += Conj(ZDX(gI1,j1))*KroneckerDelta(gO2,3 + j1)*Kappa(j1,j1);
   }
   tmp_1971 += tmp_1972;
   result += (0.5*vu*Conj(Lambdax)*ZH(gI2,0)) * tmp_1971;
   if (gO2 < 3) {
      result += -0.1*vd*Conj(ZDX(gI1,gO2))*Sqr(g1)*ZH(gI2,0);
   }
   if (gO2 < 3) {
      result += -0.15*vd*Conj(ZDX(gI1,gO2))*Sqr(gN)*ZH(gI2,0);
   }
   if (gO2 < 3) {
      result += 0.5*vu*Conj(ZDX(gI1,3 + gO2))*Conj(Kappa(gO2,gO2))*Lambdax*
         ZH(gI2,0);
   }
   std::complex<double> tmp_1973;
   std::complex<double> tmp_1974;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1974 += Conj(ZDX(gI1,3 + j1))*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1973 += tmp_1974;
   result += (-0.1*vu*Sqr(g1)*ZH(gI2,1)) * tmp_1973;
   std::complex<double> tmp_1975;
   std::complex<double> tmp_1976;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1976 += Conj(ZDX(gI1,3 + j1))*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1975 += tmp_1976;
   result += (-0.15*vu*Sqr(gN)*ZH(gI2,1)) * tmp_1975;
   std::complex<double> tmp_1977;
   std::complex<double> tmp_1978;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1978 += Conj(ZDX(gI1,j1))*KroneckerDelta(gO2,3 + j1)*Kappa(j1,j1);
   }
   tmp_1977 += tmp_1978;
   result += (0.5*vd*Conj(Lambdax)*ZH(gI2,1)) * tmp_1977;
   if (gO2 < 3) {
      result += 0.1*vu*Conj(ZDX(gI1,gO2))*Sqr(g1)*ZH(gI2,1);
   }
   if (gO2 < 3) {
      result += -0.1*vu*Conj(ZDX(gI1,gO2))*Sqr(gN)*ZH(gI2,1);
   }
   if (gO2 < 3) {
      result += 0.5*vd*Conj(ZDX(gI1,3 + gO2))*Conj(Kappa(gO2,gO2))*Lambdax*
         ZH(gI2,1);
   }
   std::complex<double> tmp_1979;
   std::complex<double> tmp_1980;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1980 += Conj(ZDX(gI1,3 + j1))*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1979 += tmp_1980;
   result += (0.375*vs*Sqr(gN)*ZH(gI2,2)) * tmp_1979;
   std::complex<double> tmp_1981;
   std::complex<double> tmp_1982;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1982 += Conj(ZDX(gI1,j1))*KroneckerDelta(gO2,3 + j1)*TKappa(j1,j1)
         ;
   }
   tmp_1981 += tmp_1982;
   result += (-0.7071067811865475*ZH(gI2,2)) * tmp_1981;
   std::complex<double> tmp_1983;
   std::complex<double> tmp_1984;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1984 += AbsSqr(Kappa(j2,j2))*Conj(ZDX(gI1,3 + j2))*KroneckerDelta(
         gO2,3 + j2);
   }
   tmp_1983 += tmp_1984;
   result += (-(vs*ZH(gI2,2))) * tmp_1983;
   if (gO2 < 3) {
      result += 0.25*vs*Conj(ZDX(gI1,gO2))*Sqr(gN)*ZH(gI2,2);
   }
   if (gO2 < 3) {
      result += -0.7071067811865475*Conj(ZDX(gI1,3 + gO2))*Conj(TKappa(gO2,
         gO2))*ZH(gI2,2);
   }
   if (gO2 < 3) {
      result += -(vs*AbsSqr(Kappa(gO2,gO2))*Conj(ZDX(gI1,gO2))*ZH(gI2,2));
   }

   return result;
}

std::complex<double> CLASSNAME::CpconjUSDXGluFDXPR(unsigned gO2, unsigned , unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_1985;
   std::complex<double> tmp_1986;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1986 += KroneckerDelta(gO2,3 + j1)*ZDXR(gI2,j1);
   }
   tmp_1985 += tmp_1986;
   result += (1.4142135623730951*g3*Conj(PhaseGlu)) * tmp_1985;

   return result;
}

std::complex<double> CLASSNAME::CpconjUSDXGluFDXPL(unsigned gO1, unsigned , unsigned gI2) const
{
   std::complex<double> result;

   if (gO1 < 3) {
      result += -1.4142135623730951*g3*PhaseGlu*Conj(ZDXL(gI2,gO1));
   }

   return result;
}

std::complex<double> CLASSNAME::CpconjUSDXVGSDX(unsigned gO2, unsigned gI2) const
{
   std::complex<double> result;

   if (gI2 < 6) {
      result += g3*Conj(ZDX(gI2,gO2));
   }

   return result;
}

std::complex<double> CLASSNAME::CpconjUSDXVPSDX(unsigned gO2, unsigned gI2) const
{
   std::complex<double> result;

   if (gI2 < 6) {
      result += -0.2581988897471611*g1*Conj(ZDX(gI2,gO2))*Cos(ThetaW());
   }

   return result;
}

std::complex<double> CLASSNAME::CpconjUSDXVZSDX(unsigned gO2, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_1987;
   std::complex<double> tmp_1988;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1988 += Conj(ZDX(gI2,3 + j1))*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1987 += tmp_1988;
   result += (0.2581988897471611*g1*Cos(ThetaWp())*Sin(ThetaW())) * tmp_1987;
   std::complex<double> tmp_1989;
   std::complex<double> tmp_1990;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1990 += Conj(ZDX(gI2,3 + j1))*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1989 += tmp_1990;
   result += (0.4743416490252569*gN*Sin(ThetaWp())) * tmp_1989;
   if (gO2 < 3) {
      result += 0.2581988897471611*g1*Conj(ZDX(gI2,gO2))*Cos(ThetaWp())*Sin(
         ThetaW());
   }
   if (gO2 < 3) {
      result += -0.31622776601683794*gN*Conj(ZDX(gI2,gO2))*Sin(ThetaWp());
   }

   return result;
}

std::complex<double> CLASSNAME::CpconjUSDXVZpSDX(unsigned gO2, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_1991;
   std::complex<double> tmp_1992;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1992 += Conj(ZDX(gI2,3 + j1))*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1991 += tmp_1992;
   result += (0.4743416490252569*gN*Cos(ThetaWp())) * tmp_1991;
   std::complex<double> tmp_1993;
   std::complex<double> tmp_1994;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1994 += Conj(ZDX(gI2,3 + j1))*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1993 += tmp_1994;
   result += (-0.2581988897471611*g1*Sin(ThetaW())*Sin(ThetaWp())) * tmp_1993;
   if (gO2 < 3) {
      result += -0.31622776601683794*gN*Conj(ZDX(gI2,gO2))*Cos(ThetaWp());
   }
   if (gO2 < 3) {
      result += -0.2581988897471611*g1*Conj(ZDX(gI2,gO2))*Sin(ThetaW())*Sin(
         ThetaWp());
   }

   return result;
}

std::complex<double> CLASSNAME::CpUhhVZVZ(unsigned gO2) const
{
   std::complex<double> result;

   result = 0.05*(25*vs*KroneckerDelta(2,gO2)*Sqr(gN)*Sqr(Sin(ThetaWp())) + vd*
      KroneckerDelta(0,gO2)*(-14.696938456699067*g1*gN*Cos(ThetaWp())*Sin(ThetaW()
      )*Sin(ThetaWp()) + 10*Sqr(g2)*Sqr(Cos(ThetaW()))*Sqr(Cos(ThetaWp())) + Cos(
      ThetaW())*(-18.973665961010276*g2*gN*Cos(ThetaWp())*Sin(ThetaWp()) +
      15.491933384829668*g1*g2*Sin(ThetaW())*Sqr(Cos(ThetaWp()))) + 6*Sqr(g1)*Sqr(
      Cos(ThetaWp()))*Sqr(Sin(ThetaW())) + 9*Sqr(gN)*Sqr(Sin(ThetaWp()))) + 2*vu*
      KroneckerDelta(1,gO2)*(3.1622776601683795*g2*gN*Cos(ThetaW())*Sin(2*ThetaWp(
      )) + g1*Sin(ThetaW())*(7.745966692414834*g2*Cos(ThetaW()) + 3*g1*Sin(ThetaW(
      )))*Sqr(Cos(ThetaWp())) + 5*Sqr(g2)*Sqr(Cos(ThetaW()))*Sqr(Cos(ThetaWp())) +
      gN*(2.449489742783178*g1*Sin(ThetaW())*Sin(2*ThetaWp()) + 2*gN*Sqr(Sin(
      ThetaWp())))));

   return result;
}

std::complex<double> CLASSNAME::CpUhhVZpVZ(unsigned gO2) const
{
   std::complex<double> result;

   result = 0.05*(25*vs*Cos(ThetaWp())*KroneckerDelta(2,gO2)*Sin(ThetaWp())*Sqr
      (gN) - vd*KroneckerDelta(0,gO2)*(9.486832980505138*g2*gN*Cos(ThetaW())*Cos(2
      *ThetaWp()) - 9*Cos(ThetaWp())*Sin(ThetaWp())*Sqr(gN) + 5*Sin(2*ThetaWp())*
      Sqr(g2)*Sqr(Cos(ThetaW())) + 7.348469228349534*g1*gN*Sin(ThetaW())*Sqr(Cos(
      ThetaWp())) + g1*(3.872983346207417*g2*Sin(2*ThetaW())*Sin(2*ThetaWp()) + 3*
      g1*Sin(2*ThetaWp())*Sqr(Sin(ThetaW())) - 7.348469228349534*gN*Sin(ThetaW())*
      Sqr(Sin(ThetaWp())))) + vu*KroneckerDelta(1,gO2)*(6.324555320336759*g2*gN*
      Cos(ThetaW())*Cos(2*ThetaWp()) + 4*Cos(ThetaWp())*Sin(ThetaWp())*Sqr(gN) - 5
      *Sin(2*ThetaWp())*Sqr(g2)*Sqr(Cos(ThetaW())) + 4.898979485566356*g1*gN*Sin(
      ThetaW())*Sqr(Cos(ThetaWp())) - g1*(3.872983346207417*g2*Sin(2*ThetaW())*Sin
      (2*ThetaWp()) + 3*g1*Sin(2*ThetaWp())*Sqr(Sin(ThetaW())) + 4.898979485566356
      *gN*Sin(ThetaW())*Sqr(Sin(ThetaWp())))));

   return result;
}

std::complex<double> CLASSNAME::CpUhhVZpVZp(unsigned gO2) const
{
   std::complex<double> result;

   result = 0.05*(25*vs*KroneckerDelta(2,gO2)*Sqr(gN)*Sqr(Cos(ThetaWp())) + vd*
      KroneckerDelta(0,gO2)*(9*Sqr(gN)*Sqr(Cos(ThetaWp())) + 10*Sqr(g2)*Sqr(Cos(
      ThetaW()))*Sqr(Sin(ThetaWp())) + 3*g1*Sin(ThetaW())*(2.449489742783178*gN*
      Sin(2*ThetaWp()) + 2*g1*Sin(ThetaW())*Sqr(Sin(ThetaWp()))) + Cos(ThetaW())*(
      9.486832980505138*g2*gN*Sin(2*ThetaWp()) + 15.491933384829668*g1*g2*Sin(
      ThetaW())*Sqr(Sin(ThetaWp())))) + 2*vu*KroneckerDelta(1,gO2)*(
      -3.1622776601683795*g2*gN*Cos(ThetaW())*Sin(2*ThetaWp()) + 2*Sqr(gN)*Sqr(Cos
      (ThetaWp())) + 5*Sqr(g2)*Sqr(Cos(ThetaW()))*Sqr(Sin(ThetaWp())) + g1*(
      -2.449489742783178*gN*Sin(ThetaW())*Sin(2*ThetaWp()) + 3.872983346207417*g2*
      Sin(2*ThetaW())*Sqr(Sin(ThetaWp())) + 3*g1*Sqr(Sin(ThetaW()))*Sqr(Sin(
      ThetaWp())))));

   return result;
}

std::complex<double> CLASSNAME::CpUhhconjVWmVWm(unsigned gO2) const
{
   std::complex<double> result;

   result = 0.5*(vd*KroneckerDelta(0,gO2) + vu*KroneckerDelta(1,gO2))*Sqr(g2);

   return result;
}

std::complex<double> CLASSNAME::CpUhhbargWmgWm(unsigned gO1) const
{
   std::complex<double> result;

   result = -0.25*(vd*KroneckerDelta(0,gO1) + vu*KroneckerDelta(1,gO1))*Sqr(g2)
      ;

   return result;
}

std::complex<double> CLASSNAME::CpUhhbargWmCgWmC(unsigned gO1) const
{
   std::complex<double> result;

   result = -0.25*(vd*KroneckerDelta(0,gO1) + vu*KroneckerDelta(1,gO1))*Sqr(g2)
      ;

   return result;
}

std::complex<double> CLASSNAME::CpUhhbargZgZ(unsigned gO1) const
{
   std::complex<double> result;

   result = 0.025*(-25*vs*KroneckerDelta(2,gO1)*Sqr(gN)*Sqr(Sin(ThetaWp())) -
      vd*KroneckerDelta(0,gO1)*(-14.696938456699067*g1*gN*Cos(ThetaWp())*Sin(
      ThetaW())*Sin(ThetaWp()) + 10*Sqr(g2)*Sqr(Cos(ThetaW()))*Sqr(Cos(ThetaWp()))
      + Cos(ThetaW())*(-18.973665961010276*g2*gN*Cos(ThetaWp())*Sin(ThetaWp()) +
      15.491933384829668*g1*g2*Sin(ThetaW())*Sqr(Cos(ThetaWp()))) + 6*Sqr(g1)*Sqr(
      Cos(ThetaWp()))*Sqr(Sin(ThetaW())) + 9*Sqr(gN)*Sqr(Sin(ThetaWp()))) - 2*vu*
      KroneckerDelta(1,gO1)*(3.1622776601683795*g2*gN*Cos(ThetaW())*Sin(2*ThetaWp(
      )) + g1*Sin(ThetaW())*(7.745966692414834*g2*Cos(ThetaW()) + 3*g1*Sin(ThetaW(
      )))*Sqr(Cos(ThetaWp())) + 5*Sqr(g2)*Sqr(Cos(ThetaW()))*Sqr(Cos(ThetaWp())) +
      gN*(2.449489742783178*g1*Sin(ThetaW())*Sin(2*ThetaWp()) + 2*gN*Sqr(Sin(
      ThetaWp())))));

   return result;
}

std::complex<double> CLASSNAME::CpUhhbargZpgZ(unsigned gO1) const
{
   std::complex<double> result;

   result = 0.025*(-25*vs*Cos(ThetaWp())*KroneckerDelta(2,gO1)*Sin(ThetaWp())*
      Sqr(gN) + vd*KroneckerDelta(0,gO1)*(9.486832980505138*g2*gN*Cos(ThetaW())*
      Cos(2*ThetaWp()) - 9*Cos(ThetaWp())*Sin(ThetaWp())*Sqr(gN) + 5*Sin(2*ThetaWp
      ())*Sqr(g2)*Sqr(Cos(ThetaW())) + 7.348469228349534*g1*gN*Sin(ThetaW())*Sqr(
      Cos(ThetaWp())) + g1*(3.872983346207417*g2*Sin(2*ThetaW())*Sin(2*ThetaWp())
      + 3*g1*Sin(2*ThetaWp())*Sqr(Sin(ThetaW())) - 7.348469228349534*gN*Sin(ThetaW
      ())*Sqr(Sin(ThetaWp())))) + vu*KroneckerDelta(1,gO1)*(-6.324555320336759*g2*
      gN*Cos(ThetaW())*Cos(2*ThetaWp()) - 4*Cos(ThetaWp())*Sin(ThetaWp())*Sqr(gN)
      + 5*Sin(2*ThetaWp())*Sqr(g2)*Sqr(Cos(ThetaW())) - 4.898979485566356*g1*gN*
      Sin(ThetaW())*Sqr(Cos(ThetaWp())) + g1*(3.872983346207417*g2*Sin(2*ThetaW())
      *Sin(2*ThetaWp()) + 3*g1*Sin(2*ThetaWp())*Sqr(Sin(ThetaW())) +
      4.898979485566356*gN*Sin(ThetaW())*Sqr(Sin(ThetaWp())))));

   return result;
}

std::complex<double> CLASSNAME::CpUhhbargZpgZp(unsigned gO1) const
{
   std::complex<double> result;

   result = 0.025*(-25*vs*KroneckerDelta(2,gO1)*Sqr(gN)*Sqr(Cos(ThetaWp())) -
      vd*KroneckerDelta(0,gO1)*(9*Sqr(gN)*Sqr(Cos(ThetaWp())) + 10*Sqr(g2)*Sqr(Cos
      (ThetaW()))*Sqr(Sin(ThetaWp())) + 3*g1*Sin(ThetaW())*(2.449489742783178*gN*
      Sin(2*ThetaWp()) + 2*g1*Sin(ThetaW())*Sqr(Sin(ThetaWp()))) + Cos(ThetaW())*(
      9.486832980505138*g2*gN*Sin(2*ThetaWp()) + 15.491933384829668*g1*g2*Sin(
      ThetaW())*Sqr(Sin(ThetaWp())))) - 2*vu*KroneckerDelta(1,gO1)*(
      -3.1622776601683795*g2*gN*Cos(ThetaW())*Sin(2*ThetaWp()) + 2*Sqr(gN)*Sqr(Cos
      (ThetaWp())) + 5*Sqr(g2)*Sqr(Cos(ThetaW()))*Sqr(Sin(ThetaWp())) + g1*(
      -2.449489742783178*gN*Sin(ThetaW())*Sin(2*ThetaWp()) + 3.872983346207417*g2*
      Sin(2*ThetaW())*Sqr(Sin(ThetaWp())) + 3*g1*Sqr(Sin(ThetaW()))*Sqr(Sin(
      ThetaWp())))));

   return result;
}

std::complex<double> CLASSNAME::CpUhhUhhVZVZ(unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   result = 0.05*(25*KroneckerDelta(2,gO1)*KroneckerDelta(2,gO2)*Sqr(gN)*Sqr(
      Sin(ThetaWp())) + KroneckerDelta(0,gO1)*KroneckerDelta(0,gO2)*(
      -14.696938456699067*g1*gN*Cos(ThetaWp())*Sin(ThetaW())*Sin(ThetaWp()) + 10*
      Sqr(g2)*Sqr(Cos(ThetaW()))*Sqr(Cos(ThetaWp())) + Cos(ThetaW())*(
      -18.973665961010276*g2*gN*Cos(ThetaWp())*Sin(ThetaWp()) + 15.491933384829668
      *g1*g2*Sin(ThetaW())*Sqr(Cos(ThetaWp()))) + 6*Sqr(g1)*Sqr(Cos(ThetaWp()))*
      Sqr(Sin(ThetaW())) + 9*Sqr(gN)*Sqr(Sin(ThetaWp()))) + 2*KroneckerDelta(1,gO1
      )*KroneckerDelta(1,gO2)*(3.1622776601683795*g2*gN*Cos(ThetaW())*Sin(2*
      ThetaWp()) + g1*Sin(ThetaW())*(7.745966692414834*g2*Cos(ThetaW()) + 3*g1*Sin
      (ThetaW()))*Sqr(Cos(ThetaWp())) + 5*Sqr(g2)*Sqr(Cos(ThetaW()))*Sqr(Cos(
      ThetaWp())) + gN*(2.449489742783178*g1*Sin(ThetaW())*Sin(2*ThetaWp()) + 2*gN
      *Sqr(Sin(ThetaWp())))));

   return result;
}

std::complex<double> CLASSNAME::CpUhhUhhVZpVZp(unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   result = 0.05*(25*KroneckerDelta(2,gO1)*KroneckerDelta(2,gO2)*Sqr(gN)*Sqr(
      Cos(ThetaWp())) + KroneckerDelta(0,gO1)*KroneckerDelta(0,gO2)*(9*Sqr(gN)*Sqr
      (Cos(ThetaWp())) + 10*Sqr(g2)*Sqr(Cos(ThetaW()))*Sqr(Sin(ThetaWp())) + 3*g1*
      Sin(ThetaW())*(2.449489742783178*gN*Sin(2*ThetaWp()) + 2*g1*Sin(ThetaW())*
      Sqr(Sin(ThetaWp()))) + Cos(ThetaW())*(9.486832980505138*g2*gN*Sin(2*ThetaWp(
      )) + 15.491933384829668*g1*g2*Sin(ThetaW())*Sqr(Sin(ThetaWp())))) + 2*
      KroneckerDelta(1,gO1)*KroneckerDelta(1,gO2)*(-3.1622776601683795*g2*gN*Cos(
      ThetaW())*Sin(2*ThetaWp()) + 2*Sqr(gN)*Sqr(Cos(ThetaWp())) + 5*Sqr(g2)*Sqr(
      Cos(ThetaW()))*Sqr(Sin(ThetaWp())) + g1*(-2.449489742783178*gN*Sin(ThetaW())
      *Sin(2*ThetaWp()) + 3.872983346207417*g2*Sin(2*ThetaW())*Sqr(Sin(ThetaWp()))
      + 3*g1*Sqr(Sin(ThetaW()))*Sqr(Sin(ThetaWp())))));

   return result;
}

std::complex<double> CLASSNAME::CpUhhUhhconjVWmVWm(unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   result = 0.5*(KroneckerDelta(0,gO1)*KroneckerDelta(0,gO2) + KroneckerDelta(1
      ,gO1)*KroneckerDelta(1,gO2))*Sqr(g2);

   return result;
}

std::complex<double> CLASSNAME::CpUhhUhhconjHpmHpm(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = 0.025*(5*KroneckerDelta(2,gO1)*KroneckerDelta(2,gO2)*((-8*AbsSqr(
      Lambdax) + 3*Sqr(gN))*ZP(gI1,0)*ZP(gI2,0) + 2*(-4*AbsSqr(Lambdax) + Sqr(gN))
      *ZP(gI1,1)*ZP(gI2,1)) + 2*KroneckerDelta(1,gO1)*(-5*KroneckerDelta(0,gO2)*(
      -2*AbsSqr(Lambdax) + Sqr(g2))*(ZP(gI1,1)*ZP(gI2,0) + ZP(gI1,0)*ZP(gI2,1)) +
      KroneckerDelta(1,gO2)*((3*Sqr(g1) - 5*Sqr(g2) - 3*Sqr(gN))*ZP(gI1,0)*ZP(gI2,
      0) - (3*Sqr(g1) + 5*Sqr(g2) + 2*Sqr(gN))*ZP(gI1,1)*ZP(gI2,1))) -
      KroneckerDelta(0,gO1)*(10*KroneckerDelta(1,gO2)*(-2*AbsSqr(Lambdax) + Sqr(g2
      ))*(ZP(gI1,1)*ZP(gI2,0) + ZP(gI1,0)*ZP(gI2,1)) + KroneckerDelta(0,gO2)*((6*
      Sqr(g1) + 10*Sqr(g2) + 9*Sqr(gN))*ZP(gI1,0)*ZP(gI2,0) + 2*(-3*Sqr(g1) + 5*
      Sqr(g2) + 3*Sqr(gN))*ZP(gI1,1)*ZP(gI2,1))));

   return result;
}

std::complex<double> CLASSNAME::CpUhhUhhconjSHp0SHp0(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = -0.05*(KroneckerDelta(0,gO1)*KroneckerDelta(0,gO2)*(3*Sqr(g1) + 5*
      Sqr(g2) - 3*Sqr(gN)) + 5*KroneckerDelta(2,gO1)*KroneckerDelta(2,gO2)*Sqr(gN)
      - KroneckerDelta(1,gO1)*KroneckerDelta(1,gO2)*(3*Sqr(g1) + 5*Sqr(g2) + 2*
      Sqr(gN)))*(Conj(UHp0(gI2,0))*UHp0(gI1,0) - Conj(UHp0(gI2,1))*UHp0(gI1,1));

   return result;
}

std::complex<double> CLASSNAME::CpUhhUhhconjSHppSHpp(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = -0.05*(KroneckerDelta(0,gO1)*KroneckerDelta(0,gO2)*(3*Sqr(g1) - 5*
      Sqr(g2) - 3*Sqr(gN)) + KroneckerDelta(1,gO1)*KroneckerDelta(1,gO2)*(-3*Sqr(
      g1) + 5*Sqr(g2) - 2*Sqr(gN)) + 5*KroneckerDelta(2,gO1)*KroneckerDelta(2,gO2)
      *Sqr(gN))*(Conj(UHpp(gI2,0))*UHpp(gI1,0) - Conj(UHpp(gI2,1))*UHpp(gI1,1));

   return result;
}

std::complex<double> CLASSNAME::CpUhhUhhconjSSI0SSI0(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = 0.125*(3*KroneckerDelta(0,gO1)*KroneckerDelta(0,gO2) + 2*
      KroneckerDelta(1,gO1)*KroneckerDelta(1,gO2) - 5*KroneckerDelta(2,gO1)*
      KroneckerDelta(2,gO2))*KroneckerDelta(gI1,gI2)*Sqr(gN);

   return result;
}

std::complex<double> CLASSNAME::CpUhhconjHpmHpm(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = 0.025*(5*KroneckerDelta(2,gO2)*(ZP(gI1,0)*(vs*(-8*AbsSqr(Lambdax) +
      3*Sqr(gN))*ZP(gI2,0) - 5.656854249492381*Conj(TLambdax)*ZP(gI2,1)) + 2*ZP(
      gI1,1)*(-2.8284271247461903*TLambdax*ZP(gI2,0) + vs*(-4*AbsSqr(Lambdax) +
      Sqr(gN))*ZP(gI2,1))) + 2*KroneckerDelta(1,gO2)*(ZP(gI1,0)*(vu*(3*Sqr(g1) - 5
      *Sqr(g2) - 3*Sqr(gN))*ZP(gI2,0) - 5*vd*(-2*AbsSqr(Lambdax) + Sqr(g2))*ZP(gI2
      ,1)) - ZP(gI1,1)*(5*vd*(-2*AbsSqr(Lambdax) + Sqr(g2))*ZP(gI2,0) + vu*(3*Sqr(
      g1) + 5*Sqr(g2) + 2*Sqr(gN))*ZP(gI2,1))) - KroneckerDelta(0,gO2)*(ZP(gI1,0)*
      (vd*(6*Sqr(g1) + 10*Sqr(g2) + 9*Sqr(gN))*ZP(gI2,0) + 10*vu*(-2*AbsSqr(
      Lambdax) + Sqr(g2))*ZP(gI2,1)) + 2*ZP(gI1,1)*(5*vu*(-2*AbsSqr(Lambdax) + Sqr
      (g2))*ZP(gI2,0) + vd*(-3*Sqr(g1) + 5*Sqr(g2) + 3*Sqr(gN))*ZP(gI2,1))));

   return result;
}

std::complex<double> CLASSNAME::CpUhhconjSHp0SHp0(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = -0.05*(vd*KroneckerDelta(0,gO2)*(3*Sqr(g1) + 5*Sqr(g2) - 3*Sqr(gN))
      + 5*vs*KroneckerDelta(2,gO2)*Sqr(gN) - vu*KroneckerDelta(1,gO2)*(3*Sqr(g1)
      + 5*Sqr(g2) + 2*Sqr(gN)))*(Conj(UHp0(gI2,0))*UHp0(gI1,0) - Conj(UHp0(gI2,1))
      *UHp0(gI1,1));

   return result;
}

std::complex<double> CLASSNAME::CpUhhconjSHppSHpp(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = -0.05*(vd*KroneckerDelta(0,gO2)*(3*Sqr(g1) - 5*Sqr(g2) - 3*Sqr(gN))
      + vu*KroneckerDelta(1,gO2)*(-3*Sqr(g1) + 5*Sqr(g2) - 2*Sqr(gN)) + 5*vs*
      KroneckerDelta(2,gO2)*Sqr(gN))*(Conj(UHpp(gI2,0))*UHpp(gI1,0) - Conj(UHpp(
      gI2,1))*UHpp(gI1,1));

   return result;
}

std::complex<double> CLASSNAME::CpUhhconjSSI0SSI0(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = 0.125*(3*vd*KroneckerDelta(0,gO2) + 2*vu*KroneckerDelta(1,gO2) - 5*
      vs*KroneckerDelta(2,gO2))*KroneckerDelta(gI1,gI2)*Sqr(gN);

   return result;
}

std::complex<double> CLASSNAME::CpUhhbarChaChaPR(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = -0.7071067811865475*(g2*KroneckerDelta(0,gO2)*UM(gI1,1)*UP(gI2,0) +
      (g2*KroneckerDelta(1,gO2)*UM(gI1,0) + Conj(Lambdax)*KroneckerDelta(2,gO2)*
      UM(gI1,1))*UP(gI2,1));

   return result;
}

std::complex<double> CLASSNAME::CpUhhbarChaChaPL(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = -0.7071067811865475*(g2*Conj(UM(gI2,0))*Conj(UP(gI1,1))*
      KroneckerDelta(1,gO1) + Conj(UM(gI2,1))*(g2*Conj(UP(gI1,0))*KroneckerDelta(0
      ,gO1) + Conj(UP(gI1,1))*KroneckerDelta(2,gO1)*Lambdax));

   return result;
}

std::complex<double> CLASSNAME::CpUhhbarChaIChaIPR(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_1995;
   std::complex<double> tmp_1996;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_1996 += Conj(Lambda12(j1,j1))*ZMI(gI1,j1)*ZPI(gI2,j1);
   }
   tmp_1995 += tmp_1996;
   result += (-0.7071067811865475*KroneckerDelta(2,gO2)) * tmp_1995;

   return result;
}

std::complex<double> CLASSNAME::CpUhhbarChaIChaIPL(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_1997;
   std::complex<double> tmp_1998;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_1998 += Conj(ZMI(gI2,j1))*Conj(ZPI(gI1,j1))*Lambda12(j1,j1);
   }
   tmp_1997 += tmp_1998;
   result += (-0.7071067811865475*KroneckerDelta(2,gO1)) * tmp_1997;

   return result;
}

std::complex<double> CLASSNAME::CpUhhUhhAhAh(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = 0.025*(-(KroneckerDelta(0,gO1)*KroneckerDelta(0,gO2)*((6*Sqr(g1) +
      10*Sqr(g2) + 9*Sqr(gN))*ZA(gI1,0)*ZA(gI2,0) + 2*(20*AbsSqr(Lambdax) - 3*Sqr(
      g1) - 5*Sqr(g2) + 3*Sqr(gN))*ZA(gI1,1)*ZA(gI2,1) + 5*(8*AbsSqr(Lambdax) - 3*
      Sqr(gN))*ZA(gI1,2)*ZA(gI2,2))) + 5*KroneckerDelta(2,gO1)*KroneckerDelta(2,
      gO2)*((-8*AbsSqr(Lambdax) + 3*Sqr(gN))*ZA(gI1,0)*ZA(gI2,0) + 2*(-4*AbsSqr(
      Lambdax) + Sqr(gN))*ZA(gI1,1)*ZA(gI2,1) - 5*Sqr(gN)*ZA(gI1,2)*ZA(gI2,2)) + 2
      *KroneckerDelta(1,gO1)*KroneckerDelta(1,gO2)*((-20*AbsSqr(Lambdax) + 3*Sqr(
      g1) + 5*Sqr(g2) - 3*Sqr(gN))*ZA(gI1,0)*ZA(gI2,0) - (3*Sqr(g1) + 5*Sqr(g2) +
      2*Sqr(gN))*ZA(gI1,1)*ZA(gI2,1) + 5*(-4*AbsSqr(Lambdax) + Sqr(gN))*ZA(gI1,2)*
      ZA(gI2,2)));

   return result;
}

std::complex<double> CLASSNAME::CpUhhUhhconjSvSv(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = 0.05*KroneckerDelta(gI1,gI2)*(-5*KroneckerDelta(2,gO1)*
      KroneckerDelta(2,gO2)*Sqr(gN) + KroneckerDelta(1,gO1)*KroneckerDelta(1,gO2)*
      (3*Sqr(g1) + 5*Sqr(g2) + 2*Sqr(gN)) + KroneckerDelta(0,gO1)*KroneckerDelta(0
      ,gO2)*(-3*Sqr(g1) - 5*Sqr(g2) + 3*Sqr(gN)));

   return result;
}

std::complex<double> CLASSNAME::CpUhhUhhhhhh(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = 0.025*(-(KroneckerDelta(0,gO1)*(-2*KroneckerDelta(1,gO2)*(-20*
      AbsSqr(Lambdax) + 3*Sqr(g1) + 5*Sqr(g2) - 3*Sqr(gN))*(ZH(gI1,1)*ZH(gI2,0) +
      ZH(gI1,0)*ZH(gI2,1)) - 5*KroneckerDelta(2,gO2)*(-8*AbsSqr(Lambdax) + 3*Sqr(
      gN))*(ZH(gI1,2)*ZH(gI2,0) + ZH(gI1,0)*ZH(gI2,2)) + KroneckerDelta(0,gO2)*(3*
      (6*Sqr(g1) + 10*Sqr(g2) + 9*Sqr(gN))*ZH(gI1,0)*ZH(gI2,0) + 2*(20*AbsSqr(
      Lambdax) - 3*Sqr(g1) - 5*Sqr(g2) + 3*Sqr(gN))*ZH(gI1,1)*ZH(gI2,1) + 5*(8*
      AbsSqr(Lambdax) - 3*Sqr(gN))*ZH(gI1,2)*ZH(gI2,2)))) + 5*KroneckerDelta(2,gO1
      )*(KroneckerDelta(0,gO2)*(-8*AbsSqr(Lambdax) + 3*Sqr(gN))*(ZH(gI1,2)*ZH(gI2,
      0) + ZH(gI1,0)*ZH(gI2,2)) + 2*KroneckerDelta(1,gO2)*(-4*AbsSqr(Lambdax) +
      Sqr(gN))*(ZH(gI1,2)*ZH(gI2,1) + ZH(gI1,1)*ZH(gI2,2)) + KroneckerDelta(2,gO2)
      *((-8*AbsSqr(Lambdax) + 3*Sqr(gN))*ZH(gI1,0)*ZH(gI2,0) + 2*(-4*AbsSqr(
      Lambdax) + Sqr(gN))*ZH(gI1,1)*ZH(gI2,1) - 15*Sqr(gN)*ZH(gI1,2)*ZH(gI2,2))) +
      2*KroneckerDelta(1,gO1)*(KroneckerDelta(0,gO2)*(-20*AbsSqr(Lambdax) + 3*Sqr
      (g1) + 5*Sqr(g2) - 3*Sqr(gN))*(ZH(gI1,1)*ZH(gI2,0) + ZH(gI1,0)*ZH(gI2,1)) +
      5*KroneckerDelta(2,gO2)*(-4*AbsSqr(Lambdax) + Sqr(gN))*(ZH(gI1,2)*ZH(gI2,1)
      + ZH(gI1,1)*ZH(gI2,2)) + KroneckerDelta(1,gO2)*((-20*AbsSqr(Lambdax) + 3*Sqr
      (g1) + 5*Sqr(g2) - 3*Sqr(gN))*ZH(gI1,0)*ZH(gI2,0) - 3*(3*Sqr(g1) + 5*Sqr(g2)
      + 2*Sqr(gN))*ZH(gI1,1)*ZH(gI2,1) + 5*(-4*AbsSqr(Lambdax) + Sqr(gN))*ZH(gI1,
      2)*ZH(gI2,2))));

   return result;
}

std::complex<double> CLASSNAME::CpUhhAhAh(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = 0.025*(5*KroneckerDelta(2,gO2)*(-2.8284271247461903*Conj(TLambdax)*
      ZA(gI1,1)*ZA(gI2,0) - 2.8284271247461903*TLambdax*ZA(gI1,1)*ZA(gI2,0) - 8*vs
      *AbsSqr(Lambdax)*ZA(gI1,1)*ZA(gI2,1) + 2*vs*Sqr(gN)*ZA(gI1,1)*ZA(gI2,1) + ZA
      (gI1,0)*(vs*(-8*AbsSqr(Lambdax) + 3*Sqr(gN))*ZA(gI2,0) - 2.8284271247461903*
      (Conj(TLambdax) + TLambdax)*ZA(gI2,1)) - 5*vs*Sqr(gN)*ZA(gI1,2)*ZA(gI2,2)) +
      2*KroneckerDelta(1,gO2)*(-7.0710678118654755*Conj(TLambdax)*ZA(gI1,2)*ZA(
      gI2,0) - 7.0710678118654755*TLambdax*ZA(gI1,2)*ZA(gI2,0) - 3*vu*Sqr(g1)*ZA(
      gI1,1)*ZA(gI2,1) - 5*vu*Sqr(g2)*ZA(gI1,1)*ZA(gI2,1) - 2*vu*Sqr(gN)*ZA(gI1,1)
      *ZA(gI2,1) - 20*vu*AbsSqr(Lambdax)*ZA(gI1,2)*ZA(gI2,2) + 5*vu*Sqr(gN)*ZA(gI1
      ,2)*ZA(gI2,2) + ZA(gI1,0)*(vu*(-20*AbsSqr(Lambdax) + 3*Sqr(g1) + 5*Sqr(g2) -
      3*Sqr(gN))*ZA(gI2,0) - 7.0710678118654755*(Conj(TLambdax) + TLambdax)*ZA(
      gI2,2))) - KroneckerDelta(0,gO2)*(vd*(6*Sqr(g1) + 10*Sqr(g2) + 9*Sqr(gN))*ZA
      (gI1,0)*ZA(gI2,0) + 5*ZA(gI1,2)*(2.8284271247461903*Conj(TLambdax)*ZA(gI2,1)
      + 2.8284271247461903*TLambdax*ZA(gI2,1) + vd*(8*AbsSqr(Lambdax) - 3*Sqr(gN)
      )*ZA(gI2,2)) + 2*ZA(gI1,1)*(vd*(20*AbsSqr(Lambdax) - 3*Sqr(g1) - 5*Sqr(g2) +
      3*Sqr(gN))*ZA(gI2,1) + 7.0710678118654755*(Conj(TLambdax) + TLambdax)*ZA(
      gI2,2))));

   return result;
}

std::complex<double> CLASSNAME::CpUhhconjSvSv(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = 0.05*KroneckerDelta(gI1,gI2)*(-5*vs*KroneckerDelta(2,gO2)*Sqr(gN) +
      vu*KroneckerDelta(1,gO2)*(3*Sqr(g1) + 5*Sqr(g2) + 2*Sqr(gN)) + vd*
      KroneckerDelta(0,gO2)*(-3*Sqr(g1) - 5*Sqr(g2) + 3*Sqr(gN)));

   return result;
}

std::complex<double> CLASSNAME::CpUhhhhAh(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = std::complex<double>(0.,-0.35355339059327373)*(Conj(TLambdax) -
      TLambdax)*(KroneckerDelta(2,gO2)*(ZA(gI2,1)*ZH(gI1,0) + ZA(gI2,0)*ZH(gI1,1))
      + KroneckerDelta(1,gO2)*(ZA(gI2,2)*ZH(gI1,0) + ZA(gI2,0)*ZH(gI1,2)) +
      KroneckerDelta(0,gO2)*(ZA(gI2,2)*ZH(gI1,1) + ZA(gI2,1)*ZH(gI1,2)));

   return result;
}

std::complex<double> CLASSNAME::CpUhhhhhh(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = 0.025*(5*KroneckerDelta(2,gO2)*(2.8284271247461903*Conj(TLambdax)*
      ZH(gI1,1)*ZH(gI2,0) + 2.8284271247461903*TLambdax*ZH(gI1,1)*ZH(gI2,0) - 8*vd
      *AbsSqr(Lambdax)*ZH(gI1,2)*ZH(gI2,0) + 3*vd*Sqr(gN)*ZH(gI1,2)*ZH(gI2,0) - 8*
      vs*AbsSqr(Lambdax)*ZH(gI1,1)*ZH(gI2,1) + 2*vs*Sqr(gN)*ZH(gI1,1)*ZH(gI2,1) -
      8*vu*AbsSqr(Lambdax)*ZH(gI1,2)*ZH(gI2,1) + 2*vu*Sqr(gN)*ZH(gI1,2)*ZH(gI2,1)
      - 8*vu*AbsSqr(Lambdax)*ZH(gI1,1)*ZH(gI2,2) + 2*vu*Sqr(gN)*ZH(gI1,1)*ZH(gI2,2
      ) - 15*vs*Sqr(gN)*ZH(gI1,2)*ZH(gI2,2) + ZH(gI1,0)*(vs*(-8*AbsSqr(Lambdax) +
      3*Sqr(gN))*ZH(gI2,0) + 2.8284271247461903*Conj(TLambdax)*ZH(gI2,1) +
      2.8284271247461903*TLambdax*ZH(gI2,1) - 8*vd*AbsSqr(Lambdax)*ZH(gI2,2) + 3*
      vd*Sqr(gN)*ZH(gI2,2))) + KroneckerDelta(0,gO2)*(-(ZH(gI1,0)*(3*vd*(6*Sqr(g1)
      + 10*Sqr(g2) + 9*Sqr(gN))*ZH(gI2,0) + 2*vu*(20*AbsSqr(Lambdax) - 3*Sqr(g1)
      - 5*Sqr(g2) + 3*Sqr(gN))*ZH(gI2,1) + 5*vs*(8*AbsSqr(Lambdax) - 3*Sqr(gN))*ZH
      (gI2,2))) + 5*ZH(gI1,2)*(vs*(-8*AbsSqr(Lambdax) + 3*Sqr(gN))*ZH(gI2,0) +
      2.8284271247461903*Conj(TLambdax)*ZH(gI2,1) + 2.8284271247461903*TLambdax*ZH
      (gI2,1) - 8*vd*AbsSqr(Lambdax)*ZH(gI2,2) + 3*vd*Sqr(gN)*ZH(gI2,2)) + 2*ZH(
      gI1,1)*(vu*(-20*AbsSqr(Lambdax) + 3*Sqr(g1) + 5*Sqr(g2) - 3*Sqr(gN))*ZH(gI2,
      0) + vd*(-20*AbsSqr(Lambdax) + 3*Sqr(g1) + 5*Sqr(g2) - 3*Sqr(gN))*ZH(gI2,1)
      + 7.0710678118654755*(Conj(TLambdax) + TLambdax)*ZH(gI2,2))) + 2*
      KroneckerDelta(1,gO2)*(ZH(gI1,1)*(vd*(-20*AbsSqr(Lambdax) + 3*Sqr(g1) + 5*
      Sqr(g2) - 3*Sqr(gN))*ZH(gI2,0) - 3*vu*(3*Sqr(g1) + 5*Sqr(g2) + 2*Sqr(gN))*ZH
      (gI2,1) + 5*vs*(-4*AbsSqr(Lambdax) + Sqr(gN))*ZH(gI2,2)) + ZH(gI1,0)*(vu*(
      -20*AbsSqr(Lambdax) + 3*Sqr(g1) + 5*Sqr(g2) - 3*Sqr(gN))*ZH(gI2,0) + vd*(-20
      *AbsSqr(Lambdax) + 3*Sqr(g1) + 5*Sqr(g2) - 3*Sqr(gN))*ZH(gI2,1) +
      7.0710678118654755*(Conj(TLambdax) + TLambdax)*ZH(gI2,2)) + 5*ZH(gI1,2)*(
      1.4142135623730951*Conj(TLambdax)*ZH(gI2,0) + 1.4142135623730951*TLambdax*ZH
      (gI2,0) + (-4*AbsSqr(Lambdax) + Sqr(gN))*(vs*ZH(gI2,1) + vu*ZH(gI2,2)))));

   return result;
}

std::complex<double> CLASSNAME::CpUhhbarFdFdPR(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_1999;
   std::complex<double> tmp_2000;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2000 += Conj(Yd(j1,j1))*ZDL(gI1,j1)*ZDR(gI2,j1);
   }
   tmp_1999 += tmp_2000;
   result += (-0.7071067811865475*KroneckerDelta(0,gO2)) * tmp_1999;

   return result;
}

std::complex<double> CLASSNAME::CpUhhbarFdFdPL(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_2001;
   std::complex<double> tmp_2002;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2002 += Conj(ZDL(gI2,j1))*Conj(ZDR(gI1,j1))*Yd(j1,j1);
   }
   tmp_2001 += tmp_2002;
   result += (-0.7071067811865475*KroneckerDelta(0,gO1)) * tmp_2001;

   return result;
}

std::complex<double> CLASSNAME::CpUhhbarFDXFDXPR(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_2003;
   std::complex<double> tmp_2004;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2004 += Conj(Kappa(j1,j1))*ZDXL(gI1,j1)*ZDXR(gI2,j1);
   }
   tmp_2003 += tmp_2004;
   result += (-0.7071067811865475*KroneckerDelta(2,gO2)) * tmp_2003;

   return result;
}

std::complex<double> CLASSNAME::CpUhhbarFDXFDXPL(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_2005;
   std::complex<double> tmp_2006;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2006 += Conj(ZDXL(gI2,j1))*Conj(ZDXR(gI1,j1))*Kappa(j1,j1);
   }
   tmp_2005 += tmp_2006;
   result += (-0.7071067811865475*KroneckerDelta(2,gO1)) * tmp_2005;

   return result;
}

std::complex<double> CLASSNAME::CpUhhbarFeFePR(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_2007;
   std::complex<double> tmp_2008;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2008 += Conj(Ye(j1,j1))*ZEL(gI1,j1)*ZER(gI2,j1);
   }
   tmp_2007 += tmp_2008;
   result += (-0.7071067811865475*KroneckerDelta(0,gO2)) * tmp_2007;

   return result;
}

std::complex<double> CLASSNAME::CpUhhbarFeFePL(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_2009;
   std::complex<double> tmp_2010;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2010 += Conj(ZEL(gI2,j1))*Conj(ZER(gI1,j1))*Ye(j1,j1);
   }
   tmp_2009 += tmp_2010;
   result += (-0.7071067811865475*KroneckerDelta(0,gO1)) * tmp_2009;

   return result;
}

std::complex<double> CLASSNAME::CpUhhbarFuFuPR(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_2011;
   std::complex<double> tmp_2012;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2012 += Conj(Yu(j1,j1))*ZUL(gI1,j1)*ZUR(gI2,j1);
   }
   tmp_2011 += tmp_2012;
   result += (-0.7071067811865475*KroneckerDelta(1,gO2)) * tmp_2011;

   return result;
}

std::complex<double> CLASSNAME::CpUhhbarFuFuPL(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_2013;
   std::complex<double> tmp_2014;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2014 += Conj(ZUL(gI2,j1))*Conj(ZUR(gI1,j1))*Yu(j1,j1);
   }
   tmp_2013 += tmp_2014;
   result += (-0.7071067811865475*KroneckerDelta(1,gO1)) * tmp_2013;

   return result;
}

std::complex<double> CLASSNAME::CpUhhUhhconjSHI0SHI0(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_2015;
   std::complex<double> tmp_2016;
   std::complex<double> tmp_2017;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2017 += Conj(UHI0(gI2,j1))*UHI0(gI1,j1);
   }
   tmp_2016 += tmp_2017;
   tmp_2015 += (std::complex<double>(0,-0.15)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1)) * tmp_2016;
   std::complex<double> tmp_2018;
   std::complex<double> tmp_2019;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2019 += Conj(UHI0(gI2,j1))*UHI0(gI1,j1);
   }
   tmp_2018 += tmp_2019;
   tmp_2015 += (std::complex<double>(0,-0.25)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g2)) * tmp_2018;
   std::complex<double> tmp_2020;
   std::complex<double> tmp_2021;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2021 += Conj(UHI0(gI2,j1))*UHI0(gI1,j1);
   }
   tmp_2020 += tmp_2021;
   tmp_2015 += (std::complex<double>(0,-0.225)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(gN)) * tmp_2020;
   std::complex<double> tmp_2022;
   std::complex<double> tmp_2023;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2023 += Conj(UHI0(gI2,j1))*UHI0(gI1,j1);
   }
   tmp_2022 += tmp_2023;
   tmp_2015 += (std::complex<double>(0,0.15)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1)) * tmp_2022;
   std::complex<double> tmp_2024;
   std::complex<double> tmp_2025;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2025 += Conj(UHI0(gI2,j1))*UHI0(gI1,j1);
   }
   tmp_2024 += tmp_2025;
   tmp_2015 += (std::complex<double>(0,0.25)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g2)) * tmp_2024;
   std::complex<double> tmp_2026;
   std::complex<double> tmp_2027;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2027 += Conj(UHI0(gI2,j1))*UHI0(gI1,j1);
   }
   tmp_2026 += tmp_2027;
   tmp_2015 += (std::complex<double>(0,-0.15)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(gN)) * tmp_2026;
   std::complex<double> tmp_2028;
   std::complex<double> tmp_2029;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2029 += Conj(UHI0(gI2,j1))*UHI0(gI1,j1);
   }
   tmp_2028 += tmp_2029;
   tmp_2015 += (std::complex<double>(0,0.375)*KroneckerDelta(2,gO1)*
      KroneckerDelta(2,gO2)*Sqr(gN)) * tmp_2028;
   std::complex<double> tmp_2030;
   std::complex<double> tmp_2031;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2031 += Conj(UHI0(gI2,2 + j1))*Conj(Lambda12(j1,j1))*UHI0(gI1,j1);
   }
   tmp_2030 += tmp_2031;
   tmp_2015 += (std::complex<double>(0,-0.5)*KroneckerDelta(0,gO2)*
      KroneckerDelta(1,gO1)*Lambdax) * tmp_2030;
   std::complex<double> tmp_2032;
   std::complex<double> tmp_2033;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2033 += Conj(UHI0(gI2,2 + j1))*Conj(Lambda12(j1,j1))*UHI0(gI1,j1);
   }
   tmp_2032 += tmp_2033;
   tmp_2015 += (std::complex<double>(0,-0.5)*KroneckerDelta(0,gO1)*
      KroneckerDelta(1,gO2)*Lambdax) * tmp_2032;
   std::complex<double> tmp_2034;
   std::complex<double> tmp_2035;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2035 += Conj(UHI0(gI2,2 + j1))*UHI0(gI1,2 + j1);
   }
   tmp_2034 += tmp_2035;
   tmp_2015 += (std::complex<double>(0,0.15)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1)) * tmp_2034;
   std::complex<double> tmp_2036;
   std::complex<double> tmp_2037;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2037 += Conj(UHI0(gI2,2 + j1))*UHI0(gI1,2 + j1);
   }
   tmp_2036 += tmp_2037;
   tmp_2015 += (std::complex<double>(0,0.25)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g2)) * tmp_2036;
   std::complex<double> tmp_2038;
   std::complex<double> tmp_2039;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2039 += Conj(UHI0(gI2,2 + j1))*UHI0(gI1,2 + j1);
   }
   tmp_2038 += tmp_2039;
   tmp_2015 += (std::complex<double>(0,-0.15)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(gN)) * tmp_2038;
   std::complex<double> tmp_2040;
   std::complex<double> tmp_2041;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2041 += Conj(UHI0(gI2,2 + j1))*UHI0(gI1,2 + j1);
   }
   tmp_2040 += tmp_2041;
   tmp_2015 += (std::complex<double>(0,-0.15)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1)) * tmp_2040;
   std::complex<double> tmp_2042;
   std::complex<double> tmp_2043;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2043 += Conj(UHI0(gI2,2 + j1))*UHI0(gI1,2 + j1);
   }
   tmp_2042 += tmp_2043;
   tmp_2015 += (std::complex<double>(0,-0.25)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g2)) * tmp_2042;
   std::complex<double> tmp_2044;
   std::complex<double> tmp_2045;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2045 += Conj(UHI0(gI2,2 + j1))*UHI0(gI1,2 + j1);
   }
   tmp_2044 += tmp_2045;
   tmp_2015 += (std::complex<double>(0,-0.1)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(gN)) * tmp_2044;
   std::complex<double> tmp_2046;
   std::complex<double> tmp_2047;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2047 += Conj(UHI0(gI2,2 + j1))*UHI0(gI1,2 + j1);
   }
   tmp_2046 += tmp_2047;
   tmp_2015 += (std::complex<double>(0,0.25)*KroneckerDelta(2,gO1)*
      KroneckerDelta(2,gO2)*Sqr(gN)) * tmp_2046;
   std::complex<double> tmp_2048;
   std::complex<double> tmp_2049;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2049 += Conj(UHI0(gI2,j1))*UHI0(gI1,2 + j1)*Lambda12(j1,j1);
   }
   tmp_2048 += tmp_2049;
   tmp_2015 += (std::complex<double>(0,-0.5)*Conj(Lambdax)*KroneckerDelta(0,gO2
      )*KroneckerDelta(1,gO1)) * tmp_2048;
   std::complex<double> tmp_2050;
   std::complex<double> tmp_2051;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2051 += Conj(UHI0(gI2,j1))*UHI0(gI1,2 + j1)*Lambda12(j1,j1);
   }
   tmp_2050 += tmp_2051;
   tmp_2015 += (std::complex<double>(0,-0.5)*Conj(Lambdax)*KroneckerDelta(0,gO1
      )*KroneckerDelta(1,gO2)) * tmp_2050;
   std::complex<double> tmp_2052;
   std::complex<double> tmp_2053;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_2053 += AbsSqr(Lambda12(j2,j2))*Conj(UHI0(gI2,j2))*UHI0(gI1,j2);
   }
   tmp_2052 += tmp_2053;
   tmp_2015 += (std::complex<double>(0,-1)*KroneckerDelta(2,gO1)*KroneckerDelta
      (2,gO2)) * tmp_2052;
   std::complex<double> tmp_2054;
   std::complex<double> tmp_2055;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_2055 += AbsSqr(Lambda12(j2,j2))*Conj(UHI0(gI2,2 + j2))*UHI0(gI1,2
         + j2);
   }
   tmp_2054 += tmp_2055;
   tmp_2015 += (std::complex<double>(0,-1)*KroneckerDelta(2,gO1)*KroneckerDelta
      (2,gO2)) * tmp_2054;
   result += (std::complex<double>(0,-1)) * tmp_2015;

   return result;
}

std::complex<double> CLASSNAME::CpUhhUhhconjSHIpSHIp(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_2056;
   std::complex<double> tmp_2057;
   std::complex<double> tmp_2058;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2058 += Conj(UHIp(gI2,j1))*UHIp(gI1,j1);
   }
   tmp_2057 += tmp_2058;
   tmp_2056 += (std::complex<double>(0,-0.15)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1)) * tmp_2057;
   std::complex<double> tmp_2059;
   std::complex<double> tmp_2060;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2060 += Conj(UHIp(gI2,j1))*UHIp(gI1,j1);
   }
   tmp_2059 += tmp_2060;
   tmp_2056 += (std::complex<double>(0,0.25)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g2)) * tmp_2059;
   std::complex<double> tmp_2061;
   std::complex<double> tmp_2062;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2062 += Conj(UHIp(gI2,j1))*UHIp(gI1,j1);
   }
   tmp_2061 += tmp_2062;
   tmp_2056 += (std::complex<double>(0,-0.225)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(gN)) * tmp_2061;
   std::complex<double> tmp_2063;
   std::complex<double> tmp_2064;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2064 += Conj(UHIp(gI2,j1))*UHIp(gI1,j1);
   }
   tmp_2063 += tmp_2064;
   tmp_2056 += (std::complex<double>(0,0.15)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1)) * tmp_2063;
   std::complex<double> tmp_2065;
   std::complex<double> tmp_2066;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2066 += Conj(UHIp(gI2,j1))*UHIp(gI1,j1);
   }
   tmp_2065 += tmp_2066;
   tmp_2056 += (std::complex<double>(0,-0.25)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g2)) * tmp_2065;
   std::complex<double> tmp_2067;
   std::complex<double> tmp_2068;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2068 += Conj(UHIp(gI2,j1))*UHIp(gI1,j1);
   }
   tmp_2067 += tmp_2068;
   tmp_2056 += (std::complex<double>(0,-0.15)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(gN)) * tmp_2067;
   std::complex<double> tmp_2069;
   std::complex<double> tmp_2070;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2070 += Conj(UHIp(gI2,j1))*UHIp(gI1,j1);
   }
   tmp_2069 += tmp_2070;
   tmp_2056 += (std::complex<double>(0,0.375)*KroneckerDelta(2,gO1)*
      KroneckerDelta(2,gO2)*Sqr(gN)) * tmp_2069;
   std::complex<double> tmp_2071;
   std::complex<double> tmp_2072;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2072 += Conj(UHIp(gI2,2 + j1))*Conj(Lambda12(j1,j1))*UHIp(gI1,j1);
   }
   tmp_2071 += tmp_2072;
   tmp_2056 += (std::complex<double>(0,0.5)*KroneckerDelta(0,gO2)*
      KroneckerDelta(1,gO1)*Lambdax) * tmp_2071;
   std::complex<double> tmp_2073;
   std::complex<double> tmp_2074;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2074 += Conj(UHIp(gI2,2 + j1))*Conj(Lambda12(j1,j1))*UHIp(gI1,j1);
   }
   tmp_2073 += tmp_2074;
   tmp_2056 += (std::complex<double>(0,0.5)*KroneckerDelta(0,gO1)*
      KroneckerDelta(1,gO2)*Lambdax) * tmp_2073;
   std::complex<double> tmp_2075;
   std::complex<double> tmp_2076;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2076 += Conj(UHIp(gI2,2 + j1))*UHIp(gI1,2 + j1);
   }
   tmp_2075 += tmp_2076;
   tmp_2056 += (std::complex<double>(0,0.15)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1)) * tmp_2075;
   std::complex<double> tmp_2077;
   std::complex<double> tmp_2078;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2078 += Conj(UHIp(gI2,2 + j1))*UHIp(gI1,2 + j1);
   }
   tmp_2077 += tmp_2078;
   tmp_2056 += (std::complex<double>(0,-0.25)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g2)) * tmp_2077;
   std::complex<double> tmp_2079;
   std::complex<double> tmp_2080;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2080 += Conj(UHIp(gI2,2 + j1))*UHIp(gI1,2 + j1);
   }
   tmp_2079 += tmp_2080;
   tmp_2056 += (std::complex<double>(0,-0.15)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(gN)) * tmp_2079;
   std::complex<double> tmp_2081;
   std::complex<double> tmp_2082;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2082 += Conj(UHIp(gI2,2 + j1))*UHIp(gI1,2 + j1);
   }
   tmp_2081 += tmp_2082;
   tmp_2056 += (std::complex<double>(0,-0.15)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1)) * tmp_2081;
   std::complex<double> tmp_2083;
   std::complex<double> tmp_2084;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2084 += Conj(UHIp(gI2,2 + j1))*UHIp(gI1,2 + j1);
   }
   tmp_2083 += tmp_2084;
   tmp_2056 += (std::complex<double>(0,0.25)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g2)) * tmp_2083;
   std::complex<double> tmp_2085;
   std::complex<double> tmp_2086;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2086 += Conj(UHIp(gI2,2 + j1))*UHIp(gI1,2 + j1);
   }
   tmp_2085 += tmp_2086;
   tmp_2056 += (std::complex<double>(0,-0.1)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(gN)) * tmp_2085;
   std::complex<double> tmp_2087;
   std::complex<double> tmp_2088;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2088 += Conj(UHIp(gI2,2 + j1))*UHIp(gI1,2 + j1);
   }
   tmp_2087 += tmp_2088;
   tmp_2056 += (std::complex<double>(0,0.25)*KroneckerDelta(2,gO1)*
      KroneckerDelta(2,gO2)*Sqr(gN)) * tmp_2087;
   std::complex<double> tmp_2089;
   std::complex<double> tmp_2090;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2090 += Conj(UHIp(gI2,j1))*UHIp(gI1,2 + j1)*Lambda12(j1,j1);
   }
   tmp_2089 += tmp_2090;
   tmp_2056 += (std::complex<double>(0,0.5)*Conj(Lambdax)*KroneckerDelta(0,gO2)
      *KroneckerDelta(1,gO1)) * tmp_2089;
   std::complex<double> tmp_2091;
   std::complex<double> tmp_2092;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2092 += Conj(UHIp(gI2,j1))*UHIp(gI1,2 + j1)*Lambda12(j1,j1);
   }
   tmp_2091 += tmp_2092;
   tmp_2056 += (std::complex<double>(0,0.5)*Conj(Lambdax)*KroneckerDelta(0,gO1)
      *KroneckerDelta(1,gO2)) * tmp_2091;
   std::complex<double> tmp_2093;
   std::complex<double> tmp_2094;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_2094 += AbsSqr(Lambda12(j2,j2))*Conj(UHIp(gI2,j2))*UHIp(gI1,j2);
   }
   tmp_2093 += tmp_2094;
   tmp_2056 += (std::complex<double>(0,-1)*KroneckerDelta(2,gO1)*KroneckerDelta
      (2,gO2)) * tmp_2093;
   std::complex<double> tmp_2095;
   std::complex<double> tmp_2096;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_2096 += AbsSqr(Lambda12(j2,j2))*Conj(UHIp(gI2,2 + j2))*UHIp(gI1,2
         + j2);
   }
   tmp_2095 += tmp_2096;
   tmp_2056 += (std::complex<double>(0,-1)*KroneckerDelta(2,gO1)*KroneckerDelta
      (2,gO2)) * tmp_2095;
   result += (std::complex<double>(0,-1)) * tmp_2056;

   return result;
}

std::complex<double> CLASSNAME::CpUhhconjSHI0SHI0(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_2097;
   std::complex<double> tmp_2098;
   std::complex<double> tmp_2099;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2099 += Conj(UHI0(gI2,j1))*UHI0(gI1,j1);
   }
   tmp_2098 += tmp_2099;
   tmp_2097 += (std::complex<double>(0,-0.15)*vd*KroneckerDelta(0,gO2)*Sqr(g1))
      * tmp_2098;
   std::complex<double> tmp_2100;
   std::complex<double> tmp_2101;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2101 += Conj(UHI0(gI2,j1))*UHI0(gI1,j1);
   }
   tmp_2100 += tmp_2101;
   tmp_2097 += (std::complex<double>(0,-0.25)*vd*KroneckerDelta(0,gO2)*Sqr(g2))
      * tmp_2100;
   std::complex<double> tmp_2102;
   std::complex<double> tmp_2103;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2103 += Conj(UHI0(gI2,j1))*UHI0(gI1,j1);
   }
   tmp_2102 += tmp_2103;
   tmp_2097 += (std::complex<double>(0,-0.225)*vd*KroneckerDelta(0,gO2)*Sqr(gN)
      ) * tmp_2102;
   std::complex<double> tmp_2104;
   std::complex<double> tmp_2105;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2105 += Conj(UHI0(gI2,j1))*UHI0(gI1,j1);
   }
   tmp_2104 += tmp_2105;
   tmp_2097 += (std::complex<double>(0,0.15)*vu*KroneckerDelta(1,gO2)*Sqr(g1))
      * tmp_2104;
   std::complex<double> tmp_2106;
   std::complex<double> tmp_2107;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2107 += Conj(UHI0(gI2,j1))*UHI0(gI1,j1);
   }
   tmp_2106 += tmp_2107;
   tmp_2097 += (std::complex<double>(0,0.25)*vu*KroneckerDelta(1,gO2)*Sqr(g2))
      * tmp_2106;
   std::complex<double> tmp_2108;
   std::complex<double> tmp_2109;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2109 += Conj(UHI0(gI2,j1))*UHI0(gI1,j1);
   }
   tmp_2108 += tmp_2109;
   tmp_2097 += (std::complex<double>(0,-0.15)*vu*KroneckerDelta(1,gO2)*Sqr(gN))
      * tmp_2108;
   std::complex<double> tmp_2110;
   std::complex<double> tmp_2111;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2111 += Conj(UHI0(gI2,j1))*UHI0(gI1,j1);
   }
   tmp_2110 += tmp_2111;
   tmp_2097 += (std::complex<double>(0,0.375)*vs*KroneckerDelta(2,gO2)*Sqr(gN))
      * tmp_2110;
   std::complex<double> tmp_2112;
   std::complex<double> tmp_2113;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2113 += Conj(UHI0(gI2,2 + j1))*Conj(Lambda12(j1,j1))*UHI0(gI1,j1);
   }
   tmp_2112 += tmp_2113;
   tmp_2097 += (std::complex<double>(0,-0.5)*vu*KroneckerDelta(0,gO2)*Lambdax)
      * tmp_2112;
   std::complex<double> tmp_2114;
   std::complex<double> tmp_2115;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2115 += Conj(UHI0(gI2,2 + j1))*Conj(Lambda12(j1,j1))*UHI0(gI1,j1);
   }
   tmp_2114 += tmp_2115;
   tmp_2097 += (std::complex<double>(0,-0.5)*vd*KroneckerDelta(1,gO2)*Lambdax)
      * tmp_2114;
   std::complex<double> tmp_2116;
   std::complex<double> tmp_2117;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2117 += Conj(UHI0(gI2,2 + j1))*Conj(TLambda12(j1,j1))*UHI0(gI1,j1)
         ;
   }
   tmp_2116 += tmp_2117;
   tmp_2097 += (std::complex<double>(0.,0.7071067811865475)*KroneckerDelta(2,
      gO2)) * tmp_2116;
   std::complex<double> tmp_2118;
   std::complex<double> tmp_2119;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2119 += Conj(UHI0(gI2,2 + j1))*UHI0(gI1,2 + j1);
   }
   tmp_2118 += tmp_2119;
   tmp_2097 += (std::complex<double>(0,0.15)*vd*KroneckerDelta(0,gO2)*Sqr(g1))
      * tmp_2118;
   std::complex<double> tmp_2120;
   std::complex<double> tmp_2121;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2121 += Conj(UHI0(gI2,2 + j1))*UHI0(gI1,2 + j1);
   }
   tmp_2120 += tmp_2121;
   tmp_2097 += (std::complex<double>(0,0.25)*vd*KroneckerDelta(0,gO2)*Sqr(g2))
      * tmp_2120;
   std::complex<double> tmp_2122;
   std::complex<double> tmp_2123;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2123 += Conj(UHI0(gI2,2 + j1))*UHI0(gI1,2 + j1);
   }
   tmp_2122 += tmp_2123;
   tmp_2097 += (std::complex<double>(0,-0.15)*vd*KroneckerDelta(0,gO2)*Sqr(gN))
      * tmp_2122;
   std::complex<double> tmp_2124;
   std::complex<double> tmp_2125;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2125 += Conj(UHI0(gI2,2 + j1))*UHI0(gI1,2 + j1);
   }
   tmp_2124 += tmp_2125;
   tmp_2097 += (std::complex<double>(0,-0.15)*vu*KroneckerDelta(1,gO2)*Sqr(g1))
      * tmp_2124;
   std::complex<double> tmp_2126;
   std::complex<double> tmp_2127;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2127 += Conj(UHI0(gI2,2 + j1))*UHI0(gI1,2 + j1);
   }
   tmp_2126 += tmp_2127;
   tmp_2097 += (std::complex<double>(0,-0.25)*vu*KroneckerDelta(1,gO2)*Sqr(g2))
      * tmp_2126;
   std::complex<double> tmp_2128;
   std::complex<double> tmp_2129;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2129 += Conj(UHI0(gI2,2 + j1))*UHI0(gI1,2 + j1);
   }
   tmp_2128 += tmp_2129;
   tmp_2097 += (std::complex<double>(0,-0.1)*vu*KroneckerDelta(1,gO2)*Sqr(gN))
      * tmp_2128;
   std::complex<double> tmp_2130;
   std::complex<double> tmp_2131;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2131 += Conj(UHI0(gI2,2 + j1))*UHI0(gI1,2 + j1);
   }
   tmp_2130 += tmp_2131;
   tmp_2097 += (std::complex<double>(0,0.25)*vs*KroneckerDelta(2,gO2)*Sqr(gN))
      * tmp_2130;
   std::complex<double> tmp_2132;
   std::complex<double> tmp_2133;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2133 += Conj(UHI0(gI2,j1))*UHI0(gI1,2 + j1)*Lambda12(j1,j1);
   }
   tmp_2132 += tmp_2133;
   tmp_2097 += (std::complex<double>(0,-0.5)*vu*Conj(Lambdax)*KroneckerDelta(0,
      gO2)) * tmp_2132;
   std::complex<double> tmp_2134;
   std::complex<double> tmp_2135;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2135 += Conj(UHI0(gI2,j1))*UHI0(gI1,2 + j1)*Lambda12(j1,j1);
   }
   tmp_2134 += tmp_2135;
   tmp_2097 += (std::complex<double>(0,-0.5)*vd*Conj(Lambdax)*KroneckerDelta(1,
      gO2)) * tmp_2134;
   std::complex<double> tmp_2136;
   std::complex<double> tmp_2137;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2137 += Conj(UHI0(gI2,j1))*UHI0(gI1,2 + j1)*TLambda12(j1,j1);
   }
   tmp_2136 += tmp_2137;
   tmp_2097 += (std::complex<double>(0.,0.7071067811865475)*KroneckerDelta(2,
      gO2)) * tmp_2136;
   std::complex<double> tmp_2138;
   std::complex<double> tmp_2139;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_2139 += AbsSqr(Lambda12(j2,j2))*Conj(UHI0(gI2,j2))*UHI0(gI1,j2);
   }
   tmp_2138 += tmp_2139;
   tmp_2097 += (std::complex<double>(0,-1)*vs*KroneckerDelta(2,gO2)) * tmp_2138
      ;
   std::complex<double> tmp_2140;
   std::complex<double> tmp_2141;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_2141 += AbsSqr(Lambda12(j2,j2))*Conj(UHI0(gI2,2 + j2))*UHI0(gI1,2
         + j2);
   }
   tmp_2140 += tmp_2141;
   tmp_2097 += (std::complex<double>(0,-1)*vs*KroneckerDelta(2,gO2)) * tmp_2140
      ;
   result += (std::complex<double>(0,-1)) * tmp_2097;

   return result;
}

std::complex<double> CLASSNAME::CpUhhconjSHIpSHIp(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_2142;
   std::complex<double> tmp_2143;
   std::complex<double> tmp_2144;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2144 += Conj(UHIp(gI2,j1))*UHIp(gI1,j1);
   }
   tmp_2143 += tmp_2144;
   tmp_2142 += (std::complex<double>(0,-0.15)*vd*KroneckerDelta(0,gO2)*Sqr(g1))
      * tmp_2143;
   std::complex<double> tmp_2145;
   std::complex<double> tmp_2146;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2146 += Conj(UHIp(gI2,j1))*UHIp(gI1,j1);
   }
   tmp_2145 += tmp_2146;
   tmp_2142 += (std::complex<double>(0,0.25)*vd*KroneckerDelta(0,gO2)*Sqr(g2))
      * tmp_2145;
   std::complex<double> tmp_2147;
   std::complex<double> tmp_2148;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2148 += Conj(UHIp(gI2,j1))*UHIp(gI1,j1);
   }
   tmp_2147 += tmp_2148;
   tmp_2142 += (std::complex<double>(0,-0.225)*vd*KroneckerDelta(0,gO2)*Sqr(gN)
      ) * tmp_2147;
   std::complex<double> tmp_2149;
   std::complex<double> tmp_2150;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2150 += Conj(UHIp(gI2,j1))*UHIp(gI1,j1);
   }
   tmp_2149 += tmp_2150;
   tmp_2142 += (std::complex<double>(0,0.15)*vu*KroneckerDelta(1,gO2)*Sqr(g1))
      * tmp_2149;
   std::complex<double> tmp_2151;
   std::complex<double> tmp_2152;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2152 += Conj(UHIp(gI2,j1))*UHIp(gI1,j1);
   }
   tmp_2151 += tmp_2152;
   tmp_2142 += (std::complex<double>(0,-0.25)*vu*KroneckerDelta(1,gO2)*Sqr(g2))
      * tmp_2151;
   std::complex<double> tmp_2153;
   std::complex<double> tmp_2154;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2154 += Conj(UHIp(gI2,j1))*UHIp(gI1,j1);
   }
   tmp_2153 += tmp_2154;
   tmp_2142 += (std::complex<double>(0,-0.15)*vu*KroneckerDelta(1,gO2)*Sqr(gN))
      * tmp_2153;
   std::complex<double> tmp_2155;
   std::complex<double> tmp_2156;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2156 += Conj(UHIp(gI2,j1))*UHIp(gI1,j1);
   }
   tmp_2155 += tmp_2156;
   tmp_2142 += (std::complex<double>(0,0.375)*vs*KroneckerDelta(2,gO2)*Sqr(gN))
      * tmp_2155;
   std::complex<double> tmp_2157;
   std::complex<double> tmp_2158;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2158 += Conj(UHIp(gI2,2 + j1))*Conj(Lambda12(j1,j1))*UHIp(gI1,j1);
   }
   tmp_2157 += tmp_2158;
   tmp_2142 += (std::complex<double>(0,0.5)*vu*KroneckerDelta(0,gO2)*Lambdax) *
      tmp_2157;
   std::complex<double> tmp_2159;
   std::complex<double> tmp_2160;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2160 += Conj(UHIp(gI2,2 + j1))*Conj(Lambda12(j1,j1))*UHIp(gI1,j1);
   }
   tmp_2159 += tmp_2160;
   tmp_2142 += (std::complex<double>(0,0.5)*vd*KroneckerDelta(1,gO2)*Lambdax) *
      tmp_2159;
   std::complex<double> tmp_2161;
   std::complex<double> tmp_2162;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2162 += Conj(UHIp(gI2,2 + j1))*Conj(TLambda12(j1,j1))*UHIp(gI1,j1)
         ;
   }
   tmp_2161 += tmp_2162;
   tmp_2142 += (std::complex<double>(0.,-0.7071067811865475)*KroneckerDelta(2,
      gO2)) * tmp_2161;
   std::complex<double> tmp_2163;
   std::complex<double> tmp_2164;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2164 += Conj(UHIp(gI2,2 + j1))*UHIp(gI1,2 + j1);
   }
   tmp_2163 += tmp_2164;
   tmp_2142 += (std::complex<double>(0,0.15)*vd*KroneckerDelta(0,gO2)*Sqr(g1))
      * tmp_2163;
   std::complex<double> tmp_2165;
   std::complex<double> tmp_2166;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2166 += Conj(UHIp(gI2,2 + j1))*UHIp(gI1,2 + j1);
   }
   tmp_2165 += tmp_2166;
   tmp_2142 += (std::complex<double>(0,-0.25)*vd*KroneckerDelta(0,gO2)*Sqr(g2))
      * tmp_2165;
   std::complex<double> tmp_2167;
   std::complex<double> tmp_2168;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2168 += Conj(UHIp(gI2,2 + j1))*UHIp(gI1,2 + j1);
   }
   tmp_2167 += tmp_2168;
   tmp_2142 += (std::complex<double>(0,-0.15)*vd*KroneckerDelta(0,gO2)*Sqr(gN))
      * tmp_2167;
   std::complex<double> tmp_2169;
   std::complex<double> tmp_2170;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2170 += Conj(UHIp(gI2,2 + j1))*UHIp(gI1,2 + j1);
   }
   tmp_2169 += tmp_2170;
   tmp_2142 += (std::complex<double>(0,-0.15)*vu*KroneckerDelta(1,gO2)*Sqr(g1))
      * tmp_2169;
   std::complex<double> tmp_2171;
   std::complex<double> tmp_2172;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2172 += Conj(UHIp(gI2,2 + j1))*UHIp(gI1,2 + j1);
   }
   tmp_2171 += tmp_2172;
   tmp_2142 += (std::complex<double>(0,0.25)*vu*KroneckerDelta(1,gO2)*Sqr(g2))
      * tmp_2171;
   std::complex<double> tmp_2173;
   std::complex<double> tmp_2174;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2174 += Conj(UHIp(gI2,2 + j1))*UHIp(gI1,2 + j1);
   }
   tmp_2173 += tmp_2174;
   tmp_2142 += (std::complex<double>(0,-0.1)*vu*KroneckerDelta(1,gO2)*Sqr(gN))
      * tmp_2173;
   std::complex<double> tmp_2175;
   std::complex<double> tmp_2176;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2176 += Conj(UHIp(gI2,2 + j1))*UHIp(gI1,2 + j1);
   }
   tmp_2175 += tmp_2176;
   tmp_2142 += (std::complex<double>(0,0.25)*vs*KroneckerDelta(2,gO2)*Sqr(gN))
      * tmp_2175;
   std::complex<double> tmp_2177;
   std::complex<double> tmp_2178;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2178 += Conj(UHIp(gI2,j1))*UHIp(gI1,2 + j1)*Lambda12(j1,j1);
   }
   tmp_2177 += tmp_2178;
   tmp_2142 += (std::complex<double>(0,0.5)*vu*Conj(Lambdax)*KroneckerDelta(0,
      gO2)) * tmp_2177;
   std::complex<double> tmp_2179;
   std::complex<double> tmp_2180;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2180 += Conj(UHIp(gI2,j1))*UHIp(gI1,2 + j1)*Lambda12(j1,j1);
   }
   tmp_2179 += tmp_2180;
   tmp_2142 += (std::complex<double>(0,0.5)*vd*Conj(Lambdax)*KroneckerDelta(1,
      gO2)) * tmp_2179;
   std::complex<double> tmp_2181;
   std::complex<double> tmp_2182;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2182 += Conj(UHIp(gI2,j1))*UHIp(gI1,2 + j1)*TLambda12(j1,j1);
   }
   tmp_2181 += tmp_2182;
   tmp_2142 += (std::complex<double>(0.,-0.7071067811865475)*KroneckerDelta(2,
      gO2)) * tmp_2181;
   std::complex<double> tmp_2183;
   std::complex<double> tmp_2184;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_2184 += AbsSqr(Lambda12(j2,j2))*Conj(UHIp(gI2,j2))*UHIp(gI1,j2);
   }
   tmp_2183 += tmp_2184;
   tmp_2142 += (std::complex<double>(0,-1)*vs*KroneckerDelta(2,gO2)) * tmp_2183
      ;
   std::complex<double> tmp_2185;
   std::complex<double> tmp_2186;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_2186 += AbsSqr(Lambda12(j2,j2))*Conj(UHIp(gI2,2 + j2))*UHIp(gI1,2
         + j2);
   }
   tmp_2185 += tmp_2186;
   tmp_2142 += (std::complex<double>(0,-1)*vs*KroneckerDelta(2,gO2)) * tmp_2185
      ;
   result += (std::complex<double>(0,-1)) * tmp_2142;

   return result;
}

std::complex<double> CLASSNAME::CpUhhChiIChiIPR(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_2187;
   std::complex<double> tmp_2188;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2188 += Conj(Lambda12(j1,j1))*ZNI(gI1,2 + j1)*ZNI(gI2,j1);
   }
   tmp_2187 += tmp_2188;
   std::complex<double> tmp_2189;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2189 += Conj(Lambda12(j1,j1))*ZNI(gI1,j1)*ZNI(gI2,2 + j1);
   }
   tmp_2187 += tmp_2189;
   result += (0.7071067811865475*KroneckerDelta(2,gO2)) * tmp_2187;

   return result;
}

std::complex<double> CLASSNAME::CpUhhChiIChiIPL(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_2190;
   std::complex<double> tmp_2191;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2191 += Conj(ZNI(gI1,2 + j1))*Conj(ZNI(gI2,j1))*Lambda12(j1,j1);
   }
   tmp_2190 += tmp_2191;
   std::complex<double> tmp_2192;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2192 += Conj(ZNI(gI1,j1))*Conj(ZNI(gI2,2 + j1))*Lambda12(j1,j1);
   }
   tmp_2190 += tmp_2192;
   result += (0.7071067811865475*KroneckerDelta(2,gO1)) * tmp_2190;

   return result;
}

std::complex<double> CLASSNAME::CpUhhUhhconjSdSd(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_2193;
   std::complex<double> tmp_2194;
   std::complex<double> tmp_2195;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2195 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
   }
   tmp_2194 += tmp_2195;
   tmp_2193 += (std::complex<double>(0,0.05)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1)) * tmp_2194;
   std::complex<double> tmp_2196;
   std::complex<double> tmp_2197;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2197 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
   }
   tmp_2196 += tmp_2197;
   tmp_2193 += (std::complex<double>(0,0.25)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g2)) * tmp_2196;
   std::complex<double> tmp_2198;
   std::complex<double> tmp_2199;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2199 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
   }
   tmp_2198 += tmp_2199;
   tmp_2193 += (std::complex<double>(0,0.075)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(gN)) * tmp_2198;
   std::complex<double> tmp_2200;
   std::complex<double> tmp_2201;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2201 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
   }
   tmp_2200 += tmp_2201;
   tmp_2193 += (std::complex<double>(0,-0.05)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1)) * tmp_2200;
   std::complex<double> tmp_2202;
   std::complex<double> tmp_2203;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2203 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
   }
   tmp_2202 += tmp_2203;
   tmp_2193 += (std::complex<double>(0,-0.25)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g2)) * tmp_2202;
   std::complex<double> tmp_2204;
   std::complex<double> tmp_2205;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2205 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
   }
   tmp_2204 += tmp_2205;
   tmp_2193 += (std::complex<double>(0,0.05)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(gN)) * tmp_2204;
   std::complex<double> tmp_2206;
   std::complex<double> tmp_2207;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2207 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
   }
   tmp_2206 += tmp_2207;
   tmp_2193 += (std::complex<double>(0,-0.125)*KroneckerDelta(2,gO1)*
      KroneckerDelta(2,gO2)*Sqr(gN)) * tmp_2206;
   std::complex<double> tmp_2208;
   std::complex<double> tmp_2209;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2209 += Conj(Yd(j1,j1))*Conj(ZD(gI2,3 + j1))*ZD(gI1,j1);
   }
   tmp_2208 += tmp_2209;
   tmp_2193 += (std::complex<double>(0,0.5)*KroneckerDelta(1,gO2)*
      KroneckerDelta(2,gO1)*Lambdax) * tmp_2208;
   std::complex<double> tmp_2210;
   std::complex<double> tmp_2211;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2211 += Conj(Yd(j1,j1))*Conj(ZD(gI2,3 + j1))*ZD(gI1,j1);
   }
   tmp_2210 += tmp_2211;
   tmp_2193 += (std::complex<double>(0,0.5)*KroneckerDelta(1,gO1)*
      KroneckerDelta(2,gO2)*Lambdax) * tmp_2210;
   std::complex<double> tmp_2212;
   std::complex<double> tmp_2213;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2213 += Conj(ZD(gI2,3 + j1))*ZD(gI1,3 + j1);
   }
   tmp_2212 += tmp_2213;
   tmp_2193 += (std::complex<double>(0,0.1)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1)) * tmp_2212;
   std::complex<double> tmp_2214;
   std::complex<double> tmp_2215;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2215 += Conj(ZD(gI2,3 + j1))*ZD(gI1,3 + j1);
   }
   tmp_2214 += tmp_2215;
   tmp_2193 += (std::complex<double>(0,0.15)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(gN)) * tmp_2214;
   std::complex<double> tmp_2216;
   std::complex<double> tmp_2217;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2217 += Conj(ZD(gI2,3 + j1))*ZD(gI1,3 + j1);
   }
   tmp_2216 += tmp_2217;
   tmp_2193 += (std::complex<double>(0,-0.1)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1)) * tmp_2216;
   std::complex<double> tmp_2218;
   std::complex<double> tmp_2219;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2219 += Conj(ZD(gI2,3 + j1))*ZD(gI1,3 + j1);
   }
   tmp_2218 += tmp_2219;
   tmp_2193 += (std::complex<double>(0,0.1)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(gN)) * tmp_2218;
   std::complex<double> tmp_2220;
   std::complex<double> tmp_2221;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2221 += Conj(ZD(gI2,3 + j1))*ZD(gI1,3 + j1);
   }
   tmp_2220 += tmp_2221;
   tmp_2193 += (std::complex<double>(0,-0.25)*KroneckerDelta(2,gO1)*
      KroneckerDelta(2,gO2)*Sqr(gN)) * tmp_2220;
   std::complex<double> tmp_2222;
   std::complex<double> tmp_2223;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2223 += Conj(ZD(gI2,j1))*Yd(j1,j1)*ZD(gI1,3 + j1);
   }
   tmp_2222 += tmp_2223;
   tmp_2193 += (std::complex<double>(0,0.5)*Conj(Lambdax)*KroneckerDelta(1,gO2)
      *KroneckerDelta(2,gO1)) * tmp_2222;
   std::complex<double> tmp_2224;
   std::complex<double> tmp_2225;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2225 += Conj(ZD(gI2,j1))*Yd(j1,j1)*ZD(gI1,3 + j1);
   }
   tmp_2224 += tmp_2225;
   tmp_2193 += (std::complex<double>(0,0.5)*Conj(Lambdax)*KroneckerDelta(1,gO1)
      *KroneckerDelta(2,gO2)) * tmp_2224;
   std::complex<double> tmp_2226;
   std::complex<double> tmp_2227;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_2227 += AbsSqr(Yd(j2,j2))*Conj(ZD(gI2,j2))*ZD(gI1,j2);
   }
   tmp_2226 += tmp_2227;
   tmp_2193 += (std::complex<double>(0,-1)*KroneckerDelta(0,gO1)*KroneckerDelta
      (0,gO2)) * tmp_2226;
   std::complex<double> tmp_2228;
   std::complex<double> tmp_2229;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_2229 += AbsSqr(Yd(j2,j2))*Conj(ZD(gI2,3 + j2))*ZD(gI1,3 + j2);
   }
   tmp_2228 += tmp_2229;
   tmp_2193 += (std::complex<double>(0,-1)*KroneckerDelta(0,gO1)*KroneckerDelta
      (0,gO2)) * tmp_2228;
   result += (std::complex<double>(0,-1)) * tmp_2193;

   return result;
}

std::complex<double> CLASSNAME::CpUhhUhhconjSDXSDX(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_2230;
   std::complex<double> tmp_2231;
   std::complex<double> tmp_2232;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2232 += Conj(ZDX(gI2,j1))*ZDX(gI1,j1);
   }
   tmp_2231 += tmp_2232;
   tmp_2230 += (std::complex<double>(0,-0.1)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1)) * tmp_2231;
   std::complex<double> tmp_2233;
   std::complex<double> tmp_2234;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2234 += Conj(ZDX(gI2,j1))*ZDX(gI1,j1);
   }
   tmp_2233 += tmp_2234;
   tmp_2230 += (std::complex<double>(0,-0.15)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(gN)) * tmp_2233;
   std::complex<double> tmp_2235;
   std::complex<double> tmp_2236;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2236 += Conj(ZDX(gI2,j1))*ZDX(gI1,j1);
   }
   tmp_2235 += tmp_2236;
   tmp_2230 += (std::complex<double>(0,0.1)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1)) * tmp_2235;
   std::complex<double> tmp_2237;
   std::complex<double> tmp_2238;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2238 += Conj(ZDX(gI2,j1))*ZDX(gI1,j1);
   }
   tmp_2237 += tmp_2238;
   tmp_2230 += (std::complex<double>(0,-0.1)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(gN)) * tmp_2237;
   std::complex<double> tmp_2239;
   std::complex<double> tmp_2240;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2240 += Conj(ZDX(gI2,j1))*ZDX(gI1,j1);
   }
   tmp_2239 += tmp_2240;
   tmp_2230 += (std::complex<double>(0,0.25)*KroneckerDelta(2,gO1)*
      KroneckerDelta(2,gO2)*Sqr(gN)) * tmp_2239;
   std::complex<double> tmp_2241;
   std::complex<double> tmp_2242;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2242 += Conj(ZDX(gI2,3 + j1))*Conj(Kappa(j1,j1))*ZDX(gI1,j1);
   }
   tmp_2241 += tmp_2242;
   tmp_2230 += (std::complex<double>(0,0.5)*KroneckerDelta(0,gO2)*
      KroneckerDelta(1,gO1)*Lambdax) * tmp_2241;
   std::complex<double> tmp_2243;
   std::complex<double> tmp_2244;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2244 += Conj(ZDX(gI2,3 + j1))*Conj(Kappa(j1,j1))*ZDX(gI1,j1);
   }
   tmp_2243 += tmp_2244;
   tmp_2230 += (std::complex<double>(0,0.5)*KroneckerDelta(0,gO1)*
      KroneckerDelta(1,gO2)*Lambdax) * tmp_2243;
   std::complex<double> tmp_2245;
   std::complex<double> tmp_2246;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2246 += Conj(ZDX(gI2,3 + j1))*ZDX(gI1,3 + j1);
   }
   tmp_2245 += tmp_2246;
   tmp_2230 += (std::complex<double>(0,0.1)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1)) * tmp_2245;
   std::complex<double> tmp_2247;
   std::complex<double> tmp_2248;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2248 += Conj(ZDX(gI2,3 + j1))*ZDX(gI1,3 + j1);
   }
   tmp_2247 += tmp_2248;
   tmp_2230 += (std::complex<double>(0,-0.225)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(gN)) * tmp_2247;
   std::complex<double> tmp_2249;
   std::complex<double> tmp_2250;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2250 += Conj(ZDX(gI2,3 + j1))*ZDX(gI1,3 + j1);
   }
   tmp_2249 += tmp_2250;
   tmp_2230 += (std::complex<double>(0,-0.1)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1)) * tmp_2249;
   std::complex<double> tmp_2251;
   std::complex<double> tmp_2252;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2252 += Conj(ZDX(gI2,3 + j1))*ZDX(gI1,3 + j1);
   }
   tmp_2251 += tmp_2252;
   tmp_2230 += (std::complex<double>(0,-0.15)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(gN)) * tmp_2251;
   std::complex<double> tmp_2253;
   std::complex<double> tmp_2254;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2254 += Conj(ZDX(gI2,3 + j1))*ZDX(gI1,3 + j1);
   }
   tmp_2253 += tmp_2254;
   tmp_2230 += (std::complex<double>(0,0.375)*KroneckerDelta(2,gO1)*
      KroneckerDelta(2,gO2)*Sqr(gN)) * tmp_2253;
   std::complex<double> tmp_2255;
   std::complex<double> tmp_2256;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2256 += Conj(ZDX(gI2,j1))*ZDX(gI1,3 + j1)*Kappa(j1,j1);
   }
   tmp_2255 += tmp_2256;
   tmp_2230 += (std::complex<double>(0,0.5)*Conj(Lambdax)*KroneckerDelta(0,gO2)
      *KroneckerDelta(1,gO1)) * tmp_2255;
   std::complex<double> tmp_2257;
   std::complex<double> tmp_2258;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2258 += Conj(ZDX(gI2,j1))*ZDX(gI1,3 + j1)*Kappa(j1,j1);
   }
   tmp_2257 += tmp_2258;
   tmp_2230 += (std::complex<double>(0,0.5)*Conj(Lambdax)*KroneckerDelta(0,gO1)
      *KroneckerDelta(1,gO2)) * tmp_2257;
   std::complex<double> tmp_2259;
   std::complex<double> tmp_2260;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_2260 += AbsSqr(Kappa(j2,j2))*Conj(ZDX(gI2,j2))*ZDX(gI1,j2);
   }
   tmp_2259 += tmp_2260;
   tmp_2230 += (std::complex<double>(0,-1)*KroneckerDelta(2,gO1)*KroneckerDelta
      (2,gO2)) * tmp_2259;
   std::complex<double> tmp_2261;
   std::complex<double> tmp_2262;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_2262 += AbsSqr(Kappa(j2,j2))*Conj(ZDX(gI2,3 + j2))*ZDX(gI1,3 + j2)
         ;
   }
   tmp_2261 += tmp_2262;
   tmp_2230 += (std::complex<double>(0,-1)*KroneckerDelta(2,gO1)*KroneckerDelta
      (2,gO2)) * tmp_2261;
   result += (std::complex<double>(0,-1)) * tmp_2230;

   return result;
}

std::complex<double> CLASSNAME::CpUhhUhhconjSeSe(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_2263;
   std::complex<double> tmp_2264;
   std::complex<double> tmp_2265;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2265 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
   }
   tmp_2264 += tmp_2265;
   tmp_2263 += (std::complex<double>(0,-0.15)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1)) * tmp_2264;
   std::complex<double> tmp_2266;
   std::complex<double> tmp_2267;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2267 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
   }
   tmp_2266 += tmp_2267;
   tmp_2263 += (std::complex<double>(0,0.25)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g2)) * tmp_2266;
   std::complex<double> tmp_2268;
   std::complex<double> tmp_2269;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2269 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
   }
   tmp_2268 += tmp_2269;
   tmp_2263 += (std::complex<double>(0,0.15)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(gN)) * tmp_2268;
   std::complex<double> tmp_2270;
   std::complex<double> tmp_2271;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2271 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
   }
   tmp_2270 += tmp_2271;
   tmp_2263 += (std::complex<double>(0,0.15)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1)) * tmp_2270;
   std::complex<double> tmp_2272;
   std::complex<double> tmp_2273;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2273 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
   }
   tmp_2272 += tmp_2273;
   tmp_2263 += (std::complex<double>(0,-0.25)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g2)) * tmp_2272;
   std::complex<double> tmp_2274;
   std::complex<double> tmp_2275;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2275 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
   }
   tmp_2274 += tmp_2275;
   tmp_2263 += (std::complex<double>(0,0.1)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(gN)) * tmp_2274;
   std::complex<double> tmp_2276;
   std::complex<double> tmp_2277;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2277 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
   }
   tmp_2276 += tmp_2277;
   tmp_2263 += (std::complex<double>(0,-0.25)*KroneckerDelta(2,gO1)*
      KroneckerDelta(2,gO2)*Sqr(gN)) * tmp_2276;
   std::complex<double> tmp_2278;
   std::complex<double> tmp_2279;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2279 += Conj(Ye(j1,j1))*Conj(ZE(gI2,3 + j1))*ZE(gI1,j1);
   }
   tmp_2278 += tmp_2279;
   tmp_2263 += (std::complex<double>(0,0.5)*KroneckerDelta(1,gO2)*
      KroneckerDelta(2,gO1)*Lambdax) * tmp_2278;
   std::complex<double> tmp_2280;
   std::complex<double> tmp_2281;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2281 += Conj(Ye(j1,j1))*Conj(ZE(gI2,3 + j1))*ZE(gI1,j1);
   }
   tmp_2280 += tmp_2281;
   tmp_2263 += (std::complex<double>(0,0.5)*KroneckerDelta(1,gO1)*
      KroneckerDelta(2,gO2)*Lambdax) * tmp_2280;
   std::complex<double> tmp_2282;
   std::complex<double> tmp_2283;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2283 += Conj(ZE(gI2,3 + j1))*ZE(gI1,3 + j1);
   }
   tmp_2282 += tmp_2283;
   tmp_2263 += (std::complex<double>(0,0.3)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1)) * tmp_2282;
   std::complex<double> tmp_2284;
   std::complex<double> tmp_2285;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2285 += Conj(ZE(gI2,3 + j1))*ZE(gI1,3 + j1);
   }
   tmp_2284 += tmp_2285;
   tmp_2263 += (std::complex<double>(0,0.075)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(gN)) * tmp_2284;
   std::complex<double> tmp_2286;
   std::complex<double> tmp_2287;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2287 += Conj(ZE(gI2,3 + j1))*ZE(gI1,3 + j1);
   }
   tmp_2286 += tmp_2287;
   tmp_2263 += (std::complex<double>(0,-0.3)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1)) * tmp_2286;
   std::complex<double> tmp_2288;
   std::complex<double> tmp_2289;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2289 += Conj(ZE(gI2,3 + j1))*ZE(gI1,3 + j1);
   }
   tmp_2288 += tmp_2289;
   tmp_2263 += (std::complex<double>(0,0.05)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(gN)) * tmp_2288;
   std::complex<double> tmp_2290;
   std::complex<double> tmp_2291;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2291 += Conj(ZE(gI2,3 + j1))*ZE(gI1,3 + j1);
   }
   tmp_2290 += tmp_2291;
   tmp_2263 += (std::complex<double>(0,-0.125)*KroneckerDelta(2,gO1)*
      KroneckerDelta(2,gO2)*Sqr(gN)) * tmp_2290;
   std::complex<double> tmp_2292;
   std::complex<double> tmp_2293;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2293 += Conj(ZE(gI2,j1))*Ye(j1,j1)*ZE(gI1,3 + j1);
   }
   tmp_2292 += tmp_2293;
   tmp_2263 += (std::complex<double>(0,0.5)*Conj(Lambdax)*KroneckerDelta(1,gO2)
      *KroneckerDelta(2,gO1)) * tmp_2292;
   std::complex<double> tmp_2294;
   std::complex<double> tmp_2295;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2295 += Conj(ZE(gI2,j1))*Ye(j1,j1)*ZE(gI1,3 + j1);
   }
   tmp_2294 += tmp_2295;
   tmp_2263 += (std::complex<double>(0,0.5)*Conj(Lambdax)*KroneckerDelta(1,gO1)
      *KroneckerDelta(2,gO2)) * tmp_2294;
   std::complex<double> tmp_2296;
   std::complex<double> tmp_2297;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_2297 += AbsSqr(Ye(j2,j2))*Conj(ZE(gI2,j2))*ZE(gI1,j2);
   }
   tmp_2296 += tmp_2297;
   tmp_2263 += (std::complex<double>(0,-1)*KroneckerDelta(0,gO1)*KroneckerDelta
      (0,gO2)) * tmp_2296;
   std::complex<double> tmp_2298;
   std::complex<double> tmp_2299;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_2299 += AbsSqr(Ye(j2,j2))*Conj(ZE(gI2,3 + j2))*ZE(gI1,3 + j2);
   }
   tmp_2298 += tmp_2299;
   tmp_2263 += (std::complex<double>(0,-1)*KroneckerDelta(0,gO1)*KroneckerDelta
      (0,gO2)) * tmp_2298;
   result += (std::complex<double>(0,-1)) * tmp_2263;

   return result;
}

std::complex<double> CLASSNAME::CpUhhUhhconjSuSu(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_2300;
   std::complex<double> tmp_2301;
   std::complex<double> tmp_2302;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2302 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
   }
   tmp_2301 += tmp_2302;
   tmp_2300 += (std::complex<double>(0,0.05)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1)) * tmp_2301;
   std::complex<double> tmp_2303;
   std::complex<double> tmp_2304;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2304 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
   }
   tmp_2303 += tmp_2304;
   tmp_2300 += (std::complex<double>(0,-0.25)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g2)) * tmp_2303;
   std::complex<double> tmp_2305;
   std::complex<double> tmp_2306;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2306 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
   }
   tmp_2305 += tmp_2306;
   tmp_2300 += (std::complex<double>(0,0.075)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(gN)) * tmp_2305;
   std::complex<double> tmp_2307;
   std::complex<double> tmp_2308;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2308 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
   }
   tmp_2307 += tmp_2308;
   tmp_2300 += (std::complex<double>(0,-0.05)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1)) * tmp_2307;
   std::complex<double> tmp_2309;
   std::complex<double> tmp_2310;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2310 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
   }
   tmp_2309 += tmp_2310;
   tmp_2300 += (std::complex<double>(0,0.25)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g2)) * tmp_2309;
   std::complex<double> tmp_2311;
   std::complex<double> tmp_2312;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2312 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
   }
   tmp_2311 += tmp_2312;
   tmp_2300 += (std::complex<double>(0,0.05)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(gN)) * tmp_2311;
   std::complex<double> tmp_2313;
   std::complex<double> tmp_2314;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2314 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
   }
   tmp_2313 += tmp_2314;
   tmp_2300 += (std::complex<double>(0,-0.125)*KroneckerDelta(2,gO1)*
      KroneckerDelta(2,gO2)*Sqr(gN)) * tmp_2313;
   std::complex<double> tmp_2315;
   std::complex<double> tmp_2316;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2316 += Conj(Yu(j1,j1))*Conj(ZU(gI2,3 + j1))*ZU(gI1,j1);
   }
   tmp_2315 += tmp_2316;
   tmp_2300 += (std::complex<double>(0,0.5)*KroneckerDelta(0,gO2)*
      KroneckerDelta(2,gO1)*Lambdax) * tmp_2315;
   std::complex<double> tmp_2317;
   std::complex<double> tmp_2318;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2318 += Conj(Yu(j1,j1))*Conj(ZU(gI2,3 + j1))*ZU(gI1,j1);
   }
   tmp_2317 += tmp_2318;
   tmp_2300 += (std::complex<double>(0,0.5)*KroneckerDelta(0,gO1)*
      KroneckerDelta(2,gO2)*Lambdax) * tmp_2317;
   std::complex<double> tmp_2319;
   std::complex<double> tmp_2320;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2320 += Conj(ZU(gI2,3 + j1))*ZU(gI1,3 + j1);
   }
   tmp_2319 += tmp_2320;
   tmp_2300 += (std::complex<double>(0,-0.2)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1)) * tmp_2319;
   std::complex<double> tmp_2321;
   std::complex<double> tmp_2322;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2322 += Conj(ZU(gI2,3 + j1))*ZU(gI1,3 + j1);
   }
   tmp_2321 += tmp_2322;
   tmp_2300 += (std::complex<double>(0,0.075)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(gN)) * tmp_2321;
   std::complex<double> tmp_2323;
   std::complex<double> tmp_2324;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2324 += Conj(ZU(gI2,3 + j1))*ZU(gI1,3 + j1);
   }
   tmp_2323 += tmp_2324;
   tmp_2300 += (std::complex<double>(0,0.2)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1)) * tmp_2323;
   std::complex<double> tmp_2325;
   std::complex<double> tmp_2326;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2326 += Conj(ZU(gI2,3 + j1))*ZU(gI1,3 + j1);
   }
   tmp_2325 += tmp_2326;
   tmp_2300 += (std::complex<double>(0,0.05)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(gN)) * tmp_2325;
   std::complex<double> tmp_2327;
   std::complex<double> tmp_2328;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2328 += Conj(ZU(gI2,3 + j1))*ZU(gI1,3 + j1);
   }
   tmp_2327 += tmp_2328;
   tmp_2300 += (std::complex<double>(0,-0.125)*KroneckerDelta(2,gO1)*
      KroneckerDelta(2,gO2)*Sqr(gN)) * tmp_2327;
   std::complex<double> tmp_2329;
   std::complex<double> tmp_2330;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2330 += Conj(ZU(gI2,j1))*Yu(j1,j1)*ZU(gI1,3 + j1);
   }
   tmp_2329 += tmp_2330;
   tmp_2300 += (std::complex<double>(0,0.5)*Conj(Lambdax)*KroneckerDelta(0,gO2)
      *KroneckerDelta(2,gO1)) * tmp_2329;
   std::complex<double> tmp_2331;
   std::complex<double> tmp_2332;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2332 += Conj(ZU(gI2,j1))*Yu(j1,j1)*ZU(gI1,3 + j1);
   }
   tmp_2331 += tmp_2332;
   tmp_2300 += (std::complex<double>(0,0.5)*Conj(Lambdax)*KroneckerDelta(0,gO1)
      *KroneckerDelta(2,gO2)) * tmp_2331;
   std::complex<double> tmp_2333;
   std::complex<double> tmp_2334;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_2334 += AbsSqr(Yu(j2,j2))*Conj(ZU(gI2,j2))*ZU(gI1,j2);
   }
   tmp_2333 += tmp_2334;
   tmp_2300 += (std::complex<double>(0,-1)*KroneckerDelta(1,gO1)*KroneckerDelta
      (1,gO2)) * tmp_2333;
   std::complex<double> tmp_2335;
   std::complex<double> tmp_2336;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_2336 += AbsSqr(Yu(j2,j2))*Conj(ZU(gI2,3 + j2))*ZU(gI1,3 + j2);
   }
   tmp_2335 += tmp_2336;
   tmp_2300 += (std::complex<double>(0,-1)*KroneckerDelta(1,gO1)*KroneckerDelta
      (1,gO2)) * tmp_2335;
   result += (std::complex<double>(0,-1)) * tmp_2300;

   return result;
}

std::complex<double> CLASSNAME::CpUhhconjSdSd(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_2337;
   std::complex<double> tmp_2338;
   std::complex<double> tmp_2339;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2339 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
   }
   tmp_2338 += tmp_2339;
   tmp_2337 += (std::complex<double>(0,0.05)*vd*KroneckerDelta(0,gO2)*Sqr(g1))
      * tmp_2338;
   std::complex<double> tmp_2340;
   std::complex<double> tmp_2341;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2341 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
   }
   tmp_2340 += tmp_2341;
   tmp_2337 += (std::complex<double>(0,0.25)*vd*KroneckerDelta(0,gO2)*Sqr(g2))
      * tmp_2340;
   std::complex<double> tmp_2342;
   std::complex<double> tmp_2343;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2343 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
   }
   tmp_2342 += tmp_2343;
   tmp_2337 += (std::complex<double>(0,0.075)*vd*KroneckerDelta(0,gO2)*Sqr(gN))
      * tmp_2342;
   std::complex<double> tmp_2344;
   std::complex<double> tmp_2345;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2345 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
   }
   tmp_2344 += tmp_2345;
   tmp_2337 += (std::complex<double>(0,-0.05)*vu*KroneckerDelta(1,gO2)*Sqr(g1))
      * tmp_2344;
   std::complex<double> tmp_2346;
   std::complex<double> tmp_2347;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2347 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
   }
   tmp_2346 += tmp_2347;
   tmp_2337 += (std::complex<double>(0,-0.25)*vu*KroneckerDelta(1,gO2)*Sqr(g2))
      * tmp_2346;
   std::complex<double> tmp_2348;
   std::complex<double> tmp_2349;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2349 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
   }
   tmp_2348 += tmp_2349;
   tmp_2337 += (std::complex<double>(0,0.05)*vu*KroneckerDelta(1,gO2)*Sqr(gN))
      * tmp_2348;
   std::complex<double> tmp_2350;
   std::complex<double> tmp_2351;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2351 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
   }
   tmp_2350 += tmp_2351;
   tmp_2337 += (std::complex<double>(0,-0.125)*vs*KroneckerDelta(2,gO2)*Sqr(gN)
      ) * tmp_2350;
   std::complex<double> tmp_2352;
   std::complex<double> tmp_2353;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2353 += Conj(Yd(j1,j1))*Conj(ZD(gI2,3 + j1))*ZD(gI1,j1);
   }
   tmp_2352 += tmp_2353;
   tmp_2337 += (std::complex<double>(0,0.5)*vs*KroneckerDelta(1,gO2)*Lambdax) *
      tmp_2352;
   std::complex<double> tmp_2354;
   std::complex<double> tmp_2355;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2355 += Conj(Yd(j1,j1))*Conj(ZD(gI2,3 + j1))*ZD(gI1,j1);
   }
   tmp_2354 += tmp_2355;
   tmp_2337 += (std::complex<double>(0,0.5)*vu*KroneckerDelta(2,gO2)*Lambdax) *
      tmp_2354;
   std::complex<double> tmp_2356;
   std::complex<double> tmp_2357;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2357 += Conj(ZD(gI2,3 + j1))*Conj(TYd(j1,j1))*ZD(gI1,j1);
   }
   tmp_2356 += tmp_2357;
   tmp_2337 += (std::complex<double>(0.,-0.7071067811865475)*KroneckerDelta(0,
      gO2)) * tmp_2356;
   std::complex<double> tmp_2358;
   std::complex<double> tmp_2359;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2359 += Conj(ZD(gI2,3 + j1))*ZD(gI1,3 + j1);
   }
   tmp_2358 += tmp_2359;
   tmp_2337 += (std::complex<double>(0,0.1)*vd*KroneckerDelta(0,gO2)*Sqr(g1)) *
      tmp_2358;
   std::complex<double> tmp_2360;
   std::complex<double> tmp_2361;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2361 += Conj(ZD(gI2,3 + j1))*ZD(gI1,3 + j1);
   }
   tmp_2360 += tmp_2361;
   tmp_2337 += (std::complex<double>(0,0.15)*vd*KroneckerDelta(0,gO2)*Sqr(gN))
      * tmp_2360;
   std::complex<double> tmp_2362;
   std::complex<double> tmp_2363;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2363 += Conj(ZD(gI2,3 + j1))*ZD(gI1,3 + j1);
   }
   tmp_2362 += tmp_2363;
   tmp_2337 += (std::complex<double>(0,-0.1)*vu*KroneckerDelta(1,gO2)*Sqr(g1))
      * tmp_2362;
   std::complex<double> tmp_2364;
   std::complex<double> tmp_2365;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2365 += Conj(ZD(gI2,3 + j1))*ZD(gI1,3 + j1);
   }
   tmp_2364 += tmp_2365;
   tmp_2337 += (std::complex<double>(0,0.1)*vu*KroneckerDelta(1,gO2)*Sqr(gN)) *
      tmp_2364;
   std::complex<double> tmp_2366;
   std::complex<double> tmp_2367;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2367 += Conj(ZD(gI2,3 + j1))*ZD(gI1,3 + j1);
   }
   tmp_2366 += tmp_2367;
   tmp_2337 += (std::complex<double>(0,-0.25)*vs*KroneckerDelta(2,gO2)*Sqr(gN))
      * tmp_2366;
   std::complex<double> tmp_2368;
   std::complex<double> tmp_2369;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2369 += Conj(ZD(gI2,j1))*Yd(j1,j1)*ZD(gI1,3 + j1);
   }
   tmp_2368 += tmp_2369;
   tmp_2337 += (std::complex<double>(0,0.5)*vs*Conj(Lambdax)*KroneckerDelta(1,
      gO2)) * tmp_2368;
   std::complex<double> tmp_2370;
   std::complex<double> tmp_2371;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2371 += Conj(ZD(gI2,j1))*Yd(j1,j1)*ZD(gI1,3 + j1);
   }
   tmp_2370 += tmp_2371;
   tmp_2337 += (std::complex<double>(0,0.5)*vu*Conj(Lambdax)*KroneckerDelta(2,
      gO2)) * tmp_2370;
   std::complex<double> tmp_2372;
   std::complex<double> tmp_2373;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2373 += Conj(ZD(gI2,j1))*ZD(gI1,3 + j1)*TYd(j1,j1);
   }
   tmp_2372 += tmp_2373;
   tmp_2337 += (std::complex<double>(0.,-0.7071067811865475)*KroneckerDelta(0,
      gO2)) * tmp_2372;
   std::complex<double> tmp_2374;
   std::complex<double> tmp_2375;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_2375 += AbsSqr(Yd(j2,j2))*Conj(ZD(gI2,j2))*ZD(gI1,j2);
   }
   tmp_2374 += tmp_2375;
   tmp_2337 += (std::complex<double>(0,-1)*vd*KroneckerDelta(0,gO2)) * tmp_2374
      ;
   std::complex<double> tmp_2376;
   std::complex<double> tmp_2377;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_2377 += AbsSqr(Yd(j2,j2))*Conj(ZD(gI2,3 + j2))*ZD(gI1,3 + j2);
   }
   tmp_2376 += tmp_2377;
   tmp_2337 += (std::complex<double>(0,-1)*vd*KroneckerDelta(0,gO2)) * tmp_2376
      ;
   result += (std::complex<double>(0,-1)) * tmp_2337;

   return result;
}

std::complex<double> CLASSNAME::CpUhhconjSDXSDX(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_2378;
   std::complex<double> tmp_2379;
   std::complex<double> tmp_2380;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2380 += Conj(ZDX(gI2,j1))*ZDX(gI1,j1);
   }
   tmp_2379 += tmp_2380;
   tmp_2378 += (std::complex<double>(0,-0.1)*vd*KroneckerDelta(0,gO2)*Sqr(g1))
      * tmp_2379;
   std::complex<double> tmp_2381;
   std::complex<double> tmp_2382;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2382 += Conj(ZDX(gI2,j1))*ZDX(gI1,j1);
   }
   tmp_2381 += tmp_2382;
   tmp_2378 += (std::complex<double>(0,-0.15)*vd*KroneckerDelta(0,gO2)*Sqr(gN))
      * tmp_2381;
   std::complex<double> tmp_2383;
   std::complex<double> tmp_2384;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2384 += Conj(ZDX(gI2,j1))*ZDX(gI1,j1);
   }
   tmp_2383 += tmp_2384;
   tmp_2378 += (std::complex<double>(0,0.1)*vu*KroneckerDelta(1,gO2)*Sqr(g1)) *
      tmp_2383;
   std::complex<double> tmp_2385;
   std::complex<double> tmp_2386;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2386 += Conj(ZDX(gI2,j1))*ZDX(gI1,j1);
   }
   tmp_2385 += tmp_2386;
   tmp_2378 += (std::complex<double>(0,-0.1)*vu*KroneckerDelta(1,gO2)*Sqr(gN))
      * tmp_2385;
   std::complex<double> tmp_2387;
   std::complex<double> tmp_2388;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2388 += Conj(ZDX(gI2,j1))*ZDX(gI1,j1);
   }
   tmp_2387 += tmp_2388;
   tmp_2378 += (std::complex<double>(0,0.25)*vs*KroneckerDelta(2,gO2)*Sqr(gN))
      * tmp_2387;
   std::complex<double> tmp_2389;
   std::complex<double> tmp_2390;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2390 += Conj(ZDX(gI2,3 + j1))*Conj(Kappa(j1,j1))*ZDX(gI1,j1);
   }
   tmp_2389 += tmp_2390;
   tmp_2378 += (std::complex<double>(0,0.5)*vu*KroneckerDelta(0,gO2)*Lambdax) *
      tmp_2389;
   std::complex<double> tmp_2391;
   std::complex<double> tmp_2392;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2392 += Conj(ZDX(gI2,3 + j1))*Conj(Kappa(j1,j1))*ZDX(gI1,j1);
   }
   tmp_2391 += tmp_2392;
   tmp_2378 += (std::complex<double>(0,0.5)*vd*KroneckerDelta(1,gO2)*Lambdax) *
      tmp_2391;
   std::complex<double> tmp_2393;
   std::complex<double> tmp_2394;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2394 += Conj(ZDX(gI2,3 + j1))*Conj(TKappa(j1,j1))*ZDX(gI1,j1);
   }
   tmp_2393 += tmp_2394;
   tmp_2378 += (std::complex<double>(0.,-0.7071067811865475)*KroneckerDelta(2,
      gO2)) * tmp_2393;
   std::complex<double> tmp_2395;
   std::complex<double> tmp_2396;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2396 += Conj(ZDX(gI2,3 + j1))*ZDX(gI1,3 + j1);
   }
   tmp_2395 += tmp_2396;
   tmp_2378 += (std::complex<double>(0,0.1)*vd*KroneckerDelta(0,gO2)*Sqr(g1)) *
      tmp_2395;
   std::complex<double> tmp_2397;
   std::complex<double> tmp_2398;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2398 += Conj(ZDX(gI2,3 + j1))*ZDX(gI1,3 + j1);
   }
   tmp_2397 += tmp_2398;
   tmp_2378 += (std::complex<double>(0,-0.225)*vd*KroneckerDelta(0,gO2)*Sqr(gN)
      ) * tmp_2397;
   std::complex<double> tmp_2399;
   std::complex<double> tmp_2400;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2400 += Conj(ZDX(gI2,3 + j1))*ZDX(gI1,3 + j1);
   }
   tmp_2399 += tmp_2400;
   tmp_2378 += (std::complex<double>(0,-0.1)*vu*KroneckerDelta(1,gO2)*Sqr(g1))
      * tmp_2399;
   std::complex<double> tmp_2401;
   std::complex<double> tmp_2402;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2402 += Conj(ZDX(gI2,3 + j1))*ZDX(gI1,3 + j1);
   }
   tmp_2401 += tmp_2402;
   tmp_2378 += (std::complex<double>(0,-0.15)*vu*KroneckerDelta(1,gO2)*Sqr(gN))
      * tmp_2401;
   std::complex<double> tmp_2403;
   std::complex<double> tmp_2404;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2404 += Conj(ZDX(gI2,3 + j1))*ZDX(gI1,3 + j1);
   }
   tmp_2403 += tmp_2404;
   tmp_2378 += (std::complex<double>(0,0.375)*vs*KroneckerDelta(2,gO2)*Sqr(gN))
      * tmp_2403;
   std::complex<double> tmp_2405;
   std::complex<double> tmp_2406;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2406 += Conj(ZDX(gI2,j1))*ZDX(gI1,3 + j1)*Kappa(j1,j1);
   }
   tmp_2405 += tmp_2406;
   tmp_2378 += (std::complex<double>(0,0.5)*vu*Conj(Lambdax)*KroneckerDelta(0,
      gO2)) * tmp_2405;
   std::complex<double> tmp_2407;
   std::complex<double> tmp_2408;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2408 += Conj(ZDX(gI2,j1))*ZDX(gI1,3 + j1)*Kappa(j1,j1);
   }
   tmp_2407 += tmp_2408;
   tmp_2378 += (std::complex<double>(0,0.5)*vd*Conj(Lambdax)*KroneckerDelta(1,
      gO2)) * tmp_2407;
   std::complex<double> tmp_2409;
   std::complex<double> tmp_2410;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2410 += Conj(ZDX(gI2,j1))*ZDX(gI1,3 + j1)*TKappa(j1,j1);
   }
   tmp_2409 += tmp_2410;
   tmp_2378 += (std::complex<double>(0.,-0.7071067811865475)*KroneckerDelta(2,
      gO2)) * tmp_2409;
   std::complex<double> tmp_2411;
   std::complex<double> tmp_2412;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_2412 += AbsSqr(Kappa(j2,j2))*Conj(ZDX(gI2,j2))*ZDX(gI1,j2);
   }
   tmp_2411 += tmp_2412;
   tmp_2378 += (std::complex<double>(0,-1)*vs*KroneckerDelta(2,gO2)) * tmp_2411
      ;
   std::complex<double> tmp_2413;
   std::complex<double> tmp_2414;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_2414 += AbsSqr(Kappa(j2,j2))*Conj(ZDX(gI2,3 + j2))*ZDX(gI1,3 + j2)
         ;
   }
   tmp_2413 += tmp_2414;
   tmp_2378 += (std::complex<double>(0,-1)*vs*KroneckerDelta(2,gO2)) * tmp_2413
      ;
   result += (std::complex<double>(0,-1)) * tmp_2378;

   return result;
}

std::complex<double> CLASSNAME::CpUhhconjSeSe(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_2415;
   std::complex<double> tmp_2416;
   std::complex<double> tmp_2417;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2417 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
   }
   tmp_2416 += tmp_2417;
   tmp_2415 += (std::complex<double>(0,-0.15)*vd*KroneckerDelta(0,gO2)*Sqr(g1))
      * tmp_2416;
   std::complex<double> tmp_2418;
   std::complex<double> tmp_2419;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2419 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
   }
   tmp_2418 += tmp_2419;
   tmp_2415 += (std::complex<double>(0,0.25)*vd*KroneckerDelta(0,gO2)*Sqr(g2))
      * tmp_2418;
   std::complex<double> tmp_2420;
   std::complex<double> tmp_2421;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2421 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
   }
   tmp_2420 += tmp_2421;
   tmp_2415 += (std::complex<double>(0,0.15)*vd*KroneckerDelta(0,gO2)*Sqr(gN))
      * tmp_2420;
   std::complex<double> tmp_2422;
   std::complex<double> tmp_2423;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2423 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
   }
   tmp_2422 += tmp_2423;
   tmp_2415 += (std::complex<double>(0,0.15)*vu*KroneckerDelta(1,gO2)*Sqr(g1))
      * tmp_2422;
   std::complex<double> tmp_2424;
   std::complex<double> tmp_2425;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2425 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
   }
   tmp_2424 += tmp_2425;
   tmp_2415 += (std::complex<double>(0,-0.25)*vu*KroneckerDelta(1,gO2)*Sqr(g2))
      * tmp_2424;
   std::complex<double> tmp_2426;
   std::complex<double> tmp_2427;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2427 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
   }
   tmp_2426 += tmp_2427;
   tmp_2415 += (std::complex<double>(0,0.1)*vu*KroneckerDelta(1,gO2)*Sqr(gN)) *
      tmp_2426;
   std::complex<double> tmp_2428;
   std::complex<double> tmp_2429;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2429 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
   }
   tmp_2428 += tmp_2429;
   tmp_2415 += (std::complex<double>(0,-0.25)*vs*KroneckerDelta(2,gO2)*Sqr(gN))
      * tmp_2428;
   std::complex<double> tmp_2430;
   std::complex<double> tmp_2431;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2431 += Conj(Ye(j1,j1))*Conj(ZE(gI2,3 + j1))*ZE(gI1,j1);
   }
   tmp_2430 += tmp_2431;
   tmp_2415 += (std::complex<double>(0,0.5)*vs*KroneckerDelta(1,gO2)*Lambdax) *
      tmp_2430;
   std::complex<double> tmp_2432;
   std::complex<double> tmp_2433;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2433 += Conj(Ye(j1,j1))*Conj(ZE(gI2,3 + j1))*ZE(gI1,j1);
   }
   tmp_2432 += tmp_2433;
   tmp_2415 += (std::complex<double>(0,0.5)*vu*KroneckerDelta(2,gO2)*Lambdax) *
      tmp_2432;
   std::complex<double> tmp_2434;
   std::complex<double> tmp_2435;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2435 += Conj(ZE(gI2,3 + j1))*Conj(TYe(j1,j1))*ZE(gI1,j1);
   }
   tmp_2434 += tmp_2435;
   tmp_2415 += (std::complex<double>(0.,-0.7071067811865475)*KroneckerDelta(0,
      gO2)) * tmp_2434;
   std::complex<double> tmp_2436;
   std::complex<double> tmp_2437;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2437 += Conj(ZE(gI2,3 + j1))*ZE(gI1,3 + j1);
   }
   tmp_2436 += tmp_2437;
   tmp_2415 += (std::complex<double>(0,0.3)*vd*KroneckerDelta(0,gO2)*Sqr(g1)) *
      tmp_2436;
   std::complex<double> tmp_2438;
   std::complex<double> tmp_2439;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2439 += Conj(ZE(gI2,3 + j1))*ZE(gI1,3 + j1);
   }
   tmp_2438 += tmp_2439;
   tmp_2415 += (std::complex<double>(0,0.075)*vd*KroneckerDelta(0,gO2)*Sqr(gN))
      * tmp_2438;
   std::complex<double> tmp_2440;
   std::complex<double> tmp_2441;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2441 += Conj(ZE(gI2,3 + j1))*ZE(gI1,3 + j1);
   }
   tmp_2440 += tmp_2441;
   tmp_2415 += (std::complex<double>(0,-0.3)*vu*KroneckerDelta(1,gO2)*Sqr(g1))
      * tmp_2440;
   std::complex<double> tmp_2442;
   std::complex<double> tmp_2443;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2443 += Conj(ZE(gI2,3 + j1))*ZE(gI1,3 + j1);
   }
   tmp_2442 += tmp_2443;
   tmp_2415 += (std::complex<double>(0,0.05)*vu*KroneckerDelta(1,gO2)*Sqr(gN))
      * tmp_2442;
   std::complex<double> tmp_2444;
   std::complex<double> tmp_2445;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2445 += Conj(ZE(gI2,3 + j1))*ZE(gI1,3 + j1);
   }
   tmp_2444 += tmp_2445;
   tmp_2415 += (std::complex<double>(0,-0.125)*vs*KroneckerDelta(2,gO2)*Sqr(gN)
      ) * tmp_2444;
   std::complex<double> tmp_2446;
   std::complex<double> tmp_2447;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2447 += Conj(ZE(gI2,j1))*Ye(j1,j1)*ZE(gI1,3 + j1);
   }
   tmp_2446 += tmp_2447;
   tmp_2415 += (std::complex<double>(0,0.5)*vs*Conj(Lambdax)*KroneckerDelta(1,
      gO2)) * tmp_2446;
   std::complex<double> tmp_2448;
   std::complex<double> tmp_2449;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2449 += Conj(ZE(gI2,j1))*Ye(j1,j1)*ZE(gI1,3 + j1);
   }
   tmp_2448 += tmp_2449;
   tmp_2415 += (std::complex<double>(0,0.5)*vu*Conj(Lambdax)*KroneckerDelta(2,
      gO2)) * tmp_2448;
   std::complex<double> tmp_2450;
   std::complex<double> tmp_2451;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2451 += Conj(ZE(gI2,j1))*ZE(gI1,3 + j1)*TYe(j1,j1);
   }
   tmp_2450 += tmp_2451;
   tmp_2415 += (std::complex<double>(0.,-0.7071067811865475)*KroneckerDelta(0,
      gO2)) * tmp_2450;
   std::complex<double> tmp_2452;
   std::complex<double> tmp_2453;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_2453 += AbsSqr(Ye(j2,j2))*Conj(ZE(gI2,j2))*ZE(gI1,j2);
   }
   tmp_2452 += tmp_2453;
   tmp_2415 += (std::complex<double>(0,-1)*vd*KroneckerDelta(0,gO2)) * tmp_2452
      ;
   std::complex<double> tmp_2454;
   std::complex<double> tmp_2455;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_2455 += AbsSqr(Ye(j2,j2))*Conj(ZE(gI2,3 + j2))*ZE(gI1,3 + j2);
   }
   tmp_2454 += tmp_2455;
   tmp_2415 += (std::complex<double>(0,-1)*vd*KroneckerDelta(0,gO2)) * tmp_2454
      ;
   result += (std::complex<double>(0,-1)) * tmp_2415;

   return result;
}

std::complex<double> CLASSNAME::CpUhhconjSuSu(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_2456;
   std::complex<double> tmp_2457;
   std::complex<double> tmp_2458;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2458 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
   }
   tmp_2457 += tmp_2458;
   tmp_2456 += (std::complex<double>(0,0.05)*vd*KroneckerDelta(0,gO2)*Sqr(g1))
      * tmp_2457;
   std::complex<double> tmp_2459;
   std::complex<double> tmp_2460;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2460 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
   }
   tmp_2459 += tmp_2460;
   tmp_2456 += (std::complex<double>(0,-0.25)*vd*KroneckerDelta(0,gO2)*Sqr(g2))
      * tmp_2459;
   std::complex<double> tmp_2461;
   std::complex<double> tmp_2462;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2462 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
   }
   tmp_2461 += tmp_2462;
   tmp_2456 += (std::complex<double>(0,0.075)*vd*KroneckerDelta(0,gO2)*Sqr(gN))
      * tmp_2461;
   std::complex<double> tmp_2463;
   std::complex<double> tmp_2464;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2464 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
   }
   tmp_2463 += tmp_2464;
   tmp_2456 += (std::complex<double>(0,-0.05)*vu*KroneckerDelta(1,gO2)*Sqr(g1))
      * tmp_2463;
   std::complex<double> tmp_2465;
   std::complex<double> tmp_2466;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2466 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
   }
   tmp_2465 += tmp_2466;
   tmp_2456 += (std::complex<double>(0,0.25)*vu*KroneckerDelta(1,gO2)*Sqr(g2))
      * tmp_2465;
   std::complex<double> tmp_2467;
   std::complex<double> tmp_2468;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2468 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
   }
   tmp_2467 += tmp_2468;
   tmp_2456 += (std::complex<double>(0,0.05)*vu*KroneckerDelta(1,gO2)*Sqr(gN))
      * tmp_2467;
   std::complex<double> tmp_2469;
   std::complex<double> tmp_2470;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2470 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
   }
   tmp_2469 += tmp_2470;
   tmp_2456 += (std::complex<double>(0,-0.125)*vs*KroneckerDelta(2,gO2)*Sqr(gN)
      ) * tmp_2469;
   std::complex<double> tmp_2471;
   std::complex<double> tmp_2472;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2472 += Conj(Yu(j1,j1))*Conj(ZU(gI2,3 + j1))*ZU(gI1,j1);
   }
   tmp_2471 += tmp_2472;
   tmp_2456 += (std::complex<double>(0,0.5)*vs*KroneckerDelta(0,gO2)*Lambdax) *
      tmp_2471;
   std::complex<double> tmp_2473;
   std::complex<double> tmp_2474;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2474 += Conj(Yu(j1,j1))*Conj(ZU(gI2,3 + j1))*ZU(gI1,j1);
   }
   tmp_2473 += tmp_2474;
   tmp_2456 += (std::complex<double>(0,0.5)*vd*KroneckerDelta(2,gO2)*Lambdax) *
      tmp_2473;
   std::complex<double> tmp_2475;
   std::complex<double> tmp_2476;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2476 += Conj(ZU(gI2,3 + j1))*Conj(TYu(j1,j1))*ZU(gI1,j1);
   }
   tmp_2475 += tmp_2476;
   tmp_2456 += (std::complex<double>(0.,-0.7071067811865475)*KroneckerDelta(1,
      gO2)) * tmp_2475;
   std::complex<double> tmp_2477;
   std::complex<double> tmp_2478;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2478 += Conj(ZU(gI2,3 + j1))*ZU(gI1,3 + j1);
   }
   tmp_2477 += tmp_2478;
   tmp_2456 += (std::complex<double>(0,-0.2)*vd*KroneckerDelta(0,gO2)*Sqr(g1))
      * tmp_2477;
   std::complex<double> tmp_2479;
   std::complex<double> tmp_2480;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2480 += Conj(ZU(gI2,3 + j1))*ZU(gI1,3 + j1);
   }
   tmp_2479 += tmp_2480;
   tmp_2456 += (std::complex<double>(0,0.075)*vd*KroneckerDelta(0,gO2)*Sqr(gN))
      * tmp_2479;
   std::complex<double> tmp_2481;
   std::complex<double> tmp_2482;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2482 += Conj(ZU(gI2,3 + j1))*ZU(gI1,3 + j1);
   }
   tmp_2481 += tmp_2482;
   tmp_2456 += (std::complex<double>(0,0.2)*vu*KroneckerDelta(1,gO2)*Sqr(g1)) *
      tmp_2481;
   std::complex<double> tmp_2483;
   std::complex<double> tmp_2484;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2484 += Conj(ZU(gI2,3 + j1))*ZU(gI1,3 + j1);
   }
   tmp_2483 += tmp_2484;
   tmp_2456 += (std::complex<double>(0,0.05)*vu*KroneckerDelta(1,gO2)*Sqr(gN))
      * tmp_2483;
   std::complex<double> tmp_2485;
   std::complex<double> tmp_2486;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2486 += Conj(ZU(gI2,3 + j1))*ZU(gI1,3 + j1);
   }
   tmp_2485 += tmp_2486;
   tmp_2456 += (std::complex<double>(0,-0.125)*vs*KroneckerDelta(2,gO2)*Sqr(gN)
      ) * tmp_2485;
   std::complex<double> tmp_2487;
   std::complex<double> tmp_2488;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2488 += Conj(ZU(gI2,j1))*Yu(j1,j1)*ZU(gI1,3 + j1);
   }
   tmp_2487 += tmp_2488;
   tmp_2456 += (std::complex<double>(0,0.5)*vs*Conj(Lambdax)*KroneckerDelta(0,
      gO2)) * tmp_2487;
   std::complex<double> tmp_2489;
   std::complex<double> tmp_2490;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2490 += Conj(ZU(gI2,j1))*Yu(j1,j1)*ZU(gI1,3 + j1);
   }
   tmp_2489 += tmp_2490;
   tmp_2456 += (std::complex<double>(0,0.5)*vd*Conj(Lambdax)*KroneckerDelta(2,
      gO2)) * tmp_2489;
   std::complex<double> tmp_2491;
   std::complex<double> tmp_2492;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2492 += Conj(ZU(gI2,j1))*ZU(gI1,3 + j1)*TYu(j1,j1);
   }
   tmp_2491 += tmp_2492;
   tmp_2456 += (std::complex<double>(0.,-0.7071067811865475)*KroneckerDelta(1,
      gO2)) * tmp_2491;
   std::complex<double> tmp_2493;
   std::complex<double> tmp_2494;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_2494 += AbsSqr(Yu(j2,j2))*Conj(ZU(gI2,j2))*ZU(gI1,j2);
   }
   tmp_2493 += tmp_2494;
   tmp_2456 += (std::complex<double>(0,-1)*vu*KroneckerDelta(1,gO2)) * tmp_2493
      ;
   std::complex<double> tmp_2495;
   std::complex<double> tmp_2496;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_2496 += AbsSqr(Yu(j2,j2))*Conj(ZU(gI2,3 + j2))*ZU(gI1,3 + j2);
   }
   tmp_2495 += tmp_2496;
   tmp_2456 += (std::complex<double>(0,-1)*vu*KroneckerDelta(1,gO2)) * tmp_2495
      ;
   result += (std::complex<double>(0,-1)) * tmp_2456;

   return result;
}

std::complex<double> CLASSNAME::CpUhhChiChiPR(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = 0.05*(2*KroneckerDelta(1,gO2)*((-3.872983346207417*g1*ZN(gI1,0) + 5
      *g2*ZN(gI1,1) + 3.1622776601683795*gN*ZN(gI1,5))*ZN(gI2,3) +
      7.0710678118654755*Conj(Lambdax)*(ZN(gI1,4)*ZN(gI2,2) + ZN(gI1,2)*ZN(gI2,4))
      + ZN(gI1,3)*(-3.872983346207417*g1*ZN(gI2,0) + 5*g2*ZN(gI2,1) +
      3.1622776601683795*gN*ZN(gI2,5))) + KroneckerDelta(0,gO2)*(7.745966692414834
      *g1*ZN(gI1,0)*ZN(gI2,2) - 10*g2*ZN(gI1,1)*ZN(gI2,2) + 9.486832980505138*gN*
      ZN(gI1,5)*ZN(gI2,2) + 14.142135623730951*Conj(Lambdax)*ZN(gI1,4)*ZN(gI2,3) +
      14.142135623730951*Conj(Lambdax)*ZN(gI1,3)*ZN(gI2,4) + ZN(gI1,2)*(
      7.745966692414834*g1*ZN(gI2,0) - 10*g2*ZN(gI2,1) + 9.486832980505138*gN*ZN(
      gI2,5))) + 7.0710678118654755*KroneckerDelta(2,gO2)*(2*Conj(Lambdax)*(ZN(gI1
      ,3)*ZN(gI2,2) + ZN(gI1,2)*ZN(gI2,3)) - 2.23606797749979*gN*(ZN(gI1,5)*ZN(gI2
      ,4) + ZN(gI1,4)*ZN(gI2,5))));

   return result;
}

std::complex<double> CLASSNAME::CpUhhChiChiPL(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = 0.05*(-10*g2*Conj(ZN(gI1,1))*Conj(ZN(gI2,2))*KroneckerDelta(0,gO1)
      + 9.486832980505138*gN*Conj(ZN(gI1,5))*Conj(ZN(gI2,2))*KroneckerDelta(0,gO1)
      - 7.745966692414834*g1*Conj(ZN(gI1,3))*Conj(ZN(gI2,0))*KroneckerDelta(1,gO1
      ) + 10*g2*Conj(ZN(gI1,3))*Conj(ZN(gI2,1))*KroneckerDelta(1,gO1) + 10*g2*Conj
      (ZN(gI1,1))*Conj(ZN(gI2,3))*KroneckerDelta(1,gO1) + 6.324555320336759*gN*
      Conj(ZN(gI1,5))*Conj(ZN(gI2,3))*KroneckerDelta(1,gO1) + 6.324555320336759*gN
      *Conj(ZN(gI1,3))*Conj(ZN(gI2,5))*KroneckerDelta(1,gO1) + 7.745966692414834*
      g1*Conj(ZN(gI1,0))*(Conj(ZN(gI2,2))*KroneckerDelta(0,gO1) - Conj(ZN(gI2,3))*
      KroneckerDelta(1,gO1)) - 15.811388300841898*gN*Conj(ZN(gI1,5))*Conj(ZN(gI2,4
      ))*KroneckerDelta(2,gO1) - 15.811388300841898*gN*Conj(ZN(gI1,4))*Conj(ZN(gI2
      ,5))*KroneckerDelta(2,gO1) + 14.142135623730951*Conj(ZN(gI1,4))*Conj(ZN(gI2,
      3))*KroneckerDelta(0,gO1)*Lambdax + 14.142135623730951*Conj(ZN(gI1,3))*Conj(
      ZN(gI2,4))*KroneckerDelta(0,gO1)*Lambdax + 14.142135623730951*Conj(ZN(gI1,4)
      )*Conj(ZN(gI2,2))*KroneckerDelta(1,gO1)*Lambdax + 14.142135623730951*Conj(ZN
      (gI1,3))*Conj(ZN(gI2,2))*KroneckerDelta(2,gO1)*Lambdax + Conj(ZN(gI1,2))*(
      7.745966692414834*g1*Conj(ZN(gI2,0))*KroneckerDelta(0,gO1) - 10*g2*Conj(ZN(
      gI2,1))*KroneckerDelta(0,gO1) + 1.4142135623730951*(6.708203932499369*gN*
      Conj(ZN(gI2,5))*KroneckerDelta(0,gO1) + 10*(Conj(ZN(gI2,4))*KroneckerDelta(1
      ,gO1) + Conj(ZN(gI2,3))*KroneckerDelta(2,gO1))*Lambdax)));

   return result;
}

std::complex<double> CLASSNAME::CpUhhconjVWmHpm(unsigned gO2, unsigned gI2) const
{
   std::complex<double> result;

   result = 0.5*g2*(KroneckerDelta(0,gO2)*ZP(gI2,0) - KroneckerDelta(1,gO2)*ZP(
      gI2,1));

   return result;
}

std::complex<double> CLASSNAME::CpUhhVZAh(unsigned gO2, unsigned gI2) const
{
   std::complex<double> result;

   result = std::complex<double>(0,-0.05)*(KroneckerDelta(0,gO2)*(10*g2*Cos(
      ThetaW())*Cos(ThetaWp()) + 7.745966692414834*g1*Cos(ThetaWp())*Sin(ThetaW())
      - 9.486832980505138*gN*Sin(ThetaWp()))*ZA(gI2,0) - 2*KroneckerDelta(1,gO2)*
      (5*g2*Cos(ThetaW())*Cos(ThetaWp()) + 3.872983346207417*g1*Cos(ThetaWp())*Sin
      (ThetaW()) + 3.1622776601683795*gN*Sin(ThetaWp()))*ZA(gI2,1) +
      15.811388300841898*gN*KroneckerDelta(2,gO2)*Sin(ThetaWp())*ZA(gI2,2));

   return result;
}

std::complex<double> CLASSNAME::CpUhhVZpAh(unsigned gO2, unsigned gI2) const
{
   std::complex<double> result;

   result = std::complex<double>(0,0.05)*(KroneckerDelta(0,gO2)*(
      9.486832980505138*gN*Cos(ThetaWp()) + 2*(5*g2*Cos(ThetaW()) +
      3.872983346207417*g1*Sin(ThetaW()))*Sin(ThetaWp()))*ZA(gI2,0) + 2*
      KroneckerDelta(1,gO2)*(3.1622776601683795*gN*Cos(ThetaWp()) - (5*g2*Cos(
      ThetaW()) + 3.872983346207417*g1*Sin(ThetaW()))*Sin(ThetaWp()))*ZA(gI2,1) -
      15.811388300841898*gN*Cos(ThetaWp())*KroneckerDelta(2,gO2)*ZA(gI2,2));

   return result;
}

std::complex<double> CLASSNAME::CpUAhbargWmgWm(unsigned gO1) const
{
   std::complex<double> result;

   result = std::complex<double>(0,-0.25)*(vd*KroneckerDelta(0,gO1) - vu*
      KroneckerDelta(1,gO1))*Sqr(g2);

   return result;
}

std::complex<double> CLASSNAME::CpUAhbargWmCgWmC(unsigned gO1) const
{
   std::complex<double> result;

   result = std::complex<double>(0,0.25)*(vd*KroneckerDelta(0,gO1) - vu*
      KroneckerDelta(1,gO1))*Sqr(g2);

   return result;
}

std::complex<double> CLASSNAME::CpUAhUAhVZVZ(unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   result = 0.05*(25*KroneckerDelta(2,gO1)*KroneckerDelta(2,gO2)*Sqr(gN)*Sqr(
      Sin(ThetaWp())) + KroneckerDelta(0,gO1)*KroneckerDelta(0,gO2)*(
      -14.696938456699067*g1*gN*Cos(ThetaWp())*Sin(ThetaW())*Sin(ThetaWp()) + 10*
      Sqr(g2)*Sqr(Cos(ThetaW()))*Sqr(Cos(ThetaWp())) + Cos(ThetaW())*(
      -18.973665961010276*g2*gN*Cos(ThetaWp())*Sin(ThetaWp()) + 15.491933384829668
      *g1*g2*Sin(ThetaW())*Sqr(Cos(ThetaWp()))) + 6*Sqr(g1)*Sqr(Cos(ThetaWp()))*
      Sqr(Sin(ThetaW())) + 9*Sqr(gN)*Sqr(Sin(ThetaWp()))) + 2*KroneckerDelta(1,gO1
      )*KroneckerDelta(1,gO2)*(3.1622776601683795*g2*gN*Cos(ThetaW())*Sin(2*
      ThetaWp()) + g1*Sin(ThetaW())*(7.745966692414834*g2*Cos(ThetaW()) + 3*g1*Sin
      (ThetaW()))*Sqr(Cos(ThetaWp())) + 5*Sqr(g2)*Sqr(Cos(ThetaW()))*Sqr(Cos(
      ThetaWp())) + gN*(2.449489742783178*g1*Sin(ThetaW())*Sin(2*ThetaWp()) + 2*gN
      *Sqr(Sin(ThetaWp())))));

   return result;
}

std::complex<double> CLASSNAME::CpUAhUAhVZpVZp(unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   result = 0.05*(25*KroneckerDelta(2,gO1)*KroneckerDelta(2,gO2)*Sqr(gN)*Sqr(
      Cos(ThetaWp())) + KroneckerDelta(0,gO1)*KroneckerDelta(0,gO2)*(9*Sqr(gN)*Sqr
      (Cos(ThetaWp())) + 10*Sqr(g2)*Sqr(Cos(ThetaW()))*Sqr(Sin(ThetaWp())) + 3*g1*
      Sin(ThetaW())*(2.449489742783178*gN*Sin(2*ThetaWp()) + 2*g1*Sin(ThetaW())*
      Sqr(Sin(ThetaWp()))) + Cos(ThetaW())*(9.486832980505138*g2*gN*Sin(2*ThetaWp(
      )) + 15.491933384829668*g1*g2*Sin(ThetaW())*Sqr(Sin(ThetaWp())))) + 2*
      KroneckerDelta(1,gO1)*KroneckerDelta(1,gO2)*(-3.1622776601683795*g2*gN*Cos(
      ThetaW())*Sin(2*ThetaWp()) + 2*Sqr(gN)*Sqr(Cos(ThetaWp())) + 5*Sqr(g2)*Sqr(
      Cos(ThetaW()))*Sqr(Sin(ThetaWp())) + g1*(-2.449489742783178*gN*Sin(ThetaW())
      *Sin(2*ThetaWp()) + 3.872983346207417*g2*Sin(2*ThetaW())*Sqr(Sin(ThetaWp()))
      + 3*g1*Sqr(Sin(ThetaW()))*Sqr(Sin(ThetaWp())))));

   return result;
}

std::complex<double> CLASSNAME::CpUAhUAhconjVWmVWm(unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   result = 0.5*(KroneckerDelta(0,gO1)*KroneckerDelta(0,gO2) + KroneckerDelta(1
      ,gO1)*KroneckerDelta(1,gO2))*Sqr(g2);

   return result;
}

std::complex<double> CLASSNAME::CpUAhUAhconjHpmHpm(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = 0.025*(5*KroneckerDelta(2,gO1)*KroneckerDelta(2,gO2)*((-8*AbsSqr(
      Lambdax) + 3*Sqr(gN))*ZP(gI1,0)*ZP(gI2,0) + 2*(-4*AbsSqr(Lambdax) + Sqr(gN))
      *ZP(gI1,1)*ZP(gI2,1)) + 2*KroneckerDelta(1,gO1)*(5*KroneckerDelta(0,gO2)*(-2
      *AbsSqr(Lambdax) + Sqr(g2))*(ZP(gI1,1)*ZP(gI2,0) + ZP(gI1,0)*ZP(gI2,1)) +
      KroneckerDelta(1,gO2)*((3*Sqr(g1) - 5*Sqr(g2) - 3*Sqr(gN))*ZP(gI1,0)*ZP(gI2,
      0) - (3*Sqr(g1) + 5*Sqr(g2) + 2*Sqr(gN))*ZP(gI1,1)*ZP(gI2,1))) -
      KroneckerDelta(0,gO1)*(-10*KroneckerDelta(1,gO2)*(-2*AbsSqr(Lambdax) + Sqr(
      g2))*(ZP(gI1,1)*ZP(gI2,0) + ZP(gI1,0)*ZP(gI2,1)) + KroneckerDelta(0,gO2)*((6
      *Sqr(g1) + 10*Sqr(g2) + 9*Sqr(gN))*ZP(gI1,0)*ZP(gI2,0) + 2*(-3*Sqr(g1) + 5*
      Sqr(g2) + 3*Sqr(gN))*ZP(gI1,1)*ZP(gI2,1))));

   return result;
}

std::complex<double> CLASSNAME::CpUAhUAhconjSHp0SHp0(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = -0.05*(KroneckerDelta(0,gO1)*KroneckerDelta(0,gO2)*(3*Sqr(g1) + 5*
      Sqr(g2) - 3*Sqr(gN)) + 5*KroneckerDelta(2,gO1)*KroneckerDelta(2,gO2)*Sqr(gN)
      - KroneckerDelta(1,gO1)*KroneckerDelta(1,gO2)*(3*Sqr(g1) + 5*Sqr(g2) + 2*
      Sqr(gN)))*(Conj(UHp0(gI2,0))*UHp0(gI1,0) - Conj(UHp0(gI2,1))*UHp0(gI1,1));

   return result;
}

std::complex<double> CLASSNAME::CpUAhUAhconjSHppSHpp(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = -0.05*(KroneckerDelta(0,gO1)*KroneckerDelta(0,gO2)*(3*Sqr(g1) - 5*
      Sqr(g2) - 3*Sqr(gN)) + KroneckerDelta(1,gO1)*KroneckerDelta(1,gO2)*(-3*Sqr(
      g1) + 5*Sqr(g2) - 2*Sqr(gN)) + 5*KroneckerDelta(2,gO1)*KroneckerDelta(2,gO2)
      *Sqr(gN))*(Conj(UHpp(gI2,0))*UHpp(gI1,0) - Conj(UHpp(gI2,1))*UHpp(gI1,1));

   return result;
}

std::complex<double> CLASSNAME::CpUAhUAhconjSSI0SSI0(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = 0.125*(3*KroneckerDelta(0,gO1)*KroneckerDelta(0,gO2) + 2*
      KroneckerDelta(1,gO1)*KroneckerDelta(1,gO2) - 5*KroneckerDelta(2,gO1)*
      KroneckerDelta(2,gO2))*KroneckerDelta(gI1,gI2)*Sqr(gN);

   return result;
}

std::complex<double> CLASSNAME::CpUAhconjHpmHpm(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = std::complex<double>(0,0.25)*(vu*KroneckerDelta(0,gO2)*(-2*AbsSqr(
      Lambdax) + Sqr(g2))*(ZP(gI1,1)*ZP(gI2,0) - ZP(gI1,0)*ZP(gI2,1)) + vd*
      KroneckerDelta(1,gO2)*(-2*AbsSqr(Lambdax) + Sqr(g2))*(ZP(gI1,1)*ZP(gI2,0) -
      ZP(gI1,0)*ZP(gI2,1)) + 2.8284271247461903*KroneckerDelta(2,gO2)*(-(TLambdax*
      ZP(gI1,1)*ZP(gI2,0)) + Conj(TLambdax)*ZP(gI1,0)*ZP(gI2,1)));

   return result;
}

std::complex<double> CLASSNAME::CpUAhbarChaChaPR(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = std::complex<double>(0.,-0.7071067811865475)*(g2*KroneckerDelta(0,
      gO2)*UM(gI1,1)*UP(gI2,0) + (g2*KroneckerDelta(1,gO2)*UM(gI1,0) - Conj(
      Lambdax)*KroneckerDelta(2,gO2)*UM(gI1,1))*UP(gI2,1));

   return result;
}

std::complex<double> CLASSNAME::CpUAhbarChaChaPL(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = std::complex<double>(0.,0.7071067811865475)*(g2*Conj(UM(gI2,0))*
      Conj(UP(gI1,1))*KroneckerDelta(1,gO1) + Conj(UM(gI2,1))*(g2*Conj(UP(gI1,0))*
      KroneckerDelta(0,gO1) - Conj(UP(gI1,1))*KroneckerDelta(2,gO1)*Lambdax));

   return result;
}

std::complex<double> CLASSNAME::CpUAhbarChaIChaIPR(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_2497;
   std::complex<double> tmp_2498;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2498 += Conj(Lambda12(j1,j1))*ZMI(gI1,j1)*ZPI(gI2,j1);
   }
   tmp_2497 += tmp_2498;
   result += (std::complex<double>(0.,0.7071067811865475)*KroneckerDelta(2,gO2)
      ) * tmp_2497;

   return result;
}

std::complex<double> CLASSNAME::CpUAhbarChaIChaIPL(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_2499;
   std::complex<double> tmp_2500;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2500 += Conj(ZMI(gI2,j1))*Conj(ZPI(gI1,j1))*Lambda12(j1,j1);
   }
   tmp_2499 += tmp_2500;
   result += (std::complex<double>(0.,-0.7071067811865475)*KroneckerDelta(2,gO1
      )) * tmp_2499;

   return result;
}

std::complex<double> CLASSNAME::CpUAhUAhAhAh(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = 0.025*(-(KroneckerDelta(0,gO1)*(-2*KroneckerDelta(1,gO2)*(-20*
      AbsSqr(Lambdax) + 3*Sqr(g1) + 5*Sqr(g2) - 3*Sqr(gN))*(ZA(gI1,1)*ZA(gI2,0) +
      ZA(gI1,0)*ZA(gI2,1)) - 5*KroneckerDelta(2,gO2)*(-8*AbsSqr(Lambdax) + 3*Sqr(
      gN))*(ZA(gI1,2)*ZA(gI2,0) + ZA(gI1,0)*ZA(gI2,2)) + KroneckerDelta(0,gO2)*(3*
      (6*Sqr(g1) + 10*Sqr(g2) + 9*Sqr(gN))*ZA(gI1,0)*ZA(gI2,0) + 2*(20*AbsSqr(
      Lambdax) - 3*Sqr(g1) - 5*Sqr(g2) + 3*Sqr(gN))*ZA(gI1,1)*ZA(gI2,1) + 5*(8*
      AbsSqr(Lambdax) - 3*Sqr(gN))*ZA(gI1,2)*ZA(gI2,2)))) + 5*KroneckerDelta(2,gO1
      )*(KroneckerDelta(0,gO2)*(-8*AbsSqr(Lambdax) + 3*Sqr(gN))*(ZA(gI1,2)*ZA(gI2,
      0) + ZA(gI1,0)*ZA(gI2,2)) + 2*KroneckerDelta(1,gO2)*(-4*AbsSqr(Lambdax) +
      Sqr(gN))*(ZA(gI1,2)*ZA(gI2,1) + ZA(gI1,1)*ZA(gI2,2)) + KroneckerDelta(2,gO2)
      *((-8*AbsSqr(Lambdax) + 3*Sqr(gN))*ZA(gI1,0)*ZA(gI2,0) + 2*(-4*AbsSqr(
      Lambdax) + Sqr(gN))*ZA(gI1,1)*ZA(gI2,1) - 15*Sqr(gN)*ZA(gI1,2)*ZA(gI2,2))) +
      2*KroneckerDelta(1,gO1)*(KroneckerDelta(0,gO2)*(-20*AbsSqr(Lambdax) + 3*Sqr
      (g1) + 5*Sqr(g2) - 3*Sqr(gN))*(ZA(gI1,1)*ZA(gI2,0) + ZA(gI1,0)*ZA(gI2,1)) +
      5*KroneckerDelta(2,gO2)*(-4*AbsSqr(Lambdax) + Sqr(gN))*(ZA(gI1,2)*ZA(gI2,1)
      + ZA(gI1,1)*ZA(gI2,2)) + KroneckerDelta(1,gO2)*((-20*AbsSqr(Lambdax) + 3*Sqr
      (g1) + 5*Sqr(g2) - 3*Sqr(gN))*ZA(gI1,0)*ZA(gI2,0) - 3*(3*Sqr(g1) + 5*Sqr(g2)
      + 2*Sqr(gN))*ZA(gI1,1)*ZA(gI2,1) + 5*(-4*AbsSqr(Lambdax) + Sqr(gN))*ZA(gI1,
      2)*ZA(gI2,2))));

   return result;
}

std::complex<double> CLASSNAME::CpUAhUAhconjSvSv(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = 0.05*KroneckerDelta(gI1,gI2)*(-5*KroneckerDelta(2,gO1)*
      KroneckerDelta(2,gO2)*Sqr(gN) + KroneckerDelta(1,gO1)*KroneckerDelta(1,gO2)*
      (3*Sqr(g1) + 5*Sqr(g2) + 2*Sqr(gN)) + KroneckerDelta(0,gO1)*KroneckerDelta(0
      ,gO2)*(-3*Sqr(g1) - 5*Sqr(g2) + 3*Sqr(gN)));

   return result;
}

std::complex<double> CLASSNAME::CpUAhUAhhhhh(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = 0.025*(-(KroneckerDelta(0,gO1)*KroneckerDelta(0,gO2)*((6*Sqr(g1) +
      10*Sqr(g2) + 9*Sqr(gN))*ZH(gI1,0)*ZH(gI2,0) + 2*(20*AbsSqr(Lambdax) - 3*Sqr(
      g1) - 5*Sqr(g2) + 3*Sqr(gN))*ZH(gI1,1)*ZH(gI2,1) + 5*(8*AbsSqr(Lambdax) - 3*
      Sqr(gN))*ZH(gI1,2)*ZH(gI2,2))) + 5*KroneckerDelta(2,gO1)*KroneckerDelta(2,
      gO2)*((-8*AbsSqr(Lambdax) + 3*Sqr(gN))*ZH(gI1,0)*ZH(gI2,0) + 2*(-4*AbsSqr(
      Lambdax) + Sqr(gN))*ZH(gI1,1)*ZH(gI2,1) - 5*Sqr(gN)*ZH(gI1,2)*ZH(gI2,2)) + 2
      *KroneckerDelta(1,gO1)*KroneckerDelta(1,gO2)*((-20*AbsSqr(Lambdax) + 3*Sqr(
      g1) + 5*Sqr(g2) - 3*Sqr(gN))*ZH(gI1,0)*ZH(gI2,0) - (3*Sqr(g1) + 5*Sqr(g2) +
      2*Sqr(gN))*ZH(gI1,1)*ZH(gI2,1) + 5*(-4*AbsSqr(Lambdax) + Sqr(gN))*ZH(gI1,2)*
      ZH(gI2,2)));

   return result;
}

std::complex<double> CLASSNAME::CpUAhAhAh(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = std::complex<double>(0.,0.35355339059327373)*(Conj(TLambdax) -
      TLambdax)*(KroneckerDelta(2,gO2)*(ZA(gI1,1)*ZA(gI2,0) + ZA(gI1,0)*ZA(gI2,1))
      + KroneckerDelta(1,gO2)*(ZA(gI1,2)*ZA(gI2,0) + ZA(gI1,0)*ZA(gI2,2)) +
      KroneckerDelta(0,gO2)*(ZA(gI1,2)*ZA(gI2,1) + ZA(gI1,1)*ZA(gI2,2)));

   return result;
}

std::complex<double> CLASSNAME::CpUAhhhAh(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = 0.025*(-5*KroneckerDelta(2,gO2)*(2.8284271247461903*Conj(TLambdax)*
      (ZA(gI2,1)*ZH(gI1,0) + ZA(gI2,0)*ZH(gI1,1)) + 2.8284271247461903*TLambdax*(
      ZA(gI2,1)*ZH(gI1,0) + ZA(gI2,0)*ZH(gI1,1)) + ZA(gI2,2)*((8*vd*AbsSqr(Lambdax
      ) - 3*vd*Sqr(gN))*ZH(gI1,0) - 2*vu*(-4*AbsSqr(Lambdax) + Sqr(gN))*ZH(gI1,1)
      + 5*vs*Sqr(gN)*ZH(gI1,2))) + 2*KroneckerDelta(1,gO2)*(ZA(gI2,1)*(vd*(-20*
      AbsSqr(Lambdax) + 3*Sqr(g1) + 5*Sqr(g2) - 3*Sqr(gN))*ZH(gI1,0) - vu*(3*Sqr(
      g1) + 5*Sqr(g2) + 2*Sqr(gN))*ZH(gI1,1) + 5*vs*(-4*AbsSqr(Lambdax) + Sqr(gN))
      *ZH(gI1,2)) - 7.0710678118654755*(Conj(TLambdax) + TLambdax)*(ZA(gI2,2)*ZH(
      gI1,0) + ZA(gI2,0)*ZH(gI1,2))) - KroneckerDelta(0,gO2)*(ZA(gI2,0)*(vd*(6*Sqr
      (g1) + 10*Sqr(g2) + 9*Sqr(gN))*ZH(gI1,0) + 2*vu*(20*AbsSqr(Lambdax) - 3*Sqr(
      g1) - 5*Sqr(g2) + 3*Sqr(gN))*ZH(gI1,1) + 5*vs*(8*AbsSqr(Lambdax) - 3*Sqr(gN)
      )*ZH(gI1,2)) + 14.142135623730951*(Conj(TLambdax) + TLambdax)*(ZA(gI2,2)*ZH(
      gI1,1) + ZA(gI2,1)*ZH(gI1,2))));

   return result;
}

std::complex<double> CLASSNAME::CpUAhhhhh(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = std::complex<double>(0.,-0.35355339059327373)*(Conj(TLambdax) -
      TLambdax)*(KroneckerDelta(2,gO2)*(ZH(gI1,1)*ZH(gI2,0) + ZH(gI1,0)*ZH(gI2,1))
      + KroneckerDelta(1,gO2)*(ZH(gI1,2)*ZH(gI2,0) + ZH(gI1,0)*ZH(gI2,2)) +
      KroneckerDelta(0,gO2)*(ZH(gI1,2)*ZH(gI2,1) + ZH(gI1,1)*ZH(gI2,2)));

   return result;
}

std::complex<double> CLASSNAME::CpUAhbarFdFdPR(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_2501;
   std::complex<double> tmp_2502;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2502 += Conj(Yd(j1,j1))*ZDL(gI1,j1)*ZDR(gI2,j1);
   }
   tmp_2501 += tmp_2502;
   result += (std::complex<double>(0.,0.7071067811865475)*KroneckerDelta(0,gO2)
      ) * tmp_2501;

   return result;
}

std::complex<double> CLASSNAME::CpUAhbarFdFdPL(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_2503;
   std::complex<double> tmp_2504;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2504 += Conj(ZDL(gI2,j1))*Conj(ZDR(gI1,j1))*Yd(j1,j1);
   }
   tmp_2503 += tmp_2504;
   result += (std::complex<double>(0.,-0.7071067811865475)*KroneckerDelta(0,gO1
      )) * tmp_2503;

   return result;
}

std::complex<double> CLASSNAME::CpUAhbarFDXFDXPR(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_2505;
   std::complex<double> tmp_2506;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2506 += Conj(Kappa(j1,j1))*ZDXL(gI1,j1)*ZDXR(gI2,j1);
   }
   tmp_2505 += tmp_2506;
   result += (std::complex<double>(0.,0.7071067811865475)*KroneckerDelta(2,gO2)
      ) * tmp_2505;

   return result;
}

std::complex<double> CLASSNAME::CpUAhbarFDXFDXPL(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_2507;
   std::complex<double> tmp_2508;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2508 += Conj(ZDXL(gI2,j1))*Conj(ZDXR(gI1,j1))*Kappa(j1,j1);
   }
   tmp_2507 += tmp_2508;
   result += (std::complex<double>(0.,-0.7071067811865475)*KroneckerDelta(2,gO1
      )) * tmp_2507;

   return result;
}

std::complex<double> CLASSNAME::CpUAhbarFeFePR(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_2509;
   std::complex<double> tmp_2510;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2510 += Conj(Ye(j1,j1))*ZEL(gI1,j1)*ZER(gI2,j1);
   }
   tmp_2509 += tmp_2510;
   result += (std::complex<double>(0.,0.7071067811865475)*KroneckerDelta(0,gO2)
      ) * tmp_2509;

   return result;
}

std::complex<double> CLASSNAME::CpUAhbarFeFePL(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_2511;
   std::complex<double> tmp_2512;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2512 += Conj(ZEL(gI2,j1))*Conj(ZER(gI1,j1))*Ye(j1,j1);
   }
   tmp_2511 += tmp_2512;
   result += (std::complex<double>(0.,-0.7071067811865475)*KroneckerDelta(0,gO1
      )) * tmp_2511;

   return result;
}

std::complex<double> CLASSNAME::CpUAhbarFuFuPR(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_2513;
   std::complex<double> tmp_2514;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2514 += Conj(Yu(j1,j1))*ZUL(gI1,j1)*ZUR(gI2,j1);
   }
   tmp_2513 += tmp_2514;
   result += (std::complex<double>(0.,0.7071067811865475)*KroneckerDelta(1,gO2)
      ) * tmp_2513;

   return result;
}

std::complex<double> CLASSNAME::CpUAhbarFuFuPL(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_2515;
   std::complex<double> tmp_2516;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2516 += Conj(ZUL(gI2,j1))*Conj(ZUR(gI1,j1))*Yu(j1,j1);
   }
   tmp_2515 += tmp_2516;
   result += (std::complex<double>(0.,-0.7071067811865475)*KroneckerDelta(1,gO1
      )) * tmp_2515;

   return result;
}

std::complex<double> CLASSNAME::CpUAhUAhconjSHI0SHI0(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_2517;
   std::complex<double> tmp_2518;
   std::complex<double> tmp_2519;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2519 += Conj(UHI0(gI2,j1))*UHI0(gI1,j1);
   }
   tmp_2518 += tmp_2519;
   tmp_2517 += (std::complex<double>(0,-0.15)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1)) * tmp_2518;
   std::complex<double> tmp_2520;
   std::complex<double> tmp_2521;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2521 += Conj(UHI0(gI2,j1))*UHI0(gI1,j1);
   }
   tmp_2520 += tmp_2521;
   tmp_2517 += (std::complex<double>(0,-0.25)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g2)) * tmp_2520;
   std::complex<double> tmp_2522;
   std::complex<double> tmp_2523;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2523 += Conj(UHI0(gI2,j1))*UHI0(gI1,j1);
   }
   tmp_2522 += tmp_2523;
   tmp_2517 += (std::complex<double>(0,-0.225)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(gN)) * tmp_2522;
   std::complex<double> tmp_2524;
   std::complex<double> tmp_2525;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2525 += Conj(UHI0(gI2,j1))*UHI0(gI1,j1);
   }
   tmp_2524 += tmp_2525;
   tmp_2517 += (std::complex<double>(0,0.15)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1)) * tmp_2524;
   std::complex<double> tmp_2526;
   std::complex<double> tmp_2527;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2527 += Conj(UHI0(gI2,j1))*UHI0(gI1,j1);
   }
   tmp_2526 += tmp_2527;
   tmp_2517 += (std::complex<double>(0,0.25)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g2)) * tmp_2526;
   std::complex<double> tmp_2528;
   std::complex<double> tmp_2529;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2529 += Conj(UHI0(gI2,j1))*UHI0(gI1,j1);
   }
   tmp_2528 += tmp_2529;
   tmp_2517 += (std::complex<double>(0,-0.15)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(gN)) * tmp_2528;
   std::complex<double> tmp_2530;
   std::complex<double> tmp_2531;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2531 += Conj(UHI0(gI2,j1))*UHI0(gI1,j1);
   }
   tmp_2530 += tmp_2531;
   tmp_2517 += (std::complex<double>(0,0.375)*KroneckerDelta(2,gO1)*
      KroneckerDelta(2,gO2)*Sqr(gN)) * tmp_2530;
   std::complex<double> tmp_2532;
   std::complex<double> tmp_2533;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2533 += Conj(UHI0(gI2,2 + j1))*Conj(Lambda12(j1,j1))*UHI0(gI1,j1);
   }
   tmp_2532 += tmp_2533;
   tmp_2517 += (std::complex<double>(0,0.5)*KroneckerDelta(0,gO2)*
      KroneckerDelta(1,gO1)*Lambdax) * tmp_2532;
   std::complex<double> tmp_2534;
   std::complex<double> tmp_2535;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2535 += Conj(UHI0(gI2,2 + j1))*Conj(Lambda12(j1,j1))*UHI0(gI1,j1);
   }
   tmp_2534 += tmp_2535;
   tmp_2517 += (std::complex<double>(0,0.5)*KroneckerDelta(0,gO1)*
      KroneckerDelta(1,gO2)*Lambdax) * tmp_2534;
   std::complex<double> tmp_2536;
   std::complex<double> tmp_2537;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2537 += Conj(UHI0(gI2,2 + j1))*UHI0(gI1,2 + j1);
   }
   tmp_2536 += tmp_2537;
   tmp_2517 += (std::complex<double>(0,0.15)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1)) * tmp_2536;
   std::complex<double> tmp_2538;
   std::complex<double> tmp_2539;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2539 += Conj(UHI0(gI2,2 + j1))*UHI0(gI1,2 + j1);
   }
   tmp_2538 += tmp_2539;
   tmp_2517 += (std::complex<double>(0,0.25)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g2)) * tmp_2538;
   std::complex<double> tmp_2540;
   std::complex<double> tmp_2541;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2541 += Conj(UHI0(gI2,2 + j1))*UHI0(gI1,2 + j1);
   }
   tmp_2540 += tmp_2541;
   tmp_2517 += (std::complex<double>(0,-0.15)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(gN)) * tmp_2540;
   std::complex<double> tmp_2542;
   std::complex<double> tmp_2543;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2543 += Conj(UHI0(gI2,2 + j1))*UHI0(gI1,2 + j1);
   }
   tmp_2542 += tmp_2543;
   tmp_2517 += (std::complex<double>(0,-0.15)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1)) * tmp_2542;
   std::complex<double> tmp_2544;
   std::complex<double> tmp_2545;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2545 += Conj(UHI0(gI2,2 + j1))*UHI0(gI1,2 + j1);
   }
   tmp_2544 += tmp_2545;
   tmp_2517 += (std::complex<double>(0,-0.25)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g2)) * tmp_2544;
   std::complex<double> tmp_2546;
   std::complex<double> tmp_2547;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2547 += Conj(UHI0(gI2,2 + j1))*UHI0(gI1,2 + j1);
   }
   tmp_2546 += tmp_2547;
   tmp_2517 += (std::complex<double>(0,-0.1)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(gN)) * tmp_2546;
   std::complex<double> tmp_2548;
   std::complex<double> tmp_2549;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2549 += Conj(UHI0(gI2,2 + j1))*UHI0(gI1,2 + j1);
   }
   tmp_2548 += tmp_2549;
   tmp_2517 += (std::complex<double>(0,0.25)*KroneckerDelta(2,gO1)*
      KroneckerDelta(2,gO2)*Sqr(gN)) * tmp_2548;
   std::complex<double> tmp_2550;
   std::complex<double> tmp_2551;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2551 += Conj(UHI0(gI2,j1))*UHI0(gI1,2 + j1)*Lambda12(j1,j1);
   }
   tmp_2550 += tmp_2551;
   tmp_2517 += (std::complex<double>(0,0.5)*Conj(Lambdax)*KroneckerDelta(0,gO2)
      *KroneckerDelta(1,gO1)) * tmp_2550;
   std::complex<double> tmp_2552;
   std::complex<double> tmp_2553;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2553 += Conj(UHI0(gI2,j1))*UHI0(gI1,2 + j1)*Lambda12(j1,j1);
   }
   tmp_2552 += tmp_2553;
   tmp_2517 += (std::complex<double>(0,0.5)*Conj(Lambdax)*KroneckerDelta(0,gO1)
      *KroneckerDelta(1,gO2)) * tmp_2552;
   std::complex<double> tmp_2554;
   std::complex<double> tmp_2555;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_2555 += AbsSqr(Lambda12(j2,j2))*Conj(UHI0(gI2,j2))*UHI0(gI1,j2);
   }
   tmp_2554 += tmp_2555;
   tmp_2517 += (std::complex<double>(0,-1)*KroneckerDelta(2,gO1)*KroneckerDelta
      (2,gO2)) * tmp_2554;
   std::complex<double> tmp_2556;
   std::complex<double> tmp_2557;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_2557 += AbsSqr(Lambda12(j2,j2))*Conj(UHI0(gI2,2 + j2))*UHI0(gI1,2
         + j2);
   }
   tmp_2556 += tmp_2557;
   tmp_2517 += (std::complex<double>(0,-1)*KroneckerDelta(2,gO1)*KroneckerDelta
      (2,gO2)) * tmp_2556;
   result += (std::complex<double>(0,-1)) * tmp_2517;

   return result;
}

std::complex<double> CLASSNAME::CpUAhUAhconjSHIpSHIp(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_2558;
   std::complex<double> tmp_2559;
   std::complex<double> tmp_2560;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2560 += Conj(UHIp(gI2,j1))*UHIp(gI1,j1);
   }
   tmp_2559 += tmp_2560;
   tmp_2558 += (std::complex<double>(0,-0.15)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1)) * tmp_2559;
   std::complex<double> tmp_2561;
   std::complex<double> tmp_2562;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2562 += Conj(UHIp(gI2,j1))*UHIp(gI1,j1);
   }
   tmp_2561 += tmp_2562;
   tmp_2558 += (std::complex<double>(0,0.25)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g2)) * tmp_2561;
   std::complex<double> tmp_2563;
   std::complex<double> tmp_2564;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2564 += Conj(UHIp(gI2,j1))*UHIp(gI1,j1);
   }
   tmp_2563 += tmp_2564;
   tmp_2558 += (std::complex<double>(0,-0.225)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(gN)) * tmp_2563;
   std::complex<double> tmp_2565;
   std::complex<double> tmp_2566;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2566 += Conj(UHIp(gI2,j1))*UHIp(gI1,j1);
   }
   tmp_2565 += tmp_2566;
   tmp_2558 += (std::complex<double>(0,0.15)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1)) * tmp_2565;
   std::complex<double> tmp_2567;
   std::complex<double> tmp_2568;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2568 += Conj(UHIp(gI2,j1))*UHIp(gI1,j1);
   }
   tmp_2567 += tmp_2568;
   tmp_2558 += (std::complex<double>(0,-0.25)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g2)) * tmp_2567;
   std::complex<double> tmp_2569;
   std::complex<double> tmp_2570;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2570 += Conj(UHIp(gI2,j1))*UHIp(gI1,j1);
   }
   tmp_2569 += tmp_2570;
   tmp_2558 += (std::complex<double>(0,-0.15)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(gN)) * tmp_2569;
   std::complex<double> tmp_2571;
   std::complex<double> tmp_2572;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2572 += Conj(UHIp(gI2,j1))*UHIp(gI1,j1);
   }
   tmp_2571 += tmp_2572;
   tmp_2558 += (std::complex<double>(0,0.375)*KroneckerDelta(2,gO1)*
      KroneckerDelta(2,gO2)*Sqr(gN)) * tmp_2571;
   std::complex<double> tmp_2573;
   std::complex<double> tmp_2574;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2574 += Conj(UHIp(gI2,2 + j1))*Conj(Lambda12(j1,j1))*UHIp(gI1,j1);
   }
   tmp_2573 += tmp_2574;
   tmp_2558 += (std::complex<double>(0,-0.5)*KroneckerDelta(0,gO2)*
      KroneckerDelta(1,gO1)*Lambdax) * tmp_2573;
   std::complex<double> tmp_2575;
   std::complex<double> tmp_2576;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2576 += Conj(UHIp(gI2,2 + j1))*Conj(Lambda12(j1,j1))*UHIp(gI1,j1);
   }
   tmp_2575 += tmp_2576;
   tmp_2558 += (std::complex<double>(0,-0.5)*KroneckerDelta(0,gO1)*
      KroneckerDelta(1,gO2)*Lambdax) * tmp_2575;
   std::complex<double> tmp_2577;
   std::complex<double> tmp_2578;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2578 += Conj(UHIp(gI2,2 + j1))*UHIp(gI1,2 + j1);
   }
   tmp_2577 += tmp_2578;
   tmp_2558 += (std::complex<double>(0,0.15)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1)) * tmp_2577;
   std::complex<double> tmp_2579;
   std::complex<double> tmp_2580;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2580 += Conj(UHIp(gI2,2 + j1))*UHIp(gI1,2 + j1);
   }
   tmp_2579 += tmp_2580;
   tmp_2558 += (std::complex<double>(0,-0.25)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g2)) * tmp_2579;
   std::complex<double> tmp_2581;
   std::complex<double> tmp_2582;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2582 += Conj(UHIp(gI2,2 + j1))*UHIp(gI1,2 + j1);
   }
   tmp_2581 += tmp_2582;
   tmp_2558 += (std::complex<double>(0,-0.15)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(gN)) * tmp_2581;
   std::complex<double> tmp_2583;
   std::complex<double> tmp_2584;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2584 += Conj(UHIp(gI2,2 + j1))*UHIp(gI1,2 + j1);
   }
   tmp_2583 += tmp_2584;
   tmp_2558 += (std::complex<double>(0,-0.15)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1)) * tmp_2583;
   std::complex<double> tmp_2585;
   std::complex<double> tmp_2586;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2586 += Conj(UHIp(gI2,2 + j1))*UHIp(gI1,2 + j1);
   }
   tmp_2585 += tmp_2586;
   tmp_2558 += (std::complex<double>(0,0.25)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g2)) * tmp_2585;
   std::complex<double> tmp_2587;
   std::complex<double> tmp_2588;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2588 += Conj(UHIp(gI2,2 + j1))*UHIp(gI1,2 + j1);
   }
   tmp_2587 += tmp_2588;
   tmp_2558 += (std::complex<double>(0,-0.1)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(gN)) * tmp_2587;
   std::complex<double> tmp_2589;
   std::complex<double> tmp_2590;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2590 += Conj(UHIp(gI2,2 + j1))*UHIp(gI1,2 + j1);
   }
   tmp_2589 += tmp_2590;
   tmp_2558 += (std::complex<double>(0,0.25)*KroneckerDelta(2,gO1)*
      KroneckerDelta(2,gO2)*Sqr(gN)) * tmp_2589;
   std::complex<double> tmp_2591;
   std::complex<double> tmp_2592;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2592 += Conj(UHIp(gI2,j1))*UHIp(gI1,2 + j1)*Lambda12(j1,j1);
   }
   tmp_2591 += tmp_2592;
   tmp_2558 += (std::complex<double>(0,-0.5)*Conj(Lambdax)*KroneckerDelta(0,gO2
      )*KroneckerDelta(1,gO1)) * tmp_2591;
   std::complex<double> tmp_2593;
   std::complex<double> tmp_2594;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2594 += Conj(UHIp(gI2,j1))*UHIp(gI1,2 + j1)*Lambda12(j1,j1);
   }
   tmp_2593 += tmp_2594;
   tmp_2558 += (std::complex<double>(0,-0.5)*Conj(Lambdax)*KroneckerDelta(0,gO1
      )*KroneckerDelta(1,gO2)) * tmp_2593;
   std::complex<double> tmp_2595;
   std::complex<double> tmp_2596;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_2596 += AbsSqr(Lambda12(j2,j2))*Conj(UHIp(gI2,j2))*UHIp(gI1,j2);
   }
   tmp_2595 += tmp_2596;
   tmp_2558 += (std::complex<double>(0,-1)*KroneckerDelta(2,gO1)*KroneckerDelta
      (2,gO2)) * tmp_2595;
   std::complex<double> tmp_2597;
   std::complex<double> tmp_2598;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_2598 += AbsSqr(Lambda12(j2,j2))*Conj(UHIp(gI2,2 + j2))*UHIp(gI1,2
         + j2);
   }
   tmp_2597 += tmp_2598;
   tmp_2558 += (std::complex<double>(0,-1)*KroneckerDelta(2,gO1)*KroneckerDelta
      (2,gO2)) * tmp_2597;
   result += (std::complex<double>(0,-1)) * tmp_2558;

   return result;
}

std::complex<double> CLASSNAME::CpUAhconjSHI0SHI0(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_2599;
   std::complex<double> tmp_2600;
   std::complex<double> tmp_2601;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2601 += Conj(UHI0(gI2,2 + j1))*Conj(Lambda12(j1,j1))*UHI0(gI1,j1);
   }
   tmp_2600 += tmp_2601;
   tmp_2599 += (0.5*vu*KroneckerDelta(0,gO2)*Lambdax) * tmp_2600;
   std::complex<double> tmp_2602;
   std::complex<double> tmp_2603;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2603 += Conj(UHI0(gI2,2 + j1))*Conj(Lambda12(j1,j1))*UHI0(gI1,j1);
   }
   tmp_2602 += tmp_2603;
   tmp_2599 += (0.5*vd*KroneckerDelta(1,gO2)*Lambdax) * tmp_2602;
   std::complex<double> tmp_2604;
   std::complex<double> tmp_2605;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2605 += Conj(UHI0(gI2,2 + j1))*Conj(TLambda12(j1,j1))*UHI0(gI1,j1)
         ;
   }
   tmp_2604 += tmp_2605;
   tmp_2599 += (0.7071067811865475*KroneckerDelta(2,gO2)) * tmp_2604;
   std::complex<double> tmp_2606;
   std::complex<double> tmp_2607;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2607 += Conj(UHI0(gI2,j1))*UHI0(gI1,2 + j1)*Lambda12(j1,j1);
   }
   tmp_2606 += tmp_2607;
   tmp_2599 += (-0.5*vu*Conj(Lambdax)*KroneckerDelta(0,gO2)) * tmp_2606;
   std::complex<double> tmp_2608;
   std::complex<double> tmp_2609;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2609 += Conj(UHI0(gI2,j1))*UHI0(gI1,2 + j1)*Lambda12(j1,j1);
   }
   tmp_2608 += tmp_2609;
   tmp_2599 += (-0.5*vd*Conj(Lambdax)*KroneckerDelta(1,gO2)) * tmp_2608;
   std::complex<double> tmp_2610;
   std::complex<double> tmp_2611;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2611 += Conj(UHI0(gI2,j1))*UHI0(gI1,2 + j1)*TLambda12(j1,j1);
   }
   tmp_2610 += tmp_2611;
   tmp_2599 += (-0.7071067811865475*KroneckerDelta(2,gO2)) * tmp_2610;
   result += (std::complex<double>(0,-1)) * tmp_2599;

   return result;
}

std::complex<double> CLASSNAME::CpUAhconjSHIpSHIp(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_2612;
   std::complex<double> tmp_2613;
   std::complex<double> tmp_2614;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2614 += Conj(UHIp(gI2,2 + j1))*Conj(Lambda12(j1,j1))*UHIp(gI1,j1);
   }
   tmp_2613 += tmp_2614;
   tmp_2612 += (-0.5*vu*KroneckerDelta(0,gO2)*Lambdax) * tmp_2613;
   std::complex<double> tmp_2615;
   std::complex<double> tmp_2616;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2616 += Conj(UHIp(gI2,2 + j1))*Conj(Lambda12(j1,j1))*UHIp(gI1,j1);
   }
   tmp_2615 += tmp_2616;
   tmp_2612 += (-0.5*vd*KroneckerDelta(1,gO2)*Lambdax) * tmp_2615;
   std::complex<double> tmp_2617;
   std::complex<double> tmp_2618;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2618 += Conj(UHIp(gI2,2 + j1))*Conj(TLambda12(j1,j1))*UHIp(gI1,j1)
         ;
   }
   tmp_2617 += tmp_2618;
   tmp_2612 += (-0.7071067811865475*KroneckerDelta(2,gO2)) * tmp_2617;
   std::complex<double> tmp_2619;
   std::complex<double> tmp_2620;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2620 += Conj(UHIp(gI2,j1))*UHIp(gI1,2 + j1)*Lambda12(j1,j1);
   }
   tmp_2619 += tmp_2620;
   tmp_2612 += (0.5*vu*Conj(Lambdax)*KroneckerDelta(0,gO2)) * tmp_2619;
   std::complex<double> tmp_2621;
   std::complex<double> tmp_2622;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2622 += Conj(UHIp(gI2,j1))*UHIp(gI1,2 + j1)*Lambda12(j1,j1);
   }
   tmp_2621 += tmp_2622;
   tmp_2612 += (0.5*vd*Conj(Lambdax)*KroneckerDelta(1,gO2)) * tmp_2621;
   std::complex<double> tmp_2623;
   std::complex<double> tmp_2624;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2624 += Conj(UHIp(gI2,j1))*UHIp(gI1,2 + j1)*TLambda12(j1,j1);
   }
   tmp_2623 += tmp_2624;
   tmp_2612 += (0.7071067811865475*KroneckerDelta(2,gO2)) * tmp_2623;
   result += (std::complex<double>(0,-1)) * tmp_2612;

   return result;
}

std::complex<double> CLASSNAME::CpUAhChiIChiIPR(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_2625;
   std::complex<double> tmp_2626;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2626 += Conj(Lambda12(j1,j1))*ZNI(gI1,2 + j1)*ZNI(gI2,j1);
   }
   tmp_2625 += tmp_2626;
   std::complex<double> tmp_2627;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2627 += Conj(Lambda12(j1,j1))*ZNI(gI1,j1)*ZNI(gI2,2 + j1);
   }
   tmp_2625 += tmp_2627;
   result += (std::complex<double>(0.,-0.7071067811865475)*KroneckerDelta(2,gO2
      )) * tmp_2625;

   return result;
}

std::complex<double> CLASSNAME::CpUAhChiIChiIPL(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_2628;
   std::complex<double> tmp_2629;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2629 += Conj(ZNI(gI1,2 + j1))*Conj(ZNI(gI2,j1))*Lambda12(j1,j1);
   }
   tmp_2628 += tmp_2629;
   std::complex<double> tmp_2630;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2630 += Conj(ZNI(gI1,j1))*Conj(ZNI(gI2,2 + j1))*Lambda12(j1,j1);
   }
   tmp_2628 += tmp_2630;
   result += (std::complex<double>(0.,0.7071067811865475)*KroneckerDelta(2,gO1)
      ) * tmp_2628;

   return result;
}

std::complex<double> CLASSNAME::CpUAhUAhconjSdSd(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_2631;
   std::complex<double> tmp_2632;
   std::complex<double> tmp_2633;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2633 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
   }
   tmp_2632 += tmp_2633;
   tmp_2631 += (std::complex<double>(0,0.05)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1)) * tmp_2632;
   std::complex<double> tmp_2634;
   std::complex<double> tmp_2635;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2635 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
   }
   tmp_2634 += tmp_2635;
   tmp_2631 += (std::complex<double>(0,0.25)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g2)) * tmp_2634;
   std::complex<double> tmp_2636;
   std::complex<double> tmp_2637;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2637 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
   }
   tmp_2636 += tmp_2637;
   tmp_2631 += (std::complex<double>(0,0.075)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(gN)) * tmp_2636;
   std::complex<double> tmp_2638;
   std::complex<double> tmp_2639;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2639 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
   }
   tmp_2638 += tmp_2639;
   tmp_2631 += (std::complex<double>(0,-0.05)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1)) * tmp_2638;
   std::complex<double> tmp_2640;
   std::complex<double> tmp_2641;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2641 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
   }
   tmp_2640 += tmp_2641;
   tmp_2631 += (std::complex<double>(0,-0.25)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g2)) * tmp_2640;
   std::complex<double> tmp_2642;
   std::complex<double> tmp_2643;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2643 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
   }
   tmp_2642 += tmp_2643;
   tmp_2631 += (std::complex<double>(0,0.05)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(gN)) * tmp_2642;
   std::complex<double> tmp_2644;
   std::complex<double> tmp_2645;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2645 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
   }
   tmp_2644 += tmp_2645;
   tmp_2631 += (std::complex<double>(0,-0.125)*KroneckerDelta(2,gO1)*
      KroneckerDelta(2,gO2)*Sqr(gN)) * tmp_2644;
   std::complex<double> tmp_2646;
   std::complex<double> tmp_2647;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2647 += Conj(Yd(j1,j1))*Conj(ZD(gI2,3 + j1))*ZD(gI1,j1);
   }
   tmp_2646 += tmp_2647;
   tmp_2631 += (std::complex<double>(0,-0.5)*KroneckerDelta(1,gO2)*
      KroneckerDelta(2,gO1)*Lambdax) * tmp_2646;
   std::complex<double> tmp_2648;
   std::complex<double> tmp_2649;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2649 += Conj(Yd(j1,j1))*Conj(ZD(gI2,3 + j1))*ZD(gI1,j1);
   }
   tmp_2648 += tmp_2649;
   tmp_2631 += (std::complex<double>(0,-0.5)*KroneckerDelta(1,gO1)*
      KroneckerDelta(2,gO2)*Lambdax) * tmp_2648;
   std::complex<double> tmp_2650;
   std::complex<double> tmp_2651;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2651 += Conj(ZD(gI2,3 + j1))*ZD(gI1,3 + j1);
   }
   tmp_2650 += tmp_2651;
   tmp_2631 += (std::complex<double>(0,0.1)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1)) * tmp_2650;
   std::complex<double> tmp_2652;
   std::complex<double> tmp_2653;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2653 += Conj(ZD(gI2,3 + j1))*ZD(gI1,3 + j1);
   }
   tmp_2652 += tmp_2653;
   tmp_2631 += (std::complex<double>(0,0.15)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(gN)) * tmp_2652;
   std::complex<double> tmp_2654;
   std::complex<double> tmp_2655;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2655 += Conj(ZD(gI2,3 + j1))*ZD(gI1,3 + j1);
   }
   tmp_2654 += tmp_2655;
   tmp_2631 += (std::complex<double>(0,-0.1)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1)) * tmp_2654;
   std::complex<double> tmp_2656;
   std::complex<double> tmp_2657;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2657 += Conj(ZD(gI2,3 + j1))*ZD(gI1,3 + j1);
   }
   tmp_2656 += tmp_2657;
   tmp_2631 += (std::complex<double>(0,0.1)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(gN)) * tmp_2656;
   std::complex<double> tmp_2658;
   std::complex<double> tmp_2659;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2659 += Conj(ZD(gI2,3 + j1))*ZD(gI1,3 + j1);
   }
   tmp_2658 += tmp_2659;
   tmp_2631 += (std::complex<double>(0,-0.25)*KroneckerDelta(2,gO1)*
      KroneckerDelta(2,gO2)*Sqr(gN)) * tmp_2658;
   std::complex<double> tmp_2660;
   std::complex<double> tmp_2661;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2661 += Conj(ZD(gI2,j1))*Yd(j1,j1)*ZD(gI1,3 + j1);
   }
   tmp_2660 += tmp_2661;
   tmp_2631 += (std::complex<double>(0,-0.5)*Conj(Lambdax)*KroneckerDelta(1,gO2
      )*KroneckerDelta(2,gO1)) * tmp_2660;
   std::complex<double> tmp_2662;
   std::complex<double> tmp_2663;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2663 += Conj(ZD(gI2,j1))*Yd(j1,j1)*ZD(gI1,3 + j1);
   }
   tmp_2662 += tmp_2663;
   tmp_2631 += (std::complex<double>(0,-0.5)*Conj(Lambdax)*KroneckerDelta(1,gO1
      )*KroneckerDelta(2,gO2)) * tmp_2662;
   std::complex<double> tmp_2664;
   std::complex<double> tmp_2665;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_2665 += AbsSqr(Yd(j2,j2))*Conj(ZD(gI2,j2))*ZD(gI1,j2);
   }
   tmp_2664 += tmp_2665;
   tmp_2631 += (std::complex<double>(0,-1)*KroneckerDelta(0,gO1)*KroneckerDelta
      (0,gO2)) * tmp_2664;
   std::complex<double> tmp_2666;
   std::complex<double> tmp_2667;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_2667 += AbsSqr(Yd(j2,j2))*Conj(ZD(gI2,3 + j2))*ZD(gI1,3 + j2);
   }
   tmp_2666 += tmp_2667;
   tmp_2631 += (std::complex<double>(0,-1)*KroneckerDelta(0,gO1)*KroneckerDelta
      (0,gO2)) * tmp_2666;
   result += (std::complex<double>(0,-1)) * tmp_2631;

   return result;
}

std::complex<double> CLASSNAME::CpUAhUAhconjSDXSDX(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_2668;
   std::complex<double> tmp_2669;
   std::complex<double> tmp_2670;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2670 += Conj(ZDX(gI2,j1))*ZDX(gI1,j1);
   }
   tmp_2669 += tmp_2670;
   tmp_2668 += (std::complex<double>(0,-0.1)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1)) * tmp_2669;
   std::complex<double> tmp_2671;
   std::complex<double> tmp_2672;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2672 += Conj(ZDX(gI2,j1))*ZDX(gI1,j1);
   }
   tmp_2671 += tmp_2672;
   tmp_2668 += (std::complex<double>(0,-0.15)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(gN)) * tmp_2671;
   std::complex<double> tmp_2673;
   std::complex<double> tmp_2674;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2674 += Conj(ZDX(gI2,j1))*ZDX(gI1,j1);
   }
   tmp_2673 += tmp_2674;
   tmp_2668 += (std::complex<double>(0,0.1)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1)) * tmp_2673;
   std::complex<double> tmp_2675;
   std::complex<double> tmp_2676;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2676 += Conj(ZDX(gI2,j1))*ZDX(gI1,j1);
   }
   tmp_2675 += tmp_2676;
   tmp_2668 += (std::complex<double>(0,-0.1)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(gN)) * tmp_2675;
   std::complex<double> tmp_2677;
   std::complex<double> tmp_2678;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2678 += Conj(ZDX(gI2,j1))*ZDX(gI1,j1);
   }
   tmp_2677 += tmp_2678;
   tmp_2668 += (std::complex<double>(0,0.25)*KroneckerDelta(2,gO1)*
      KroneckerDelta(2,gO2)*Sqr(gN)) * tmp_2677;
   std::complex<double> tmp_2679;
   std::complex<double> tmp_2680;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2680 += Conj(ZDX(gI2,3 + j1))*Conj(Kappa(j1,j1))*ZDX(gI1,j1);
   }
   tmp_2679 += tmp_2680;
   tmp_2668 += (std::complex<double>(0,-0.5)*KroneckerDelta(0,gO2)*
      KroneckerDelta(1,gO1)*Lambdax) * tmp_2679;
   std::complex<double> tmp_2681;
   std::complex<double> tmp_2682;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2682 += Conj(ZDX(gI2,3 + j1))*Conj(Kappa(j1,j1))*ZDX(gI1,j1);
   }
   tmp_2681 += tmp_2682;
   tmp_2668 += (std::complex<double>(0,-0.5)*KroneckerDelta(0,gO1)*
      KroneckerDelta(1,gO2)*Lambdax) * tmp_2681;
   std::complex<double> tmp_2683;
   std::complex<double> tmp_2684;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2684 += Conj(ZDX(gI2,3 + j1))*ZDX(gI1,3 + j1);
   }
   tmp_2683 += tmp_2684;
   tmp_2668 += (std::complex<double>(0,0.1)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1)) * tmp_2683;
   std::complex<double> tmp_2685;
   std::complex<double> tmp_2686;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2686 += Conj(ZDX(gI2,3 + j1))*ZDX(gI1,3 + j1);
   }
   tmp_2685 += tmp_2686;
   tmp_2668 += (std::complex<double>(0,-0.225)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(gN)) * tmp_2685;
   std::complex<double> tmp_2687;
   std::complex<double> tmp_2688;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2688 += Conj(ZDX(gI2,3 + j1))*ZDX(gI1,3 + j1);
   }
   tmp_2687 += tmp_2688;
   tmp_2668 += (std::complex<double>(0,-0.1)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1)) * tmp_2687;
   std::complex<double> tmp_2689;
   std::complex<double> tmp_2690;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2690 += Conj(ZDX(gI2,3 + j1))*ZDX(gI1,3 + j1);
   }
   tmp_2689 += tmp_2690;
   tmp_2668 += (std::complex<double>(0,-0.15)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(gN)) * tmp_2689;
   std::complex<double> tmp_2691;
   std::complex<double> tmp_2692;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2692 += Conj(ZDX(gI2,3 + j1))*ZDX(gI1,3 + j1);
   }
   tmp_2691 += tmp_2692;
   tmp_2668 += (std::complex<double>(0,0.375)*KroneckerDelta(2,gO1)*
      KroneckerDelta(2,gO2)*Sqr(gN)) * tmp_2691;
   std::complex<double> tmp_2693;
   std::complex<double> tmp_2694;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2694 += Conj(ZDX(gI2,j1))*ZDX(gI1,3 + j1)*Kappa(j1,j1);
   }
   tmp_2693 += tmp_2694;
   tmp_2668 += (std::complex<double>(0,-0.5)*Conj(Lambdax)*KroneckerDelta(0,gO2
      )*KroneckerDelta(1,gO1)) * tmp_2693;
   std::complex<double> tmp_2695;
   std::complex<double> tmp_2696;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2696 += Conj(ZDX(gI2,j1))*ZDX(gI1,3 + j1)*Kappa(j1,j1);
   }
   tmp_2695 += tmp_2696;
   tmp_2668 += (std::complex<double>(0,-0.5)*Conj(Lambdax)*KroneckerDelta(0,gO1
      )*KroneckerDelta(1,gO2)) * tmp_2695;
   std::complex<double> tmp_2697;
   std::complex<double> tmp_2698;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_2698 += AbsSqr(Kappa(j2,j2))*Conj(ZDX(gI2,j2))*ZDX(gI1,j2);
   }
   tmp_2697 += tmp_2698;
   tmp_2668 += (std::complex<double>(0,-1)*KroneckerDelta(2,gO1)*KroneckerDelta
      (2,gO2)) * tmp_2697;
   std::complex<double> tmp_2699;
   std::complex<double> tmp_2700;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_2700 += AbsSqr(Kappa(j2,j2))*Conj(ZDX(gI2,3 + j2))*ZDX(gI1,3 + j2)
         ;
   }
   tmp_2699 += tmp_2700;
   tmp_2668 += (std::complex<double>(0,-1)*KroneckerDelta(2,gO1)*KroneckerDelta
      (2,gO2)) * tmp_2699;
   result += (std::complex<double>(0,-1)) * tmp_2668;

   return result;
}

std::complex<double> CLASSNAME::CpUAhUAhconjSeSe(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_2701;
   std::complex<double> tmp_2702;
   std::complex<double> tmp_2703;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2703 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
   }
   tmp_2702 += tmp_2703;
   tmp_2701 += (std::complex<double>(0,-0.15)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1)) * tmp_2702;
   std::complex<double> tmp_2704;
   std::complex<double> tmp_2705;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2705 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
   }
   tmp_2704 += tmp_2705;
   tmp_2701 += (std::complex<double>(0,0.25)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g2)) * tmp_2704;
   std::complex<double> tmp_2706;
   std::complex<double> tmp_2707;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2707 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
   }
   tmp_2706 += tmp_2707;
   tmp_2701 += (std::complex<double>(0,0.15)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(gN)) * tmp_2706;
   std::complex<double> tmp_2708;
   std::complex<double> tmp_2709;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2709 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
   }
   tmp_2708 += tmp_2709;
   tmp_2701 += (std::complex<double>(0,0.15)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1)) * tmp_2708;
   std::complex<double> tmp_2710;
   std::complex<double> tmp_2711;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2711 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
   }
   tmp_2710 += tmp_2711;
   tmp_2701 += (std::complex<double>(0,-0.25)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g2)) * tmp_2710;
   std::complex<double> tmp_2712;
   std::complex<double> tmp_2713;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2713 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
   }
   tmp_2712 += tmp_2713;
   tmp_2701 += (std::complex<double>(0,0.1)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(gN)) * tmp_2712;
   std::complex<double> tmp_2714;
   std::complex<double> tmp_2715;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2715 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
   }
   tmp_2714 += tmp_2715;
   tmp_2701 += (std::complex<double>(0,-0.25)*KroneckerDelta(2,gO1)*
      KroneckerDelta(2,gO2)*Sqr(gN)) * tmp_2714;
   std::complex<double> tmp_2716;
   std::complex<double> tmp_2717;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2717 += Conj(Ye(j1,j1))*Conj(ZE(gI2,3 + j1))*ZE(gI1,j1);
   }
   tmp_2716 += tmp_2717;
   tmp_2701 += (std::complex<double>(0,-0.5)*KroneckerDelta(1,gO2)*
      KroneckerDelta(2,gO1)*Lambdax) * tmp_2716;
   std::complex<double> tmp_2718;
   std::complex<double> tmp_2719;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2719 += Conj(Ye(j1,j1))*Conj(ZE(gI2,3 + j1))*ZE(gI1,j1);
   }
   tmp_2718 += tmp_2719;
   tmp_2701 += (std::complex<double>(0,-0.5)*KroneckerDelta(1,gO1)*
      KroneckerDelta(2,gO2)*Lambdax) * tmp_2718;
   std::complex<double> tmp_2720;
   std::complex<double> tmp_2721;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2721 += Conj(ZE(gI2,3 + j1))*ZE(gI1,3 + j1);
   }
   tmp_2720 += tmp_2721;
   tmp_2701 += (std::complex<double>(0,0.3)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1)) * tmp_2720;
   std::complex<double> tmp_2722;
   std::complex<double> tmp_2723;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2723 += Conj(ZE(gI2,3 + j1))*ZE(gI1,3 + j1);
   }
   tmp_2722 += tmp_2723;
   tmp_2701 += (std::complex<double>(0,0.075)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(gN)) * tmp_2722;
   std::complex<double> tmp_2724;
   std::complex<double> tmp_2725;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2725 += Conj(ZE(gI2,3 + j1))*ZE(gI1,3 + j1);
   }
   tmp_2724 += tmp_2725;
   tmp_2701 += (std::complex<double>(0,-0.3)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1)) * tmp_2724;
   std::complex<double> tmp_2726;
   std::complex<double> tmp_2727;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2727 += Conj(ZE(gI2,3 + j1))*ZE(gI1,3 + j1);
   }
   tmp_2726 += tmp_2727;
   tmp_2701 += (std::complex<double>(0,0.05)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(gN)) * tmp_2726;
   std::complex<double> tmp_2728;
   std::complex<double> tmp_2729;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2729 += Conj(ZE(gI2,3 + j1))*ZE(gI1,3 + j1);
   }
   tmp_2728 += tmp_2729;
   tmp_2701 += (std::complex<double>(0,-0.125)*KroneckerDelta(2,gO1)*
      KroneckerDelta(2,gO2)*Sqr(gN)) * tmp_2728;
   std::complex<double> tmp_2730;
   std::complex<double> tmp_2731;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2731 += Conj(ZE(gI2,j1))*Ye(j1,j1)*ZE(gI1,3 + j1);
   }
   tmp_2730 += tmp_2731;
   tmp_2701 += (std::complex<double>(0,-0.5)*Conj(Lambdax)*KroneckerDelta(1,gO2
      )*KroneckerDelta(2,gO1)) * tmp_2730;
   std::complex<double> tmp_2732;
   std::complex<double> tmp_2733;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2733 += Conj(ZE(gI2,j1))*Ye(j1,j1)*ZE(gI1,3 + j1);
   }
   tmp_2732 += tmp_2733;
   tmp_2701 += (std::complex<double>(0,-0.5)*Conj(Lambdax)*KroneckerDelta(1,gO1
      )*KroneckerDelta(2,gO2)) * tmp_2732;
   std::complex<double> tmp_2734;
   std::complex<double> tmp_2735;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_2735 += AbsSqr(Ye(j2,j2))*Conj(ZE(gI2,j2))*ZE(gI1,j2);
   }
   tmp_2734 += tmp_2735;
   tmp_2701 += (std::complex<double>(0,-1)*KroneckerDelta(0,gO1)*KroneckerDelta
      (0,gO2)) * tmp_2734;
   std::complex<double> tmp_2736;
   std::complex<double> tmp_2737;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_2737 += AbsSqr(Ye(j2,j2))*Conj(ZE(gI2,3 + j2))*ZE(gI1,3 + j2);
   }
   tmp_2736 += tmp_2737;
   tmp_2701 += (std::complex<double>(0,-1)*KroneckerDelta(0,gO1)*KroneckerDelta
      (0,gO2)) * tmp_2736;
   result += (std::complex<double>(0,-1)) * tmp_2701;

   return result;
}

std::complex<double> CLASSNAME::CpUAhUAhconjSuSu(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_2738;
   std::complex<double> tmp_2739;
   std::complex<double> tmp_2740;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2740 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
   }
   tmp_2739 += tmp_2740;
   tmp_2738 += (std::complex<double>(0,0.05)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1)) * tmp_2739;
   std::complex<double> tmp_2741;
   std::complex<double> tmp_2742;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2742 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
   }
   tmp_2741 += tmp_2742;
   tmp_2738 += (std::complex<double>(0,-0.25)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g2)) * tmp_2741;
   std::complex<double> tmp_2743;
   std::complex<double> tmp_2744;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2744 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
   }
   tmp_2743 += tmp_2744;
   tmp_2738 += (std::complex<double>(0,0.075)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(gN)) * tmp_2743;
   std::complex<double> tmp_2745;
   std::complex<double> tmp_2746;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2746 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
   }
   tmp_2745 += tmp_2746;
   tmp_2738 += (std::complex<double>(0,-0.05)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1)) * tmp_2745;
   std::complex<double> tmp_2747;
   std::complex<double> tmp_2748;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2748 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
   }
   tmp_2747 += tmp_2748;
   tmp_2738 += (std::complex<double>(0,0.25)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g2)) * tmp_2747;
   std::complex<double> tmp_2749;
   std::complex<double> tmp_2750;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2750 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
   }
   tmp_2749 += tmp_2750;
   tmp_2738 += (std::complex<double>(0,0.05)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(gN)) * tmp_2749;
   std::complex<double> tmp_2751;
   std::complex<double> tmp_2752;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2752 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
   }
   tmp_2751 += tmp_2752;
   tmp_2738 += (std::complex<double>(0,-0.125)*KroneckerDelta(2,gO1)*
      KroneckerDelta(2,gO2)*Sqr(gN)) * tmp_2751;
   std::complex<double> tmp_2753;
   std::complex<double> tmp_2754;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2754 += Conj(Yu(j1,j1))*Conj(ZU(gI2,3 + j1))*ZU(gI1,j1);
   }
   tmp_2753 += tmp_2754;
   tmp_2738 += (std::complex<double>(0,-0.5)*KroneckerDelta(0,gO2)*
      KroneckerDelta(2,gO1)*Lambdax) * tmp_2753;
   std::complex<double> tmp_2755;
   std::complex<double> tmp_2756;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2756 += Conj(Yu(j1,j1))*Conj(ZU(gI2,3 + j1))*ZU(gI1,j1);
   }
   tmp_2755 += tmp_2756;
   tmp_2738 += (std::complex<double>(0,-0.5)*KroneckerDelta(0,gO1)*
      KroneckerDelta(2,gO2)*Lambdax) * tmp_2755;
   std::complex<double> tmp_2757;
   std::complex<double> tmp_2758;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2758 += Conj(ZU(gI2,3 + j1))*ZU(gI1,3 + j1);
   }
   tmp_2757 += tmp_2758;
   tmp_2738 += (std::complex<double>(0,-0.2)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1)) * tmp_2757;
   std::complex<double> tmp_2759;
   std::complex<double> tmp_2760;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2760 += Conj(ZU(gI2,3 + j1))*ZU(gI1,3 + j1);
   }
   tmp_2759 += tmp_2760;
   tmp_2738 += (std::complex<double>(0,0.075)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(gN)) * tmp_2759;
   std::complex<double> tmp_2761;
   std::complex<double> tmp_2762;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2762 += Conj(ZU(gI2,3 + j1))*ZU(gI1,3 + j1);
   }
   tmp_2761 += tmp_2762;
   tmp_2738 += (std::complex<double>(0,0.2)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1)) * tmp_2761;
   std::complex<double> tmp_2763;
   std::complex<double> tmp_2764;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2764 += Conj(ZU(gI2,3 + j1))*ZU(gI1,3 + j1);
   }
   tmp_2763 += tmp_2764;
   tmp_2738 += (std::complex<double>(0,0.05)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(gN)) * tmp_2763;
   std::complex<double> tmp_2765;
   std::complex<double> tmp_2766;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2766 += Conj(ZU(gI2,3 + j1))*ZU(gI1,3 + j1);
   }
   tmp_2765 += tmp_2766;
   tmp_2738 += (std::complex<double>(0,-0.125)*KroneckerDelta(2,gO1)*
      KroneckerDelta(2,gO2)*Sqr(gN)) * tmp_2765;
   std::complex<double> tmp_2767;
   std::complex<double> tmp_2768;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2768 += Conj(ZU(gI2,j1))*Yu(j1,j1)*ZU(gI1,3 + j1);
   }
   tmp_2767 += tmp_2768;
   tmp_2738 += (std::complex<double>(0,-0.5)*Conj(Lambdax)*KroneckerDelta(0,gO2
      )*KroneckerDelta(2,gO1)) * tmp_2767;
   std::complex<double> tmp_2769;
   std::complex<double> tmp_2770;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2770 += Conj(ZU(gI2,j1))*Yu(j1,j1)*ZU(gI1,3 + j1);
   }
   tmp_2769 += tmp_2770;
   tmp_2738 += (std::complex<double>(0,-0.5)*Conj(Lambdax)*KroneckerDelta(0,gO1
      )*KroneckerDelta(2,gO2)) * tmp_2769;
   std::complex<double> tmp_2771;
   std::complex<double> tmp_2772;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_2772 += AbsSqr(Yu(j2,j2))*Conj(ZU(gI2,j2))*ZU(gI1,j2);
   }
   tmp_2771 += tmp_2772;
   tmp_2738 += (std::complex<double>(0,-1)*KroneckerDelta(1,gO1)*KroneckerDelta
      (1,gO2)) * tmp_2771;
   std::complex<double> tmp_2773;
   std::complex<double> tmp_2774;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_2774 += AbsSqr(Yu(j2,j2))*Conj(ZU(gI2,3 + j2))*ZU(gI1,3 + j2);
   }
   tmp_2773 += tmp_2774;
   tmp_2738 += (std::complex<double>(0,-1)*KroneckerDelta(1,gO1)*KroneckerDelta
      (1,gO2)) * tmp_2773;
   result += (std::complex<double>(0,-1)) * tmp_2738;

   return result;
}

std::complex<double> CLASSNAME::CpUAhconjSdSd(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_2775;
   std::complex<double> tmp_2776;
   std::complex<double> tmp_2777;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2777 += Conj(Yd(j1,j1))*Conj(ZD(gI2,3 + j1))*ZD(gI1,j1);
   }
   tmp_2776 += tmp_2777;
   tmp_2775 += (-0.5*vs*KroneckerDelta(1,gO2)*Lambdax) * tmp_2776;
   std::complex<double> tmp_2778;
   std::complex<double> tmp_2779;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2779 += Conj(Yd(j1,j1))*Conj(ZD(gI2,3 + j1))*ZD(gI1,j1);
   }
   tmp_2778 += tmp_2779;
   tmp_2775 += (-0.5*vu*KroneckerDelta(2,gO2)*Lambdax) * tmp_2778;
   std::complex<double> tmp_2780;
   std::complex<double> tmp_2781;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2781 += Conj(ZD(gI2,3 + j1))*Conj(TYd(j1,j1))*ZD(gI1,j1);
   }
   tmp_2780 += tmp_2781;
   tmp_2775 += (-0.7071067811865475*KroneckerDelta(0,gO2)) * tmp_2780;
   std::complex<double> tmp_2782;
   std::complex<double> tmp_2783;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2783 += Conj(ZD(gI2,j1))*Yd(j1,j1)*ZD(gI1,3 + j1);
   }
   tmp_2782 += tmp_2783;
   tmp_2775 += (0.5*vs*Conj(Lambdax)*KroneckerDelta(1,gO2)) * tmp_2782;
   std::complex<double> tmp_2784;
   std::complex<double> tmp_2785;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2785 += Conj(ZD(gI2,j1))*Yd(j1,j1)*ZD(gI1,3 + j1);
   }
   tmp_2784 += tmp_2785;
   tmp_2775 += (0.5*vu*Conj(Lambdax)*KroneckerDelta(2,gO2)) * tmp_2784;
   std::complex<double> tmp_2786;
   std::complex<double> tmp_2787;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2787 += Conj(ZD(gI2,j1))*ZD(gI1,3 + j1)*TYd(j1,j1);
   }
   tmp_2786 += tmp_2787;
   tmp_2775 += (0.7071067811865475*KroneckerDelta(0,gO2)) * tmp_2786;
   result += (std::complex<double>(0,-1)) * tmp_2775;

   return result;
}

std::complex<double> CLASSNAME::CpUAhconjSDXSDX(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_2788;
   std::complex<double> tmp_2789;
   std::complex<double> tmp_2790;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2790 += Conj(ZDX(gI2,3 + j1))*Conj(Kappa(j1,j1))*ZDX(gI1,j1);
   }
   tmp_2789 += tmp_2790;
   tmp_2788 += (-0.5*vu*KroneckerDelta(0,gO2)*Lambdax) * tmp_2789;
   std::complex<double> tmp_2791;
   std::complex<double> tmp_2792;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2792 += Conj(ZDX(gI2,3 + j1))*Conj(Kappa(j1,j1))*ZDX(gI1,j1);
   }
   tmp_2791 += tmp_2792;
   tmp_2788 += (-0.5*vd*KroneckerDelta(1,gO2)*Lambdax) * tmp_2791;
   std::complex<double> tmp_2793;
   std::complex<double> tmp_2794;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2794 += Conj(ZDX(gI2,3 + j1))*Conj(TKappa(j1,j1))*ZDX(gI1,j1);
   }
   tmp_2793 += tmp_2794;
   tmp_2788 += (-0.7071067811865475*KroneckerDelta(2,gO2)) * tmp_2793;
   std::complex<double> tmp_2795;
   std::complex<double> tmp_2796;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2796 += Conj(ZDX(gI2,j1))*ZDX(gI1,3 + j1)*Kappa(j1,j1);
   }
   tmp_2795 += tmp_2796;
   tmp_2788 += (0.5*vu*Conj(Lambdax)*KroneckerDelta(0,gO2)) * tmp_2795;
   std::complex<double> tmp_2797;
   std::complex<double> tmp_2798;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2798 += Conj(ZDX(gI2,j1))*ZDX(gI1,3 + j1)*Kappa(j1,j1);
   }
   tmp_2797 += tmp_2798;
   tmp_2788 += (0.5*vd*Conj(Lambdax)*KroneckerDelta(1,gO2)) * tmp_2797;
   std::complex<double> tmp_2799;
   std::complex<double> tmp_2800;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2800 += Conj(ZDX(gI2,j1))*ZDX(gI1,3 + j1)*TKappa(j1,j1);
   }
   tmp_2799 += tmp_2800;
   tmp_2788 += (0.7071067811865475*KroneckerDelta(2,gO2)) * tmp_2799;
   result += (std::complex<double>(0,-1)) * tmp_2788;

   return result;
}

std::complex<double> CLASSNAME::CpUAhconjSeSe(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_2801;
   std::complex<double> tmp_2802;
   std::complex<double> tmp_2803;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2803 += Conj(Ye(j1,j1))*Conj(ZE(gI2,3 + j1))*ZE(gI1,j1);
   }
   tmp_2802 += tmp_2803;
   tmp_2801 += (-0.5*vs*KroneckerDelta(1,gO2)*Lambdax) * tmp_2802;
   std::complex<double> tmp_2804;
   std::complex<double> tmp_2805;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2805 += Conj(Ye(j1,j1))*Conj(ZE(gI2,3 + j1))*ZE(gI1,j1);
   }
   tmp_2804 += tmp_2805;
   tmp_2801 += (-0.5*vu*KroneckerDelta(2,gO2)*Lambdax) * tmp_2804;
   std::complex<double> tmp_2806;
   std::complex<double> tmp_2807;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2807 += Conj(ZE(gI2,3 + j1))*Conj(TYe(j1,j1))*ZE(gI1,j1);
   }
   tmp_2806 += tmp_2807;
   tmp_2801 += (-0.7071067811865475*KroneckerDelta(0,gO2)) * tmp_2806;
   std::complex<double> tmp_2808;
   std::complex<double> tmp_2809;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2809 += Conj(ZE(gI2,j1))*Ye(j1,j1)*ZE(gI1,3 + j1);
   }
   tmp_2808 += tmp_2809;
   tmp_2801 += (0.5*vs*Conj(Lambdax)*KroneckerDelta(1,gO2)) * tmp_2808;
   std::complex<double> tmp_2810;
   std::complex<double> tmp_2811;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2811 += Conj(ZE(gI2,j1))*Ye(j1,j1)*ZE(gI1,3 + j1);
   }
   tmp_2810 += tmp_2811;
   tmp_2801 += (0.5*vu*Conj(Lambdax)*KroneckerDelta(2,gO2)) * tmp_2810;
   std::complex<double> tmp_2812;
   std::complex<double> tmp_2813;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2813 += Conj(ZE(gI2,j1))*ZE(gI1,3 + j1)*TYe(j1,j1);
   }
   tmp_2812 += tmp_2813;
   tmp_2801 += (0.7071067811865475*KroneckerDelta(0,gO2)) * tmp_2812;
   result += (std::complex<double>(0,-1)) * tmp_2801;

   return result;
}

std::complex<double> CLASSNAME::CpUAhconjSuSu(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_2814;
   std::complex<double> tmp_2815;
   std::complex<double> tmp_2816;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2816 += Conj(Yu(j1,j1))*Conj(ZU(gI2,3 + j1))*ZU(gI1,j1);
   }
   tmp_2815 += tmp_2816;
   tmp_2814 += (-0.5*vs*KroneckerDelta(0,gO2)*Lambdax) * tmp_2815;
   std::complex<double> tmp_2817;
   std::complex<double> tmp_2818;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2818 += Conj(Yu(j1,j1))*Conj(ZU(gI2,3 + j1))*ZU(gI1,j1);
   }
   tmp_2817 += tmp_2818;
   tmp_2814 += (-0.5*vd*KroneckerDelta(2,gO2)*Lambdax) * tmp_2817;
   std::complex<double> tmp_2819;
   std::complex<double> tmp_2820;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2820 += Conj(ZU(gI2,3 + j1))*Conj(TYu(j1,j1))*ZU(gI1,j1);
   }
   tmp_2819 += tmp_2820;
   tmp_2814 += (-0.7071067811865475*KroneckerDelta(1,gO2)) * tmp_2819;
   std::complex<double> tmp_2821;
   std::complex<double> tmp_2822;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2822 += Conj(ZU(gI2,j1))*Yu(j1,j1)*ZU(gI1,3 + j1);
   }
   tmp_2821 += tmp_2822;
   tmp_2814 += (0.5*vs*Conj(Lambdax)*KroneckerDelta(0,gO2)) * tmp_2821;
   std::complex<double> tmp_2823;
   std::complex<double> tmp_2824;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2824 += Conj(ZU(gI2,j1))*Yu(j1,j1)*ZU(gI1,3 + j1);
   }
   tmp_2823 += tmp_2824;
   tmp_2814 += (0.5*vd*Conj(Lambdax)*KroneckerDelta(2,gO2)) * tmp_2823;
   std::complex<double> tmp_2825;
   std::complex<double> tmp_2826;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2826 += Conj(ZU(gI2,j1))*ZU(gI1,3 + j1)*TYu(j1,j1);
   }
   tmp_2825 += tmp_2826;
   tmp_2814 += (0.7071067811865475*KroneckerDelta(1,gO2)) * tmp_2825;
   result += (std::complex<double>(0,-1)) * tmp_2814;

   return result;
}

std::complex<double> CLASSNAME::CpUAhChiChiPR(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = std::complex<double>(0,-0.05)*(KroneckerDelta(0,gO2)*(
      -7.745966692414834*g1*ZN(gI1,0)*ZN(gI2,2) + 10*g2*ZN(gI1,1)*ZN(gI2,2) -
      9.486832980505138*gN*ZN(gI1,5)*ZN(gI2,2) + 14.142135623730951*Conj(Lambdax)*
      ZN(gI1,4)*ZN(gI2,3) + 14.142135623730951*Conj(Lambdax)*ZN(gI1,3)*ZN(gI2,4) +
      ZN(gI1,2)*(-7.745966692414834*g1*ZN(gI2,0) + 10*g2*ZN(gI2,1) -
      9.486832980505138*gN*ZN(gI2,5))) + 2*KroneckerDelta(1,gO2)*((
      3.872983346207417*g1*ZN(gI1,0) - 5*g2*ZN(gI1,1) - 3.1622776601683795*gN*ZN(
      gI1,5))*ZN(gI2,3) + 7.0710678118654755*Conj(Lambdax)*(ZN(gI1,4)*ZN(gI2,2) +
      ZN(gI1,2)*ZN(gI2,4)) + ZN(gI1,3)*(3.872983346207417*g1*ZN(gI2,0) - 5*g2*ZN(
      gI2,1) - 3.1622776601683795*gN*ZN(gI2,5))) + 7.0710678118654755*
      KroneckerDelta(2,gO2)*(2*Conj(Lambdax)*(ZN(gI1,3)*ZN(gI2,2) + ZN(gI1,2)*ZN(
      gI2,3)) + 2.23606797749979*gN*(ZN(gI1,5)*ZN(gI2,4) + ZN(gI1,4)*ZN(gI2,5))));

   return result;
}

std::complex<double> CLASSNAME::CpUAhChiChiPL(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = std::complex<double>(0,0.05)*(10*g2*Conj(ZN(gI1,1))*Conj(ZN(gI2,2))
      *KroneckerDelta(0,gO1) - 9.486832980505138*gN*Conj(ZN(gI1,5))*Conj(ZN(gI2,2)
      )*KroneckerDelta(0,gO1) + 7.745966692414834*g1*Conj(ZN(gI1,3))*Conj(ZN(gI2,0
      ))*KroneckerDelta(1,gO1) - 10*g2*Conj(ZN(gI1,3))*Conj(ZN(gI2,1))*
      KroneckerDelta(1,gO1) - 10*g2*Conj(ZN(gI1,1))*Conj(ZN(gI2,3))*KroneckerDelta
      (1,gO1) - 6.324555320336759*gN*Conj(ZN(gI1,5))*Conj(ZN(gI2,3))*
      KroneckerDelta(1,gO1) - 6.324555320336759*gN*Conj(ZN(gI1,3))*Conj(ZN(gI2,5))
      *KroneckerDelta(1,gO1) + 7.745966692414834*g1*Conj(ZN(gI1,0))*(-(Conj(ZN(gI2
      ,2))*KroneckerDelta(0,gO1)) + Conj(ZN(gI2,3))*KroneckerDelta(1,gO1)) +
      15.811388300841898*gN*Conj(ZN(gI1,5))*Conj(ZN(gI2,4))*KroneckerDelta(2,gO1)
      + 15.811388300841898*gN*Conj(ZN(gI1,4))*Conj(ZN(gI2,5))*KroneckerDelta(2,gO1
      ) + 14.142135623730951*Conj(ZN(gI1,4))*Conj(ZN(gI2,3))*KroneckerDelta(0,gO1)
      *Lambdax + 14.142135623730951*Conj(ZN(gI1,3))*Conj(ZN(gI2,4))*KroneckerDelta
      (0,gO1)*Lambdax + 14.142135623730951*Conj(ZN(gI1,4))*Conj(ZN(gI2,2))*
      KroneckerDelta(1,gO1)*Lambdax + 14.142135623730951*Conj(ZN(gI1,3))*Conj(ZN(
      gI2,2))*KroneckerDelta(2,gO1)*Lambdax + Conj(ZN(gI1,2))*(-7.745966692414834*
      g1*Conj(ZN(gI2,0))*KroneckerDelta(0,gO1) + 10*g2*Conj(ZN(gI2,1))*
      KroneckerDelta(0,gO1) + 1.4142135623730951*(-6.708203932499369*gN*Conj(ZN(
      gI2,5))*KroneckerDelta(0,gO1) + 10*(Conj(ZN(gI2,4))*KroneckerDelta(1,gO1) +
      Conj(ZN(gI2,3))*KroneckerDelta(2,gO1))*Lambdax)));

   return result;
}

std::complex<double> CLASSNAME::CpUAhconjVWmHpm(unsigned gO2, unsigned gI2) const
{
   std::complex<double> result;

   result = std::complex<double>(0,-0.5)*g2*(KroneckerDelta(0,gO2)*ZP(gI2,0) +
      KroneckerDelta(1,gO2)*ZP(gI2,1));

   return result;
}

std::complex<double> CLASSNAME::CpUAhVZhh(unsigned gO2, unsigned gI2) const
{
   std::complex<double> result;

   result = std::complex<double>(0,-0.05)*(KroneckerDelta(0,gO2)*(10*g2*Cos(
      ThetaW())*Cos(ThetaWp()) + 7.745966692414834*g1*Cos(ThetaWp())*Sin(ThetaW())
      - 9.486832980505138*gN*Sin(ThetaWp()))*ZH(gI2,0) - 2*KroneckerDelta(1,gO2)*
      (5*g2*Cos(ThetaW())*Cos(ThetaWp()) + 3.872983346207417*g1*Cos(ThetaWp())*Sin
      (ThetaW()) + 3.1622776601683795*gN*Sin(ThetaWp()))*ZH(gI2,1) +
      15.811388300841898*gN*KroneckerDelta(2,gO2)*Sin(ThetaWp())*ZH(gI2,2));

   return result;
}

std::complex<double> CLASSNAME::CpUAhVZphh(unsigned gO2, unsigned gI2) const
{
   std::complex<double> result;

   result = std::complex<double>(0,0.05)*(KroneckerDelta(0,gO2)*(
      9.486832980505138*gN*Cos(ThetaWp()) + 2*(5*g2*Cos(ThetaW()) +
      3.872983346207417*g1*Sin(ThetaW()))*Sin(ThetaWp()))*ZH(gI2,0) + 2*
      KroneckerDelta(1,gO2)*(3.1622776601683795*gN*Cos(ThetaWp()) - (5*g2*Cos(
      ThetaW()) + 3.872983346207417*g1*Sin(ThetaW()))*Sin(ThetaWp()))*ZH(gI2,1) -
      15.811388300841898*gN*Cos(ThetaWp())*KroneckerDelta(2,gO2)*ZH(gI2,2));

   return result;
}

std::complex<double> CLASSNAME::CpconjUHpmVWmVP(unsigned gO2) const
{
   std::complex<double> result;

   result = -0.3872983346207417*g1*g2*Cos(ThetaW())*(vd*KroneckerDelta(0,gO2) -
      vu*KroneckerDelta(1,gO2));

   return result;
}

std::complex<double> CLASSNAME::CpconjUHpmVZVWm(unsigned gO2) const
{
   std::complex<double> result;

   result = 0.11180339887498948*g2*(vd*KroneckerDelta(0,gO2)*(
      3.4641016151377544*g1*Cos(ThetaWp())*Sin(ThetaW()) - 4.242640687119286*gN*
      Sin(ThetaWp())) - 2*vu*KroneckerDelta(1,gO2)*(1.7320508075688772*g1*Cos(
      ThetaWp())*Sin(ThetaW()) + 1.4142135623730951*gN*Sin(ThetaWp())));

   return result;
}

std::complex<double> CLASSNAME::CpconjUHpmVZpVWm(unsigned gO2) const
{
   std::complex<double> result;

   result = -0.11180339887498948*g2*(2*vu*KroneckerDelta(1,gO2)*(
      1.4142135623730951*gN*Cos(ThetaWp()) - 1.7320508075688772*g1*Sin(ThetaW())*
      Sin(ThetaWp())) + vd*KroneckerDelta(0,gO2)*(4.242640687119286*gN*Cos(ThetaWp
      ()) + 3.4641016151377544*g1*Sin(ThetaW())*Sin(ThetaWp())));

   return result;
}

std::complex<double> CLASSNAME::CpconjUHpmbargWmCgZ(unsigned gO1) const
{
   std::complex<double> result;

   result = 0.025*g2*(2*vu*KroneckerDelta(1,gO1)*(-5*g2*Cos(ThetaW())*Cos(
      ThetaWp()) + 3.872983346207417*g1*Cos(ThetaWp())*Sin(ThetaW()) +
      3.1622776601683795*gN*Sin(ThetaWp())) + vd*KroneckerDelta(0,gO1)*(10*g2*Cos(
      ThetaW())*Cos(ThetaWp()) - 7.745966692414834*g1*Cos(ThetaWp())*Sin(ThetaW())
      + 9.486832980505138*gN*Sin(ThetaWp())));

   return result;
}

std::complex<double> CLASSNAME::CpUHpmgWmCbargZ(unsigned gO2) const
{
   std::complex<double> result;

   result = 0.025*g2*(2*vu*KroneckerDelta(1,gO2)*(5*g2*Cos(ThetaW())*Cos(
      ThetaWp()) + 3.872983346207417*g1*Cos(ThetaWp())*Sin(ThetaW()) +
      3.1622776601683795*gN*Sin(ThetaWp())) + vd*KroneckerDelta(0,gO2)*(-10*g2*Cos
      (ThetaW())*Cos(ThetaWp()) - 7.745966692414834*g1*Cos(ThetaWp())*Sin(ThetaW()
      ) + 9.486832980505138*gN*Sin(ThetaWp())));

   return result;
}

std::complex<double> CLASSNAME::CpconjUHpmbargWmCgZp(unsigned gO1) const
{
   std::complex<double> result;

   result = 0.025*g2*(2*vu*KroneckerDelta(1,gO1)*(3.1622776601683795*gN*Cos(
      ThetaWp()) + (5*g2*Cos(ThetaW()) - 3.872983346207417*g1*Sin(ThetaW()))*Sin(
      ThetaWp())) + vd*KroneckerDelta(0,gO1)*(9.486832980505138*gN*Cos(ThetaWp())
      + 2*(-5*g2*Cos(ThetaW()) + 3.872983346207417*g1*Sin(ThetaW()))*Sin(ThetaWp()
      )));

   return result;
}

std::complex<double> CLASSNAME::CpUHpmgWmCbargZp(unsigned gO2) const
{
   std::complex<double> result;

   result = 0.025*g2*(2*vu*KroneckerDelta(1,gO2)*(3.1622776601683795*gN*Cos(
      ThetaWp()) - (5*g2*Cos(ThetaW()) + 3.872983346207417*g1*Sin(ThetaW()))*Sin(
      ThetaWp())) + vd*KroneckerDelta(0,gO2)*(9.486832980505138*gN*Cos(ThetaWp())
      + 2*(5*g2*Cos(ThetaW()) + 3.872983346207417*g1*Sin(ThetaW()))*Sin(ThetaWp())
      ));

   return result;
}

std::complex<double> CLASSNAME::CpconjUHpmbargZgWm(unsigned gO1) const
{
   std::complex<double> result;

   result = 0.025*g2*(2*vu*KroneckerDelta(1,gO1)*(5*g2*Cos(ThetaW())*Cos(
      ThetaWp()) + 3.872983346207417*g1*Cos(ThetaWp())*Sin(ThetaW()) +
      3.1622776601683795*gN*Sin(ThetaWp())) + vd*KroneckerDelta(0,gO1)*(-10*g2*Cos
      (ThetaW())*Cos(ThetaWp()) - 7.745966692414834*g1*Cos(ThetaWp())*Sin(ThetaW()
      ) + 9.486832980505138*gN*Sin(ThetaWp())));

   return result;
}

std::complex<double> CLASSNAME::CpUHpmgZbargWm(unsigned gO2) const
{
   std::complex<double> result;

   result = 0.025*g2*(2*vu*KroneckerDelta(1,gO2)*(-5*g2*Cos(ThetaW())*Cos(
      ThetaWp()) + 3.872983346207417*g1*Cos(ThetaWp())*Sin(ThetaW()) +
      3.1622776601683795*gN*Sin(ThetaWp())) + vd*KroneckerDelta(0,gO2)*(10*g2*Cos(
      ThetaW())*Cos(ThetaWp()) - 7.745966692414834*g1*Cos(ThetaWp())*Sin(ThetaW())
      + 9.486832980505138*gN*Sin(ThetaWp())));

   return result;
}

std::complex<double> CLASSNAME::CpconjUHpmbargZpgWm(unsigned gO1) const
{
   std::complex<double> result;

   result = 0.025*g2*(2*vu*KroneckerDelta(1,gO1)*(3.1622776601683795*gN*Cos(
      ThetaWp()) - (5*g2*Cos(ThetaW()) + 3.872983346207417*g1*Sin(ThetaW()))*Sin(
      ThetaWp())) + vd*KroneckerDelta(0,gO1)*(9.486832980505138*gN*Cos(ThetaWp())
      + 2*(5*g2*Cos(ThetaW()) + 3.872983346207417*g1*Sin(ThetaW()))*Sin(ThetaWp())
      ));

   return result;
}

std::complex<double> CLASSNAME::CpUHpmgZpbargWm(unsigned gO2) const
{
   std::complex<double> result;

   result = 0.025*g2*(2*vu*KroneckerDelta(1,gO2)*(3.1622776601683795*gN*Cos(
      ThetaWp()) + (5*g2*Cos(ThetaW()) - 3.872983346207417*g1*Sin(ThetaW()))*Sin(
      ThetaWp())) + vd*KroneckerDelta(0,gO2)*(9.486832980505138*gN*Cos(ThetaWp())
      + 2*(-5*g2*Cos(ThetaW()) + 3.872983346207417*g1*Sin(ThetaW()))*Sin(ThetaWp()
      )));

   return result;
}

std::complex<double> CLASSNAME::CpUHpmconjUHpmVZVZ(unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   result = 0.05*(2*KroneckerDelta(1,gO1)*KroneckerDelta(1,gO2)*(
      2.449489742783178*g1*gN*Sin(ThetaW())*Sin(2*ThetaWp()) + 5*Sqr(g2)*Sqr(Cos(
      ThetaW()))*Sqr(Cos(ThetaWp())) - 2*Cos(ThetaW())*(3.1622776601683795*g2*gN*
      Cos(ThetaWp())*Sin(ThetaWp()) + 3.872983346207417*g1*g2*Sin(ThetaW())*Sqr(
      Cos(ThetaWp()))) + 3*Sqr(g1)*Sqr(Cos(ThetaWp()))*Sqr(Sin(ThetaW())) + 2*Sqr(
      gN)*Sqr(Sin(ThetaWp()))) + KroneckerDelta(0,gO1)*KroneckerDelta(0,gO2)*(
      -14.696938456699067*g1*gN*Cos(ThetaWp())*Sin(ThetaW())*Sin(ThetaWp()) + 10*
      Sqr(g2)*Sqr(Cos(ThetaW()))*Sqr(Cos(ThetaWp())) + Cos(ThetaW())*(
      18.973665961010276*g2*gN*Cos(ThetaWp())*Sin(ThetaWp()) - 15.491933384829668*
      g1*g2*Sin(ThetaW())*Sqr(Cos(ThetaWp()))) + 6*Sqr(g1)*Sqr(Cos(ThetaWp()))*Sqr
      (Sin(ThetaW())) + 9*Sqr(gN)*Sqr(Sin(ThetaWp()))));

   return result;
}

std::complex<double> CLASSNAME::CpUHpmconjUHpmVZpVZp(unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   result = 0.05*(KroneckerDelta(0,gO1)*KroneckerDelta(0,gO2)*(
      -9.486832980505138*g2*gN*Cos(ThetaW())*Sin(2*ThetaWp()) + 9*Sqr(gN)*Sqr(Cos(
      ThetaWp())) - 15.491933384829668*g1*g2*Cos(ThetaW())*Sin(ThetaW())*Sqr(Sin(
      ThetaWp())) + 10*Sqr(g2)*Sqr(Cos(ThetaW()))*Sqr(Sin(ThetaWp())) + 3*g1*Sin(
      ThetaW())*(2.449489742783178*gN*Sin(2*ThetaWp()) + 2*g1*Sin(ThetaW())*Sqr(
      Sin(ThetaWp())))) + 2*KroneckerDelta(1,gO1)*KroneckerDelta(1,gO2)*(
      -4.898979485566356*g1*gN*Cos(ThetaWp())*Sin(ThetaW())*Sin(ThetaWp()) + 2*Sqr
      (gN)*Sqr(Cos(ThetaWp())) + 5*Sqr(g2)*Sqr(Cos(ThetaW()))*Sqr(Sin(ThetaWp()))
      + 3*Sqr(g1)*Sqr(Sin(ThetaW()))*Sqr(Sin(ThetaWp())) + Cos(ThetaW())*(
      3.1622776601683795*g2*gN*Sin(2*ThetaWp()) - 7.745966692414834*g1*g2*Sin(
      ThetaW())*Sqr(Sin(ThetaWp())))));

   return result;
}

std::complex<double> CLASSNAME::CpUHpmconjUHpmconjVWmVWm(unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   result = 0.5*(KroneckerDelta(0,gO1)*KroneckerDelta(0,gO2) + KroneckerDelta(1
      ,gO1)*KroneckerDelta(1,gO2))*Sqr(g2);

   return result;
}

std::complex<double> CLASSNAME::CpUHpmconjUHpmconjHpmHpm(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = 0.05*(KroneckerDelta(1,gO1)*(KroneckerDelta(0,gO2)*(-20*AbsSqr(
      Lambdax) + 3*Sqr(g1) + 5*Sqr(g2) - 3*Sqr(gN))*ZP(gI1,1)*ZP(gI2,0) +
      KroneckerDelta(1,gO2)*((-20*AbsSqr(Lambdax) + 3*Sqr(g1) + 5*Sqr(g2) - 3*Sqr(
      gN))*ZP(gI1,0)*ZP(gI2,0) - 2*(3*Sqr(g1) + 5*Sqr(g2) + 2*Sqr(gN))*ZP(gI1,1)*
      ZP(gI2,1))) - KroneckerDelta(0,gO1)*(KroneckerDelta(1,gO2)*(20*AbsSqr(
      Lambdax) - 3*Sqr(g1) - 5*Sqr(g2) + 3*Sqr(gN))*ZP(gI1,0)*ZP(gI2,1) +
      KroneckerDelta(0,gO2)*((6*Sqr(g1) + 10*Sqr(g2) + 9*Sqr(gN))*ZP(gI1,0)*ZP(gI2
      ,0) + (20*AbsSqr(Lambdax) - 3*Sqr(g1) - 5*Sqr(g2) + 3*Sqr(gN))*ZP(gI1,1)*ZP(
      gI2,1))));

   return result;
}

std::complex<double> CLASSNAME::CpUHpmconjUHpmconjSHp0SHp0(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = -0.05*(KroneckerDelta(0,gO1)*KroneckerDelta(0,gO2)*(3*Sqr(g1) - 5*
      Sqr(g2) - 3*Sqr(gN)) + KroneckerDelta(1,gO1)*KroneckerDelta(1,gO2)*(-3*Sqr(
      g1) + 5*Sqr(g2) - 2*Sqr(gN)))*(Conj(UHp0(gI2,0))*UHp0(gI1,0) - Conj(UHp0(gI2
      ,1))*UHp0(gI1,1));

   return result;
}

std::complex<double> CLASSNAME::CpUHpmconjUHpmconjSHppSHpp(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = -0.05*(KroneckerDelta(0,gO1)*KroneckerDelta(0,gO2)*(3*Sqr(g1) + 5*
      Sqr(g2) - 3*Sqr(gN)) - KroneckerDelta(1,gO1)*KroneckerDelta(1,gO2)*(3*Sqr(g1
      ) + 5*Sqr(g2) + 2*Sqr(gN)))*(Conj(UHpp(gI2,0))*UHpp(gI1,0) - Conj(UHpp(gI2,1
      ))*UHpp(gI1,1));

   return result;
}

std::complex<double> CLASSNAME::CpUHpmconjUHpmconjSSI0SSI0(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = 0.125*(3*KroneckerDelta(0,gO1)*KroneckerDelta(0,gO2) + 2*
      KroneckerDelta(1,gO1)*KroneckerDelta(1,gO2))*KroneckerDelta(gI1,gI2)*Sqr(gN)
      ;

   return result;
}

std::complex<double> CLASSNAME::CpconjUHpmconjSHp0SHpp(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = -0.35355339059327373*(vd*KroneckerDelta(0,gO2) + vu*KroneckerDelta(
      1,gO2))*Sqr(g2)*(Conj(UHpp(gI2,0))*UHp0(gI1,0) + Conj(UHpp(gI2,1))*UHp0(gI1,
      1));

   return result;
}

std::complex<double> CLASSNAME::CpconjUHpmHpmAh(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = std::complex<double>(0,0.25)*(KroneckerDelta(1,gO2)*(vu*(-2*AbsSqr(
      Lambdax) + Sqr(g2))*ZA(gI2,0) + vd*(-2*AbsSqr(Lambdax) + Sqr(g2))*ZA(gI2,1)
      - 2.8284271247461903*TLambdax*ZA(gI2,2))*ZP(gI1,0) + KroneckerDelta(0,gO2)*(
      -(vu*(-2*AbsSqr(Lambdax) + Sqr(g2))*ZA(gI2,0)) - vd*(-2*AbsSqr(Lambdax) +
      Sqr(g2))*ZA(gI2,1) + 2.8284271247461903*Conj(TLambdax)*ZA(gI2,2))*ZP(gI1,1))
      ;

   return result;
}

std::complex<double> CLASSNAME::CpconjUHpmHpmhh(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = 0.025*(-(KroneckerDelta(0,gO2)*(5*ZH(gI2,2)*((8*vs*AbsSqr(Lambdax)
      - 3*vs*Sqr(gN))*ZP(gI1,0) + 5.656854249492381*Conj(TLambdax)*ZP(gI1,1)) + ZH
      (gI2,1)*(2*vu*(-3*Sqr(g1) + 5*Sqr(g2) + 3*Sqr(gN))*ZP(gI1,0) + 10*vd*(-2*
      AbsSqr(Lambdax) + Sqr(g2))*ZP(gI1,1)) + ZH(gI2,0)*(vd*(6*Sqr(g1) + 10*Sqr(g2
      ) + 9*Sqr(gN))*ZP(gI1,0) + 10*vu*(-2*AbsSqr(Lambdax) + Sqr(g2))*ZP(gI1,1))))
      - 2*KroneckerDelta(1,gO2)*(5*ZH(gI2,2)*(2.8284271247461903*TLambdax*ZP(gI1,
      0) - vs*(-4*AbsSqr(Lambdax) + Sqr(gN))*ZP(gI1,1)) + ZH(gI2,1)*(5*vd*(-2*
      AbsSqr(Lambdax) + Sqr(g2))*ZP(gI1,0) + vu*(3*Sqr(g1) + 5*Sqr(g2) + 2*Sqr(gN)
      )*ZP(gI1,1)) + ZH(gI2,0)*(5*vu*(-2*AbsSqr(Lambdax) + Sqr(g2))*ZP(gI1,0) + vd
      *(-3*Sqr(g1) + 5*Sqr(g2) + 3*Sqr(gN))*ZP(gI1,1))));

   return result;
}

std::complex<double> CLASSNAME::CpUHpmconjUHpmAhAh(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = 0.025*(-(KroneckerDelta(0,gO1)*(-10*KroneckerDelta(1,gO2)*(-2*
      AbsSqr(Lambdax) + Sqr(g2))*(ZA(gI1,1)*ZA(gI2,0) + ZA(gI1,0)*ZA(gI2,1)) +
      KroneckerDelta(0,gO2)*((6*Sqr(g1) + 10*Sqr(g2) + 9*Sqr(gN))*ZA(gI1,0)*ZA(gI2
      ,0) + 2*(-3*Sqr(g1) + 5*Sqr(g2) + 3*Sqr(gN))*ZA(gI1,1)*ZA(gI2,1) + 5*(8*
      AbsSqr(Lambdax) - 3*Sqr(gN))*ZA(gI1,2)*ZA(gI2,2)))) + 2*KroneckerDelta(1,gO1
      )*(5*KroneckerDelta(0,gO2)*(-2*AbsSqr(Lambdax) + Sqr(g2))*(ZA(gI1,1)*ZA(gI2,
      0) + ZA(gI1,0)*ZA(gI2,1)) + KroneckerDelta(1,gO2)*((3*Sqr(g1) - 5*Sqr(g2) -
      3*Sqr(gN))*ZA(gI1,0)*ZA(gI2,0) - (3*Sqr(g1) + 5*Sqr(g2) + 2*Sqr(gN))*ZA(gI1,
      1)*ZA(gI2,1) + 5*(-4*AbsSqr(Lambdax) + Sqr(gN))*ZA(gI1,2)*ZA(gI2,2))));

   return result;
}

std::complex<double> CLASSNAME::CpUHpmconjUHpmconjSvSv(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_2827;
   tmp_2827 += std::complex<double>(0,-0.15)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*KroneckerDelta(gI1,gI2)*Sqr(g1);
   tmp_2827 += std::complex<double>(0,0.25)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*KroneckerDelta(gI1,gI2)*Sqr(g2);
   tmp_2827 += std::complex<double>(0,0.15)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*KroneckerDelta(gI1,gI2)*Sqr(gN);
   tmp_2827 += std::complex<double>(0,0.15)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*KroneckerDelta(gI1,gI2)*Sqr(g1);
   tmp_2827 += std::complex<double>(0,-0.25)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*KroneckerDelta(gI1,gI2)*Sqr(g2);
   tmp_2827 += std::complex<double>(0,0.1)*KroneckerDelta(1,gO1)*KroneckerDelta
      (1,gO2)*KroneckerDelta(gI1,gI2)*Sqr(gN);
   std::complex<double> tmp_2828;
   std::complex<double> tmp_2829;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_2829 += AbsSqr(Ye(j2,j2))*Conj(ZV(gI2,j2))*ZV(gI1,j2);
   }
   tmp_2828 += tmp_2829;
   tmp_2827 += (std::complex<double>(0,-1)*KroneckerDelta(0,gO1)*KroneckerDelta
      (0,gO2)) * tmp_2828;
   result += (std::complex<double>(0,-1)) * tmp_2827;

   return result;
}

std::complex<double> CLASSNAME::CpUHpmconjUHpmhhhh(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = 0.025*(-(KroneckerDelta(0,gO1)*(10*KroneckerDelta(1,gO2)*(-2*AbsSqr
      (Lambdax) + Sqr(g2))*(ZH(gI1,1)*ZH(gI2,0) + ZH(gI1,0)*ZH(gI2,1)) +
      KroneckerDelta(0,gO2)*((6*Sqr(g1) + 10*Sqr(g2) + 9*Sqr(gN))*ZH(gI1,0)*ZH(gI2
      ,0) + 2*(-3*Sqr(g1) + 5*Sqr(g2) + 3*Sqr(gN))*ZH(gI1,1)*ZH(gI2,1) + 5*(8*
      AbsSqr(Lambdax) - 3*Sqr(gN))*ZH(gI1,2)*ZH(gI2,2)))) + 2*KroneckerDelta(1,gO1
      )*(-5*KroneckerDelta(0,gO2)*(-2*AbsSqr(Lambdax) + Sqr(g2))*(ZH(gI1,1)*ZH(gI2
      ,0) + ZH(gI1,0)*ZH(gI2,1)) + KroneckerDelta(1,gO2)*((3*Sqr(g1) - 5*Sqr(g2) -
      3*Sqr(gN))*ZH(gI1,0)*ZH(gI2,0) - (3*Sqr(g1) + 5*Sqr(g2) + 2*Sqr(gN))*ZH(gI1
      ,1)*ZH(gI2,1) + 5*(-4*AbsSqr(Lambdax) + Sqr(gN))*ZH(gI1,2)*ZH(gI2,2))));

   return result;
}

std::complex<double> CLASSNAME::CpconjUHpmbarFuFdPR(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_2830;
   std::complex<double> tmp_2831;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2831 += Conj(Yd(j1,j1))*ZDR(gI2,j1)*ZUL(gI1,j1);
   }
   tmp_2830 += tmp_2831;
   result += (KroneckerDelta(0,gO2)) * tmp_2830;

   return result;
}

std::complex<double> CLASSNAME::CpconjUHpmbarFuFdPL(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_2832;
   std::complex<double> tmp_2833;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2833 += Conj(ZDL(gI2,j1))*Conj(ZUR(gI1,j1))*Yu(j1,j1);
   }
   tmp_2832 += tmp_2833;
   result += (KroneckerDelta(1,gO1)) * tmp_2832;

   return result;
}

std::complex<double> CLASSNAME::CpconjUHpmbarFvFePR(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   if (gI1 < 3) {
      result += Conj(Ye(gI1,gI1))*KroneckerDelta(0,gO2)*ZER(gI2,gI1);
   }

   return result;
}

double CLASSNAME::CpconjUHpmbarFvFePL(unsigned , unsigned , unsigned ) const
{
   double result = 0.0;

   result = 0;

   return result;
}

std::complex<double> CLASSNAME::CpconjUHpmconjSvSe(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_2834;
   std::complex<double> tmp_2835;
   std::complex<double> tmp_2836;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2836 += Conj(ZE(gI2,j1))*ZV(gI1,j1);
   }
   tmp_2835 += tmp_2836;
   tmp_2834 += (std::complex<double>(0.,-0.35355339059327373)*vd*KroneckerDelta
      (0,gO2)*Sqr(g2)) * tmp_2835;
   std::complex<double> tmp_2837;
   std::complex<double> tmp_2838;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2838 += Conj(ZE(gI2,j1))*ZV(gI1,j1);
   }
   tmp_2837 += tmp_2838;
   tmp_2834 += (std::complex<double>(0.,-0.35355339059327373)*vu*KroneckerDelta
      (1,gO2)*Sqr(g2)) * tmp_2837;
   std::complex<double> tmp_2839;
   std::complex<double> tmp_2840;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2840 += Conj(Ye(j1,j1))*Conj(ZE(gI2,3 + j1))*ZV(gI1,j1);
   }
   tmp_2839 += tmp_2840;
   tmp_2834 += (std::complex<double>(0.,0.7071067811865475)*vs*KroneckerDelta(1
      ,gO2)*Lambdax) * tmp_2839;
   std::complex<double> tmp_2841;
   std::complex<double> tmp_2842;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2842 += Conj(ZE(gI2,3 + j1))*Conj(TYe(j1,j1))*ZV(gI1,j1);
   }
   tmp_2841 += tmp_2842;
   tmp_2834 += (std::complex<double>(0,1)*KroneckerDelta(0,gO2)) * tmp_2841;
   std::complex<double> tmp_2843;
   std::complex<double> tmp_2844;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_2844 += AbsSqr(Ye(j2,j2))*Conj(ZE(gI2,j2))*ZV(gI1,j2);
   }
   tmp_2843 += tmp_2844;
   tmp_2834 += (std::complex<double>(0.,0.7071067811865475)*vd*KroneckerDelta(0
      ,gO2)) * tmp_2843;
   result += (std::complex<double>(0,-1)) * tmp_2834;

   return result;
}

std::complex<double> CLASSNAME::CpUHpmconjUHpmconjSHI0SHI0(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_2845;
   std::complex<double> tmp_2846;
   std::complex<double> tmp_2847;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2847 += Conj(UHI0(gI2,j1))*UHI0(gI1,j1);
   }
   tmp_2846 += tmp_2847;
   tmp_2845 += (std::complex<double>(0,-0.15)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1)) * tmp_2846;
   std::complex<double> tmp_2848;
   std::complex<double> tmp_2849;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2849 += Conj(UHI0(gI2,j1))*UHI0(gI1,j1);
   }
   tmp_2848 += tmp_2849;
   tmp_2845 += (std::complex<double>(0,0.25)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g2)) * tmp_2848;
   std::complex<double> tmp_2850;
   std::complex<double> tmp_2851;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2851 += Conj(UHI0(gI2,j1))*UHI0(gI1,j1);
   }
   tmp_2850 += tmp_2851;
   tmp_2845 += (std::complex<double>(0,-0.225)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(gN)) * tmp_2850;
   std::complex<double> tmp_2852;
   std::complex<double> tmp_2853;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2853 += Conj(UHI0(gI2,j1))*UHI0(gI1,j1);
   }
   tmp_2852 += tmp_2853;
   tmp_2845 += (std::complex<double>(0,0.15)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1)) * tmp_2852;
   std::complex<double> tmp_2854;
   std::complex<double> tmp_2855;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2855 += Conj(UHI0(gI2,j1))*UHI0(gI1,j1);
   }
   tmp_2854 += tmp_2855;
   tmp_2845 += (std::complex<double>(0,-0.25)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g2)) * tmp_2854;
   std::complex<double> tmp_2856;
   std::complex<double> tmp_2857;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2857 += Conj(UHI0(gI2,j1))*UHI0(gI1,j1);
   }
   tmp_2856 += tmp_2857;
   tmp_2845 += (std::complex<double>(0,-0.15)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(gN)) * tmp_2856;
   std::complex<double> tmp_2858;
   std::complex<double> tmp_2859;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2859 += Conj(UHI0(gI2,2 + j1))*Conj(Lambda12(j1,j1))*UHI0(gI1,j1);
   }
   tmp_2858 += tmp_2859;
   tmp_2845 += (std::complex<double>(0,1)*KroneckerDelta(0,gO1)*KroneckerDelta(
      1,gO2)*Lambdax) * tmp_2858;
   std::complex<double> tmp_2860;
   std::complex<double> tmp_2861;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2861 += Conj(UHI0(gI2,2 + j1))*UHI0(gI1,2 + j1);
   }
   tmp_2860 += tmp_2861;
   tmp_2845 += (std::complex<double>(0,0.15)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1)) * tmp_2860;
   std::complex<double> tmp_2862;
   std::complex<double> tmp_2863;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2863 += Conj(UHI0(gI2,2 + j1))*UHI0(gI1,2 + j1);
   }
   tmp_2862 += tmp_2863;
   tmp_2845 += (std::complex<double>(0,-0.25)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g2)) * tmp_2862;
   std::complex<double> tmp_2864;
   std::complex<double> tmp_2865;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2865 += Conj(UHI0(gI2,2 + j1))*UHI0(gI1,2 + j1);
   }
   tmp_2864 += tmp_2865;
   tmp_2845 += (std::complex<double>(0,-0.15)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(gN)) * tmp_2864;
   std::complex<double> tmp_2866;
   std::complex<double> tmp_2867;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2867 += Conj(UHI0(gI2,2 + j1))*UHI0(gI1,2 + j1);
   }
   tmp_2866 += tmp_2867;
   tmp_2845 += (std::complex<double>(0,-0.15)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1)) * tmp_2866;
   std::complex<double> tmp_2868;
   std::complex<double> tmp_2869;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2869 += Conj(UHI0(gI2,2 + j1))*UHI0(gI1,2 + j1);
   }
   tmp_2868 += tmp_2869;
   tmp_2845 += (std::complex<double>(0,0.25)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g2)) * tmp_2868;
   std::complex<double> tmp_2870;
   std::complex<double> tmp_2871;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2871 += Conj(UHI0(gI2,2 + j1))*UHI0(gI1,2 + j1);
   }
   tmp_2870 += tmp_2871;
   tmp_2845 += (std::complex<double>(0,-0.1)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(gN)) * tmp_2870;
   std::complex<double> tmp_2872;
   std::complex<double> tmp_2873;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2873 += Conj(UHI0(gI2,j1))*UHI0(gI1,2 + j1)*Lambda12(j1,j1);
   }
   tmp_2872 += tmp_2873;
   tmp_2845 += (std::complex<double>(0,1)*Conj(Lambdax)*KroneckerDelta(0,gO2)*
      KroneckerDelta(1,gO1)) * tmp_2872;
   result += (std::complex<double>(0,-1)) * tmp_2845;

   return result;
}

std::complex<double> CLASSNAME::CpUHpmconjUHpmconjSHIpSHIp(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_2874;
   std::complex<double> tmp_2875;
   std::complex<double> tmp_2876;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2876 += Conj(UHIp(gI2,j1))*UHIp(gI1,j1);
   }
   tmp_2875 += tmp_2876;
   tmp_2874 += (std::complex<double>(0,-0.15)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1)) * tmp_2875;
   std::complex<double> tmp_2877;
   std::complex<double> tmp_2878;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2878 += Conj(UHIp(gI2,j1))*UHIp(gI1,j1);
   }
   tmp_2877 += tmp_2878;
   tmp_2874 += (std::complex<double>(0,-0.25)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g2)) * tmp_2877;
   std::complex<double> tmp_2879;
   std::complex<double> tmp_2880;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2880 += Conj(UHIp(gI2,j1))*UHIp(gI1,j1);
   }
   tmp_2879 += tmp_2880;
   tmp_2874 += (std::complex<double>(0,-0.225)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(gN)) * tmp_2879;
   std::complex<double> tmp_2881;
   std::complex<double> tmp_2882;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2882 += Conj(UHIp(gI2,j1))*UHIp(gI1,j1);
   }
   tmp_2881 += tmp_2882;
   tmp_2874 += (std::complex<double>(0,0.15)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1)) * tmp_2881;
   std::complex<double> tmp_2883;
   std::complex<double> tmp_2884;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2884 += Conj(UHIp(gI2,j1))*UHIp(gI1,j1);
   }
   tmp_2883 += tmp_2884;
   tmp_2874 += (std::complex<double>(0,0.25)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g2)) * tmp_2883;
   std::complex<double> tmp_2885;
   std::complex<double> tmp_2886;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2886 += Conj(UHIp(gI2,j1))*UHIp(gI1,j1);
   }
   tmp_2885 += tmp_2886;
   tmp_2874 += (std::complex<double>(0,-0.15)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(gN)) * tmp_2885;
   std::complex<double> tmp_2887;
   std::complex<double> tmp_2888;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2888 += Conj(UHIp(gI2,2 + j1))*Conj(Lambda12(j1,j1))*UHIp(gI1,j1);
   }
   tmp_2887 += tmp_2888;
   tmp_2874 += (std::complex<double>(0,-1)*KroneckerDelta(0,gO1)*KroneckerDelta
      (1,gO2)*Lambdax) * tmp_2887;
   std::complex<double> tmp_2889;
   std::complex<double> tmp_2890;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2890 += Conj(UHIp(gI2,2 + j1))*UHIp(gI1,2 + j1);
   }
   tmp_2889 += tmp_2890;
   tmp_2874 += (std::complex<double>(0,0.15)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1)) * tmp_2889;
   std::complex<double> tmp_2891;
   std::complex<double> tmp_2892;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2892 += Conj(UHIp(gI2,2 + j1))*UHIp(gI1,2 + j1);
   }
   tmp_2891 += tmp_2892;
   tmp_2874 += (std::complex<double>(0,0.25)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g2)) * tmp_2891;
   std::complex<double> tmp_2893;
   std::complex<double> tmp_2894;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2894 += Conj(UHIp(gI2,2 + j1))*UHIp(gI1,2 + j1);
   }
   tmp_2893 += tmp_2894;
   tmp_2874 += (std::complex<double>(0,-0.15)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(gN)) * tmp_2893;
   std::complex<double> tmp_2895;
   std::complex<double> tmp_2896;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2896 += Conj(UHIp(gI2,2 + j1))*UHIp(gI1,2 + j1);
   }
   tmp_2895 += tmp_2896;
   tmp_2874 += (std::complex<double>(0,-0.15)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1)) * tmp_2895;
   std::complex<double> tmp_2897;
   std::complex<double> tmp_2898;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2898 += Conj(UHIp(gI2,2 + j1))*UHIp(gI1,2 + j1);
   }
   tmp_2897 += tmp_2898;
   tmp_2874 += (std::complex<double>(0,-0.25)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g2)) * tmp_2897;
   std::complex<double> tmp_2899;
   std::complex<double> tmp_2900;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2900 += Conj(UHIp(gI2,2 + j1))*UHIp(gI1,2 + j1);
   }
   tmp_2899 += tmp_2900;
   tmp_2874 += (std::complex<double>(0,-0.1)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(gN)) * tmp_2899;
   std::complex<double> tmp_2901;
   std::complex<double> tmp_2902;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2902 += Conj(UHIp(gI2,j1))*UHIp(gI1,2 + j1)*Lambda12(j1,j1);
   }
   tmp_2901 += tmp_2902;
   tmp_2874 += (std::complex<double>(0,-1)*Conj(Lambdax)*KroneckerDelta(0,gO2)*
      KroneckerDelta(1,gO1)) * tmp_2901;
   result += (std::complex<double>(0,-1)) * tmp_2874;

   return result;
}

std::complex<double> CLASSNAME::CpconjUHpmconjSHI0SHIp(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_2903;
   std::complex<double> tmp_2904;
   std::complex<double> tmp_2905;
   for (unsigned j1 = 0; j1 < 4; ++j1) {
      tmp_2905 += Conj(UHIp(gI2,j1))*UHI0(gI1,j1);
   }
   tmp_2904 += tmp_2905;
   tmp_2903 += (std::complex<double>(0.,-0.35355339059327373)*vd*KroneckerDelta
      (0,gO2)*Sqr(g2)) * tmp_2904;
   std::complex<double> tmp_2906;
   std::complex<double> tmp_2907;
   for (unsigned j1 = 0; j1 < 4; ++j1) {
      tmp_2907 += Conj(UHIp(gI2,j1))*UHI0(gI1,j1);
   }
   tmp_2906 += tmp_2907;
   tmp_2903 += (std::complex<double>(0.,-0.35355339059327373)*vu*KroneckerDelta
      (1,gO2)*Sqr(g2)) * tmp_2906;
   result += (std::complex<double>(0,-1)) * tmp_2903;

   return result;
}

std::complex<double> CLASSNAME::CpUHpmconjUHpmconjSdSd(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_2908;
   std::complex<double> tmp_2909;
   std::complex<double> tmp_2910;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2910 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
   }
   tmp_2909 += tmp_2910;
   tmp_2908 += (std::complex<double>(0,0.05)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1)) * tmp_2909;
   std::complex<double> tmp_2911;
   std::complex<double> tmp_2912;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2912 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
   }
   tmp_2911 += tmp_2912;
   tmp_2908 += (std::complex<double>(0,-0.25)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g2)) * tmp_2911;
   std::complex<double> tmp_2913;
   std::complex<double> tmp_2914;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2914 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
   }
   tmp_2913 += tmp_2914;
   tmp_2908 += (std::complex<double>(0,0.075)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(gN)) * tmp_2913;
   std::complex<double> tmp_2915;
   std::complex<double> tmp_2916;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2916 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
   }
   tmp_2915 += tmp_2916;
   tmp_2908 += (std::complex<double>(0,-0.05)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1)) * tmp_2915;
   std::complex<double> tmp_2917;
   std::complex<double> tmp_2918;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2918 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
   }
   tmp_2917 += tmp_2918;
   tmp_2908 += (std::complex<double>(0,0.25)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g2)) * tmp_2917;
   std::complex<double> tmp_2919;
   std::complex<double> tmp_2920;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2920 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
   }
   tmp_2919 += tmp_2920;
   tmp_2908 += (std::complex<double>(0,0.05)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(gN)) * tmp_2919;
   std::complex<double> tmp_2921;
   std::complex<double> tmp_2922;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2922 += Conj(ZD(gI2,3 + j1))*ZD(gI1,3 + j1);
   }
   tmp_2921 += tmp_2922;
   tmp_2908 += (std::complex<double>(0,0.1)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1)) * tmp_2921;
   std::complex<double> tmp_2923;
   std::complex<double> tmp_2924;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2924 += Conj(ZD(gI2,3 + j1))*ZD(gI1,3 + j1);
   }
   tmp_2923 += tmp_2924;
   tmp_2908 += (std::complex<double>(0,0.15)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(gN)) * tmp_2923;
   std::complex<double> tmp_2925;
   std::complex<double> tmp_2926;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2926 += Conj(ZD(gI2,3 + j1))*ZD(gI1,3 + j1);
   }
   tmp_2925 += tmp_2926;
   tmp_2908 += (std::complex<double>(0,-0.1)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1)) * tmp_2925;
   std::complex<double> tmp_2927;
   std::complex<double> tmp_2928;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2928 += Conj(ZD(gI2,3 + j1))*ZD(gI1,3 + j1);
   }
   tmp_2927 += tmp_2928;
   tmp_2908 += (std::complex<double>(0,0.1)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(gN)) * tmp_2927;
   std::complex<double> tmp_2929;
   std::complex<double> tmp_2930;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_2930 += AbsSqr(Yu(j2,j2))*Conj(ZD(gI2,j2))*ZD(gI1,j2);
   }
   tmp_2929 += tmp_2930;
   tmp_2908 += (std::complex<double>(0,-1)*KroneckerDelta(1,gO1)*KroneckerDelta
      (1,gO2)) * tmp_2929;
   std::complex<double> tmp_2931;
   std::complex<double> tmp_2932;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_2932 += AbsSqr(Yd(j2,j2))*Conj(ZD(gI2,3 + j2))*ZD(gI1,3 + j2);
   }
   tmp_2931 += tmp_2932;
   tmp_2908 += (std::complex<double>(0,-1)*KroneckerDelta(0,gO1)*KroneckerDelta
      (0,gO2)) * tmp_2931;
   result += (std::complex<double>(0,-1)) * tmp_2908;

   return result;
}

std::complex<double> CLASSNAME::CpUHpmconjUHpmconjSDXSDX(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_2933;
   std::complex<double> tmp_2934;
   std::complex<double> tmp_2935;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2935 += Conj(ZDX(gI2,j1))*ZDX(gI1,j1);
   }
   tmp_2934 += tmp_2935;
   tmp_2933 += (std::complex<double>(0,-0.1)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1)) * tmp_2934;
   std::complex<double> tmp_2936;
   std::complex<double> tmp_2937;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2937 += Conj(ZDX(gI2,j1))*ZDX(gI1,j1);
   }
   tmp_2936 += tmp_2937;
   tmp_2933 += (std::complex<double>(0,-0.15)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(gN)) * tmp_2936;
   std::complex<double> tmp_2938;
   std::complex<double> tmp_2939;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2939 += Conj(ZDX(gI2,j1))*ZDX(gI1,j1);
   }
   tmp_2938 += tmp_2939;
   tmp_2933 += (std::complex<double>(0,0.1)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1)) * tmp_2938;
   std::complex<double> tmp_2940;
   std::complex<double> tmp_2941;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2941 += Conj(ZDX(gI2,j1))*ZDX(gI1,j1);
   }
   tmp_2940 += tmp_2941;
   tmp_2933 += (std::complex<double>(0,-0.1)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(gN)) * tmp_2940;
   std::complex<double> tmp_2942;
   std::complex<double> tmp_2943;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2943 += Conj(ZDX(gI2,3 + j1))*Conj(Kappa(j1,j1))*ZDX(gI1,j1);
   }
   tmp_2942 += tmp_2943;
   tmp_2933 += (std::complex<double>(0,-1)*KroneckerDelta(0,gO1)*KroneckerDelta
      (1,gO2)*Lambdax) * tmp_2942;
   std::complex<double> tmp_2944;
   std::complex<double> tmp_2945;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2945 += Conj(ZDX(gI2,3 + j1))*ZDX(gI1,3 + j1);
   }
   tmp_2944 += tmp_2945;
   tmp_2933 += (std::complex<double>(0,0.1)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1)) * tmp_2944;
   std::complex<double> tmp_2946;
   std::complex<double> tmp_2947;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2947 += Conj(ZDX(gI2,3 + j1))*ZDX(gI1,3 + j1);
   }
   tmp_2946 += tmp_2947;
   tmp_2933 += (std::complex<double>(0,-0.225)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(gN)) * tmp_2946;
   std::complex<double> tmp_2948;
   std::complex<double> tmp_2949;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2949 += Conj(ZDX(gI2,3 + j1))*ZDX(gI1,3 + j1);
   }
   tmp_2948 += tmp_2949;
   tmp_2933 += (std::complex<double>(0,-0.1)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1)) * tmp_2948;
   std::complex<double> tmp_2950;
   std::complex<double> tmp_2951;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2951 += Conj(ZDX(gI2,3 + j1))*ZDX(gI1,3 + j1);
   }
   tmp_2950 += tmp_2951;
   tmp_2933 += (std::complex<double>(0,-0.15)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(gN)) * tmp_2950;
   std::complex<double> tmp_2952;
   std::complex<double> tmp_2953;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2953 += Conj(ZDX(gI2,j1))*ZDX(gI1,3 + j1)*Kappa(j1,j1);
   }
   tmp_2952 += tmp_2953;
   tmp_2933 += (std::complex<double>(0,-1)*Conj(Lambdax)*KroneckerDelta(0,gO2)*
      KroneckerDelta(1,gO1)) * tmp_2952;
   result += (std::complex<double>(0,-1)) * tmp_2933;

   return result;
}

std::complex<double> CLASSNAME::CpUHpmconjUHpmconjSeSe(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_2954;
   std::complex<double> tmp_2955;
   std::complex<double> tmp_2956;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2956 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
   }
   tmp_2955 += tmp_2956;
   tmp_2954 += (std::complex<double>(0,-0.15)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1)) * tmp_2955;
   std::complex<double> tmp_2957;
   std::complex<double> tmp_2958;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2958 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
   }
   tmp_2957 += tmp_2958;
   tmp_2954 += (std::complex<double>(0,-0.25)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g2)) * tmp_2957;
   std::complex<double> tmp_2959;
   std::complex<double> tmp_2960;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2960 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
   }
   tmp_2959 += tmp_2960;
   tmp_2954 += (std::complex<double>(0,0.15)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(gN)) * tmp_2959;
   std::complex<double> tmp_2961;
   std::complex<double> tmp_2962;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2962 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
   }
   tmp_2961 += tmp_2962;
   tmp_2954 += (std::complex<double>(0,0.15)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1)) * tmp_2961;
   std::complex<double> tmp_2963;
   std::complex<double> tmp_2964;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2964 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
   }
   tmp_2963 += tmp_2964;
   tmp_2954 += (std::complex<double>(0,0.25)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g2)) * tmp_2963;
   std::complex<double> tmp_2965;
   std::complex<double> tmp_2966;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2966 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
   }
   tmp_2965 += tmp_2966;
   tmp_2954 += (std::complex<double>(0,0.1)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(gN)) * tmp_2965;
   std::complex<double> tmp_2967;
   std::complex<double> tmp_2968;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2968 += Conj(ZE(gI2,3 + j1))*ZE(gI1,3 + j1);
   }
   tmp_2967 += tmp_2968;
   tmp_2954 += (std::complex<double>(0,0.3)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1)) * tmp_2967;
   std::complex<double> tmp_2969;
   std::complex<double> tmp_2970;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2970 += Conj(ZE(gI2,3 + j1))*ZE(gI1,3 + j1);
   }
   tmp_2969 += tmp_2970;
   tmp_2954 += (std::complex<double>(0,0.075)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(gN)) * tmp_2969;
   std::complex<double> tmp_2971;
   std::complex<double> tmp_2972;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2972 += Conj(ZE(gI2,3 + j1))*ZE(gI1,3 + j1);
   }
   tmp_2971 += tmp_2972;
   tmp_2954 += (std::complex<double>(0,-0.3)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1)) * tmp_2971;
   std::complex<double> tmp_2973;
   std::complex<double> tmp_2974;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2974 += Conj(ZE(gI2,3 + j1))*ZE(gI1,3 + j1);
   }
   tmp_2973 += tmp_2974;
   tmp_2954 += (std::complex<double>(0,0.05)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(gN)) * tmp_2973;
   std::complex<double> tmp_2975;
   std::complex<double> tmp_2976;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_2976 += AbsSqr(Ye(j2,j2))*Conj(ZE(gI2,3 + j2))*ZE(gI1,3 + j2);
   }
   tmp_2975 += tmp_2976;
   tmp_2954 += (std::complex<double>(0,-1)*KroneckerDelta(0,gO1)*KroneckerDelta
      (0,gO2)) * tmp_2975;
   result += (std::complex<double>(0,-1)) * tmp_2954;

   return result;
}

std::complex<double> CLASSNAME::CpUHpmconjUHpmconjSuSu(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_2977;
   std::complex<double> tmp_2978;
   std::complex<double> tmp_2979;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2979 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
   }
   tmp_2978 += tmp_2979;
   tmp_2977 += (std::complex<double>(0,0.05)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1)) * tmp_2978;
   std::complex<double> tmp_2980;
   std::complex<double> tmp_2981;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2981 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
   }
   tmp_2980 += tmp_2981;
   tmp_2977 += (std::complex<double>(0,0.25)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g2)) * tmp_2980;
   std::complex<double> tmp_2982;
   std::complex<double> tmp_2983;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2983 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
   }
   tmp_2982 += tmp_2983;
   tmp_2977 += (std::complex<double>(0,0.075)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(gN)) * tmp_2982;
   std::complex<double> tmp_2984;
   std::complex<double> tmp_2985;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2985 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
   }
   tmp_2984 += tmp_2985;
   tmp_2977 += (std::complex<double>(0,-0.05)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1)) * tmp_2984;
   std::complex<double> tmp_2986;
   std::complex<double> tmp_2987;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2987 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
   }
   tmp_2986 += tmp_2987;
   tmp_2977 += (std::complex<double>(0,-0.25)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g2)) * tmp_2986;
   std::complex<double> tmp_2988;
   std::complex<double> tmp_2989;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2989 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
   }
   tmp_2988 += tmp_2989;
   tmp_2977 += (std::complex<double>(0,0.05)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(gN)) * tmp_2988;
   std::complex<double> tmp_2990;
   std::complex<double> tmp_2991;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2991 += Conj(ZU(gI2,3 + j1))*ZU(gI1,3 + j1);
   }
   tmp_2990 += tmp_2991;
   tmp_2977 += (std::complex<double>(0,-0.2)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1)) * tmp_2990;
   std::complex<double> tmp_2992;
   std::complex<double> tmp_2993;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2993 += Conj(ZU(gI2,3 + j1))*ZU(gI1,3 + j1);
   }
   tmp_2992 += tmp_2993;
   tmp_2977 += (std::complex<double>(0,0.075)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(gN)) * tmp_2992;
   std::complex<double> tmp_2994;
   std::complex<double> tmp_2995;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2995 += Conj(ZU(gI2,3 + j1))*ZU(gI1,3 + j1);
   }
   tmp_2994 += tmp_2995;
   tmp_2977 += (std::complex<double>(0,0.2)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1)) * tmp_2994;
   std::complex<double> tmp_2996;
   std::complex<double> tmp_2997;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2997 += Conj(ZU(gI2,3 + j1))*ZU(gI1,3 + j1);
   }
   tmp_2996 += tmp_2997;
   tmp_2977 += (std::complex<double>(0,0.05)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(gN)) * tmp_2996;
   std::complex<double> tmp_2998;
   std::complex<double> tmp_2999;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_2999 += AbsSqr(Yd(j2,j2))*Conj(ZU(gI2,j2))*ZU(gI1,j2);
   }
   tmp_2998 += tmp_2999;
   tmp_2977 += (std::complex<double>(0,-1)*KroneckerDelta(0,gO1)*KroneckerDelta
      (0,gO2)) * tmp_2998;
   std::complex<double> tmp_3000;
   std::complex<double> tmp_3001;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_3001 += AbsSqr(Yu(j2,j2))*Conj(ZU(gI2,3 + j2))*ZU(gI1,3 + j2);
   }
   tmp_3000 += tmp_3001;
   tmp_2977 += (std::complex<double>(0,-1)*KroneckerDelta(1,gO1)*KroneckerDelta
      (1,gO2)) * tmp_3000;
   result += (std::complex<double>(0,-1)) * tmp_2977;

   return result;
}

std::complex<double> CLASSNAME::CpconjUHpmChiChaPR(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = -(Conj(Lambdax)*KroneckerDelta(0,gO2)*UP(gI2,1)*ZN(gI1,4)) - 0.1*
      KroneckerDelta(1,gO2)*(10*g2*UP(gI2,0)*ZN(gI1,3) + UP(gI2,1)*(
      5.477225575051661*g1*ZN(gI1,0) + 7.0710678118654755*g2*ZN(gI1,1) -
      4.47213595499958*gN*ZN(gI1,5)));

   return result;
}

std::complex<double> CLASSNAME::CpconjUHpmChiChaPL(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = -(g2*Conj(UM(gI2,0))*Conj(ZN(gI1,2))*KroneckerDelta(0,gO1)) + 0.1*
      Conj(UM(gI2,1))*(5.477225575051661*g1*Conj(ZN(gI1,0))*KroneckerDelta(0,gO1)
      + 7.0710678118654755*g2*Conj(ZN(gI1,1))*KroneckerDelta(0,gO1) +
      6.708203932499369*gN*Conj(ZN(gI1,5))*KroneckerDelta(0,gO1) - 10*Conj(ZN(gI1,
      4))*KroneckerDelta(1,gO1)*Lambdax);

   return result;
}

std::complex<double> CLASSNAME::CpconjUHpmconjSuSd(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_3002;
   std::complex<double> tmp_3003;
   std::complex<double> tmp_3004;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_3004 += Conj(ZD(gI2,j1))*ZU(gI1,j1);
   }
   tmp_3003 += tmp_3004;
   tmp_3002 += (std::complex<double>(0.,-0.35355339059327373)*vd*KroneckerDelta
      (0,gO2)*Sqr(g2)) * tmp_3003;
   std::complex<double> tmp_3005;
   std::complex<double> tmp_3006;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_3006 += Conj(ZD(gI2,j1))*ZU(gI1,j1);
   }
   tmp_3005 += tmp_3006;
   tmp_3002 += (std::complex<double>(0.,-0.35355339059327373)*vu*KroneckerDelta
      (1,gO2)*Sqr(g2)) * tmp_3005;
   std::complex<double> tmp_3007;
   std::complex<double> tmp_3008;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_3008 += Conj(Yd(j1,j1))*Conj(ZD(gI2,3 + j1))*ZU(gI1,j1);
   }
   tmp_3007 += tmp_3008;
   tmp_3002 += (std::complex<double>(0.,0.7071067811865475)*vs*KroneckerDelta(1
      ,gO2)*Lambdax) * tmp_3007;
   std::complex<double> tmp_3009;
   std::complex<double> tmp_3010;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_3010 += Conj(ZD(gI2,3 + j1))*Conj(TYd(j1,j1))*ZU(gI1,j1);
   }
   tmp_3009 += tmp_3010;
   tmp_3002 += (std::complex<double>(0,1)*KroneckerDelta(0,gO2)) * tmp_3009;
   std::complex<double> tmp_3011;
   std::complex<double> tmp_3012;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_3012 += Conj(ZD(gI2,j1))*Yu(j1,j1)*ZU(gI1,3 + j1);
   }
   tmp_3011 += tmp_3012;
   tmp_3002 += (std::complex<double>(0.,0.7071067811865475)*vs*Conj(Lambdax)*
      KroneckerDelta(0,gO2)) * tmp_3011;
   std::complex<double> tmp_3013;
   std::complex<double> tmp_3014;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_3014 += Conj(ZD(gI2,j1))*ZU(gI1,3 + j1)*TYu(j1,j1);
   }
   tmp_3013 += tmp_3014;
   tmp_3002 += (std::complex<double>(0,1)*KroneckerDelta(1,gO2)) * tmp_3013;
   std::complex<double> tmp_3015;
   std::complex<double> tmp_3016;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_3016 += AbsSqr(Yd(j2,j2))*Conj(ZD(gI2,j2))*ZU(gI1,j2);
   }
   tmp_3015 += tmp_3016;
   tmp_3002 += (std::complex<double>(0.,0.7071067811865475)*vd*KroneckerDelta(0
      ,gO2)) * tmp_3015;
   std::complex<double> tmp_3017;
   std::complex<double> tmp_3018;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_3018 += AbsSqr(Yu(j2,j2))*Conj(ZD(gI2,j2))*ZU(gI1,j2);
   }
   tmp_3017 += tmp_3018;
   tmp_3002 += (std::complex<double>(0.,0.7071067811865475)*vu*KroneckerDelta(1
      ,gO2)) * tmp_3017;
   std::complex<double> tmp_3019;
   std::complex<double> tmp_3020;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_3020 += Conj(Yd(j2,j2))*Conj(ZD(gI2,3 + j2))*Yu(j2,j2)*ZU(gI1,3 +
         j2);
   }
   tmp_3019 += tmp_3020;
   tmp_3002 += (std::complex<double>(0.,0.7071067811865475)*vu*KroneckerDelta(0
      ,gO2)) * tmp_3019;
   std::complex<double> tmp_3021;
   std::complex<double> tmp_3022;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_3022 += Conj(Yd(j2,j2))*Conj(ZD(gI2,3 + j2))*Yu(j2,j2)*ZU(gI1,3 +
         j2);
   }
   tmp_3021 += tmp_3022;
   tmp_3002 += (std::complex<double>(0.,0.7071067811865475)*vd*KroneckerDelta(1
      ,gO2)) * tmp_3021;
   result += (std::complex<double>(0,-1)) * tmp_3002;

   return result;
}

std::complex<double> CLASSNAME::CpconjUHpmVPHpm(unsigned gO2, unsigned gI2) const
{
   std::complex<double> result;

   if (gI2 < 2) {
      result += -0.3872983346207417*g1*Cos(ThetaW())*ZP(gI2,gO2);
   }
   if (gI2 < 2) {
      result += -0.5*g2*Sin(ThetaW())*ZP(gI2,gO2);
   }

   return result;
}

std::complex<double> CLASSNAME::CpconjUHpmVZHpm(unsigned gO2, unsigned gI2) const
{
   std::complex<double> result;

   result = 0.05*(KroneckerDelta(0,gO2)*(-10*g2*Cos(ThetaW())*Cos(ThetaWp()) +
      7.745966692414834*g1*Cos(ThetaWp())*Sin(ThetaW()) - 9.486832980505138*gN*Sin
      (ThetaWp()))*ZP(gI2,0) + 2*KroneckerDelta(1,gO2)*(-5*g2*Cos(ThetaW())*Cos(
      ThetaWp()) + 3.872983346207417*g1*Cos(ThetaWp())*Sin(ThetaW()) +
      3.1622776601683795*gN*Sin(ThetaWp()))*ZP(gI2,1));

   return result;
}

std::complex<double> CLASSNAME::CpconjUHpmVZpHpm(unsigned gO2, unsigned gI2) const
{
   std::complex<double> result;

   result = 0.05*(KroneckerDelta(0,gO2)*(-9.486832980505138*gN*Cos(ThetaWp()) +
      2*(5*g2*Cos(ThetaW()) - 3.872983346207417*g1*Sin(ThetaW()))*Sin(ThetaWp()))
      *ZP(gI2,0) + 2*KroneckerDelta(1,gO2)*(3.1622776601683795*gN*Cos(ThetaWp()) +
      (5*g2*Cos(ThetaW()) - 3.872983346207417*g1*Sin(ThetaW()))*Sin(ThetaWp()))*
      ZP(gI2,1));

   return result;
}

std::complex<double> CLASSNAME::CpconjUHpmVWmAh(unsigned gO2, unsigned gI2) const
{
   std::complex<double> result;

   result = std::complex<double>(0,-0.5)*g2*(KroneckerDelta(0,gO2)*ZA(gI2,0) +
      KroneckerDelta(1,gO2)*ZA(gI2,1));

   return result;
}

std::complex<double> CLASSNAME::CpconjUHpmVWmhh(unsigned gO2, unsigned gI2) const
{
   std::complex<double> result;

   result = 0.5*g2*(KroneckerDelta(0,gO2)*ZH(gI2,0) - KroneckerDelta(1,gO2)*ZH(
      gI2,1));

   return result;
}

std::complex<double> CLASSNAME::CpUSHI0conjUSHI0VZVZ(unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   std::complex<double> tmp_3023;
   std::complex<double> tmp_3024;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3024 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_3023 += tmp_3024;
   result += (0.5*Sqr(g2)*Sqr(Cos(ThetaW()))*Sqr(Cos(ThetaWp()))) * tmp_3023;
   std::complex<double> tmp_3025;
   std::complex<double> tmp_3026;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3026 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_3025 += tmp_3026;
   result += (0.7745966692414834*g1*g2*Cos(ThetaW())*Sin(ThetaW())*Sqr(Cos(
      ThetaWp()))) * tmp_3025;
   std::complex<double> tmp_3027;
   std::complex<double> tmp_3028;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3028 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_3027 += tmp_3028;
   result += (0.3*Sqr(g1)*Sqr(Cos(ThetaWp()))*Sqr(Sin(ThetaW()))) * tmp_3027;
   std::complex<double> tmp_3029;
   std::complex<double> tmp_3030;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3030 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_3029 += tmp_3030;
   result += (0.2*Sqr(gN)*Sqr(Sin(ThetaWp()))) * tmp_3029;
   std::complex<double> tmp_3031;
   std::complex<double> tmp_3032;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3032 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_3031 += tmp_3032;
   result += (0.31622776601683794*g2*gN*Cos(ThetaW())*Sin(2*ThetaWp())) *
      tmp_3031;
   std::complex<double> tmp_3033;
   std::complex<double> tmp_3034;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3034 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_3033 += tmp_3034;
   result += (0.2449489742783178*g1*gN*Sin(ThetaW())*Sin(2*ThetaWp())) *
      tmp_3033;
   if (gO1 < 2) {
      result += 0.5*KroneckerDelta(gO1,gO2)*Sqr(g2)*Sqr(Cos(ThetaW()))*Sqr(
         Cos(ThetaWp()));
   }
   if (gO1 < 2) {
      result += 0.7745966692414834*g1*g2*Cos(ThetaW())*KroneckerDelta(gO1,
         gO2)*Sin(ThetaW())*Sqr(Cos(ThetaWp()));
   }
   if (gO1 < 2) {
      result += 0.3*KroneckerDelta(gO1,gO2)*Sqr(g1)*Sqr(Cos(ThetaWp()))*Sqr(
         Sin(ThetaW()));
   }
   if (gO1 < 2) {
      result += -0.9486832980505138*g2*gN*Cos(ThetaW())*Cos(ThetaWp())*
         KroneckerDelta(gO1,gO2)*Sin(ThetaWp());
   }
   if (gO1 < 2) {
      result += -0.7348469228349533*g1*gN*Cos(ThetaWp())*KroneckerDelta(gO1,
         gO2)*Sin(ThetaW())*Sin(ThetaWp());
   }
   if (gO1 < 2) {
      result += 0.45*KroneckerDelta(gO1,gO2)*Sqr(gN)*Sqr(Sin(ThetaWp()));
   }

   return result;
}

std::complex<double> CLASSNAME::CpUSHI0conjUSHI0VZpVZp(unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   std::complex<double> tmp_3035;
   std::complex<double> tmp_3036;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3036 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_3035 += tmp_3036;
   result += (0.2*Sqr(gN)*Sqr(Cos(ThetaWp()))) * tmp_3035;
   std::complex<double> tmp_3037;
   std::complex<double> tmp_3038;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3038 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_3037 += tmp_3038;
   result += (0.5*Sqr(g2)*Sqr(Cos(ThetaW()))*Sqr(Sin(ThetaWp()))) * tmp_3037;
   std::complex<double> tmp_3039;
   std::complex<double> tmp_3040;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3040 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_3039 += tmp_3040;
   result += (0.7745966692414834*g1*g2*Cos(ThetaW())*Sin(ThetaW())*Sqr(Sin(
      ThetaWp()))) * tmp_3039;
   std::complex<double> tmp_3041;
   std::complex<double> tmp_3042;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3042 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_3041 += tmp_3042;
   result += (0.3*Sqr(g1)*Sqr(Sin(ThetaW()))*Sqr(Sin(ThetaWp()))) * tmp_3041;
   std::complex<double> tmp_3043;
   std::complex<double> tmp_3044;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3044 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_3043 += tmp_3044;
   result += (-0.31622776601683794*g2*gN*Cos(ThetaW())*Sin(2*ThetaWp())) *
      tmp_3043;
   std::complex<double> tmp_3045;
   std::complex<double> tmp_3046;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3046 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_3045 += tmp_3046;
   result += (-0.2449489742783178*g1*gN*Sin(ThetaW())*Sin(2*ThetaWp())) *
      tmp_3045;
   if (gO1 < 2) {
      result += 0.45*KroneckerDelta(gO1,gO2)*Sqr(gN)*Sqr(Cos(ThetaWp()));
   }
   if (gO1 < 2) {
      result += 0.5*KroneckerDelta(gO1,gO2)*Sqr(g2)*Sqr(Cos(ThetaW()))*Sqr(
         Sin(ThetaWp()));
   }
   if (gO1 < 2) {
      result += 0.7745966692414834*g1*g2*Cos(ThetaW())*KroneckerDelta(gO1,
         gO2)*Sin(ThetaW())*Sqr(Sin(ThetaWp()));
   }
   if (gO1 < 2) {
      result += 0.3*KroneckerDelta(gO1,gO2)*Sqr(g1)*Sqr(Sin(ThetaW()))*Sqr(
         Sin(ThetaWp()));
   }
   if (gO1 < 2) {
      result += 0.4743416490252569*g2*gN*Cos(ThetaW())*KroneckerDelta(gO1,
         gO2)*Sin(2*ThetaWp());
   }
   if (gO1 < 2) {
      result += 0.36742346141747667*g1*gN*KroneckerDelta(gO1,gO2)*Sin(ThetaW
         ())*Sin(2*ThetaWp());
   }

   return result;
}

double CLASSNAME::CpUSHI0conjUSHI0conjVWmVWm(unsigned gO1, unsigned gO2) const
{
   double result = 0.0;

   result = 0.5*KroneckerDelta(gO1,gO2)*Sqr(g2);

   return result;
}

std::complex<double> CLASSNAME::CpUSHI0conjUSHI0conjHpmHpm(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_3047;
   std::complex<double> tmp_3048;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3048 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_3047 += tmp_3048;
   result += (0.15*Sqr(g1)*ZP(gI1,0)*ZP(gI2,0)) * tmp_3047;
   std::complex<double> tmp_3049;
   std::complex<double> tmp_3050;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3050 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_3049 += tmp_3050;
   result += (-0.25*Sqr(g2)*ZP(gI1,0)*ZP(gI2,0)) * tmp_3049;
   std::complex<double> tmp_3051;
   std::complex<double> tmp_3052;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3052 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_3051 += tmp_3052;
   result += (-0.15*Sqr(gN)*ZP(gI1,0)*ZP(gI2,0)) * tmp_3051;
   if (gO1 < 2) {
      result += -0.15*KroneckerDelta(gO1,gO2)*Sqr(g1)*ZP(gI1,0)*ZP(gI2,0);
   }
   if (gO1 < 2) {
      result += 0.25*KroneckerDelta(gO1,gO2)*Sqr(g2)*ZP(gI1,0)*ZP(gI2,0);
   }
   if (gO1 < 2) {
      result += -0.225*KroneckerDelta(gO1,gO2)*Sqr(gN)*ZP(gI1,0)*ZP(gI2,0);
   }
   if (gO2 < 2) {
      result += Conj(Lambda12(gO2,gO2))*KroneckerDelta(gO1,2 + gO2)*Lambdax*
         ZP(gI1,1)*ZP(gI2,0);
   }
   std::complex<double> tmp_3053;
   std::complex<double> tmp_3054;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3054 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_3053 += tmp_3054;
   result += (-0.15*Sqr(g1)*ZP(gI1,1)*ZP(gI2,1)) * tmp_3053;
   std::complex<double> tmp_3055;
   std::complex<double> tmp_3056;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3056 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_3055 += tmp_3056;
   result += (0.25*Sqr(g2)*ZP(gI1,1)*ZP(gI2,1)) * tmp_3055;
   std::complex<double> tmp_3057;
   std::complex<double> tmp_3058;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3058 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_3057 += tmp_3058;
   result += (-0.1*Sqr(gN)*ZP(gI1,1)*ZP(gI2,1)) * tmp_3057;
   if (gO1 < 2) {
      result += 0.15*KroneckerDelta(gO1,gO2)*Sqr(g1)*ZP(gI1,1)*ZP(gI2,1);
   }
   if (gO1 < 2) {
      result += -0.25*KroneckerDelta(gO1,gO2)*Sqr(g2)*ZP(gI1,1)*ZP(gI2,1);
   }
   if (gO1 < 2) {
      result += -0.15*KroneckerDelta(gO1,gO2)*Sqr(gN)*ZP(gI1,1)*ZP(gI2,1);
   }
   if (gO1 < 2) {
      result += Conj(Lambdax)*KroneckerDelta(2 + gO1,gO2)*ZP(gI1,0)*ZP(gI2,1
         )*Lambda12(gO1,gO1);
   }

   return result;
}

std::complex<double> CLASSNAME::CpUSHI0conjUSHI0conjSHp0SHp0(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_3059;
   std::complex<double> tmp_3060;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3060 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_3059 += tmp_3060;
   result += (0.15*Conj(UHp0(gI2,0))*Sqr(g1)*UHp0(gI1,0)) * tmp_3059;
   std::complex<double> tmp_3061;
   std::complex<double> tmp_3062;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3062 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_3061 += tmp_3062;
   result += (0.25*Conj(UHp0(gI2,0))*Sqr(g2)*UHp0(gI1,0)) * tmp_3061;
   std::complex<double> tmp_3063;
   std::complex<double> tmp_3064;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3064 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_3063 += tmp_3064;
   result += (0.1*Conj(UHp0(gI2,0))*Sqr(gN)*UHp0(gI1,0)) * tmp_3063;
   if (gO1 < 2) {
      result += -0.15*Conj(UHp0(gI2,0))*KroneckerDelta(gO1,gO2)*Sqr(g1)*UHp0
         (gI1,0);
   }
   if (gO1 < 2) {
      result += -0.25*Conj(UHp0(gI2,0))*KroneckerDelta(gO1,gO2)*Sqr(g2)*UHp0
         (gI1,0);
   }
   if (gO1 < 2) {
      result += 0.15*Conj(UHp0(gI2,0))*KroneckerDelta(gO1,gO2)*Sqr(gN)*UHp0(
         gI1,0);
   }
   std::complex<double> tmp_3065;
   std::complex<double> tmp_3066;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3066 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_3065 += tmp_3066;
   result += (-0.15*Conj(UHp0(gI2,1))*Sqr(g1)*UHp0(gI1,1)) * tmp_3065;
   std::complex<double> tmp_3067;
   std::complex<double> tmp_3068;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3068 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_3067 += tmp_3068;
   result += (-0.25*Conj(UHp0(gI2,1))*Sqr(g2)*UHp0(gI1,1)) * tmp_3067;
   std::complex<double> tmp_3069;
   std::complex<double> tmp_3070;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3070 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_3069 += tmp_3070;
   result += (-0.1*Conj(UHp0(gI2,1))*Sqr(gN)*UHp0(gI1,1)) * tmp_3069;
   if (gO1 < 2) {
      result += 0.15*Conj(UHp0(gI2,1))*KroneckerDelta(gO1,gO2)*Sqr(g1)*UHp0(
         gI1,1);
   }
   if (gO1 < 2) {
      result += 0.25*Conj(UHp0(gI2,1))*KroneckerDelta(gO1,gO2)*Sqr(g2)*UHp0(
         gI1,1);
   }
   if (gO1 < 2) {
      result += -0.15*Conj(UHp0(gI2,1))*KroneckerDelta(gO1,gO2)*Sqr(gN)*UHp0
         (gI1,1);
   }

   return result;
}

std::complex<double> CLASSNAME::CpUSHI0conjUSHI0conjSHppSHpp(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_3071;
   std::complex<double> tmp_3072;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3072 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_3071 += tmp_3072;
   result += (0.15*Conj(UHpp(gI2,0))*Sqr(g1)*UHpp(gI1,0)) * tmp_3071;
   std::complex<double> tmp_3073;
   std::complex<double> tmp_3074;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3074 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_3073 += tmp_3074;
   result += (-0.25*Conj(UHpp(gI2,0))*Sqr(g2)*UHpp(gI1,0)) * tmp_3073;
   std::complex<double> tmp_3075;
   std::complex<double> tmp_3076;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3076 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_3075 += tmp_3076;
   result += (0.1*Conj(UHpp(gI2,0))*Sqr(gN)*UHpp(gI1,0)) * tmp_3075;
   if (gO1 < 2) {
      result += -0.15*Conj(UHpp(gI2,0))*KroneckerDelta(gO1,gO2)*Sqr(g1)*UHpp
         (gI1,0);
   }
   if (gO1 < 2) {
      result += 0.25*Conj(UHpp(gI2,0))*KroneckerDelta(gO1,gO2)*Sqr(g2)*UHpp(
         gI1,0);
   }
   if (gO1 < 2) {
      result += 0.15*Conj(UHpp(gI2,0))*KroneckerDelta(gO1,gO2)*Sqr(gN)*UHpp(
         gI1,0);
   }
   std::complex<double> tmp_3077;
   std::complex<double> tmp_3078;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3078 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_3077 += tmp_3078;
   result += (-0.15*Conj(UHpp(gI2,1))*Sqr(g1)*UHpp(gI1,1)) * tmp_3077;
   std::complex<double> tmp_3079;
   std::complex<double> tmp_3080;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3080 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_3079 += tmp_3080;
   result += (0.25*Conj(UHpp(gI2,1))*Sqr(g2)*UHpp(gI1,1)) * tmp_3079;
   std::complex<double> tmp_3081;
   std::complex<double> tmp_3082;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3082 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_3081 += tmp_3082;
   result += (-0.1*Conj(UHpp(gI2,1))*Sqr(gN)*UHpp(gI1,1)) * tmp_3081;
   if (gO1 < 2) {
      result += 0.15*Conj(UHpp(gI2,1))*KroneckerDelta(gO1,gO2)*Sqr(g1)*UHpp(
         gI1,1);
   }
   if (gO1 < 2) {
      result += -0.25*Conj(UHpp(gI2,1))*KroneckerDelta(gO1,gO2)*Sqr(g2)*UHpp
         (gI1,1);
   }
   if (gO1 < 2) {
      result += -0.15*Conj(UHpp(gI2,1))*KroneckerDelta(gO1,gO2)*Sqr(gN)*UHpp
         (gI1,1);
   }

   return result;
}

std::complex<double> CLASSNAME::CpUSHI0conjUSHI0conjSSI0SSI0(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_3083;
   std::complex<double> tmp_3084;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3084 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_3083 += tmp_3084;
   result += (0.25*KroneckerDelta(gI1,gI2)*Sqr(gN)) * tmp_3083;
   if (gO1 < 2) {
      result += 0.375*KroneckerDelta(gI1,gI2)*KroneckerDelta(gO1,gO2)*Sqr(gN
         );
   }

   return result;
}

std::complex<double> CLASSNAME::CpconjUSHI0barChaChaIPR(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_3085;
   std::complex<double> tmp_3086;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3086 += KroneckerDelta(gO2,2 + j1)*ZPI(gI2,j1);
   }
   tmp_3085 += tmp_3086;
   result += (-(g2*UM(gI1,0))) * tmp_3085;

   return result;
}

std::complex<double> CLASSNAME::CpconjUSHI0barChaChaIPL(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   if (gO1 < 2) {
      result += -(g2*Conj(UP(gI1,0))*Conj(ZMI(gI2,gO1)));
   }

   return result;
}

std::complex<double> CLASSNAME::CpconjUSHI0conjHpmSHIp(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   if (gO2 < 4) {
      result += -0.35355339059327373*vd*Conj(UHIp(gI2,gO2))*Sqr(g2)*ZP(gI1,0
         );
   }
   if (gO2 < 4) {
      result += -0.35355339059327373*vu*Conj(UHIp(gI2,gO2))*Sqr(g2)*ZP(gI1,1
         );
   }

   return result;
}

std::complex<double> CLASSNAME::CpUSHI0conjUSHI0AhAh(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_3087;
   std::complex<double> tmp_3088;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3088 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_3087 += tmp_3088;
   result += (0.15*Sqr(g1)*ZA(gI1,0)*ZA(gI2,0)) * tmp_3087;
   std::complex<double> tmp_3089;
   std::complex<double> tmp_3090;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3090 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_3089 += tmp_3090;
   result += (0.25*Sqr(g2)*ZA(gI1,0)*ZA(gI2,0)) * tmp_3089;
   std::complex<double> tmp_3091;
   std::complex<double> tmp_3092;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3092 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_3091 += tmp_3092;
   result += (-0.15*Sqr(gN)*ZA(gI1,0)*ZA(gI2,0)) * tmp_3091;
   if (gO1 < 2) {
      result += -0.15*KroneckerDelta(gO1,gO2)*Sqr(g1)*ZA(gI1,0)*ZA(gI2,0);
   }
   if (gO1 < 2) {
      result += -0.25*KroneckerDelta(gO1,gO2)*Sqr(g2)*ZA(gI1,0)*ZA(gI2,0);
   }
   if (gO1 < 2) {
      result += -0.225*KroneckerDelta(gO1,gO2)*Sqr(gN)*ZA(gI1,0)*ZA(gI2,0);
   }
   if (gO2 < 2) {
      result += 0.5*Conj(Lambda12(gO2,gO2))*KroneckerDelta(gO1,2 + gO2)*
         Lambdax*ZA(gI1,1)*ZA(gI2,0);
   }
   if (gO2 < 2) {
      result += 0.5*Conj(Lambda12(gO2,gO2))*KroneckerDelta(gO1,2 + gO2)*
         Lambdax*ZA(gI1,0)*ZA(gI2,1);
   }
   std::complex<double> tmp_3093;
   std::complex<double> tmp_3094;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3094 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_3093 += tmp_3094;
   result += (-0.15*Sqr(g1)*ZA(gI1,1)*ZA(gI2,1)) * tmp_3093;
   std::complex<double> tmp_3095;
   std::complex<double> tmp_3096;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3096 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_3095 += tmp_3096;
   result += (-0.25*Sqr(g2)*ZA(gI1,1)*ZA(gI2,1)) * tmp_3095;
   std::complex<double> tmp_3097;
   std::complex<double> tmp_3098;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3098 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_3097 += tmp_3098;
   result += (-0.1*Sqr(gN)*ZA(gI1,1)*ZA(gI2,1)) * tmp_3097;
   if (gO1 < 2) {
      result += 0.15*KroneckerDelta(gO1,gO2)*Sqr(g1)*ZA(gI1,1)*ZA(gI2,1);
   }
   if (gO1 < 2) {
      result += 0.25*KroneckerDelta(gO1,gO2)*Sqr(g2)*ZA(gI1,1)*ZA(gI2,1);
   }
   if (gO1 < 2) {
      result += -0.15*KroneckerDelta(gO1,gO2)*Sqr(gN)*ZA(gI1,1)*ZA(gI2,1);
   }
   std::complex<double> tmp_3099;
   std::complex<double> tmp_3100;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3100 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_3099 += tmp_3100;
   result += (0.25*Sqr(gN)*ZA(gI1,2)*ZA(gI2,2)) * tmp_3099;
   std::complex<double> tmp_3101;
   std::complex<double> tmp_3102;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_3102 += AbsSqr(Lambda12(j2,j2))*KroneckerDelta(gO1,2 + j2)*
         KroneckerDelta(gO2,2 + j2);
   }
   tmp_3101 += tmp_3102;
   result += (-(ZA(gI1,2)*ZA(gI2,2))) * tmp_3101;
   if (gO1 < 2) {
      result += 0.375*KroneckerDelta(gO1,gO2)*Sqr(gN)*ZA(gI1,2)*ZA(gI2,2);
   }
   if (gO1 < 2) {
      result += 0.5*Conj(Lambdax)*KroneckerDelta(2 + gO1,gO2)*ZA(gI1,1)*ZA(
         gI2,0)*Lambda12(gO1,gO1);
   }
   if (gO1 < 2) {
      result += 0.5*Conj(Lambdax)*KroneckerDelta(2 + gO1,gO2)*ZA(gI1,0)*ZA(
         gI2,1)*Lambda12(gO1,gO1);
   }
   if (gO1 < 2) {
      result += -(AbsSqr(Lambda12(gO1,gO1))*KroneckerDelta(gO1,gO2)*ZA(gI1,2
         )*ZA(gI2,2));
   }

   return result;
}

std::complex<double> CLASSNAME::CpUSHI0conjUSHI0conjSvSv(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_3103;
   std::complex<double> tmp_3104;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3104 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_3103 += tmp_3104;
   result += (0.15*KroneckerDelta(gI1,gI2)*Sqr(g1)) * tmp_3103;
   std::complex<double> tmp_3105;
   std::complex<double> tmp_3106;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3106 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_3105 += tmp_3106;
   result += (0.25*KroneckerDelta(gI1,gI2)*Sqr(g2)) * tmp_3105;
   std::complex<double> tmp_3107;
   std::complex<double> tmp_3108;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3108 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_3107 += tmp_3108;
   result += (0.1*KroneckerDelta(gI1,gI2)*Sqr(gN)) * tmp_3107;
   if (gO1 < 2) {
      result += -0.15*KroneckerDelta(gI1,gI2)*KroneckerDelta(gO1,gO2)*Sqr(g1
         );
   }
   if (gO1 < 2) {
      result += -0.25*KroneckerDelta(gI1,gI2)*KroneckerDelta(gO1,gO2)*Sqr(g2
         );
   }
   if (gO1 < 2) {
      result += 0.15*KroneckerDelta(gI1,gI2)*KroneckerDelta(gO1,gO2)*Sqr(gN)
         ;
   }

   return result;
}

std::complex<double> CLASSNAME::CpUSHI0conjUSHI0hhhh(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_3109;
   std::complex<double> tmp_3110;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3110 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_3109 += tmp_3110;
   result += (0.15*Sqr(g1)*ZH(gI1,0)*ZH(gI2,0)) * tmp_3109;
   std::complex<double> tmp_3111;
   std::complex<double> tmp_3112;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3112 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_3111 += tmp_3112;
   result += (0.25*Sqr(g2)*ZH(gI1,0)*ZH(gI2,0)) * tmp_3111;
   std::complex<double> tmp_3113;
   std::complex<double> tmp_3114;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3114 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_3113 += tmp_3114;
   result += (-0.15*Sqr(gN)*ZH(gI1,0)*ZH(gI2,0)) * tmp_3113;
   if (gO1 < 2) {
      result += -0.15*KroneckerDelta(gO1,gO2)*Sqr(g1)*ZH(gI1,0)*ZH(gI2,0);
   }
   if (gO1 < 2) {
      result += -0.25*KroneckerDelta(gO1,gO2)*Sqr(g2)*ZH(gI1,0)*ZH(gI2,0);
   }
   if (gO1 < 2) {
      result += -0.225*KroneckerDelta(gO1,gO2)*Sqr(gN)*ZH(gI1,0)*ZH(gI2,0);
   }
   if (gO2 < 2) {
      result += -0.5*Conj(Lambda12(gO2,gO2))*KroneckerDelta(gO1,2 + gO2)*
         Lambdax*ZH(gI1,1)*ZH(gI2,0);
   }
   if (gO2 < 2) {
      result += -0.5*Conj(Lambda12(gO2,gO2))*KroneckerDelta(gO1,2 + gO2)*
         Lambdax*ZH(gI1,0)*ZH(gI2,1);
   }
   std::complex<double> tmp_3115;
   std::complex<double> tmp_3116;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3116 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_3115 += tmp_3116;
   result += (-0.15*Sqr(g1)*ZH(gI1,1)*ZH(gI2,1)) * tmp_3115;
   std::complex<double> tmp_3117;
   std::complex<double> tmp_3118;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3118 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_3117 += tmp_3118;
   result += (-0.25*Sqr(g2)*ZH(gI1,1)*ZH(gI2,1)) * tmp_3117;
   std::complex<double> tmp_3119;
   std::complex<double> tmp_3120;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3120 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_3119 += tmp_3120;
   result += (-0.1*Sqr(gN)*ZH(gI1,1)*ZH(gI2,1)) * tmp_3119;
   if (gO1 < 2) {
      result += 0.15*KroneckerDelta(gO1,gO2)*Sqr(g1)*ZH(gI1,1)*ZH(gI2,1);
   }
   if (gO1 < 2) {
      result += 0.25*KroneckerDelta(gO1,gO2)*Sqr(g2)*ZH(gI1,1)*ZH(gI2,1);
   }
   if (gO1 < 2) {
      result += -0.15*KroneckerDelta(gO1,gO2)*Sqr(gN)*ZH(gI1,1)*ZH(gI2,1);
   }
   std::complex<double> tmp_3121;
   std::complex<double> tmp_3122;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3122 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_3121 += tmp_3122;
   result += (0.25*Sqr(gN)*ZH(gI1,2)*ZH(gI2,2)) * tmp_3121;
   std::complex<double> tmp_3123;
   std::complex<double> tmp_3124;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_3124 += AbsSqr(Lambda12(j2,j2))*KroneckerDelta(gO1,2 + j2)*
         KroneckerDelta(gO2,2 + j2);
   }
   tmp_3123 += tmp_3124;
   result += (-(ZH(gI1,2)*ZH(gI2,2))) * tmp_3123;
   if (gO1 < 2) {
      result += 0.375*KroneckerDelta(gO1,gO2)*Sqr(gN)*ZH(gI1,2)*ZH(gI2,2);
   }
   if (gO1 < 2) {
      result += -0.5*Conj(Lambdax)*KroneckerDelta(2 + gO1,gO2)*ZH(gI1,1)*ZH(
         gI2,0)*Lambda12(gO1,gO1);
   }
   if (gO1 < 2) {
      result += -0.5*Conj(Lambdax)*KroneckerDelta(2 + gO1,gO2)*ZH(gI1,0)*ZH(
         gI2,1)*Lambda12(gO1,gO1);
   }
   if (gO1 < 2) {
      result += -(AbsSqr(Lambda12(gO1,gO1))*KroneckerDelta(gO1,gO2)*ZH(gI1,2
         )*ZH(gI2,2));
   }

   return result;
}

std::complex<double> CLASSNAME::CpUSHI0conjUSHI0conjSHI0SHI0(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_3125;
   std::complex<double> tmp_3127;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3127 += KroneckerDelta(gO1,2 + j1)*UHI0(gI1,2 + j1);
   }
   tmp_3125 += tmp_3127;
   std::complex<double> tmp_3126;
   std::complex<double> tmp_3128;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_3128 += Conj(UHI0(gI2,2 + j2))*KroneckerDelta(gO2,2 + j2);
   }
   tmp_3126 += tmp_3128;
   result += (-0.075*Sqr(g1)) * tmp_3125 * tmp_3126;
   std::complex<double> tmp_3129;
   std::complex<double> tmp_3131;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3131 += KroneckerDelta(gO1,2 + j1)*UHI0(gI1,2 + j1);
   }
   tmp_3129 += tmp_3131;
   std::complex<double> tmp_3130;
   std::complex<double> tmp_3132;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_3132 += Conj(UHI0(gI2,2 + j2))*KroneckerDelta(gO2,2 + j2);
   }
   tmp_3130 += tmp_3132;
   result += (-0.125*Sqr(g2)) * tmp_3129 * tmp_3130;
   std::complex<double> tmp_3133;
   std::complex<double> tmp_3135;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3135 += KroneckerDelta(gO1,2 + j1)*UHI0(gI1,2 + j1);
   }
   tmp_3133 += tmp_3135;
   std::complex<double> tmp_3134;
   std::complex<double> tmp_3136;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_3136 += Conj(UHI0(gI2,2 + j2))*KroneckerDelta(gO2,2 + j2);
   }
   tmp_3134 += tmp_3136;
   result += (-0.05*Sqr(gN)) * tmp_3133 * tmp_3134;
   std::complex<double> tmp_3137;
   std::complex<double> tmp_3139;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3139 += Conj(UHI0(gI2,j1))*UHI0(gI1,j1);
   }
   tmp_3137 += tmp_3139;
   std::complex<double> tmp_3138;
   std::complex<double> tmp_3140;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_3140 += KroneckerDelta(gO1,2 + j2)*KroneckerDelta(gO2,2 + j2);
   }
   tmp_3138 += tmp_3140;
   result += (0.075*Sqr(g1)) * tmp_3137 * tmp_3138;
   std::complex<double> tmp_3141;
   std::complex<double> tmp_3143;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3143 += Conj(UHI0(gI2,j1))*UHI0(gI1,j1);
   }
   tmp_3141 += tmp_3143;
   std::complex<double> tmp_3142;
   std::complex<double> tmp_3144;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_3144 += KroneckerDelta(gO1,2 + j2)*KroneckerDelta(gO2,2 + j2);
   }
   tmp_3142 += tmp_3144;
   result += (0.125*Sqr(g2)) * tmp_3141 * tmp_3142;
   std::complex<double> tmp_3145;
   std::complex<double> tmp_3147;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3147 += Conj(UHI0(gI2,j1))*UHI0(gI1,j1);
   }
   tmp_3145 += tmp_3147;
   std::complex<double> tmp_3146;
   std::complex<double> tmp_3148;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_3148 += KroneckerDelta(gO1,2 + j2)*KroneckerDelta(gO2,2 + j2);
   }
   tmp_3146 += tmp_3148;
   result += (-0.075*Sqr(gN)) * tmp_3145 * tmp_3146;
   std::complex<double> tmp_3149;
   std::complex<double> tmp_3151;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3151 += Conj(UHI0(gI2,2 + j1))*UHI0(gI1,2 + j1);
   }
   tmp_3149 += tmp_3151;
   std::complex<double> tmp_3150;
   std::complex<double> tmp_3152;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_3152 += KroneckerDelta(gO1,2 + j2)*KroneckerDelta(gO2,2 + j2);
   }
   tmp_3150 += tmp_3152;
   result += (-0.075*Sqr(g1)) * tmp_3149 * tmp_3150;
   std::complex<double> tmp_3153;
   std::complex<double> tmp_3155;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3155 += Conj(UHI0(gI2,2 + j1))*UHI0(gI1,2 + j1);
   }
   tmp_3153 += tmp_3155;
   std::complex<double> tmp_3154;
   std::complex<double> tmp_3156;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_3156 += KroneckerDelta(gO1,2 + j2)*KroneckerDelta(gO2,2 + j2);
   }
   tmp_3154 += tmp_3156;
   result += (-0.125*Sqr(g2)) * tmp_3153 * tmp_3154;
   std::complex<double> tmp_3157;
   std::complex<double> tmp_3159;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3159 += Conj(UHI0(gI2,2 + j1))*UHI0(gI1,2 + j1);
   }
   tmp_3157 += tmp_3159;
   std::complex<double> tmp_3158;
   std::complex<double> tmp_3160;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_3160 += KroneckerDelta(gO1,2 + j2)*KroneckerDelta(gO2,2 + j2);
   }
   tmp_3158 += tmp_3160;
   result += (-0.05*Sqr(gN)) * tmp_3157 * tmp_3158;
   std::complex<double> tmp_3161;
   std::complex<double> tmp_3163;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3163 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_3161 += tmp_3163;
   std::complex<double> tmp_3162;
   std::complex<double> tmp_3164;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_3164 += Conj(UHI0(gI2,j2))*UHI0(gI1,j2);
   }
   tmp_3162 += tmp_3164;
   result += (0.075*Sqr(g1)) * tmp_3161 * tmp_3162;
   std::complex<double> tmp_3165;
   std::complex<double> tmp_3167;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3167 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_3165 += tmp_3167;
   std::complex<double> tmp_3166;
   std::complex<double> tmp_3168;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_3168 += Conj(UHI0(gI2,j2))*UHI0(gI1,j2);
   }
   tmp_3166 += tmp_3168;
   result += (0.125*Sqr(g2)) * tmp_3165 * tmp_3166;
   std::complex<double> tmp_3169;
   std::complex<double> tmp_3171;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3171 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_3169 += tmp_3171;
   std::complex<double> tmp_3170;
   std::complex<double> tmp_3172;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_3172 += Conj(UHI0(gI2,j2))*UHI0(gI1,j2);
   }
   tmp_3170 += tmp_3172;
   result += (-0.075*Sqr(gN)) * tmp_3169 * tmp_3170;
   std::complex<double> tmp_3173;
   std::complex<double> tmp_3175;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3175 += Conj(UHI0(gI2,j1))*KroneckerDelta(gO2,2 + j1)*Lambda12(j1,
         j1);
   }
   tmp_3173 += tmp_3175;
   std::complex<double> tmp_3174;
   std::complex<double> tmp_3176;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_3176 += Conj(Lambda12(j2,j2))*KroneckerDelta(gO1,2 + j2)*UHI0(gI1,
         j2);
   }
   tmp_3174 += tmp_3176;
   result += (-1) * tmp_3173 * tmp_3174;
   std::complex<double> tmp_3177;
   std::complex<double> tmp_3179;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3179 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_3177 += tmp_3179;
   std::complex<double> tmp_3178;
   std::complex<double> tmp_3180;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_3180 += Conj(UHI0(gI2,2 + j2))*UHI0(gI1,2 + j2);
   }
   tmp_3178 += tmp_3180;
   result += (-0.075*Sqr(g1)) * tmp_3177 * tmp_3178;
   std::complex<double> tmp_3181;
   std::complex<double> tmp_3183;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3183 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_3181 += tmp_3183;
   std::complex<double> tmp_3182;
   std::complex<double> tmp_3184;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_3184 += Conj(UHI0(gI2,2 + j2))*UHI0(gI1,2 + j2);
   }
   tmp_3182 += tmp_3184;
   result += (-0.125*Sqr(g2)) * tmp_3181 * tmp_3182;
   std::complex<double> tmp_3185;
   std::complex<double> tmp_3187;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3187 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_3185 += tmp_3187;
   std::complex<double> tmp_3186;
   std::complex<double> tmp_3188;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_3188 += Conj(UHI0(gI2,2 + j2))*UHI0(gI1,2 + j2);
   }
   tmp_3186 += tmp_3188;
   result += (-0.05*Sqr(gN)) * tmp_3185 * tmp_3186;
   std::complex<double> tmp_3189;
   std::complex<double> tmp_3191;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3191 += Conj(UHI0(gI2,2 + j1))*KroneckerDelta(gO2,2 + j1);
   }
   tmp_3189 += tmp_3191;
   std::complex<double> tmp_3190;
   std::complex<double> tmp_3192;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_3192 += KroneckerDelta(gO1,2 + j2)*UHI0(gI1,2 + j2);
   }
   tmp_3190 += tmp_3192;
   result += (-0.075*Sqr(g1)) * tmp_3189 * tmp_3190;
   std::complex<double> tmp_3193;
   std::complex<double> tmp_3195;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3195 += Conj(UHI0(gI2,2 + j1))*KroneckerDelta(gO2,2 + j1);
   }
   tmp_3193 += tmp_3195;
   std::complex<double> tmp_3194;
   std::complex<double> tmp_3196;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_3196 += KroneckerDelta(gO1,2 + j2)*UHI0(gI1,2 + j2);
   }
   tmp_3194 += tmp_3196;
   result += (-0.125*Sqr(g2)) * tmp_3193 * tmp_3194;
   std::complex<double> tmp_3197;
   std::complex<double> tmp_3199;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3199 += Conj(UHI0(gI2,2 + j1))*KroneckerDelta(gO2,2 + j1);
   }
   tmp_3197 += tmp_3199;
   std::complex<double> tmp_3198;
   std::complex<double> tmp_3200;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_3200 += KroneckerDelta(gO1,2 + j2)*UHI0(gI1,2 + j2);
   }
   tmp_3198 += tmp_3200;
   result += (-0.05*Sqr(gN)) * tmp_3197 * tmp_3198;
   if (gO1 < 2) {
      std::complex<double> tmp_3201;
      std::complex<double> tmp_3202;
      for (unsigned j1 = 0; j1 < 2; ++j1) {
         tmp_3202 += Conj(UHI0(gI2,j1))*UHI0(gI1,j1);
      }
      tmp_3201 += tmp_3202;
      result += (-0.075*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_3201;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_3203;
      std::complex<double> tmp_3204;
      for (unsigned j1 = 0; j1 < 2; ++j1) {
         tmp_3204 += Conj(UHI0(gI2,j1))*UHI0(gI1,j1);
      }
      tmp_3203 += tmp_3204;
      result += (-0.125*KroneckerDelta(gO1,gO2)*Sqr(g2)) * tmp_3203;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_3205;
      std::complex<double> tmp_3206;
      for (unsigned j1 = 0; j1 < 2; ++j1) {
         tmp_3206 += Conj(UHI0(gI2,j1))*UHI0(gI1,j1);
      }
      tmp_3205 += tmp_3206;
      result += (-0.1125*KroneckerDelta(gO1,gO2)*Sqr(gN)) * tmp_3205;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_3207;
      std::complex<double> tmp_3208;
      for (unsigned j1 = 0; j1 < 2; ++j1) {
         tmp_3208 += Conj(UHI0(gI2,2 + j1))*UHI0(gI1,2 + j1);
      }
      tmp_3207 += tmp_3208;
      result += (0.075*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_3207;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_3209;
      std::complex<double> tmp_3210;
      for (unsigned j1 = 0; j1 < 2; ++j1) {
         tmp_3210 += Conj(UHI0(gI2,2 + j1))*UHI0(gI1,2 + j1);
      }
      tmp_3209 += tmp_3210;
      result += (0.125*KroneckerDelta(gO1,gO2)*Sqr(g2)) * tmp_3209;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_3211;
      std::complex<double> tmp_3212;
      for (unsigned j1 = 0; j1 < 2; ++j1) {
         tmp_3212 += Conj(UHI0(gI2,2 + j1))*UHI0(gI1,2 + j1);
      }
      tmp_3211 += tmp_3212;
      result += (-0.075*KroneckerDelta(gO1,gO2)*Sqr(gN)) * tmp_3211;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_3213;
      std::complex<double> tmp_3214;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         tmp_3214 += Conj(UHI0(gI2,j2))*UHI0(gI1,j2);
      }
      tmp_3213 += tmp_3214;
      result += (-0.075*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_3213;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_3215;
      std::complex<double> tmp_3216;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         tmp_3216 += Conj(UHI0(gI2,j2))*UHI0(gI1,j2);
      }
      tmp_3215 += tmp_3216;
      result += (-0.125*KroneckerDelta(gO1,gO2)*Sqr(g2)) * tmp_3215;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_3217;
      std::complex<double> tmp_3218;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         tmp_3218 += Conj(UHI0(gI2,j2))*UHI0(gI1,j2);
      }
      tmp_3217 += tmp_3218;
      result += (-0.1125*KroneckerDelta(gO1,gO2)*Sqr(gN)) * tmp_3217;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_3219;
      std::complex<double> tmp_3220;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         tmp_3220 += Conj(UHI0(gI2,2 + j2))*UHI0(gI1,2 + j2);
      }
      tmp_3219 += tmp_3220;
      result += (0.075*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_3219;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_3221;
      std::complex<double> tmp_3222;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         tmp_3222 += Conj(UHI0(gI2,2 + j2))*UHI0(gI1,2 + j2);
      }
      tmp_3221 += tmp_3222;
      result += (0.125*KroneckerDelta(gO1,gO2)*Sqr(g2)) * tmp_3221;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_3223;
      std::complex<double> tmp_3224;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         tmp_3224 += Conj(UHI0(gI2,2 + j2))*UHI0(gI1,2 + j2);
      }
      tmp_3223 += tmp_3224;
      result += (-0.075*KroneckerDelta(gO1,gO2)*Sqr(gN)) * tmp_3223;
   }
   if (gO2 < 2) {
      std::complex<double> tmp_3225;
      std::complex<double> tmp_3226;
      for (unsigned j1 = 0; j1 < 2; ++j1) {
         tmp_3226 += KroneckerDelta(gO1,2 + j1)*UHI0(gI1,2 + j1);
      }
      tmp_3225 += tmp_3226;
      result += (0.075*Conj(UHI0(gI2,gO2))*Sqr(g1)) * tmp_3225;
   }
   if (gO2 < 2) {
      std::complex<double> tmp_3227;
      std::complex<double> tmp_3228;
      for (unsigned j1 = 0; j1 < 2; ++j1) {
         tmp_3228 += KroneckerDelta(gO1,2 + j1)*UHI0(gI1,2 + j1);
      }
      tmp_3227 += tmp_3228;
      result += (0.125*Conj(UHI0(gI2,gO2))*Sqr(g2)) * tmp_3227;
   }
   if (gO2 < 2) {
      std::complex<double> tmp_3229;
      std::complex<double> tmp_3230;
      for (unsigned j1 = 0; j1 < 2; ++j1) {
         tmp_3230 += KroneckerDelta(gO1,2 + j1)*UHI0(gI1,2 + j1);
      }
      tmp_3229 += tmp_3230;
      result += (-0.075*Conj(UHI0(gI2,gO2))*Sqr(gN)) * tmp_3229;
   }
   if (gO2 < 2) {
      std::complex<double> tmp_3231;
      std::complex<double> tmp_3232;
      for (unsigned j1 = 0; j1 < 2; ++j1) {
         tmp_3232 += Conj(UHI0(gI2,j1))*UHI0(gI1,2 + j1)*Lambda12(j1,j1);
      }
      tmp_3231 += tmp_3232;
      result += (-(Conj(Lambda12(gO2,gO2))*KroneckerDelta(gO1,2 + gO2))) *
         tmp_3231;
   }
   if (gO2 < 2) {
      std::complex<double> tmp_3233;
      std::complex<double> tmp_3234;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         tmp_3234 += KroneckerDelta(gO1,2 + j2)*UHI0(gI1,2 + j2);
      }
      tmp_3233 += tmp_3234;
      result += (0.075*Conj(UHI0(gI2,gO2))*Sqr(g1)) * tmp_3233;
   }
   if (gO2 < 2) {
      std::complex<double> tmp_3235;
      std::complex<double> tmp_3236;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         tmp_3236 += KroneckerDelta(gO1,2 + j2)*UHI0(gI1,2 + j2);
      }
      tmp_3235 += tmp_3236;
      result += (0.125*Conj(UHI0(gI2,gO2))*Sqr(g2)) * tmp_3235;
   }
   if (gO2 < 2) {
      std::complex<double> tmp_3237;
      std::complex<double> tmp_3238;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         tmp_3238 += KroneckerDelta(gO1,2 + j2)*UHI0(gI1,2 + j2);
      }
      tmp_3237 += tmp_3238;
      result += (-0.075*Conj(UHI0(gI2,gO2))*Sqr(gN)) * tmp_3237;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_3239;
      std::complex<double> tmp_3240;
      for (unsigned j1 = 0; j1 < 2; ++j1) {
         tmp_3240 += Conj(UHI0(gI2,2 + j1))*KroneckerDelta(gO2,2 + j1);
      }
      tmp_3239 += tmp_3240;
      result += (0.075*Sqr(g1)*UHI0(gI1,gO1)) * tmp_3239;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_3241;
      std::complex<double> tmp_3242;
      for (unsigned j1 = 0; j1 < 2; ++j1) {
         tmp_3242 += Conj(UHI0(gI2,2 + j1))*KroneckerDelta(gO2,2 + j1);
      }
      tmp_3241 += tmp_3242;
      result += (0.125*Sqr(g2)*UHI0(gI1,gO1)) * tmp_3241;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_3243;
      std::complex<double> tmp_3244;
      for (unsigned j1 = 0; j1 < 2; ++j1) {
         tmp_3244 += Conj(UHI0(gI2,2 + j1))*KroneckerDelta(gO2,2 + j1);
      }
      tmp_3243 += tmp_3244;
      result += (-0.075*Sqr(gN)*UHI0(gI1,gO1)) * tmp_3243;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_3245;
      std::complex<double> tmp_3246;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         tmp_3246 += Conj(UHI0(gI2,2 + j2))*KroneckerDelta(gO2,2 + j2);
      }
      tmp_3245 += tmp_3246;
      result += (0.075*Sqr(g1)*UHI0(gI1,gO1)) * tmp_3245;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_3247;
      std::complex<double> tmp_3248;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         tmp_3248 += Conj(UHI0(gI2,2 + j2))*KroneckerDelta(gO2,2 + j2);
      }
      tmp_3247 += tmp_3248;
      result += (0.125*Sqr(g2)*UHI0(gI1,gO1)) * tmp_3247;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_3249;
      std::complex<double> tmp_3250;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         tmp_3250 += Conj(UHI0(gI2,2 + j2))*KroneckerDelta(gO2,2 + j2);
      }
      tmp_3249 += tmp_3250;
      result += (-0.075*Sqr(gN)*UHI0(gI1,gO1)) * tmp_3249;
   }
   if (gO1 < 2 && gO2 < 2) {
      result += -0.15*Conj(UHI0(gI2,gO2))*Sqr(g1)*UHI0(gI1,gO1);
   }
   if (gO1 < 2 && gO2 < 2) {
      result += -0.25*Conj(UHI0(gI2,gO2))*Sqr(g2)*UHI0(gI1,gO1);
   }
   if (gO1 < 2 && gO2 < 2) {
      result += -0.225*Conj(UHI0(gI2,gO2))*Sqr(gN)*UHI0(gI1,gO1);
   }
   if (gO1 < 2) {
      std::complex<double> tmp_3251;
      std::complex<double> tmp_3252;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         tmp_3252 += Conj(UHI0(gI2,2 + j2))*Conj(Lambda12(j2,j2))*UHI0(
            gI1,j2);
      }
      tmp_3251 += tmp_3252;
      result += (-(KroneckerDelta(2 + gO1,gO2)*Lambda12(gO1,gO1))) *
         tmp_3251;
   }
   if (gO1 < 2 && gO2 < 2) {
      result += -(Conj(UHI0(gI2,2 + gO2))*Conj(Lambda12(gO2,gO2))*UHI0(gI1,2
         + gO1)*Lambda12(gO1,gO1));
   }

   return result;
}

std::complex<double> CLASSNAME::CpUSHI0conjUSHI0conjSHIpSHIp(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_3253;
   std::complex<double> tmp_3255;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3255 += KroneckerDelta(gO1,2 + j1)*UHIp(gI1,2 + j1);
   }
   tmp_3253 += tmp_3255;
   std::complex<double> tmp_3254;
   std::complex<double> tmp_3256;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_3256 += Conj(UHIp(gI2,2 + j2))*KroneckerDelta(gO2,2 + j2);
   }
   tmp_3254 += tmp_3256;
   result += (-0.25*Sqr(g2)) * tmp_3253 * tmp_3254;
   std::complex<double> tmp_3257;
   std::complex<double> tmp_3259;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3259 += Conj(UHIp(gI2,j1))*UHIp(gI1,j1);
   }
   tmp_3257 += tmp_3259;
   std::complex<double> tmp_3258;
   std::complex<double> tmp_3260;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_3260 += KroneckerDelta(gO1,2 + j2)*KroneckerDelta(gO2,2 + j2);
   }
   tmp_3258 += tmp_3260;
   result += (0.075*Sqr(g1)) * tmp_3257 * tmp_3258;
   std::complex<double> tmp_3261;
   std::complex<double> tmp_3263;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3263 += Conj(UHIp(gI2,j1))*UHIp(gI1,j1);
   }
   tmp_3261 += tmp_3263;
   std::complex<double> tmp_3262;
   std::complex<double> tmp_3264;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_3264 += KroneckerDelta(gO1,2 + j2)*KroneckerDelta(gO2,2 + j2);
   }
   tmp_3262 += tmp_3264;
   result += (-0.125*Sqr(g2)) * tmp_3261 * tmp_3262;
   std::complex<double> tmp_3265;
   std::complex<double> tmp_3267;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3267 += Conj(UHIp(gI2,j1))*UHIp(gI1,j1);
   }
   tmp_3265 += tmp_3267;
   std::complex<double> tmp_3266;
   std::complex<double> tmp_3268;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_3268 += KroneckerDelta(gO1,2 + j2)*KroneckerDelta(gO2,2 + j2);
   }
   tmp_3266 += tmp_3268;
   result += (-0.075*Sqr(gN)) * tmp_3265 * tmp_3266;
   std::complex<double> tmp_3269;
   std::complex<double> tmp_3271;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3271 += Conj(UHIp(gI2,2 + j1))*UHIp(gI1,2 + j1);
   }
   tmp_3269 += tmp_3271;
   std::complex<double> tmp_3270;
   std::complex<double> tmp_3272;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_3272 += KroneckerDelta(gO1,2 + j2)*KroneckerDelta(gO2,2 + j2);
   }
   tmp_3270 += tmp_3272;
   result += (-0.075*Sqr(g1)) * tmp_3269 * tmp_3270;
   std::complex<double> tmp_3273;
   std::complex<double> tmp_3275;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3275 += Conj(UHIp(gI2,2 + j1))*UHIp(gI1,2 + j1);
   }
   tmp_3273 += tmp_3275;
   std::complex<double> tmp_3274;
   std::complex<double> tmp_3276;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_3276 += KroneckerDelta(gO1,2 + j2)*KroneckerDelta(gO2,2 + j2);
   }
   tmp_3274 += tmp_3276;
   result += (0.125*Sqr(g2)) * tmp_3273 * tmp_3274;
   std::complex<double> tmp_3277;
   std::complex<double> tmp_3279;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3279 += Conj(UHIp(gI2,2 + j1))*UHIp(gI1,2 + j1);
   }
   tmp_3277 += tmp_3279;
   std::complex<double> tmp_3278;
   std::complex<double> tmp_3280;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_3280 += KroneckerDelta(gO1,2 + j2)*KroneckerDelta(gO2,2 + j2);
   }
   tmp_3278 += tmp_3280;
   result += (-0.05*Sqr(gN)) * tmp_3277 * tmp_3278;
   std::complex<double> tmp_3281;
   std::complex<double> tmp_3283;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3283 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_3281 += tmp_3283;
   std::complex<double> tmp_3282;
   std::complex<double> tmp_3284;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_3284 += Conj(UHIp(gI2,j2))*UHIp(gI1,j2);
   }
   tmp_3282 += tmp_3284;
   result += (0.075*Sqr(g1)) * tmp_3281 * tmp_3282;
   std::complex<double> tmp_3285;
   std::complex<double> tmp_3287;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3287 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_3285 += tmp_3287;
   std::complex<double> tmp_3286;
   std::complex<double> tmp_3288;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_3288 += Conj(UHIp(gI2,j2))*UHIp(gI1,j2);
   }
   tmp_3286 += tmp_3288;
   result += (-0.125*Sqr(g2)) * tmp_3285 * tmp_3286;
   std::complex<double> tmp_3289;
   std::complex<double> tmp_3291;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3291 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_3289 += tmp_3291;
   std::complex<double> tmp_3290;
   std::complex<double> tmp_3292;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_3292 += Conj(UHIp(gI2,j2))*UHIp(gI1,j2);
   }
   tmp_3290 += tmp_3292;
   result += (-0.075*Sqr(gN)) * tmp_3289 * tmp_3290;
   std::complex<double> tmp_3293;
   std::complex<double> tmp_3295;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3295 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_3293 += tmp_3295;
   std::complex<double> tmp_3294;
   std::complex<double> tmp_3296;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_3296 += Conj(UHIp(gI2,2 + j2))*UHIp(gI1,2 + j2);
   }
   tmp_3294 += tmp_3296;
   result += (-0.075*Sqr(g1)) * tmp_3293 * tmp_3294;
   std::complex<double> tmp_3297;
   std::complex<double> tmp_3299;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3299 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_3297 += tmp_3299;
   std::complex<double> tmp_3298;
   std::complex<double> tmp_3300;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_3300 += Conj(UHIp(gI2,2 + j2))*UHIp(gI1,2 + j2);
   }
   tmp_3298 += tmp_3300;
   result += (0.125*Sqr(g2)) * tmp_3297 * tmp_3298;
   std::complex<double> tmp_3301;
   std::complex<double> tmp_3303;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3303 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_3301 += tmp_3303;
   std::complex<double> tmp_3302;
   std::complex<double> tmp_3304;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_3304 += Conj(UHIp(gI2,2 + j2))*UHIp(gI1,2 + j2);
   }
   tmp_3302 += tmp_3304;
   result += (-0.05*Sqr(gN)) * tmp_3301 * tmp_3302;
   std::complex<double> tmp_3305;
   std::complex<double> tmp_3307;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3307 += Conj(UHIp(gI2,2 + j1))*KroneckerDelta(gO2,2 + j1);
   }
   tmp_3305 += tmp_3307;
   std::complex<double> tmp_3306;
   std::complex<double> tmp_3308;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_3308 += KroneckerDelta(gO1,2 + j2)*UHIp(gI1,2 + j2);
   }
   tmp_3306 += tmp_3308;
   result += (-0.25*Sqr(g2)) * tmp_3305 * tmp_3306;
   if (gO1 < 2) {
      std::complex<double> tmp_3309;
      std::complex<double> tmp_3310;
      for (unsigned j1 = 0; j1 < 2; ++j1) {
         tmp_3310 += Conj(UHIp(gI2,j1))*UHIp(gI1,j1);
      }
      tmp_3309 += tmp_3310;
      result += (-0.075*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_3309;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_3311;
      std::complex<double> tmp_3312;
      for (unsigned j1 = 0; j1 < 2; ++j1) {
         tmp_3312 += Conj(UHIp(gI2,j1))*UHIp(gI1,j1);
      }
      tmp_3311 += tmp_3312;
      result += (0.125*KroneckerDelta(gO1,gO2)*Sqr(g2)) * tmp_3311;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_3313;
      std::complex<double> tmp_3314;
      for (unsigned j1 = 0; j1 < 2; ++j1) {
         tmp_3314 += Conj(UHIp(gI2,j1))*UHIp(gI1,j1);
      }
      tmp_3313 += tmp_3314;
      result += (-0.1125*KroneckerDelta(gO1,gO2)*Sqr(gN)) * tmp_3313;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_3315;
      std::complex<double> tmp_3316;
      for (unsigned j1 = 0; j1 < 2; ++j1) {
         tmp_3316 += Conj(UHIp(gI2,2 + j1))*UHIp(gI1,2 + j1);
      }
      tmp_3315 += tmp_3316;
      result += (0.075*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_3315;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_3317;
      std::complex<double> tmp_3318;
      for (unsigned j1 = 0; j1 < 2; ++j1) {
         tmp_3318 += Conj(UHIp(gI2,2 + j1))*UHIp(gI1,2 + j1);
      }
      tmp_3317 += tmp_3318;
      result += (-0.125*KroneckerDelta(gO1,gO2)*Sqr(g2)) * tmp_3317;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_3319;
      std::complex<double> tmp_3320;
      for (unsigned j1 = 0; j1 < 2; ++j1) {
         tmp_3320 += Conj(UHIp(gI2,2 + j1))*UHIp(gI1,2 + j1);
      }
      tmp_3319 += tmp_3320;
      result += (-0.075*KroneckerDelta(gO1,gO2)*Sqr(gN)) * tmp_3319;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_3321;
      std::complex<double> tmp_3322;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         tmp_3322 += Conj(UHIp(gI2,j2))*UHIp(gI1,j2);
      }
      tmp_3321 += tmp_3322;
      result += (-0.075*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_3321;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_3323;
      std::complex<double> tmp_3324;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         tmp_3324 += Conj(UHIp(gI2,j2))*UHIp(gI1,j2);
      }
      tmp_3323 += tmp_3324;
      result += (0.125*KroneckerDelta(gO1,gO2)*Sqr(g2)) * tmp_3323;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_3325;
      std::complex<double> tmp_3326;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         tmp_3326 += Conj(UHIp(gI2,j2))*UHIp(gI1,j2);
      }
      tmp_3325 += tmp_3326;
      result += (-0.1125*KroneckerDelta(gO1,gO2)*Sqr(gN)) * tmp_3325;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_3327;
      std::complex<double> tmp_3328;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         tmp_3328 += Conj(UHIp(gI2,2 + j2))*UHIp(gI1,2 + j2);
      }
      tmp_3327 += tmp_3328;
      result += (0.075*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_3327;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_3329;
      std::complex<double> tmp_3330;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         tmp_3330 += Conj(UHIp(gI2,2 + j2))*UHIp(gI1,2 + j2);
      }
      tmp_3329 += tmp_3330;
      result += (-0.125*KroneckerDelta(gO1,gO2)*Sqr(g2)) * tmp_3329;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_3331;
      std::complex<double> tmp_3332;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         tmp_3332 += Conj(UHIp(gI2,2 + j2))*UHIp(gI1,2 + j2);
      }
      tmp_3331 += tmp_3332;
      result += (-0.075*KroneckerDelta(gO1,gO2)*Sqr(gN)) * tmp_3331;
   }
   if (gO2 < 2) {
      std::complex<double> tmp_3333;
      std::complex<double> tmp_3334;
      for (unsigned j1 = 0; j1 < 2; ++j1) {
         tmp_3334 += KroneckerDelta(gO1,2 + j1)*UHIp(gI1,2 + j1);
      }
      tmp_3333 += tmp_3334;
      result += (-0.25*Conj(UHIp(gI2,gO2))*Sqr(g2)) * tmp_3333;
   }
   if (gO2 < 2) {
      std::complex<double> tmp_3335;
      std::complex<double> tmp_3336;
      for (unsigned j1 = 0; j1 < 2; ++j1) {
         tmp_3336 += Conj(UHIp(gI2,j1))*UHIp(gI1,2 + j1)*Lambda12(j1,j1);
      }
      tmp_3335 += tmp_3336;
      result += (Conj(Lambda12(gO2,gO2))*KroneckerDelta(gO1,2 + gO2)) *
         tmp_3335;
   }
   if (gO2 < 2) {
      std::complex<double> tmp_3337;
      std::complex<double> tmp_3338;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         tmp_3338 += KroneckerDelta(gO1,2 + j2)*UHIp(gI1,2 + j2);
      }
      tmp_3337 += tmp_3338;
      result += (-0.25*Conj(UHIp(gI2,gO2))*Sqr(g2)) * tmp_3337;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_3339;
      std::complex<double> tmp_3340;
      for (unsigned j1 = 0; j1 < 2; ++j1) {
         tmp_3340 += Conj(UHIp(gI2,2 + j1))*KroneckerDelta(gO2,2 + j1);
      }
      tmp_3339 += tmp_3340;
      result += (-0.25*Sqr(g2)*UHIp(gI1,gO1)) * tmp_3339;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_3341;
      std::complex<double> tmp_3342;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         tmp_3342 += Conj(UHIp(gI2,2 + j2))*KroneckerDelta(gO2,2 + j2);
      }
      tmp_3341 += tmp_3342;
      result += (-0.25*Sqr(g2)*UHIp(gI1,gO1)) * tmp_3341;
   }
   if (gO1 < 2 && gO2 < 2) {
      result += -0.5*Conj(UHIp(gI2,gO2))*Sqr(g2)*UHIp(gI1,gO1);
   }
   if (gO1 < 2) {
      std::complex<double> tmp_3343;
      std::complex<double> tmp_3344;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         tmp_3344 += Conj(UHIp(gI2,2 + j2))*Conj(Lambda12(j2,j2))*UHIp(
            gI1,j2);
      }
      tmp_3343 += tmp_3344;
      result += (KroneckerDelta(2 + gO1,gO2)*Lambda12(gO1,gO1)) * tmp_3343;
   }

   return result;
}

std::complex<double> CLASSNAME::CpconjUSHI0SHI0Ah(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_3345;
   std::complex<double> tmp_3346;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3346 += Conj(UHI0(gI1,j1))*KroneckerDelta(gO2,2 + j1)*Lambda12(j1,
         j1);
   }
   tmp_3345 += tmp_3346;
   result += (std::complex<double>(0,0.5)*vu*Conj(Lambdax)*ZA(gI2,0)) *
      tmp_3345;
   if (gO2 < 2) {
      result += std::complex<double>(0,-0.5)*vu*Conj(UHI0(gI1,2 + gO2))*Conj
         (Lambda12(gO2,gO2))*Lambdax*ZA(gI2,0);
   }
   std::complex<double> tmp_3347;
   std::complex<double> tmp_3348;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3348 += Conj(UHI0(gI1,j1))*KroneckerDelta(gO2,2 + j1)*Lambda12(j1,
         j1);
   }
   tmp_3347 += tmp_3348;
   result += (std::complex<double>(0,0.5)*vd*Conj(Lambdax)*ZA(gI2,1)) *
      tmp_3347;
   if (gO2 < 2) {
      result += std::complex<double>(0,-0.5)*vd*Conj(UHI0(gI1,2 + gO2))*Conj
         (Lambda12(gO2,gO2))*Lambdax*ZA(gI2,1);
   }
   std::complex<double> tmp_3349;
   std::complex<double> tmp_3350;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3350 += Conj(UHI0(gI1,j1))*KroneckerDelta(gO2,2 + j1)*TLambda12(j1
         ,j1);
   }
   tmp_3349 += tmp_3350;
   result += (std::complex<double>(0.,0.7071067811865475)*ZA(gI2,2)) * tmp_3349
      ;
   if (gO2 < 2) {
      result += std::complex<double>(0.,-0.7071067811865475)*Conj(UHI0(gI1,2
         + gO2))*Conj(TLambda12(gO2,gO2))*ZA(gI2,2);
   }

   return result;
}

std::complex<double> CLASSNAME::CpconjUSHI0SHI0hh(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_3351;
   std::complex<double> tmp_3352;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3352 += Conj(UHI0(gI1,2 + j1))*KroneckerDelta(gO2,2 + j1);
   }
   tmp_3351 += tmp_3352;
   result += (0.15*vd*Sqr(g1)*ZH(gI2,0)) * tmp_3351;
   std::complex<double> tmp_3353;
   std::complex<double> tmp_3354;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3354 += Conj(UHI0(gI1,2 + j1))*KroneckerDelta(gO2,2 + j1);
   }
   tmp_3353 += tmp_3354;
   result += (0.25*vd*Sqr(g2)*ZH(gI2,0)) * tmp_3353;
   std::complex<double> tmp_3355;
   std::complex<double> tmp_3356;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3356 += Conj(UHI0(gI1,2 + j1))*KroneckerDelta(gO2,2 + j1);
   }
   tmp_3355 += tmp_3356;
   result += (-0.15*vd*Sqr(gN)*ZH(gI2,0)) * tmp_3355;
   std::complex<double> tmp_3357;
   std::complex<double> tmp_3358;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3358 += Conj(UHI0(gI1,j1))*KroneckerDelta(gO2,2 + j1)*Lambda12(j1,
         j1);
   }
   tmp_3357 += tmp_3358;
   result += (-0.5*vu*Conj(Lambdax)*ZH(gI2,0)) * tmp_3357;
   if (gO2 < 2) {
      result += -0.15*vd*Conj(UHI0(gI1,gO2))*Sqr(g1)*ZH(gI2,0);
   }
   if (gO2 < 2) {
      result += -0.25*vd*Conj(UHI0(gI1,gO2))*Sqr(g2)*ZH(gI2,0);
   }
   if (gO2 < 2) {
      result += -0.225*vd*Conj(UHI0(gI1,gO2))*Sqr(gN)*ZH(gI2,0);
   }
   if (gO2 < 2) {
      result += -0.5*vu*Conj(UHI0(gI1,2 + gO2))*Conj(Lambda12(gO2,gO2))*
         Lambdax*ZH(gI2,0);
   }
   std::complex<double> tmp_3359;
   std::complex<double> tmp_3360;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3360 += Conj(UHI0(gI1,2 + j1))*KroneckerDelta(gO2,2 + j1);
   }
   tmp_3359 += tmp_3360;
   result += (-0.15*vu*Sqr(g1)*ZH(gI2,1)) * tmp_3359;
   std::complex<double> tmp_3361;
   std::complex<double> tmp_3362;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3362 += Conj(UHI0(gI1,2 + j1))*KroneckerDelta(gO2,2 + j1);
   }
   tmp_3361 += tmp_3362;
   result += (-0.25*vu*Sqr(g2)*ZH(gI2,1)) * tmp_3361;
   std::complex<double> tmp_3363;
   std::complex<double> tmp_3364;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3364 += Conj(UHI0(gI1,2 + j1))*KroneckerDelta(gO2,2 + j1);
   }
   tmp_3363 += tmp_3364;
   result += (-0.1*vu*Sqr(gN)*ZH(gI2,1)) * tmp_3363;
   std::complex<double> tmp_3365;
   std::complex<double> tmp_3366;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3366 += Conj(UHI0(gI1,j1))*KroneckerDelta(gO2,2 + j1)*Lambda12(j1,
         j1);
   }
   tmp_3365 += tmp_3366;
   result += (-0.5*vd*Conj(Lambdax)*ZH(gI2,1)) * tmp_3365;
   if (gO2 < 2) {
      result += 0.15*vu*Conj(UHI0(gI1,gO2))*Sqr(g1)*ZH(gI2,1);
   }
   if (gO2 < 2) {
      result += 0.25*vu*Conj(UHI0(gI1,gO2))*Sqr(g2)*ZH(gI2,1);
   }
   if (gO2 < 2) {
      result += -0.15*vu*Conj(UHI0(gI1,gO2))*Sqr(gN)*ZH(gI2,1);
   }
   if (gO2 < 2) {
      result += -0.5*vd*Conj(UHI0(gI1,2 + gO2))*Conj(Lambda12(gO2,gO2))*
         Lambdax*ZH(gI2,1);
   }
   std::complex<double> tmp_3367;
   std::complex<double> tmp_3368;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3368 += Conj(UHI0(gI1,2 + j1))*KroneckerDelta(gO2,2 + j1);
   }
   tmp_3367 += tmp_3368;
   result += (0.25*vs*Sqr(gN)*ZH(gI2,2)) * tmp_3367;
   std::complex<double> tmp_3369;
   std::complex<double> tmp_3370;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3370 += Conj(UHI0(gI1,j1))*KroneckerDelta(gO2,2 + j1)*TLambda12(j1
         ,j1);
   }
   tmp_3369 += tmp_3370;
   result += (0.7071067811865475*ZH(gI2,2)) * tmp_3369;
   std::complex<double> tmp_3371;
   std::complex<double> tmp_3372;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_3372 += AbsSqr(Lambda12(j2,j2))*Conj(UHI0(gI1,2 + j2))*
         KroneckerDelta(gO2,2 + j2);
   }
   tmp_3371 += tmp_3372;
   result += (-(vs*ZH(gI2,2))) * tmp_3371;
   if (gO2 < 2) {
      result += 0.375*vs*Conj(UHI0(gI1,gO2))*Sqr(gN)*ZH(gI2,2);
   }
   if (gO2 < 2) {
      result += 0.7071067811865475*Conj(UHI0(gI1,2 + gO2))*Conj(TLambda12(
         gO2,gO2))*ZH(gI2,2);
   }
   if (gO2 < 2) {
      result += -(vs*AbsSqr(Lambda12(gO2,gO2))*Conj(UHI0(gI1,gO2))*ZH(gI2,2)
         );
   }

   return result;
}

std::complex<double> CLASSNAME::CpconjUSHI0ChiIChiPR(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_3373;
   std::complex<double> tmp_3374;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3374 += KroneckerDelta(gO2,2 + j1)*ZNI(gI1,2 + j1);
   }
   tmp_3373 += tmp_3374;
   result += (-0.5477225575051661*g1*ZN(gI2,0)) * tmp_3373;
   std::complex<double> tmp_3375;
   std::complex<double> tmp_3376;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3376 += KroneckerDelta(gO2,2 + j1)*ZNI(gI1,2 + j1);
   }
   tmp_3375 += tmp_3376;
   result += (0.7071067811865475*g2*ZN(gI2,1)) * tmp_3375;
   std::complex<double> tmp_3377;
   std::complex<double> tmp_3378;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3378 += KroneckerDelta(gO2,2 + j1)*ZNI(gI1,2 + j1);
   }
   tmp_3377 += tmp_3378;
   result += (0.4472135954999579*gN*ZN(gI2,5)) * tmp_3377;
   if (gO2 < 2) {
      result += Conj(Lambda12(gO2,gO2))*ZN(gI2,4)*ZNI(gI1,2 + gO2);
   }

   return result;
}

std::complex<double> CLASSNAME::CpconjUSHI0ChiIChiPL(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_3379;
   std::complex<double> tmp_3380;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3380 += Conj(ZNI(gI1,j1))*KroneckerDelta(gO1,2 + j1)*Lambda12(j1,
         j1);
   }
   tmp_3379 += tmp_3380;
   result += (Conj(ZN(gI2,4))) * tmp_3379;
   if (gO1 < 2) {
      result += 0.5477225575051661*g1*Conj(ZN(gI2,0))*Conj(ZNI(gI1,gO1));
   }
   if (gO1 < 2) {
      result += -0.7071067811865475*g2*Conj(ZN(gI2,1))*Conj(ZNI(gI1,gO1));
   }
   if (gO1 < 2) {
      result += 0.6708203932499369*gN*Conj(ZN(gI2,5))*Conj(ZNI(gI1,gO1));
   }

   return result;
}

std::complex<double> CLASSNAME::CpUSHI0conjUSHI0conjSdSd(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_3381;
   std::complex<double> tmp_3383;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_3383 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
   }
   tmp_3381 += tmp_3383;
   std::complex<double> tmp_3382;
   std::complex<double> tmp_3384;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_3384 += KroneckerDelta(gO1,2 + j2)*KroneckerDelta(gO2,2 + j2);
   }
   tmp_3382 += tmp_3384;
   result += (-0.025*Sqr(g1)) * tmp_3381 * tmp_3382;
   std::complex<double> tmp_3385;
   std::complex<double> tmp_3387;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_3387 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
   }
   tmp_3385 += tmp_3387;
   std::complex<double> tmp_3386;
   std::complex<double> tmp_3388;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_3388 += KroneckerDelta(gO1,2 + j2)*KroneckerDelta(gO2,2 + j2);
   }
   tmp_3386 += tmp_3388;
   result += (-0.125*Sqr(g2)) * tmp_3385 * tmp_3386;
   std::complex<double> tmp_3389;
   std::complex<double> tmp_3391;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_3391 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
   }
   tmp_3389 += tmp_3391;
   std::complex<double> tmp_3390;
   std::complex<double> tmp_3392;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_3392 += KroneckerDelta(gO1,2 + j2)*KroneckerDelta(gO2,2 + j2);
   }
   tmp_3390 += tmp_3392;
   result += (0.025*Sqr(gN)) * tmp_3389 * tmp_3390;
   std::complex<double> tmp_3393;
   std::complex<double> tmp_3395;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_3395 += Conj(ZD(gI2,3 + j1))*ZD(gI1,3 + j1);
   }
   tmp_3393 += tmp_3395;
   std::complex<double> tmp_3394;
   std::complex<double> tmp_3396;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_3396 += KroneckerDelta(gO1,2 + j2)*KroneckerDelta(gO2,2 + j2);
   }
   tmp_3394 += tmp_3396;
   result += (-0.05*Sqr(g1)) * tmp_3393 * tmp_3394;
   std::complex<double> tmp_3397;
   std::complex<double> tmp_3399;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_3399 += Conj(ZD(gI2,3 + j1))*ZD(gI1,3 + j1);
   }
   tmp_3397 += tmp_3399;
   std::complex<double> tmp_3398;
   std::complex<double> tmp_3400;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_3400 += KroneckerDelta(gO1,2 + j2)*KroneckerDelta(gO2,2 + j2);
   }
   tmp_3398 += tmp_3400;
   result += (0.05*Sqr(gN)) * tmp_3397 * tmp_3398;
   std::complex<double> tmp_3401;
   std::complex<double> tmp_3403;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3403 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_3401 += tmp_3403;
   std::complex<double> tmp_3402;
   std::complex<double> tmp_3404;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_3404 += Conj(ZD(gI2,j2))*ZD(gI1,j2);
   }
   tmp_3402 += tmp_3404;
   result += (-0.025*Sqr(g1)) * tmp_3401 * tmp_3402;
   std::complex<double> tmp_3405;
   std::complex<double> tmp_3407;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3407 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_3405 += tmp_3407;
   std::complex<double> tmp_3406;
   std::complex<double> tmp_3408;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_3408 += Conj(ZD(gI2,j2))*ZD(gI1,j2);
   }
   tmp_3406 += tmp_3408;
   result += (-0.125*Sqr(g2)) * tmp_3405 * tmp_3406;
   std::complex<double> tmp_3409;
   std::complex<double> tmp_3411;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3411 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_3409 += tmp_3411;
   std::complex<double> tmp_3410;
   std::complex<double> tmp_3412;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_3412 += Conj(ZD(gI2,j2))*ZD(gI1,j2);
   }
   tmp_3410 += tmp_3412;
   result += (0.025*Sqr(gN)) * tmp_3409 * tmp_3410;
   std::complex<double> tmp_3413;
   std::complex<double> tmp_3415;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3415 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_3413 += tmp_3415;
   std::complex<double> tmp_3414;
   std::complex<double> tmp_3416;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_3416 += Conj(ZD(gI2,3 + j2))*ZD(gI1,3 + j2);
   }
   tmp_3414 += tmp_3416;
   result += (-0.05*Sqr(g1)) * tmp_3413 * tmp_3414;
   std::complex<double> tmp_3417;
   std::complex<double> tmp_3419;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3419 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_3417 += tmp_3419;
   std::complex<double> tmp_3418;
   std::complex<double> tmp_3420;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_3420 += Conj(ZD(gI2,3 + j2))*ZD(gI1,3 + j2);
   }
   tmp_3418 += tmp_3420;
   result += (0.05*Sqr(gN)) * tmp_3417 * tmp_3418;
   if (gO1 < 2) {
      std::complex<double> tmp_3421;
      std::complex<double> tmp_3422;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_3422 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
      }
      tmp_3421 += tmp_3422;
      result += (0.025*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_3421;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_3423;
      std::complex<double> tmp_3424;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_3424 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
      }
      tmp_3423 += tmp_3424;
      result += (0.125*KroneckerDelta(gO1,gO2)*Sqr(g2)) * tmp_3423;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_3425;
      std::complex<double> tmp_3426;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_3426 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
      }
      tmp_3425 += tmp_3426;
      result += (0.0375*KroneckerDelta(gO1,gO2)*Sqr(gN)) * tmp_3425;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_3427;
      std::complex<double> tmp_3428;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_3428 += Conj(ZD(gI2,3 + j1))*ZD(gI1,3 + j1);
      }
      tmp_3427 += tmp_3428;
      result += (0.05*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_3427;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_3429;
      std::complex<double> tmp_3430;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_3430 += Conj(ZD(gI2,3 + j1))*ZD(gI1,3 + j1);
      }
      tmp_3429 += tmp_3430;
      result += (0.075*KroneckerDelta(gO1,gO2)*Sqr(gN)) * tmp_3429;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_3431;
      std::complex<double> tmp_3432;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_3432 += Conj(ZD(gI2,j2))*ZD(gI1,j2);
      }
      tmp_3431 += tmp_3432;
      result += (0.025*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_3431;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_3433;
      std::complex<double> tmp_3434;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_3434 += Conj(ZD(gI2,j2))*ZD(gI1,j2);
      }
      tmp_3433 += tmp_3434;
      result += (0.125*KroneckerDelta(gO1,gO2)*Sqr(g2)) * tmp_3433;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_3435;
      std::complex<double> tmp_3436;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_3436 += Conj(ZD(gI2,j2))*ZD(gI1,j2);
      }
      tmp_3435 += tmp_3436;
      result += (0.0375*KroneckerDelta(gO1,gO2)*Sqr(gN)) * tmp_3435;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_3437;
      std::complex<double> tmp_3438;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_3438 += Conj(ZD(gI2,3 + j2))*ZD(gI1,3 + j2);
      }
      tmp_3437 += tmp_3438;
      result += (0.05*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_3437;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_3439;
      std::complex<double> tmp_3440;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_3440 += Conj(ZD(gI2,3 + j2))*ZD(gI1,3 + j2);
      }
      tmp_3439 += tmp_3440;
      result += (0.075*KroneckerDelta(gO1,gO2)*Sqr(gN)) * tmp_3439;
   }

   return result;
}

std::complex<double> CLASSNAME::CpUSHI0conjUSHI0conjSDXSDX(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_3441;
   std::complex<double> tmp_3443;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_3443 += Conj(ZDX(gI2,j1))*ZDX(gI1,j1);
   }
   tmp_3441 += tmp_3443;
   std::complex<double> tmp_3442;
   std::complex<double> tmp_3444;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_3444 += KroneckerDelta(gO1,2 + j2)*KroneckerDelta(gO2,2 + j2);
   }
   tmp_3442 += tmp_3444;
   result += (0.05*Sqr(g1)) * tmp_3441 * tmp_3442;
   std::complex<double> tmp_3445;
   std::complex<double> tmp_3447;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_3447 += Conj(ZDX(gI2,j1))*ZDX(gI1,j1);
   }
   tmp_3445 += tmp_3447;
   std::complex<double> tmp_3446;
   std::complex<double> tmp_3448;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_3448 += KroneckerDelta(gO1,2 + j2)*KroneckerDelta(gO2,2 + j2);
   }
   tmp_3446 += tmp_3448;
   result += (-0.05*Sqr(gN)) * tmp_3445 * tmp_3446;
   std::complex<double> tmp_3449;
   std::complex<double> tmp_3451;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_3451 += Conj(ZDX(gI2,3 + j1))*ZDX(gI1,3 + j1);
   }
   tmp_3449 += tmp_3451;
   std::complex<double> tmp_3450;
   std::complex<double> tmp_3452;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_3452 += KroneckerDelta(gO1,2 + j2)*KroneckerDelta(gO2,2 + j2);
   }
   tmp_3450 += tmp_3452;
   result += (-0.05*Sqr(g1)) * tmp_3449 * tmp_3450;
   std::complex<double> tmp_3453;
   std::complex<double> tmp_3455;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_3455 += Conj(ZDX(gI2,3 + j1))*ZDX(gI1,3 + j1);
   }
   tmp_3453 += tmp_3455;
   std::complex<double> tmp_3454;
   std::complex<double> tmp_3456;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_3456 += KroneckerDelta(gO1,2 + j2)*KroneckerDelta(gO2,2 + j2);
   }
   tmp_3454 += tmp_3456;
   result += (-0.075*Sqr(gN)) * tmp_3453 * tmp_3454;
   std::complex<double> tmp_3457;
   std::complex<double> tmp_3459;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3459 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_3457 += tmp_3459;
   std::complex<double> tmp_3458;
   std::complex<double> tmp_3460;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_3460 += Conj(ZDX(gI2,j2))*ZDX(gI1,j2);
   }
   tmp_3458 += tmp_3460;
   result += (0.05*Sqr(g1)) * tmp_3457 * tmp_3458;
   std::complex<double> tmp_3461;
   std::complex<double> tmp_3463;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3463 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_3461 += tmp_3463;
   std::complex<double> tmp_3462;
   std::complex<double> tmp_3464;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_3464 += Conj(ZDX(gI2,j2))*ZDX(gI1,j2);
   }
   tmp_3462 += tmp_3464;
   result += (-0.05*Sqr(gN)) * tmp_3461 * tmp_3462;
   std::complex<double> tmp_3465;
   std::complex<double> tmp_3467;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3467 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_3465 += tmp_3467;
   std::complex<double> tmp_3466;
   std::complex<double> tmp_3468;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_3468 += Conj(ZDX(gI2,3 + j2))*ZDX(gI1,3 + j2);
   }
   tmp_3466 += tmp_3468;
   result += (-0.05*Sqr(g1)) * tmp_3465 * tmp_3466;
   std::complex<double> tmp_3469;
   std::complex<double> tmp_3471;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3471 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_3469 += tmp_3471;
   std::complex<double> tmp_3470;
   std::complex<double> tmp_3472;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_3472 += Conj(ZDX(gI2,3 + j2))*ZDX(gI1,3 + j2);
   }
   tmp_3470 += tmp_3472;
   result += (-0.075*Sqr(gN)) * tmp_3469 * tmp_3470;
   if (gO1 < 2) {
      std::complex<double> tmp_3473;
      std::complex<double> tmp_3474;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_3474 += Conj(ZDX(gI2,j1))*ZDX(gI1,j1);
      }
      tmp_3473 += tmp_3474;
      result += (-0.05*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_3473;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_3475;
      std::complex<double> tmp_3476;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_3476 += Conj(ZDX(gI2,j1))*ZDX(gI1,j1);
      }
      tmp_3475 += tmp_3476;
      result += (-0.075*KroneckerDelta(gO1,gO2)*Sqr(gN)) * tmp_3475;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_3477;
      std::complex<double> tmp_3478;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_3478 += Conj(ZDX(gI2,3 + j1))*ZDX(gI1,3 + j1);
      }
      tmp_3477 += tmp_3478;
      result += (0.05*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_3477;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_3479;
      std::complex<double> tmp_3480;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_3480 += Conj(ZDX(gI2,3 + j1))*ZDX(gI1,3 + j1);
      }
      tmp_3479 += tmp_3480;
      result += (-0.1125*KroneckerDelta(gO1,gO2)*Sqr(gN)) * tmp_3479;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_3481;
      std::complex<double> tmp_3482;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_3482 += Conj(ZDX(gI2,j2))*ZDX(gI1,j2);
      }
      tmp_3481 += tmp_3482;
      result += (-0.05*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_3481;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_3483;
      std::complex<double> tmp_3484;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_3484 += Conj(ZDX(gI2,j2))*ZDX(gI1,j2);
      }
      tmp_3483 += tmp_3484;
      result += (-0.075*KroneckerDelta(gO1,gO2)*Sqr(gN)) * tmp_3483;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_3485;
      std::complex<double> tmp_3486;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_3486 += Conj(ZDX(gI2,3 + j2))*ZDX(gI1,3 + j2);
      }
      tmp_3485 += tmp_3486;
      result += (0.05*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_3485;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_3487;
      std::complex<double> tmp_3488;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_3488 += Conj(ZDX(gI2,3 + j2))*ZDX(gI1,3 + j2);
      }
      tmp_3487 += tmp_3488;
      result += (-0.1125*KroneckerDelta(gO1,gO2)*Sqr(gN)) * tmp_3487;
   }
   if (gO2 < 2) {
      std::complex<double> tmp_3489;
      std::complex<double> tmp_3490;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_3490 += Conj(ZDX(gI2,j1))*ZDX(gI1,3 + j1)*Kappa(j1,j1);
      }
      tmp_3489 += tmp_3490;
      result += (Conj(Lambda12(gO2,gO2))*KroneckerDelta(gO1,2 + gO2)) *
         tmp_3489;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_3491;
      std::complex<double> tmp_3492;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_3492 += Conj(ZDX(gI2,3 + j2))*Conj(Kappa(j2,j2))*ZDX(gI1,j2)
            ;
      }
      tmp_3491 += tmp_3492;
      result += (KroneckerDelta(2 + gO1,gO2)*Lambda12(gO1,gO1)) * tmp_3491;
   }

   return result;
}

std::complex<double> CLASSNAME::CpUSHI0conjUSHI0conjSeSe(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_3493;
   std::complex<double> tmp_3495;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_3495 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
   }
   tmp_3493 += tmp_3495;
   std::complex<double> tmp_3494;
   std::complex<double> tmp_3496;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_3496 += KroneckerDelta(gO1,2 + j2)*KroneckerDelta(gO2,2 + j2);
   }
   tmp_3494 += tmp_3496;
   result += (0.075*Sqr(g1)) * tmp_3493 * tmp_3494;
   std::complex<double> tmp_3497;
   std::complex<double> tmp_3499;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_3499 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
   }
   tmp_3497 += tmp_3499;
   std::complex<double> tmp_3498;
   std::complex<double> tmp_3500;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_3500 += KroneckerDelta(gO1,2 + j2)*KroneckerDelta(gO2,2 + j2);
   }
   tmp_3498 += tmp_3500;
   result += (-0.125*Sqr(g2)) * tmp_3497 * tmp_3498;
   std::complex<double> tmp_3501;
   std::complex<double> tmp_3503;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_3503 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
   }
   tmp_3501 += tmp_3503;
   std::complex<double> tmp_3502;
   std::complex<double> tmp_3504;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_3504 += KroneckerDelta(gO1,2 + j2)*KroneckerDelta(gO2,2 + j2);
   }
   tmp_3502 += tmp_3504;
   result += (0.05*Sqr(gN)) * tmp_3501 * tmp_3502;
   std::complex<double> tmp_3505;
   std::complex<double> tmp_3507;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_3507 += Conj(ZE(gI2,3 + j1))*ZE(gI1,3 + j1);
   }
   tmp_3505 += tmp_3507;
   std::complex<double> tmp_3506;
   std::complex<double> tmp_3508;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_3508 += KroneckerDelta(gO1,2 + j2)*KroneckerDelta(gO2,2 + j2);
   }
   tmp_3506 += tmp_3508;
   result += (-0.15*Sqr(g1)) * tmp_3505 * tmp_3506;
   std::complex<double> tmp_3509;
   std::complex<double> tmp_3511;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_3511 += Conj(ZE(gI2,3 + j1))*ZE(gI1,3 + j1);
   }
   tmp_3509 += tmp_3511;
   std::complex<double> tmp_3510;
   std::complex<double> tmp_3512;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_3512 += KroneckerDelta(gO1,2 + j2)*KroneckerDelta(gO2,2 + j2);
   }
   tmp_3510 += tmp_3512;
   result += (0.025*Sqr(gN)) * tmp_3509 * tmp_3510;
   std::complex<double> tmp_3513;
   std::complex<double> tmp_3515;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3515 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_3513 += tmp_3515;
   std::complex<double> tmp_3514;
   std::complex<double> tmp_3516;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_3516 += Conj(ZE(gI2,j2))*ZE(gI1,j2);
   }
   tmp_3514 += tmp_3516;
   result += (0.075*Sqr(g1)) * tmp_3513 * tmp_3514;
   std::complex<double> tmp_3517;
   std::complex<double> tmp_3519;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3519 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_3517 += tmp_3519;
   std::complex<double> tmp_3518;
   std::complex<double> tmp_3520;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_3520 += Conj(ZE(gI2,j2))*ZE(gI1,j2);
   }
   tmp_3518 += tmp_3520;
   result += (-0.125*Sqr(g2)) * tmp_3517 * tmp_3518;
   std::complex<double> tmp_3521;
   std::complex<double> tmp_3523;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3523 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_3521 += tmp_3523;
   std::complex<double> tmp_3522;
   std::complex<double> tmp_3524;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_3524 += Conj(ZE(gI2,j2))*ZE(gI1,j2);
   }
   tmp_3522 += tmp_3524;
   result += (0.05*Sqr(gN)) * tmp_3521 * tmp_3522;
   std::complex<double> tmp_3525;
   std::complex<double> tmp_3527;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3527 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_3525 += tmp_3527;
   std::complex<double> tmp_3526;
   std::complex<double> tmp_3528;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_3528 += Conj(ZE(gI2,3 + j2))*ZE(gI1,3 + j2);
   }
   tmp_3526 += tmp_3528;
   result += (-0.15*Sqr(g1)) * tmp_3525 * tmp_3526;
   std::complex<double> tmp_3529;
   std::complex<double> tmp_3531;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3531 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_3529 += tmp_3531;
   std::complex<double> tmp_3530;
   std::complex<double> tmp_3532;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_3532 += Conj(ZE(gI2,3 + j2))*ZE(gI1,3 + j2);
   }
   tmp_3530 += tmp_3532;
   result += (0.025*Sqr(gN)) * tmp_3529 * tmp_3530;
   if (gO1 < 2) {
      std::complex<double> tmp_3533;
      std::complex<double> tmp_3534;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_3534 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
      }
      tmp_3533 += tmp_3534;
      result += (-0.075*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_3533;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_3535;
      std::complex<double> tmp_3536;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_3536 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
      }
      tmp_3535 += tmp_3536;
      result += (0.125*KroneckerDelta(gO1,gO2)*Sqr(g2)) * tmp_3535;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_3537;
      std::complex<double> tmp_3538;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_3538 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
      }
      tmp_3537 += tmp_3538;
      result += (0.075*KroneckerDelta(gO1,gO2)*Sqr(gN)) * tmp_3537;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_3539;
      std::complex<double> tmp_3540;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_3540 += Conj(ZE(gI2,3 + j1))*ZE(gI1,3 + j1);
      }
      tmp_3539 += tmp_3540;
      result += (0.15*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_3539;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_3541;
      std::complex<double> tmp_3542;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_3542 += Conj(ZE(gI2,3 + j1))*ZE(gI1,3 + j1);
      }
      tmp_3541 += tmp_3542;
      result += (0.0375*KroneckerDelta(gO1,gO2)*Sqr(gN)) * tmp_3541;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_3543;
      std::complex<double> tmp_3544;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_3544 += Conj(ZE(gI2,j2))*ZE(gI1,j2);
      }
      tmp_3543 += tmp_3544;
      result += (-0.075*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_3543;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_3545;
      std::complex<double> tmp_3546;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_3546 += Conj(ZE(gI2,j2))*ZE(gI1,j2);
      }
      tmp_3545 += tmp_3546;
      result += (0.125*KroneckerDelta(gO1,gO2)*Sqr(g2)) * tmp_3545;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_3547;
      std::complex<double> tmp_3548;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_3548 += Conj(ZE(gI2,j2))*ZE(gI1,j2);
      }
      tmp_3547 += tmp_3548;
      result += (0.075*KroneckerDelta(gO1,gO2)*Sqr(gN)) * tmp_3547;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_3549;
      std::complex<double> tmp_3550;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_3550 += Conj(ZE(gI2,3 + j2))*ZE(gI1,3 + j2);
      }
      tmp_3549 += tmp_3550;
      result += (0.15*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_3549;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_3551;
      std::complex<double> tmp_3552;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_3552 += Conj(ZE(gI2,3 + j2))*ZE(gI1,3 + j2);
      }
      tmp_3551 += tmp_3552;
      result += (0.0375*KroneckerDelta(gO1,gO2)*Sqr(gN)) * tmp_3551;
   }

   return result;
}

std::complex<double> CLASSNAME::CpUSHI0conjUSHI0conjSuSu(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_3553;
   std::complex<double> tmp_3555;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_3555 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
   }
   tmp_3553 += tmp_3555;
   std::complex<double> tmp_3554;
   std::complex<double> tmp_3556;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_3556 += KroneckerDelta(gO1,2 + j2)*KroneckerDelta(gO2,2 + j2);
   }
   tmp_3554 += tmp_3556;
   result += (-0.025*Sqr(g1)) * tmp_3553 * tmp_3554;
   std::complex<double> tmp_3557;
   std::complex<double> tmp_3559;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_3559 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
   }
   tmp_3557 += tmp_3559;
   std::complex<double> tmp_3558;
   std::complex<double> tmp_3560;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_3560 += KroneckerDelta(gO1,2 + j2)*KroneckerDelta(gO2,2 + j2);
   }
   tmp_3558 += tmp_3560;
   result += (0.125*Sqr(g2)) * tmp_3557 * tmp_3558;
   std::complex<double> tmp_3561;
   std::complex<double> tmp_3563;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_3563 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
   }
   tmp_3561 += tmp_3563;
   std::complex<double> tmp_3562;
   std::complex<double> tmp_3564;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_3564 += KroneckerDelta(gO1,2 + j2)*KroneckerDelta(gO2,2 + j2);
   }
   tmp_3562 += tmp_3564;
   result += (0.025*Sqr(gN)) * tmp_3561 * tmp_3562;
   std::complex<double> tmp_3565;
   std::complex<double> tmp_3567;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_3567 += Conj(ZU(gI2,3 + j1))*ZU(gI1,3 + j1);
   }
   tmp_3565 += tmp_3567;
   std::complex<double> tmp_3566;
   std::complex<double> tmp_3568;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_3568 += KroneckerDelta(gO1,2 + j2)*KroneckerDelta(gO2,2 + j2);
   }
   tmp_3566 += tmp_3568;
   result += (0.1*Sqr(g1)) * tmp_3565 * tmp_3566;
   std::complex<double> tmp_3569;
   std::complex<double> tmp_3571;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_3571 += Conj(ZU(gI2,3 + j1))*ZU(gI1,3 + j1);
   }
   tmp_3569 += tmp_3571;
   std::complex<double> tmp_3570;
   std::complex<double> tmp_3572;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_3572 += KroneckerDelta(gO1,2 + j2)*KroneckerDelta(gO2,2 + j2);
   }
   tmp_3570 += tmp_3572;
   result += (0.025*Sqr(gN)) * tmp_3569 * tmp_3570;
   std::complex<double> tmp_3573;
   std::complex<double> tmp_3575;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3575 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_3573 += tmp_3575;
   std::complex<double> tmp_3574;
   std::complex<double> tmp_3576;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_3576 += Conj(ZU(gI2,j2))*ZU(gI1,j2);
   }
   tmp_3574 += tmp_3576;
   result += (-0.025*Sqr(g1)) * tmp_3573 * tmp_3574;
   std::complex<double> tmp_3577;
   std::complex<double> tmp_3579;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3579 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_3577 += tmp_3579;
   std::complex<double> tmp_3578;
   std::complex<double> tmp_3580;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_3580 += Conj(ZU(gI2,j2))*ZU(gI1,j2);
   }
   tmp_3578 += tmp_3580;
   result += (0.125*Sqr(g2)) * tmp_3577 * tmp_3578;
   std::complex<double> tmp_3581;
   std::complex<double> tmp_3583;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3583 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_3581 += tmp_3583;
   std::complex<double> tmp_3582;
   std::complex<double> tmp_3584;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_3584 += Conj(ZU(gI2,j2))*ZU(gI1,j2);
   }
   tmp_3582 += tmp_3584;
   result += (0.025*Sqr(gN)) * tmp_3581 * tmp_3582;
   std::complex<double> tmp_3585;
   std::complex<double> tmp_3587;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3587 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_3585 += tmp_3587;
   std::complex<double> tmp_3586;
   std::complex<double> tmp_3588;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_3588 += Conj(ZU(gI2,3 + j2))*ZU(gI1,3 + j2);
   }
   tmp_3586 += tmp_3588;
   result += (0.1*Sqr(g1)) * tmp_3585 * tmp_3586;
   std::complex<double> tmp_3589;
   std::complex<double> tmp_3591;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3591 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_3589 += tmp_3591;
   std::complex<double> tmp_3590;
   std::complex<double> tmp_3592;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_3592 += Conj(ZU(gI2,3 + j2))*ZU(gI1,3 + j2);
   }
   tmp_3590 += tmp_3592;
   result += (0.025*Sqr(gN)) * tmp_3589 * tmp_3590;
   if (gO1 < 2) {
      std::complex<double> tmp_3593;
      std::complex<double> tmp_3594;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_3594 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
      }
      tmp_3593 += tmp_3594;
      result += (0.025*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_3593;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_3595;
      std::complex<double> tmp_3596;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_3596 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
      }
      tmp_3595 += tmp_3596;
      result += (-0.125*KroneckerDelta(gO1,gO2)*Sqr(g2)) * tmp_3595;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_3597;
      std::complex<double> tmp_3598;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_3598 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
      }
      tmp_3597 += tmp_3598;
      result += (0.0375*KroneckerDelta(gO1,gO2)*Sqr(gN)) * tmp_3597;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_3599;
      std::complex<double> tmp_3600;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_3600 += Conj(ZU(gI2,3 + j1))*ZU(gI1,3 + j1);
      }
      tmp_3599 += tmp_3600;
      result += (-0.1*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_3599;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_3601;
      std::complex<double> tmp_3602;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_3602 += Conj(ZU(gI2,3 + j1))*ZU(gI1,3 + j1);
      }
      tmp_3601 += tmp_3602;
      result += (0.0375*KroneckerDelta(gO1,gO2)*Sqr(gN)) * tmp_3601;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_3603;
      std::complex<double> tmp_3604;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_3604 += Conj(ZU(gI2,j2))*ZU(gI1,j2);
      }
      tmp_3603 += tmp_3604;
      result += (0.025*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_3603;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_3605;
      std::complex<double> tmp_3606;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_3606 += Conj(ZU(gI2,j2))*ZU(gI1,j2);
      }
      tmp_3605 += tmp_3606;
      result += (-0.125*KroneckerDelta(gO1,gO2)*Sqr(g2)) * tmp_3605;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_3607;
      std::complex<double> tmp_3608;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_3608 += Conj(ZU(gI2,j2))*ZU(gI1,j2);
      }
      tmp_3607 += tmp_3608;
      result += (0.0375*KroneckerDelta(gO1,gO2)*Sqr(gN)) * tmp_3607;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_3609;
      std::complex<double> tmp_3610;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_3610 += Conj(ZU(gI2,3 + j2))*ZU(gI1,3 + j2);
      }
      tmp_3609 += tmp_3610;
      result += (-0.1*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_3609;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_3611;
      std::complex<double> tmp_3612;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_3612 += Conj(ZU(gI2,3 + j2))*ZU(gI1,3 + j2);
      }
      tmp_3611 += tmp_3612;
      result += (0.0375*KroneckerDelta(gO1,gO2)*Sqr(gN)) * tmp_3611;
   }

   return result;
}

std::complex<double> CLASSNAME::CpconjUSHI0VZSHI0(unsigned gO2, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_3613;
   std::complex<double> tmp_3614;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3614 += Conj(UHI0(gI2,2 + j1))*KroneckerDelta(gO2,2 + j1);
   }
   tmp_3613 += tmp_3614;
   result += (0.5*g2*Cos(ThetaW())*Cos(ThetaWp())) * tmp_3613;
   std::complex<double> tmp_3615;
   std::complex<double> tmp_3616;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3616 += Conj(UHI0(gI2,2 + j1))*KroneckerDelta(gO2,2 + j1);
   }
   tmp_3615 += tmp_3616;
   result += (0.3872983346207417*g1*Cos(ThetaWp())*Sin(ThetaW())) * tmp_3615;
   std::complex<double> tmp_3617;
   std::complex<double> tmp_3618;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3618 += Conj(UHI0(gI2,2 + j1))*KroneckerDelta(gO2,2 + j1);
   }
   tmp_3617 += tmp_3618;
   result += (0.31622776601683794*gN*Sin(ThetaWp())) * tmp_3617;
   if (gO2 < 2) {
      result += 0.5*g2*Conj(UHI0(gI2,gO2))*Cos(ThetaW())*Cos(ThetaWp());
   }
   if (gO2 < 2) {
      result += 0.3872983346207417*g1*Conj(UHI0(gI2,gO2))*Cos(ThetaWp())*Sin
         (ThetaW());
   }
   if (gO2 < 2) {
      result += -0.4743416490252569*gN*Conj(UHI0(gI2,gO2))*Sin(ThetaWp());
   }

   return result;
}

std::complex<double> CLASSNAME::CpconjUSHI0VZpSHI0(unsigned gO2, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_3619;
   std::complex<double> tmp_3620;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3620 += Conj(UHI0(gI2,2 + j1))*KroneckerDelta(gO2,2 + j1);
   }
   tmp_3619 += tmp_3620;
   result += (0.31622776601683794*gN*Cos(ThetaWp())) * tmp_3619;
   std::complex<double> tmp_3621;
   std::complex<double> tmp_3622;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3622 += Conj(UHI0(gI2,2 + j1))*KroneckerDelta(gO2,2 + j1);
   }
   tmp_3621 += tmp_3622;
   result += (-0.5*g2*Cos(ThetaW())*Sin(ThetaWp())) * tmp_3621;
   std::complex<double> tmp_3623;
   std::complex<double> tmp_3624;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3624 += Conj(UHI0(gI2,2 + j1))*KroneckerDelta(gO2,2 + j1);
   }
   tmp_3623 += tmp_3624;
   result += (-0.3872983346207417*g1*Sin(ThetaW())*Sin(ThetaWp())) * tmp_3623;
   if (gO2 < 2) {
      result += -0.4743416490252569*gN*Conj(UHI0(gI2,gO2))*Cos(ThetaWp());
   }
   if (gO2 < 2) {
      result += -0.5*g2*Conj(UHI0(gI2,gO2))*Cos(ThetaW())*Sin(ThetaWp());
   }
   if (gO2 < 2) {
      result += -0.3872983346207417*g1*Conj(UHI0(gI2,gO2))*Sin(ThetaW())*Sin
         (ThetaWp());
   }

   return result;
}

std::complex<double> CLASSNAME::CpconjUSHI0conjVWmSHIp(unsigned gO2, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_3625;
   std::complex<double> tmp_3626;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3626 += Conj(UHIp(gI2,2 + j1))*KroneckerDelta(gO2,2 + j1);
   }
   tmp_3625 += tmp_3626;
   result += (-0.7071067811865475*g2) * tmp_3625;
   if (gO2 < 2) {
      result += 0.7071067811865475*g2*Conj(UHIp(gI2,gO2));
   }

   return result;
}

std::complex<double> CLASSNAME::CpUSHIpconjUSHIpVZVZ(unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   std::complex<double> tmp_3627;
   std::complex<double> tmp_3628;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3628 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_3627 += tmp_3628;
   result += (0.5*Sqr(g2)*Sqr(Cos(ThetaW()))*Sqr(Cos(ThetaWp()))) * tmp_3627;
   std::complex<double> tmp_3629;
   std::complex<double> tmp_3630;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3630 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_3629 += tmp_3630;
   result += (-0.7745966692414834*g1*g2*Cos(ThetaW())*Sin(ThetaW())*Sqr(Cos(
      ThetaWp()))) * tmp_3629;
   std::complex<double> tmp_3631;
   std::complex<double> tmp_3632;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3632 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_3631 += tmp_3632;
   result += (0.3*Sqr(g1)*Sqr(Cos(ThetaWp()))*Sqr(Sin(ThetaW()))) * tmp_3631;
   std::complex<double> tmp_3633;
   std::complex<double> tmp_3634;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3634 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_3633 += tmp_3634;
   result += (-0.6324555320336759*g2*gN*Cos(ThetaW())*Cos(ThetaWp())*Sin(
      ThetaWp())) * tmp_3633;
   std::complex<double> tmp_3635;
   std::complex<double> tmp_3636;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3636 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_3635 += tmp_3636;
   result += (0.2*Sqr(gN)*Sqr(Sin(ThetaWp()))) * tmp_3635;
   std::complex<double> tmp_3637;
   std::complex<double> tmp_3638;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3638 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_3637 += tmp_3638;
   result += (0.2449489742783178*g1*gN*Sin(ThetaW())*Sin(2*ThetaWp())) *
      tmp_3637;
   if (gO1 < 2) {
      result += 0.5*KroneckerDelta(gO1,gO2)*Sqr(g2)*Sqr(Cos(ThetaW()))*Sqr(
         Cos(ThetaWp()));
   }
   if (gO1 < 2) {
      result += -0.7745966692414834*g1*g2*Cos(ThetaW())*KroneckerDelta(gO1,
         gO2)*Sin(ThetaW())*Sqr(Cos(ThetaWp()));
   }
   if (gO1 < 2) {
      result += 0.3*KroneckerDelta(gO1,gO2)*Sqr(g1)*Sqr(Cos(ThetaWp()))*Sqr(
         Sin(ThetaW()));
   }
   if (gO1 < 2) {
      result += 0.9486832980505138*g2*gN*Cos(ThetaW())*Cos(ThetaWp())*
         KroneckerDelta(gO1,gO2)*Sin(ThetaWp());
   }
   if (gO1 < 2) {
      result += -0.7348469228349533*g1*gN*Cos(ThetaWp())*KroneckerDelta(gO1,
         gO2)*Sin(ThetaW())*Sin(ThetaWp());
   }
   if (gO1 < 2) {
      result += 0.45*KroneckerDelta(gO1,gO2)*Sqr(gN)*Sqr(Sin(ThetaWp()));
   }

   return result;
}

std::complex<double> CLASSNAME::CpUSHIpconjUSHIpVZpVZp(unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   std::complex<double> tmp_3639;
   std::complex<double> tmp_3640;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3640 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_3639 += tmp_3640;
   result += (0.2*Sqr(gN)*Sqr(Cos(ThetaWp()))) * tmp_3639;
   std::complex<double> tmp_3641;
   std::complex<double> tmp_3642;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3642 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_3641 += tmp_3642;
   result += (-0.4898979485566356*g1*gN*Cos(ThetaWp())*Sin(ThetaW())*Sin(
      ThetaWp())) * tmp_3641;
   std::complex<double> tmp_3643;
   std::complex<double> tmp_3644;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3644 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_3643 += tmp_3644;
   result += (0.5*Sqr(g2)*Sqr(Cos(ThetaW()))*Sqr(Sin(ThetaWp()))) * tmp_3643;
   std::complex<double> tmp_3645;
   std::complex<double> tmp_3646;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3646 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_3645 += tmp_3646;
   result += (-0.7745966692414834*g1*g2*Cos(ThetaW())*Sin(ThetaW())*Sqr(Sin(
      ThetaWp()))) * tmp_3645;
   std::complex<double> tmp_3647;
   std::complex<double> tmp_3648;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3648 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_3647 += tmp_3648;
   result += (0.3*Sqr(g1)*Sqr(Sin(ThetaW()))*Sqr(Sin(ThetaWp()))) * tmp_3647;
   std::complex<double> tmp_3649;
   std::complex<double> tmp_3650;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3650 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_3649 += tmp_3650;
   result += (0.31622776601683794*g2*gN*Cos(ThetaW())*Sin(2*ThetaWp())) *
      tmp_3649;
   if (gO1 < 2) {
      result += 0.45*KroneckerDelta(gO1,gO2)*Sqr(gN)*Sqr(Cos(ThetaWp()));
   }
   if (gO1 < 2) {
      result += 0.5*KroneckerDelta(gO1,gO2)*Sqr(g2)*Sqr(Cos(ThetaW()))*Sqr(
         Sin(ThetaWp()));
   }
   if (gO1 < 2) {
      result += -0.7745966692414834*g1*g2*Cos(ThetaW())*KroneckerDelta(gO1,
         gO2)*Sin(ThetaW())*Sqr(Sin(ThetaWp()));
   }
   if (gO1 < 2) {
      result += 0.3*KroneckerDelta(gO1,gO2)*Sqr(g1)*Sqr(Sin(ThetaW()))*Sqr(
         Sin(ThetaWp()));
   }
   if (gO1 < 2) {
      result += -0.4743416490252569*g2*gN*Cos(ThetaW())*KroneckerDelta(gO1,
         gO2)*Sin(2*ThetaWp());
   }
   if (gO1 < 2) {
      result += 0.36742346141747667*g1*gN*KroneckerDelta(gO1,gO2)*Sin(ThetaW
         ())*Sin(2*ThetaWp());
   }

   return result;
}

double CLASSNAME::CpUSHIpconjUSHIpconjVWmVWm(unsigned gO1, unsigned gO2) const
{
   double result = 0.0;

   result = 0.5*KroneckerDelta(gO1,gO2)*Sqr(g2);

   return result;
}

std::complex<double> CLASSNAME::CpUSHIpconjUSHIpconjHpmHpm(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_3651;
   std::complex<double> tmp_3652;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3652 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_3651 += tmp_3652;
   result += (0.15*Sqr(g1)*ZP(gI1,0)*ZP(gI2,0)) * tmp_3651;
   std::complex<double> tmp_3653;
   std::complex<double> tmp_3654;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3654 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_3653 += tmp_3654;
   result += (0.25*Sqr(g2)*ZP(gI1,0)*ZP(gI2,0)) * tmp_3653;
   std::complex<double> tmp_3655;
   std::complex<double> tmp_3656;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3656 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_3655 += tmp_3656;
   result += (-0.15*Sqr(gN)*ZP(gI1,0)*ZP(gI2,0)) * tmp_3655;
   if (gO1 < 2) {
      result += -0.15*KroneckerDelta(gO1,gO2)*Sqr(g1)*ZP(gI1,0)*ZP(gI2,0);
   }
   if (gO1 < 2) {
      result += -0.25*KroneckerDelta(gO1,gO2)*Sqr(g2)*ZP(gI1,0)*ZP(gI2,0);
   }
   if (gO1 < 2) {
      result += -0.225*KroneckerDelta(gO1,gO2)*Sqr(gN)*ZP(gI1,0)*ZP(gI2,0);
   }
   if (gO2 < 2) {
      result += -(Conj(Lambda12(gO2,gO2))*KroneckerDelta(gO1,2 + gO2)*
         Lambdax*ZP(gI1,1)*ZP(gI2,0));
   }
   std::complex<double> tmp_3657;
   std::complex<double> tmp_3658;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3658 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_3657 += tmp_3658;
   result += (-0.15*Sqr(g1)*ZP(gI1,1)*ZP(gI2,1)) * tmp_3657;
   std::complex<double> tmp_3659;
   std::complex<double> tmp_3660;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3660 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_3659 += tmp_3660;
   result += (-0.25*Sqr(g2)*ZP(gI1,1)*ZP(gI2,1)) * tmp_3659;
   std::complex<double> tmp_3661;
   std::complex<double> tmp_3662;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3662 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_3661 += tmp_3662;
   result += (-0.1*Sqr(gN)*ZP(gI1,1)*ZP(gI2,1)) * tmp_3661;
   if (gO1 < 2) {
      result += 0.15*KroneckerDelta(gO1,gO2)*Sqr(g1)*ZP(gI1,1)*ZP(gI2,1);
   }
   if (gO1 < 2) {
      result += 0.25*KroneckerDelta(gO1,gO2)*Sqr(g2)*ZP(gI1,1)*ZP(gI2,1);
   }
   if (gO1 < 2) {
      result += -0.15*KroneckerDelta(gO1,gO2)*Sqr(gN)*ZP(gI1,1)*ZP(gI2,1);
   }
   if (gO1 < 2) {
      result += -(Conj(Lambdax)*KroneckerDelta(2 + gO1,gO2)*ZP(gI1,0)*ZP(gI2
         ,1)*Lambda12(gO1,gO1));
   }

   return result;
}

std::complex<double> CLASSNAME::CpUSHIpconjUSHIpconjSHp0SHp0(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_3663;
   std::complex<double> tmp_3664;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3664 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_3663 += tmp_3664;
   result += (0.15*Conj(UHp0(gI2,0))*Sqr(g1)*UHp0(gI1,0)) * tmp_3663;
   std::complex<double> tmp_3665;
   std::complex<double> tmp_3666;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3666 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_3665 += tmp_3666;
   result += (-0.25*Conj(UHp0(gI2,0))*Sqr(g2)*UHp0(gI1,0)) * tmp_3665;
   std::complex<double> tmp_3667;
   std::complex<double> tmp_3668;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3668 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_3667 += tmp_3668;
   result += (0.1*Conj(UHp0(gI2,0))*Sqr(gN)*UHp0(gI1,0)) * tmp_3667;
   if (gO1 < 2) {
      result += -0.15*Conj(UHp0(gI2,0))*KroneckerDelta(gO1,gO2)*Sqr(g1)*UHp0
         (gI1,0);
   }
   if (gO1 < 2) {
      result += 0.25*Conj(UHp0(gI2,0))*KroneckerDelta(gO1,gO2)*Sqr(g2)*UHp0(
         gI1,0);
   }
   if (gO1 < 2) {
      result += 0.15*Conj(UHp0(gI2,0))*KroneckerDelta(gO1,gO2)*Sqr(gN)*UHp0(
         gI1,0);
   }
   std::complex<double> tmp_3669;
   std::complex<double> tmp_3670;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3670 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_3669 += tmp_3670;
   result += (-0.15*Conj(UHp0(gI2,1))*Sqr(g1)*UHp0(gI1,1)) * tmp_3669;
   std::complex<double> tmp_3671;
   std::complex<double> tmp_3672;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3672 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_3671 += tmp_3672;
   result += (0.25*Conj(UHp0(gI2,1))*Sqr(g2)*UHp0(gI1,1)) * tmp_3671;
   std::complex<double> tmp_3673;
   std::complex<double> tmp_3674;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3674 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_3673 += tmp_3674;
   result += (-0.1*Conj(UHp0(gI2,1))*Sqr(gN)*UHp0(gI1,1)) * tmp_3673;
   if (gO1 < 2) {
      result += 0.15*Conj(UHp0(gI2,1))*KroneckerDelta(gO1,gO2)*Sqr(g1)*UHp0(
         gI1,1);
   }
   if (gO1 < 2) {
      result += -0.25*Conj(UHp0(gI2,1))*KroneckerDelta(gO1,gO2)*Sqr(g2)*UHp0
         (gI1,1);
   }
   if (gO1 < 2) {
      result += -0.15*Conj(UHp0(gI2,1))*KroneckerDelta(gO1,gO2)*Sqr(gN)*UHp0
         (gI1,1);
   }

   return result;
}

std::complex<double> CLASSNAME::CpUSHIpconjUSHIpconjSHppSHpp(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_3675;
   std::complex<double> tmp_3676;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3676 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_3675 += tmp_3676;
   result += (0.15*Conj(UHpp(gI2,0))*Sqr(g1)*UHpp(gI1,0)) * tmp_3675;
   std::complex<double> tmp_3677;
   std::complex<double> tmp_3678;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3678 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_3677 += tmp_3678;
   result += (0.25*Conj(UHpp(gI2,0))*Sqr(g2)*UHpp(gI1,0)) * tmp_3677;
   std::complex<double> tmp_3679;
   std::complex<double> tmp_3680;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3680 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_3679 += tmp_3680;
   result += (0.1*Conj(UHpp(gI2,0))*Sqr(gN)*UHpp(gI1,0)) * tmp_3679;
   if (gO1 < 2) {
      result += -0.15*Conj(UHpp(gI2,0))*KroneckerDelta(gO1,gO2)*Sqr(g1)*UHpp
         (gI1,0);
   }
   if (gO1 < 2) {
      result += -0.25*Conj(UHpp(gI2,0))*KroneckerDelta(gO1,gO2)*Sqr(g2)*UHpp
         (gI1,0);
   }
   if (gO1 < 2) {
      result += 0.15*Conj(UHpp(gI2,0))*KroneckerDelta(gO1,gO2)*Sqr(gN)*UHpp(
         gI1,0);
   }
   std::complex<double> tmp_3681;
   std::complex<double> tmp_3682;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3682 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_3681 += tmp_3682;
   result += (-0.15*Conj(UHpp(gI2,1))*Sqr(g1)*UHpp(gI1,1)) * tmp_3681;
   std::complex<double> tmp_3683;
   std::complex<double> tmp_3684;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3684 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_3683 += tmp_3684;
   result += (-0.25*Conj(UHpp(gI2,1))*Sqr(g2)*UHpp(gI1,1)) * tmp_3683;
   std::complex<double> tmp_3685;
   std::complex<double> tmp_3686;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3686 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_3685 += tmp_3686;
   result += (-0.1*Conj(UHpp(gI2,1))*Sqr(gN)*UHpp(gI1,1)) * tmp_3685;
   if (gO1 < 2) {
      result += 0.15*Conj(UHpp(gI2,1))*KroneckerDelta(gO1,gO2)*Sqr(g1)*UHpp(
         gI1,1);
   }
   if (gO1 < 2) {
      result += 0.25*Conj(UHpp(gI2,1))*KroneckerDelta(gO1,gO2)*Sqr(g2)*UHpp(
         gI1,1);
   }
   if (gO1 < 2) {
      result += -0.15*Conj(UHpp(gI2,1))*KroneckerDelta(gO1,gO2)*Sqr(gN)*UHpp
         (gI1,1);
   }

   return result;
}

std::complex<double> CLASSNAME::CpUSHIpconjUSHIpconjSSI0SSI0(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_3687;
   std::complex<double> tmp_3688;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3688 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_3687 += tmp_3688;
   result += (0.25*KroneckerDelta(gI1,gI2)*Sqr(gN)) * tmp_3687;
   if (gO1 < 2) {
      result += 0.375*KroneckerDelta(gI1,gI2)*KroneckerDelta(gO1,gO2)*Sqr(gN
         );
   }

   return result;
}

std::complex<double> CLASSNAME::CpUSHIpconjUSHIpAhAh(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_3689;
   std::complex<double> tmp_3690;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3690 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_3689 += tmp_3690;
   result += (0.15*Sqr(g1)*ZA(gI1,0)*ZA(gI2,0)) * tmp_3689;
   std::complex<double> tmp_3691;
   std::complex<double> tmp_3692;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3692 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_3691 += tmp_3692;
   result += (-0.25*Sqr(g2)*ZA(gI1,0)*ZA(gI2,0)) * tmp_3691;
   std::complex<double> tmp_3693;
   std::complex<double> tmp_3694;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3694 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_3693 += tmp_3694;
   result += (-0.15*Sqr(gN)*ZA(gI1,0)*ZA(gI2,0)) * tmp_3693;
   if (gO1 < 2) {
      result += -0.15*KroneckerDelta(gO1,gO2)*Sqr(g1)*ZA(gI1,0)*ZA(gI2,0);
   }
   if (gO1 < 2) {
      result += 0.25*KroneckerDelta(gO1,gO2)*Sqr(g2)*ZA(gI1,0)*ZA(gI2,0);
   }
   if (gO1 < 2) {
      result += -0.225*KroneckerDelta(gO1,gO2)*Sqr(gN)*ZA(gI1,0)*ZA(gI2,0);
   }
   if (gO2 < 2) {
      result += -0.5*Conj(Lambda12(gO2,gO2))*KroneckerDelta(gO1,2 + gO2)*
         Lambdax*ZA(gI1,1)*ZA(gI2,0);
   }
   if (gO2 < 2) {
      result += -0.5*Conj(Lambda12(gO2,gO2))*KroneckerDelta(gO1,2 + gO2)*
         Lambdax*ZA(gI1,0)*ZA(gI2,1);
   }
   std::complex<double> tmp_3695;
   std::complex<double> tmp_3696;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3696 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_3695 += tmp_3696;
   result += (-0.15*Sqr(g1)*ZA(gI1,1)*ZA(gI2,1)) * tmp_3695;
   std::complex<double> tmp_3697;
   std::complex<double> tmp_3698;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3698 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_3697 += tmp_3698;
   result += (0.25*Sqr(g2)*ZA(gI1,1)*ZA(gI2,1)) * tmp_3697;
   std::complex<double> tmp_3699;
   std::complex<double> tmp_3700;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3700 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_3699 += tmp_3700;
   result += (-0.1*Sqr(gN)*ZA(gI1,1)*ZA(gI2,1)) * tmp_3699;
   if (gO1 < 2) {
      result += 0.15*KroneckerDelta(gO1,gO2)*Sqr(g1)*ZA(gI1,1)*ZA(gI2,1);
   }
   if (gO1 < 2) {
      result += -0.25*KroneckerDelta(gO1,gO2)*Sqr(g2)*ZA(gI1,1)*ZA(gI2,1);
   }
   if (gO1 < 2) {
      result += -0.15*KroneckerDelta(gO1,gO2)*Sqr(gN)*ZA(gI1,1)*ZA(gI2,1);
   }
   std::complex<double> tmp_3701;
   std::complex<double> tmp_3702;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3702 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_3701 += tmp_3702;
   result += (0.25*Sqr(gN)*ZA(gI1,2)*ZA(gI2,2)) * tmp_3701;
   std::complex<double> tmp_3703;
   std::complex<double> tmp_3704;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_3704 += AbsSqr(Lambda12(j2,j2))*KroneckerDelta(gO1,2 + j2)*
         KroneckerDelta(gO2,2 + j2);
   }
   tmp_3703 += tmp_3704;
   result += (-(ZA(gI1,2)*ZA(gI2,2))) * tmp_3703;
   if (gO1 < 2) {
      result += 0.375*KroneckerDelta(gO1,gO2)*Sqr(gN)*ZA(gI1,2)*ZA(gI2,2);
   }
   if (gO1 < 2) {
      result += -0.5*Conj(Lambdax)*KroneckerDelta(2 + gO1,gO2)*ZA(gI1,1)*ZA(
         gI2,0)*Lambda12(gO1,gO1);
   }
   if (gO1 < 2) {
      result += -0.5*Conj(Lambdax)*KroneckerDelta(2 + gO1,gO2)*ZA(gI1,0)*ZA(
         gI2,1)*Lambda12(gO1,gO1);
   }
   if (gO1 < 2) {
      result += -(AbsSqr(Lambda12(gO1,gO1))*KroneckerDelta(gO1,gO2)*ZA(gI1,2
         )*ZA(gI2,2));
   }

   return result;
}

std::complex<double> CLASSNAME::CpUSHIpconjUSHIpconjSvSv(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_3705;
   std::complex<double> tmp_3706;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3706 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_3705 += tmp_3706;
   result += (0.15*KroneckerDelta(gI1,gI2)*Sqr(g1)) * tmp_3705;
   std::complex<double> tmp_3707;
   std::complex<double> tmp_3708;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3708 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_3707 += tmp_3708;
   result += (-0.25*KroneckerDelta(gI1,gI2)*Sqr(g2)) * tmp_3707;
   std::complex<double> tmp_3709;
   std::complex<double> tmp_3710;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3710 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_3709 += tmp_3710;
   result += (0.1*KroneckerDelta(gI1,gI2)*Sqr(gN)) * tmp_3709;
   if (gO1 < 2) {
      result += -0.15*KroneckerDelta(gI1,gI2)*KroneckerDelta(gO1,gO2)*Sqr(g1
         );
   }
   if (gO1 < 2) {
      result += 0.25*KroneckerDelta(gI1,gI2)*KroneckerDelta(gO1,gO2)*Sqr(g2)
         ;
   }
   if (gO1 < 2) {
      result += 0.15*KroneckerDelta(gI1,gI2)*KroneckerDelta(gO1,gO2)*Sqr(gN)
         ;
   }

   return result;
}

std::complex<double> CLASSNAME::CpUSHIpconjUSHIphhhh(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_3711;
   std::complex<double> tmp_3712;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3712 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_3711 += tmp_3712;
   result += (0.15*Sqr(g1)*ZH(gI1,0)*ZH(gI2,0)) * tmp_3711;
   std::complex<double> tmp_3713;
   std::complex<double> tmp_3714;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3714 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_3713 += tmp_3714;
   result += (-0.25*Sqr(g2)*ZH(gI1,0)*ZH(gI2,0)) * tmp_3713;
   std::complex<double> tmp_3715;
   std::complex<double> tmp_3716;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3716 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_3715 += tmp_3716;
   result += (-0.15*Sqr(gN)*ZH(gI1,0)*ZH(gI2,0)) * tmp_3715;
   if (gO1 < 2) {
      result += -0.15*KroneckerDelta(gO1,gO2)*Sqr(g1)*ZH(gI1,0)*ZH(gI2,0);
   }
   if (gO1 < 2) {
      result += 0.25*KroneckerDelta(gO1,gO2)*Sqr(g2)*ZH(gI1,0)*ZH(gI2,0);
   }
   if (gO1 < 2) {
      result += -0.225*KroneckerDelta(gO1,gO2)*Sqr(gN)*ZH(gI1,0)*ZH(gI2,0);
   }
   if (gO2 < 2) {
      result += 0.5*Conj(Lambda12(gO2,gO2))*KroneckerDelta(gO1,2 + gO2)*
         Lambdax*ZH(gI1,1)*ZH(gI2,0);
   }
   if (gO2 < 2) {
      result += 0.5*Conj(Lambda12(gO2,gO2))*KroneckerDelta(gO1,2 + gO2)*
         Lambdax*ZH(gI1,0)*ZH(gI2,1);
   }
   std::complex<double> tmp_3717;
   std::complex<double> tmp_3718;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3718 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_3717 += tmp_3718;
   result += (-0.15*Sqr(g1)*ZH(gI1,1)*ZH(gI2,1)) * tmp_3717;
   std::complex<double> tmp_3719;
   std::complex<double> tmp_3720;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3720 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_3719 += tmp_3720;
   result += (0.25*Sqr(g2)*ZH(gI1,1)*ZH(gI2,1)) * tmp_3719;
   std::complex<double> tmp_3721;
   std::complex<double> tmp_3722;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3722 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_3721 += tmp_3722;
   result += (-0.1*Sqr(gN)*ZH(gI1,1)*ZH(gI2,1)) * tmp_3721;
   if (gO1 < 2) {
      result += 0.15*KroneckerDelta(gO1,gO2)*Sqr(g1)*ZH(gI1,1)*ZH(gI2,1);
   }
   if (gO1 < 2) {
      result += -0.25*KroneckerDelta(gO1,gO2)*Sqr(g2)*ZH(gI1,1)*ZH(gI2,1);
   }
   if (gO1 < 2) {
      result += -0.15*KroneckerDelta(gO1,gO2)*Sqr(gN)*ZH(gI1,1)*ZH(gI2,1);
   }
   std::complex<double> tmp_3723;
   std::complex<double> tmp_3724;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3724 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_3723 += tmp_3724;
   result += (0.25*Sqr(gN)*ZH(gI1,2)*ZH(gI2,2)) * tmp_3723;
   std::complex<double> tmp_3725;
   std::complex<double> tmp_3726;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_3726 += AbsSqr(Lambda12(j2,j2))*KroneckerDelta(gO1,2 + j2)*
         KroneckerDelta(gO2,2 + j2);
   }
   tmp_3725 += tmp_3726;
   result += (-(ZH(gI1,2)*ZH(gI2,2))) * tmp_3725;
   if (gO1 < 2) {
      result += 0.375*KroneckerDelta(gO1,gO2)*Sqr(gN)*ZH(gI1,2)*ZH(gI2,2);
   }
   if (gO1 < 2) {
      result += 0.5*Conj(Lambdax)*KroneckerDelta(2 + gO1,gO2)*ZH(gI1,1)*ZH(
         gI2,0)*Lambda12(gO1,gO1);
   }
   if (gO1 < 2) {
      result += 0.5*Conj(Lambdax)*KroneckerDelta(2 + gO1,gO2)*ZH(gI1,0)*ZH(
         gI2,1)*Lambda12(gO1,gO1);
   }
   if (gO1 < 2) {
      result += -(AbsSqr(Lambda12(gO1,gO1))*KroneckerDelta(gO1,gO2)*ZH(gI1,2
         )*ZH(gI2,2));
   }

   return result;
}

std::complex<double> CLASSNAME::CpUSHIpconjUSHIpconjSHI0SHI0(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_3727;
   std::complex<double> tmp_3729;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3729 += KroneckerDelta(gO1,2 + j1)*UHI0(gI1,2 + j1);
   }
   tmp_3727 += tmp_3729;
   std::complex<double> tmp_3728;
   std::complex<double> tmp_3730;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_3730 += Conj(UHI0(gI2,2 + j2))*KroneckerDelta(gO2,2 + j2);
   }
   tmp_3728 += tmp_3730;
   result += (-0.25*Sqr(g2)) * tmp_3727 * tmp_3728;
   std::complex<double> tmp_3731;
   std::complex<double> tmp_3733;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3733 += Conj(UHI0(gI2,j1))*UHI0(gI1,j1);
   }
   tmp_3731 += tmp_3733;
   std::complex<double> tmp_3732;
   std::complex<double> tmp_3734;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_3734 += KroneckerDelta(gO1,2 + j2)*KroneckerDelta(gO2,2 + j2);
   }
   tmp_3732 += tmp_3734;
   result += (0.075*Sqr(g1)) * tmp_3731 * tmp_3732;
   std::complex<double> tmp_3735;
   std::complex<double> tmp_3737;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3737 += Conj(UHI0(gI2,j1))*UHI0(gI1,j1);
   }
   tmp_3735 += tmp_3737;
   std::complex<double> tmp_3736;
   std::complex<double> tmp_3738;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_3738 += KroneckerDelta(gO1,2 + j2)*KroneckerDelta(gO2,2 + j2);
   }
   tmp_3736 += tmp_3738;
   result += (-0.125*Sqr(g2)) * tmp_3735 * tmp_3736;
   std::complex<double> tmp_3739;
   std::complex<double> tmp_3741;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3741 += Conj(UHI0(gI2,j1))*UHI0(gI1,j1);
   }
   tmp_3739 += tmp_3741;
   std::complex<double> tmp_3740;
   std::complex<double> tmp_3742;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_3742 += KroneckerDelta(gO1,2 + j2)*KroneckerDelta(gO2,2 + j2);
   }
   tmp_3740 += tmp_3742;
   result += (-0.075*Sqr(gN)) * tmp_3739 * tmp_3740;
   std::complex<double> tmp_3743;
   std::complex<double> tmp_3745;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3745 += Conj(UHI0(gI2,2 + j1))*UHI0(gI1,2 + j1);
   }
   tmp_3743 += tmp_3745;
   std::complex<double> tmp_3744;
   std::complex<double> tmp_3746;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_3746 += KroneckerDelta(gO1,2 + j2)*KroneckerDelta(gO2,2 + j2);
   }
   tmp_3744 += tmp_3746;
   result += (-0.075*Sqr(g1)) * tmp_3743 * tmp_3744;
   std::complex<double> tmp_3747;
   std::complex<double> tmp_3749;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3749 += Conj(UHI0(gI2,2 + j1))*UHI0(gI1,2 + j1);
   }
   tmp_3747 += tmp_3749;
   std::complex<double> tmp_3748;
   std::complex<double> tmp_3750;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_3750 += KroneckerDelta(gO1,2 + j2)*KroneckerDelta(gO2,2 + j2);
   }
   tmp_3748 += tmp_3750;
   result += (0.125*Sqr(g2)) * tmp_3747 * tmp_3748;
   std::complex<double> tmp_3751;
   std::complex<double> tmp_3753;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3753 += Conj(UHI0(gI2,2 + j1))*UHI0(gI1,2 + j1);
   }
   tmp_3751 += tmp_3753;
   std::complex<double> tmp_3752;
   std::complex<double> tmp_3754;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_3754 += KroneckerDelta(gO1,2 + j2)*KroneckerDelta(gO2,2 + j2);
   }
   tmp_3752 += tmp_3754;
   result += (-0.05*Sqr(gN)) * tmp_3751 * tmp_3752;
   std::complex<double> tmp_3755;
   std::complex<double> tmp_3757;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3757 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_3755 += tmp_3757;
   std::complex<double> tmp_3756;
   std::complex<double> tmp_3758;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_3758 += Conj(UHI0(gI2,j2))*UHI0(gI1,j2);
   }
   tmp_3756 += tmp_3758;
   result += (0.075*Sqr(g1)) * tmp_3755 * tmp_3756;
   std::complex<double> tmp_3759;
   std::complex<double> tmp_3761;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3761 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_3759 += tmp_3761;
   std::complex<double> tmp_3760;
   std::complex<double> tmp_3762;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_3762 += Conj(UHI0(gI2,j2))*UHI0(gI1,j2);
   }
   tmp_3760 += tmp_3762;
   result += (-0.125*Sqr(g2)) * tmp_3759 * tmp_3760;
   std::complex<double> tmp_3763;
   std::complex<double> tmp_3765;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3765 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_3763 += tmp_3765;
   std::complex<double> tmp_3764;
   std::complex<double> tmp_3766;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_3766 += Conj(UHI0(gI2,j2))*UHI0(gI1,j2);
   }
   tmp_3764 += tmp_3766;
   result += (-0.075*Sqr(gN)) * tmp_3763 * tmp_3764;
   std::complex<double> tmp_3767;
   std::complex<double> tmp_3769;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3769 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_3767 += tmp_3769;
   std::complex<double> tmp_3768;
   std::complex<double> tmp_3770;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_3770 += Conj(UHI0(gI2,2 + j2))*UHI0(gI1,2 + j2);
   }
   tmp_3768 += tmp_3770;
   result += (-0.075*Sqr(g1)) * tmp_3767 * tmp_3768;
   std::complex<double> tmp_3771;
   std::complex<double> tmp_3773;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3773 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_3771 += tmp_3773;
   std::complex<double> tmp_3772;
   std::complex<double> tmp_3774;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_3774 += Conj(UHI0(gI2,2 + j2))*UHI0(gI1,2 + j2);
   }
   tmp_3772 += tmp_3774;
   result += (0.125*Sqr(g2)) * tmp_3771 * tmp_3772;
   std::complex<double> tmp_3775;
   std::complex<double> tmp_3777;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3777 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_3775 += tmp_3777;
   std::complex<double> tmp_3776;
   std::complex<double> tmp_3778;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_3778 += Conj(UHI0(gI2,2 + j2))*UHI0(gI1,2 + j2);
   }
   tmp_3776 += tmp_3778;
   result += (-0.05*Sqr(gN)) * tmp_3775 * tmp_3776;
   std::complex<double> tmp_3779;
   std::complex<double> tmp_3781;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3781 += Conj(UHI0(gI2,2 + j1))*KroneckerDelta(gO2,2 + j1);
   }
   tmp_3779 += tmp_3781;
   std::complex<double> tmp_3780;
   std::complex<double> tmp_3782;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_3782 += KroneckerDelta(gO1,2 + j2)*UHI0(gI1,2 + j2);
   }
   tmp_3780 += tmp_3782;
   result += (-0.25*Sqr(g2)) * tmp_3779 * tmp_3780;
   if (gO1 < 2) {
      std::complex<double> tmp_3783;
      std::complex<double> tmp_3784;
      for (unsigned j1 = 0; j1 < 2; ++j1) {
         tmp_3784 += Conj(UHI0(gI2,j1))*UHI0(gI1,j1);
      }
      tmp_3783 += tmp_3784;
      result += (-0.075*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_3783;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_3785;
      std::complex<double> tmp_3786;
      for (unsigned j1 = 0; j1 < 2; ++j1) {
         tmp_3786 += Conj(UHI0(gI2,j1))*UHI0(gI1,j1);
      }
      tmp_3785 += tmp_3786;
      result += (0.125*KroneckerDelta(gO1,gO2)*Sqr(g2)) * tmp_3785;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_3787;
      std::complex<double> tmp_3788;
      for (unsigned j1 = 0; j1 < 2; ++j1) {
         tmp_3788 += Conj(UHI0(gI2,j1))*UHI0(gI1,j1);
      }
      tmp_3787 += tmp_3788;
      result += (-0.1125*KroneckerDelta(gO1,gO2)*Sqr(gN)) * tmp_3787;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_3789;
      std::complex<double> tmp_3790;
      for (unsigned j1 = 0; j1 < 2; ++j1) {
         tmp_3790 += Conj(UHI0(gI2,2 + j1))*UHI0(gI1,2 + j1);
      }
      tmp_3789 += tmp_3790;
      result += (0.075*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_3789;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_3791;
      std::complex<double> tmp_3792;
      for (unsigned j1 = 0; j1 < 2; ++j1) {
         tmp_3792 += Conj(UHI0(gI2,2 + j1))*UHI0(gI1,2 + j1);
      }
      tmp_3791 += tmp_3792;
      result += (-0.125*KroneckerDelta(gO1,gO2)*Sqr(g2)) * tmp_3791;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_3793;
      std::complex<double> tmp_3794;
      for (unsigned j1 = 0; j1 < 2; ++j1) {
         tmp_3794 += Conj(UHI0(gI2,2 + j1))*UHI0(gI1,2 + j1);
      }
      tmp_3793 += tmp_3794;
      result += (-0.075*KroneckerDelta(gO1,gO2)*Sqr(gN)) * tmp_3793;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_3795;
      std::complex<double> tmp_3796;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         tmp_3796 += Conj(UHI0(gI2,j2))*UHI0(gI1,j2);
      }
      tmp_3795 += tmp_3796;
      result += (-0.075*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_3795;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_3797;
      std::complex<double> tmp_3798;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         tmp_3798 += Conj(UHI0(gI2,j2))*UHI0(gI1,j2);
      }
      tmp_3797 += tmp_3798;
      result += (0.125*KroneckerDelta(gO1,gO2)*Sqr(g2)) * tmp_3797;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_3799;
      std::complex<double> tmp_3800;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         tmp_3800 += Conj(UHI0(gI2,j2))*UHI0(gI1,j2);
      }
      tmp_3799 += tmp_3800;
      result += (-0.1125*KroneckerDelta(gO1,gO2)*Sqr(gN)) * tmp_3799;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_3801;
      std::complex<double> tmp_3802;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         tmp_3802 += Conj(UHI0(gI2,2 + j2))*UHI0(gI1,2 + j2);
      }
      tmp_3801 += tmp_3802;
      result += (0.075*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_3801;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_3803;
      std::complex<double> tmp_3804;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         tmp_3804 += Conj(UHI0(gI2,2 + j2))*UHI0(gI1,2 + j2);
      }
      tmp_3803 += tmp_3804;
      result += (-0.125*KroneckerDelta(gO1,gO2)*Sqr(g2)) * tmp_3803;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_3805;
      std::complex<double> tmp_3806;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         tmp_3806 += Conj(UHI0(gI2,2 + j2))*UHI0(gI1,2 + j2);
      }
      tmp_3805 += tmp_3806;
      result += (-0.075*KroneckerDelta(gO1,gO2)*Sqr(gN)) * tmp_3805;
   }
   if (gO2 < 2) {
      std::complex<double> tmp_3807;
      std::complex<double> tmp_3808;
      for (unsigned j1 = 0; j1 < 2; ++j1) {
         tmp_3808 += KroneckerDelta(gO1,2 + j1)*UHI0(gI1,2 + j1);
      }
      tmp_3807 += tmp_3808;
      result += (-0.25*Conj(UHI0(gI2,gO2))*Sqr(g2)) * tmp_3807;
   }
   if (gO2 < 2) {
      std::complex<double> tmp_3809;
      std::complex<double> tmp_3810;
      for (unsigned j1 = 0; j1 < 2; ++j1) {
         tmp_3810 += Conj(UHI0(gI2,j1))*UHI0(gI1,2 + j1)*Lambda12(j1,j1);
      }
      tmp_3809 += tmp_3810;
      result += (Conj(Lambda12(gO2,gO2))*KroneckerDelta(gO1,2 + gO2)) *
         tmp_3809;
   }
   if (gO2 < 2) {
      std::complex<double> tmp_3811;
      std::complex<double> tmp_3812;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         tmp_3812 += KroneckerDelta(gO1,2 + j2)*UHI0(gI1,2 + j2);
      }
      tmp_3811 += tmp_3812;
      result += (-0.25*Conj(UHI0(gI2,gO2))*Sqr(g2)) * tmp_3811;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_3813;
      std::complex<double> tmp_3814;
      for (unsigned j1 = 0; j1 < 2; ++j1) {
         tmp_3814 += Conj(UHI0(gI2,2 + j1))*KroneckerDelta(gO2,2 + j1);
      }
      tmp_3813 += tmp_3814;
      result += (-0.25*Sqr(g2)*UHI0(gI1,gO1)) * tmp_3813;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_3815;
      std::complex<double> tmp_3816;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         tmp_3816 += Conj(UHI0(gI2,2 + j2))*KroneckerDelta(gO2,2 + j2);
      }
      tmp_3815 += tmp_3816;
      result += (-0.25*Sqr(g2)*UHI0(gI1,gO1)) * tmp_3815;
   }
   if (gO1 < 2 && gO2 < 2) {
      result += -0.5*Conj(UHI0(gI2,gO2))*Sqr(g2)*UHI0(gI1,gO1);
   }
   if (gO1 < 2) {
      std::complex<double> tmp_3817;
      std::complex<double> tmp_3818;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         tmp_3818 += Conj(UHI0(gI2,2 + j2))*Conj(Lambda12(j2,j2))*UHI0(
            gI1,j2);
      }
      tmp_3817 += tmp_3818;
      result += (KroneckerDelta(2 + gO1,gO2)*Lambda12(gO1,gO1)) * tmp_3817;
   }

   return result;
}

std::complex<double> CLASSNAME::CpUSHIpconjUSHIpconjSHIpSHIp(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_3819;
   std::complex<double> tmp_3821;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3821 += KroneckerDelta(gO1,2 + j1)*UHIp(gI1,2 + j1);
   }
   tmp_3819 += tmp_3821;
   std::complex<double> tmp_3820;
   std::complex<double> tmp_3822;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_3822 += Conj(UHIp(gI2,2 + j2))*KroneckerDelta(gO2,2 + j2);
   }
   tmp_3820 += tmp_3822;
   result += (-0.075*Sqr(g1)) * tmp_3819 * tmp_3820;
   std::complex<double> tmp_3823;
   std::complex<double> tmp_3825;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3825 += KroneckerDelta(gO1,2 + j1)*UHIp(gI1,2 + j1);
   }
   tmp_3823 += tmp_3825;
   std::complex<double> tmp_3824;
   std::complex<double> tmp_3826;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_3826 += Conj(UHIp(gI2,2 + j2))*KroneckerDelta(gO2,2 + j2);
   }
   tmp_3824 += tmp_3826;
   result += (-0.125*Sqr(g2)) * tmp_3823 * tmp_3824;
   std::complex<double> tmp_3827;
   std::complex<double> tmp_3829;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3829 += KroneckerDelta(gO1,2 + j1)*UHIp(gI1,2 + j1);
   }
   tmp_3827 += tmp_3829;
   std::complex<double> tmp_3828;
   std::complex<double> tmp_3830;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_3830 += Conj(UHIp(gI2,2 + j2))*KroneckerDelta(gO2,2 + j2);
   }
   tmp_3828 += tmp_3830;
   result += (-0.05*Sqr(gN)) * tmp_3827 * tmp_3828;
   std::complex<double> tmp_3831;
   std::complex<double> tmp_3833;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3833 += Conj(UHIp(gI2,j1))*UHIp(gI1,j1);
   }
   tmp_3831 += tmp_3833;
   std::complex<double> tmp_3832;
   std::complex<double> tmp_3834;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_3834 += KroneckerDelta(gO1,2 + j2)*KroneckerDelta(gO2,2 + j2);
   }
   tmp_3832 += tmp_3834;
   result += (0.075*Sqr(g1)) * tmp_3831 * tmp_3832;
   std::complex<double> tmp_3835;
   std::complex<double> tmp_3837;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3837 += Conj(UHIp(gI2,j1))*UHIp(gI1,j1);
   }
   tmp_3835 += tmp_3837;
   std::complex<double> tmp_3836;
   std::complex<double> tmp_3838;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_3838 += KroneckerDelta(gO1,2 + j2)*KroneckerDelta(gO2,2 + j2);
   }
   tmp_3836 += tmp_3838;
   result += (0.125*Sqr(g2)) * tmp_3835 * tmp_3836;
   std::complex<double> tmp_3839;
   std::complex<double> tmp_3841;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3841 += Conj(UHIp(gI2,j1))*UHIp(gI1,j1);
   }
   tmp_3839 += tmp_3841;
   std::complex<double> tmp_3840;
   std::complex<double> tmp_3842;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_3842 += KroneckerDelta(gO1,2 + j2)*KroneckerDelta(gO2,2 + j2);
   }
   tmp_3840 += tmp_3842;
   result += (-0.075*Sqr(gN)) * tmp_3839 * tmp_3840;
   std::complex<double> tmp_3843;
   std::complex<double> tmp_3845;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3845 += Conj(UHIp(gI2,2 + j1))*UHIp(gI1,2 + j1);
   }
   tmp_3843 += tmp_3845;
   std::complex<double> tmp_3844;
   std::complex<double> tmp_3846;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_3846 += KroneckerDelta(gO1,2 + j2)*KroneckerDelta(gO2,2 + j2);
   }
   tmp_3844 += tmp_3846;
   result += (-0.075*Sqr(g1)) * tmp_3843 * tmp_3844;
   std::complex<double> tmp_3847;
   std::complex<double> tmp_3849;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3849 += Conj(UHIp(gI2,2 + j1))*UHIp(gI1,2 + j1);
   }
   tmp_3847 += tmp_3849;
   std::complex<double> tmp_3848;
   std::complex<double> tmp_3850;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_3850 += KroneckerDelta(gO1,2 + j2)*KroneckerDelta(gO2,2 + j2);
   }
   tmp_3848 += tmp_3850;
   result += (-0.125*Sqr(g2)) * tmp_3847 * tmp_3848;
   std::complex<double> tmp_3851;
   std::complex<double> tmp_3853;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3853 += Conj(UHIp(gI2,2 + j1))*UHIp(gI1,2 + j1);
   }
   tmp_3851 += tmp_3853;
   std::complex<double> tmp_3852;
   std::complex<double> tmp_3854;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_3854 += KroneckerDelta(gO1,2 + j2)*KroneckerDelta(gO2,2 + j2);
   }
   tmp_3852 += tmp_3854;
   result += (-0.05*Sqr(gN)) * tmp_3851 * tmp_3852;
   std::complex<double> tmp_3855;
   std::complex<double> tmp_3857;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3857 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_3855 += tmp_3857;
   std::complex<double> tmp_3856;
   std::complex<double> tmp_3858;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_3858 += Conj(UHIp(gI2,j2))*UHIp(gI1,j2);
   }
   tmp_3856 += tmp_3858;
   result += (0.075*Sqr(g1)) * tmp_3855 * tmp_3856;
   std::complex<double> tmp_3859;
   std::complex<double> tmp_3861;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3861 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_3859 += tmp_3861;
   std::complex<double> tmp_3860;
   std::complex<double> tmp_3862;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_3862 += Conj(UHIp(gI2,j2))*UHIp(gI1,j2);
   }
   tmp_3860 += tmp_3862;
   result += (0.125*Sqr(g2)) * tmp_3859 * tmp_3860;
   std::complex<double> tmp_3863;
   std::complex<double> tmp_3865;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3865 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_3863 += tmp_3865;
   std::complex<double> tmp_3864;
   std::complex<double> tmp_3866;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_3866 += Conj(UHIp(gI2,j2))*UHIp(gI1,j2);
   }
   tmp_3864 += tmp_3866;
   result += (-0.075*Sqr(gN)) * tmp_3863 * tmp_3864;
   std::complex<double> tmp_3867;
   std::complex<double> tmp_3869;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3869 += Conj(UHIp(gI2,j1))*KroneckerDelta(gO2,2 + j1)*Lambda12(j1,
         j1);
   }
   tmp_3867 += tmp_3869;
   std::complex<double> tmp_3868;
   std::complex<double> tmp_3870;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_3870 += Conj(Lambda12(j2,j2))*KroneckerDelta(gO1,2 + j2)*UHIp(gI1,
         j2);
   }
   tmp_3868 += tmp_3870;
   result += (-1) * tmp_3867 * tmp_3868;
   std::complex<double> tmp_3871;
   std::complex<double> tmp_3873;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3873 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_3871 += tmp_3873;
   std::complex<double> tmp_3872;
   std::complex<double> tmp_3874;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_3874 += Conj(UHIp(gI2,2 + j2))*UHIp(gI1,2 + j2);
   }
   tmp_3872 += tmp_3874;
   result += (-0.075*Sqr(g1)) * tmp_3871 * tmp_3872;
   std::complex<double> tmp_3875;
   std::complex<double> tmp_3877;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3877 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_3875 += tmp_3877;
   std::complex<double> tmp_3876;
   std::complex<double> tmp_3878;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_3878 += Conj(UHIp(gI2,2 + j2))*UHIp(gI1,2 + j2);
   }
   tmp_3876 += tmp_3878;
   result += (-0.125*Sqr(g2)) * tmp_3875 * tmp_3876;
   std::complex<double> tmp_3879;
   std::complex<double> tmp_3881;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3881 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_3879 += tmp_3881;
   std::complex<double> tmp_3880;
   std::complex<double> tmp_3882;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_3882 += Conj(UHIp(gI2,2 + j2))*UHIp(gI1,2 + j2);
   }
   tmp_3880 += tmp_3882;
   result += (-0.05*Sqr(gN)) * tmp_3879 * tmp_3880;
   std::complex<double> tmp_3883;
   std::complex<double> tmp_3885;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3885 += Conj(UHIp(gI2,2 + j1))*KroneckerDelta(gO2,2 + j1);
   }
   tmp_3883 += tmp_3885;
   std::complex<double> tmp_3884;
   std::complex<double> tmp_3886;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_3886 += KroneckerDelta(gO1,2 + j2)*UHIp(gI1,2 + j2);
   }
   tmp_3884 += tmp_3886;
   result += (-0.075*Sqr(g1)) * tmp_3883 * tmp_3884;
   std::complex<double> tmp_3887;
   std::complex<double> tmp_3889;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3889 += Conj(UHIp(gI2,2 + j1))*KroneckerDelta(gO2,2 + j1);
   }
   tmp_3887 += tmp_3889;
   std::complex<double> tmp_3888;
   std::complex<double> tmp_3890;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_3890 += KroneckerDelta(gO1,2 + j2)*UHIp(gI1,2 + j2);
   }
   tmp_3888 += tmp_3890;
   result += (-0.125*Sqr(g2)) * tmp_3887 * tmp_3888;
   std::complex<double> tmp_3891;
   std::complex<double> tmp_3893;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3893 += Conj(UHIp(gI2,2 + j1))*KroneckerDelta(gO2,2 + j1);
   }
   tmp_3891 += tmp_3893;
   std::complex<double> tmp_3892;
   std::complex<double> tmp_3894;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_3894 += KroneckerDelta(gO1,2 + j2)*UHIp(gI1,2 + j2);
   }
   tmp_3892 += tmp_3894;
   result += (-0.05*Sqr(gN)) * tmp_3891 * tmp_3892;
   if (gO1 < 2) {
      std::complex<double> tmp_3895;
      std::complex<double> tmp_3896;
      for (unsigned j1 = 0; j1 < 2; ++j1) {
         tmp_3896 += Conj(UHIp(gI2,j1))*UHIp(gI1,j1);
      }
      tmp_3895 += tmp_3896;
      result += (-0.075*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_3895;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_3897;
      std::complex<double> tmp_3898;
      for (unsigned j1 = 0; j1 < 2; ++j1) {
         tmp_3898 += Conj(UHIp(gI2,j1))*UHIp(gI1,j1);
      }
      tmp_3897 += tmp_3898;
      result += (-0.125*KroneckerDelta(gO1,gO2)*Sqr(g2)) * tmp_3897;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_3899;
      std::complex<double> tmp_3900;
      for (unsigned j1 = 0; j1 < 2; ++j1) {
         tmp_3900 += Conj(UHIp(gI2,j1))*UHIp(gI1,j1);
      }
      tmp_3899 += tmp_3900;
      result += (-0.1125*KroneckerDelta(gO1,gO2)*Sqr(gN)) * tmp_3899;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_3901;
      std::complex<double> tmp_3902;
      for (unsigned j1 = 0; j1 < 2; ++j1) {
         tmp_3902 += Conj(UHIp(gI2,2 + j1))*UHIp(gI1,2 + j1);
      }
      tmp_3901 += tmp_3902;
      result += (0.075*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_3901;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_3903;
      std::complex<double> tmp_3904;
      for (unsigned j1 = 0; j1 < 2; ++j1) {
         tmp_3904 += Conj(UHIp(gI2,2 + j1))*UHIp(gI1,2 + j1);
      }
      tmp_3903 += tmp_3904;
      result += (0.125*KroneckerDelta(gO1,gO2)*Sqr(g2)) * tmp_3903;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_3905;
      std::complex<double> tmp_3906;
      for (unsigned j1 = 0; j1 < 2; ++j1) {
         tmp_3906 += Conj(UHIp(gI2,2 + j1))*UHIp(gI1,2 + j1);
      }
      tmp_3905 += tmp_3906;
      result += (-0.075*KroneckerDelta(gO1,gO2)*Sqr(gN)) * tmp_3905;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_3907;
      std::complex<double> tmp_3908;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         tmp_3908 += Conj(UHIp(gI2,j2))*UHIp(gI1,j2);
      }
      tmp_3907 += tmp_3908;
      result += (-0.075*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_3907;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_3909;
      std::complex<double> tmp_3910;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         tmp_3910 += Conj(UHIp(gI2,j2))*UHIp(gI1,j2);
      }
      tmp_3909 += tmp_3910;
      result += (-0.125*KroneckerDelta(gO1,gO2)*Sqr(g2)) * tmp_3909;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_3911;
      std::complex<double> tmp_3912;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         tmp_3912 += Conj(UHIp(gI2,j2))*UHIp(gI1,j2);
      }
      tmp_3911 += tmp_3912;
      result += (-0.1125*KroneckerDelta(gO1,gO2)*Sqr(gN)) * tmp_3911;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_3913;
      std::complex<double> tmp_3914;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         tmp_3914 += Conj(UHIp(gI2,2 + j2))*UHIp(gI1,2 + j2);
      }
      tmp_3913 += tmp_3914;
      result += (0.075*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_3913;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_3915;
      std::complex<double> tmp_3916;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         tmp_3916 += Conj(UHIp(gI2,2 + j2))*UHIp(gI1,2 + j2);
      }
      tmp_3915 += tmp_3916;
      result += (0.125*KroneckerDelta(gO1,gO2)*Sqr(g2)) * tmp_3915;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_3917;
      std::complex<double> tmp_3918;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         tmp_3918 += Conj(UHIp(gI2,2 + j2))*UHIp(gI1,2 + j2);
      }
      tmp_3917 += tmp_3918;
      result += (-0.075*KroneckerDelta(gO1,gO2)*Sqr(gN)) * tmp_3917;
   }
   if (gO2 < 2) {
      std::complex<double> tmp_3919;
      std::complex<double> tmp_3920;
      for (unsigned j1 = 0; j1 < 2; ++j1) {
         tmp_3920 += KroneckerDelta(gO1,2 + j1)*UHIp(gI1,2 + j1);
      }
      tmp_3919 += tmp_3920;
      result += (0.075*Conj(UHIp(gI2,gO2))*Sqr(g1)) * tmp_3919;
   }
   if (gO2 < 2) {
      std::complex<double> tmp_3921;
      std::complex<double> tmp_3922;
      for (unsigned j1 = 0; j1 < 2; ++j1) {
         tmp_3922 += KroneckerDelta(gO1,2 + j1)*UHIp(gI1,2 + j1);
      }
      tmp_3921 += tmp_3922;
      result += (0.125*Conj(UHIp(gI2,gO2))*Sqr(g2)) * tmp_3921;
   }
   if (gO2 < 2) {
      std::complex<double> tmp_3923;
      std::complex<double> tmp_3924;
      for (unsigned j1 = 0; j1 < 2; ++j1) {
         tmp_3924 += KroneckerDelta(gO1,2 + j1)*UHIp(gI1,2 + j1);
      }
      tmp_3923 += tmp_3924;
      result += (-0.075*Conj(UHIp(gI2,gO2))*Sqr(gN)) * tmp_3923;
   }
   if (gO2 < 2) {
      std::complex<double> tmp_3925;
      std::complex<double> tmp_3926;
      for (unsigned j1 = 0; j1 < 2; ++j1) {
         tmp_3926 += Conj(UHIp(gI2,j1))*UHIp(gI1,2 + j1)*Lambda12(j1,j1);
      }
      tmp_3925 += tmp_3926;
      result += (-(Conj(Lambda12(gO2,gO2))*KroneckerDelta(gO1,2 + gO2))) *
         tmp_3925;
   }
   if (gO2 < 2) {
      std::complex<double> tmp_3927;
      std::complex<double> tmp_3928;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         tmp_3928 += KroneckerDelta(gO1,2 + j2)*UHIp(gI1,2 + j2);
      }
      tmp_3927 += tmp_3928;
      result += (0.075*Conj(UHIp(gI2,gO2))*Sqr(g1)) * tmp_3927;
   }
   if (gO2 < 2) {
      std::complex<double> tmp_3929;
      std::complex<double> tmp_3930;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         tmp_3930 += KroneckerDelta(gO1,2 + j2)*UHIp(gI1,2 + j2);
      }
      tmp_3929 += tmp_3930;
      result += (0.125*Conj(UHIp(gI2,gO2))*Sqr(g2)) * tmp_3929;
   }
   if (gO2 < 2) {
      std::complex<double> tmp_3931;
      std::complex<double> tmp_3932;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         tmp_3932 += KroneckerDelta(gO1,2 + j2)*UHIp(gI1,2 + j2);
      }
      tmp_3931 += tmp_3932;
      result += (-0.075*Conj(UHIp(gI2,gO2))*Sqr(gN)) * tmp_3931;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_3933;
      std::complex<double> tmp_3934;
      for (unsigned j1 = 0; j1 < 2; ++j1) {
         tmp_3934 += Conj(UHIp(gI2,2 + j1))*KroneckerDelta(gO2,2 + j1);
      }
      tmp_3933 += tmp_3934;
      result += (0.075*Sqr(g1)*UHIp(gI1,gO1)) * tmp_3933;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_3935;
      std::complex<double> tmp_3936;
      for (unsigned j1 = 0; j1 < 2; ++j1) {
         tmp_3936 += Conj(UHIp(gI2,2 + j1))*KroneckerDelta(gO2,2 + j1);
      }
      tmp_3935 += tmp_3936;
      result += (0.125*Sqr(g2)*UHIp(gI1,gO1)) * tmp_3935;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_3937;
      std::complex<double> tmp_3938;
      for (unsigned j1 = 0; j1 < 2; ++j1) {
         tmp_3938 += Conj(UHIp(gI2,2 + j1))*KroneckerDelta(gO2,2 + j1);
      }
      tmp_3937 += tmp_3938;
      result += (-0.075*Sqr(gN)*UHIp(gI1,gO1)) * tmp_3937;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_3939;
      std::complex<double> tmp_3940;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         tmp_3940 += Conj(UHIp(gI2,2 + j2))*KroneckerDelta(gO2,2 + j2);
      }
      tmp_3939 += tmp_3940;
      result += (0.075*Sqr(g1)*UHIp(gI1,gO1)) * tmp_3939;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_3941;
      std::complex<double> tmp_3942;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         tmp_3942 += Conj(UHIp(gI2,2 + j2))*KroneckerDelta(gO2,2 + j2);
      }
      tmp_3941 += tmp_3942;
      result += (0.125*Sqr(g2)*UHIp(gI1,gO1)) * tmp_3941;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_3943;
      std::complex<double> tmp_3944;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         tmp_3944 += Conj(UHIp(gI2,2 + j2))*KroneckerDelta(gO2,2 + j2);
      }
      tmp_3943 += tmp_3944;
      result += (-0.075*Sqr(gN)*UHIp(gI1,gO1)) * tmp_3943;
   }
   if (gO1 < 2 && gO2 < 2) {
      result += -0.15*Conj(UHIp(gI2,gO2))*Sqr(g1)*UHIp(gI1,gO1);
   }
   if (gO1 < 2 && gO2 < 2) {
      result += -0.25*Conj(UHIp(gI2,gO2))*Sqr(g2)*UHIp(gI1,gO1);
   }
   if (gO1 < 2 && gO2 < 2) {
      result += -0.225*Conj(UHIp(gI2,gO2))*Sqr(gN)*UHIp(gI1,gO1);
   }
   if (gO1 < 2) {
      std::complex<double> tmp_3945;
      std::complex<double> tmp_3946;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         tmp_3946 += Conj(UHIp(gI2,2 + j2))*Conj(Lambda12(j2,j2))*UHIp(
            gI1,j2);
      }
      tmp_3945 += tmp_3946;
      result += (-(KroneckerDelta(2 + gO1,gO2)*Lambda12(gO1,gO1))) *
         tmp_3945;
   }
   if (gO1 < 2 && gO2 < 2) {
      result += -(Conj(UHIp(gI2,2 + gO2))*Conj(Lambda12(gO2,gO2))*UHIp(gI1,2
         + gO1)*Lambda12(gO1,gO1));
   }

   return result;
}

std::complex<double> CLASSNAME::CpconjUSHIpSHI0Hpm(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   if (gO2 < 4) {
      result += -0.35355339059327373*vd*Conj(UHI0(gI1,gO2))*Sqr(g2)*ZP(gI2,0
         );
   }
   if (gO2 < 4) {
      result += -0.35355339059327373*vu*Conj(UHI0(gI1,gO2))*Sqr(g2)*ZP(gI2,1
         );
   }

   return result;
}

std::complex<double> CLASSNAME::CpconjUSHIpChiIChaPR(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_3947;
   std::complex<double> tmp_3948;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3948 += KroneckerDelta(gO2,2 + j1)*ZNI(gI1,2 + j1);
   }
   tmp_3947 += tmp_3948;
   result += (-(g2*UP(gI2,0))) * tmp_3947;

   return result;
}

std::complex<double> CLASSNAME::CpconjUSHIpChiIChaPL(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   if (gO1 < 2) {
      result += -(g2*Conj(UM(gI2,0))*Conj(ZNI(gI1,gO1)));
   }

   return result;
}

std::complex<double> CLASSNAME::CpconjUSHIpSHIpAh(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_3949;
   std::complex<double> tmp_3950;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3950 += Conj(UHIp(gI1,j1))*KroneckerDelta(gO2,2 + j1)*Lambda12(j1,
         j1);
   }
   tmp_3949 += tmp_3950;
   result += (std::complex<double>(0,-0.5)*vu*Conj(Lambdax)*ZA(gI2,0)) *
      tmp_3949;
   if (gO2 < 2) {
      result += std::complex<double>(0,0.5)*vu*Conj(UHIp(gI1,2 + gO2))*Conj(
         Lambda12(gO2,gO2))*Lambdax*ZA(gI2,0);
   }
   std::complex<double> tmp_3951;
   std::complex<double> tmp_3952;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3952 += Conj(UHIp(gI1,j1))*KroneckerDelta(gO2,2 + j1)*Lambda12(j1,
         j1);
   }
   tmp_3951 += tmp_3952;
   result += (std::complex<double>(0,-0.5)*vd*Conj(Lambdax)*ZA(gI2,1)) *
      tmp_3951;
   if (gO2 < 2) {
      result += std::complex<double>(0,0.5)*vd*Conj(UHIp(gI1,2 + gO2))*Conj(
         Lambda12(gO2,gO2))*Lambdax*ZA(gI2,1);
   }
   std::complex<double> tmp_3953;
   std::complex<double> tmp_3954;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3954 += Conj(UHIp(gI1,j1))*KroneckerDelta(gO2,2 + j1)*TLambda12(j1
         ,j1);
   }
   tmp_3953 += tmp_3954;
   result += (std::complex<double>(0.,-0.7071067811865475)*ZA(gI2,2)) *
      tmp_3953;
   if (gO2 < 2) {
      result += std::complex<double>(0.,0.7071067811865475)*Conj(UHIp(gI1,2
         + gO2))*Conj(TLambda12(gO2,gO2))*ZA(gI2,2);
   }

   return result;
}

std::complex<double> CLASSNAME::CpconjUSHIpSHIphh(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_3955;
   std::complex<double> tmp_3956;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3956 += Conj(UHIp(gI1,2 + j1))*KroneckerDelta(gO2,2 + j1);
   }
   tmp_3955 += tmp_3956;
   result += (0.15*vd*Sqr(g1)*ZH(gI2,0)) * tmp_3955;
   std::complex<double> tmp_3957;
   std::complex<double> tmp_3958;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3958 += Conj(UHIp(gI1,2 + j1))*KroneckerDelta(gO2,2 + j1);
   }
   tmp_3957 += tmp_3958;
   result += (-0.25*vd*Sqr(g2)*ZH(gI2,0)) * tmp_3957;
   std::complex<double> tmp_3959;
   std::complex<double> tmp_3960;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3960 += Conj(UHIp(gI1,2 + j1))*KroneckerDelta(gO2,2 + j1);
   }
   tmp_3959 += tmp_3960;
   result += (-0.15*vd*Sqr(gN)*ZH(gI2,0)) * tmp_3959;
   std::complex<double> tmp_3961;
   std::complex<double> tmp_3962;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3962 += Conj(UHIp(gI1,j1))*KroneckerDelta(gO2,2 + j1)*Lambda12(j1,
         j1);
   }
   tmp_3961 += tmp_3962;
   result += (0.5*vu*Conj(Lambdax)*ZH(gI2,0)) * tmp_3961;
   if (gO2 < 2) {
      result += -0.15*vd*Conj(UHIp(gI1,gO2))*Sqr(g1)*ZH(gI2,0);
   }
   if (gO2 < 2) {
      result += 0.25*vd*Conj(UHIp(gI1,gO2))*Sqr(g2)*ZH(gI2,0);
   }
   if (gO2 < 2) {
      result += -0.225*vd*Conj(UHIp(gI1,gO2))*Sqr(gN)*ZH(gI2,0);
   }
   if (gO2 < 2) {
      result += 0.5*vu*Conj(UHIp(gI1,2 + gO2))*Conj(Lambda12(gO2,gO2))*
         Lambdax*ZH(gI2,0);
   }
   std::complex<double> tmp_3963;
   std::complex<double> tmp_3964;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3964 += Conj(UHIp(gI1,2 + j1))*KroneckerDelta(gO2,2 + j1);
   }
   tmp_3963 += tmp_3964;
   result += (-0.15*vu*Sqr(g1)*ZH(gI2,1)) * tmp_3963;
   std::complex<double> tmp_3965;
   std::complex<double> tmp_3966;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3966 += Conj(UHIp(gI1,2 + j1))*KroneckerDelta(gO2,2 + j1);
   }
   tmp_3965 += tmp_3966;
   result += (0.25*vu*Sqr(g2)*ZH(gI2,1)) * tmp_3965;
   std::complex<double> tmp_3967;
   std::complex<double> tmp_3968;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3968 += Conj(UHIp(gI1,2 + j1))*KroneckerDelta(gO2,2 + j1);
   }
   tmp_3967 += tmp_3968;
   result += (-0.1*vu*Sqr(gN)*ZH(gI2,1)) * tmp_3967;
   std::complex<double> tmp_3969;
   std::complex<double> tmp_3970;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3970 += Conj(UHIp(gI1,j1))*KroneckerDelta(gO2,2 + j1)*Lambda12(j1,
         j1);
   }
   tmp_3969 += tmp_3970;
   result += (0.5*vd*Conj(Lambdax)*ZH(gI2,1)) * tmp_3969;
   if (gO2 < 2) {
      result += 0.15*vu*Conj(UHIp(gI1,gO2))*Sqr(g1)*ZH(gI2,1);
   }
   if (gO2 < 2) {
      result += -0.25*vu*Conj(UHIp(gI1,gO2))*Sqr(g2)*ZH(gI2,1);
   }
   if (gO2 < 2) {
      result += -0.15*vu*Conj(UHIp(gI1,gO2))*Sqr(gN)*ZH(gI2,1);
   }
   if (gO2 < 2) {
      result += 0.5*vd*Conj(UHIp(gI1,2 + gO2))*Conj(Lambda12(gO2,gO2))*
         Lambdax*ZH(gI2,1);
   }
   std::complex<double> tmp_3971;
   std::complex<double> tmp_3972;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3972 += Conj(UHIp(gI1,2 + j1))*KroneckerDelta(gO2,2 + j1);
   }
   tmp_3971 += tmp_3972;
   result += (0.25*vs*Sqr(gN)*ZH(gI2,2)) * tmp_3971;
   std::complex<double> tmp_3973;
   std::complex<double> tmp_3974;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3974 += Conj(UHIp(gI1,j1))*KroneckerDelta(gO2,2 + j1)*TLambda12(j1
         ,j1);
   }
   tmp_3973 += tmp_3974;
   result += (-0.7071067811865475*ZH(gI2,2)) * tmp_3973;
   std::complex<double> tmp_3975;
   std::complex<double> tmp_3976;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_3976 += AbsSqr(Lambda12(j2,j2))*Conj(UHIp(gI1,2 + j2))*
         KroneckerDelta(gO2,2 + j2);
   }
   tmp_3975 += tmp_3976;
   result += (-(vs*ZH(gI2,2))) * tmp_3975;
   if (gO2 < 2) {
      result += 0.375*vs*Conj(UHIp(gI1,gO2))*Sqr(gN)*ZH(gI2,2);
   }
   if (gO2 < 2) {
      result += -0.7071067811865475*Conj(UHIp(gI1,2 + gO2))*Conj(TLambda12(
         gO2,gO2))*ZH(gI2,2);
   }
   if (gO2 < 2) {
      result += -(vs*AbsSqr(Lambda12(gO2,gO2))*Conj(UHIp(gI1,gO2))*ZH(gI2,2)
         );
   }

   return result;
}

std::complex<double> CLASSNAME::CpUSHIpconjUSHIpconjSdSd(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_3977;
   std::complex<double> tmp_3979;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_3979 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
   }
   tmp_3977 += tmp_3979;
   std::complex<double> tmp_3978;
   std::complex<double> tmp_3980;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_3980 += KroneckerDelta(gO1,2 + j2)*KroneckerDelta(gO2,2 + j2);
   }
   tmp_3978 += tmp_3980;
   result += (-0.025*Sqr(g1)) * tmp_3977 * tmp_3978;
   std::complex<double> tmp_3981;
   std::complex<double> tmp_3983;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_3983 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
   }
   tmp_3981 += tmp_3983;
   std::complex<double> tmp_3982;
   std::complex<double> tmp_3984;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_3984 += KroneckerDelta(gO1,2 + j2)*KroneckerDelta(gO2,2 + j2);
   }
   tmp_3982 += tmp_3984;
   result += (0.125*Sqr(g2)) * tmp_3981 * tmp_3982;
   std::complex<double> tmp_3985;
   std::complex<double> tmp_3987;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_3987 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
   }
   tmp_3985 += tmp_3987;
   std::complex<double> tmp_3986;
   std::complex<double> tmp_3988;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_3988 += KroneckerDelta(gO1,2 + j2)*KroneckerDelta(gO2,2 + j2);
   }
   tmp_3986 += tmp_3988;
   result += (0.025*Sqr(gN)) * tmp_3985 * tmp_3986;
   std::complex<double> tmp_3989;
   std::complex<double> tmp_3991;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_3991 += Conj(ZD(gI2,3 + j1))*ZD(gI1,3 + j1);
   }
   tmp_3989 += tmp_3991;
   std::complex<double> tmp_3990;
   std::complex<double> tmp_3992;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_3992 += KroneckerDelta(gO1,2 + j2)*KroneckerDelta(gO2,2 + j2);
   }
   tmp_3990 += tmp_3992;
   result += (-0.05*Sqr(g1)) * tmp_3989 * tmp_3990;
   std::complex<double> tmp_3993;
   std::complex<double> tmp_3995;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_3995 += Conj(ZD(gI2,3 + j1))*ZD(gI1,3 + j1);
   }
   tmp_3993 += tmp_3995;
   std::complex<double> tmp_3994;
   std::complex<double> tmp_3996;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_3996 += KroneckerDelta(gO1,2 + j2)*KroneckerDelta(gO2,2 + j2);
   }
   tmp_3994 += tmp_3996;
   result += (0.05*Sqr(gN)) * tmp_3993 * tmp_3994;
   std::complex<double> tmp_3997;
   std::complex<double> tmp_3999;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3999 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_3997 += tmp_3999;
   std::complex<double> tmp_3998;
   std::complex<double> tmp_4000;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_4000 += Conj(ZD(gI2,j2))*ZD(gI1,j2);
   }
   tmp_3998 += tmp_4000;
   result += (-0.025*Sqr(g1)) * tmp_3997 * tmp_3998;
   std::complex<double> tmp_4001;
   std::complex<double> tmp_4003;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4003 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_4001 += tmp_4003;
   std::complex<double> tmp_4002;
   std::complex<double> tmp_4004;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_4004 += Conj(ZD(gI2,j2))*ZD(gI1,j2);
   }
   tmp_4002 += tmp_4004;
   result += (0.125*Sqr(g2)) * tmp_4001 * tmp_4002;
   std::complex<double> tmp_4005;
   std::complex<double> tmp_4007;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4007 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_4005 += tmp_4007;
   std::complex<double> tmp_4006;
   std::complex<double> tmp_4008;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_4008 += Conj(ZD(gI2,j2))*ZD(gI1,j2);
   }
   tmp_4006 += tmp_4008;
   result += (0.025*Sqr(gN)) * tmp_4005 * tmp_4006;
   std::complex<double> tmp_4009;
   std::complex<double> tmp_4011;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4011 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_4009 += tmp_4011;
   std::complex<double> tmp_4010;
   std::complex<double> tmp_4012;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_4012 += Conj(ZD(gI2,3 + j2))*ZD(gI1,3 + j2);
   }
   tmp_4010 += tmp_4012;
   result += (-0.05*Sqr(g1)) * tmp_4009 * tmp_4010;
   std::complex<double> tmp_4013;
   std::complex<double> tmp_4015;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4015 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_4013 += tmp_4015;
   std::complex<double> tmp_4014;
   std::complex<double> tmp_4016;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_4016 += Conj(ZD(gI2,3 + j2))*ZD(gI1,3 + j2);
   }
   tmp_4014 += tmp_4016;
   result += (0.05*Sqr(gN)) * tmp_4013 * tmp_4014;
   if (gO1 < 2) {
      std::complex<double> tmp_4017;
      std::complex<double> tmp_4018;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_4018 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
      }
      tmp_4017 += tmp_4018;
      result += (0.025*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_4017;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_4019;
      std::complex<double> tmp_4020;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_4020 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
      }
      tmp_4019 += tmp_4020;
      result += (-0.125*KroneckerDelta(gO1,gO2)*Sqr(g2)) * tmp_4019;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_4021;
      std::complex<double> tmp_4022;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_4022 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
      }
      tmp_4021 += tmp_4022;
      result += (0.0375*KroneckerDelta(gO1,gO2)*Sqr(gN)) * tmp_4021;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_4023;
      std::complex<double> tmp_4024;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_4024 += Conj(ZD(gI2,3 + j1))*ZD(gI1,3 + j1);
      }
      tmp_4023 += tmp_4024;
      result += (0.05*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_4023;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_4025;
      std::complex<double> tmp_4026;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_4026 += Conj(ZD(gI2,3 + j1))*ZD(gI1,3 + j1);
      }
      tmp_4025 += tmp_4026;
      result += (0.075*KroneckerDelta(gO1,gO2)*Sqr(gN)) * tmp_4025;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_4027;
      std::complex<double> tmp_4028;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_4028 += Conj(ZD(gI2,j2))*ZD(gI1,j2);
      }
      tmp_4027 += tmp_4028;
      result += (0.025*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_4027;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_4029;
      std::complex<double> tmp_4030;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_4030 += Conj(ZD(gI2,j2))*ZD(gI1,j2);
      }
      tmp_4029 += tmp_4030;
      result += (-0.125*KroneckerDelta(gO1,gO2)*Sqr(g2)) * tmp_4029;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_4031;
      std::complex<double> tmp_4032;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_4032 += Conj(ZD(gI2,j2))*ZD(gI1,j2);
      }
      tmp_4031 += tmp_4032;
      result += (0.0375*KroneckerDelta(gO1,gO2)*Sqr(gN)) * tmp_4031;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_4033;
      std::complex<double> tmp_4034;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_4034 += Conj(ZD(gI2,3 + j2))*ZD(gI1,3 + j2);
      }
      tmp_4033 += tmp_4034;
      result += (0.05*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_4033;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_4035;
      std::complex<double> tmp_4036;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_4036 += Conj(ZD(gI2,3 + j2))*ZD(gI1,3 + j2);
      }
      tmp_4035 += tmp_4036;
      result += (0.075*KroneckerDelta(gO1,gO2)*Sqr(gN)) * tmp_4035;
   }

   return result;
}

std::complex<double> CLASSNAME::CpUSHIpconjUSHIpconjSDXSDX(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_4037;
   std::complex<double> tmp_4039;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4039 += Conj(ZDX(gI2,j1))*ZDX(gI1,j1);
   }
   tmp_4037 += tmp_4039;
   std::complex<double> tmp_4038;
   std::complex<double> tmp_4040;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_4040 += KroneckerDelta(gO1,2 + j2)*KroneckerDelta(gO2,2 + j2);
   }
   tmp_4038 += tmp_4040;
   result += (0.05*Sqr(g1)) * tmp_4037 * tmp_4038;
   std::complex<double> tmp_4041;
   std::complex<double> tmp_4043;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4043 += Conj(ZDX(gI2,j1))*ZDX(gI1,j1);
   }
   tmp_4041 += tmp_4043;
   std::complex<double> tmp_4042;
   std::complex<double> tmp_4044;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_4044 += KroneckerDelta(gO1,2 + j2)*KroneckerDelta(gO2,2 + j2);
   }
   tmp_4042 += tmp_4044;
   result += (-0.05*Sqr(gN)) * tmp_4041 * tmp_4042;
   std::complex<double> tmp_4045;
   std::complex<double> tmp_4047;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4047 += Conj(ZDX(gI2,3 + j1))*ZDX(gI1,3 + j1);
   }
   tmp_4045 += tmp_4047;
   std::complex<double> tmp_4046;
   std::complex<double> tmp_4048;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_4048 += KroneckerDelta(gO1,2 + j2)*KroneckerDelta(gO2,2 + j2);
   }
   tmp_4046 += tmp_4048;
   result += (-0.05*Sqr(g1)) * tmp_4045 * tmp_4046;
   std::complex<double> tmp_4049;
   std::complex<double> tmp_4051;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4051 += Conj(ZDX(gI2,3 + j1))*ZDX(gI1,3 + j1);
   }
   tmp_4049 += tmp_4051;
   std::complex<double> tmp_4050;
   std::complex<double> tmp_4052;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_4052 += KroneckerDelta(gO1,2 + j2)*KroneckerDelta(gO2,2 + j2);
   }
   tmp_4050 += tmp_4052;
   result += (-0.075*Sqr(gN)) * tmp_4049 * tmp_4050;
   std::complex<double> tmp_4053;
   std::complex<double> tmp_4055;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4055 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_4053 += tmp_4055;
   std::complex<double> tmp_4054;
   std::complex<double> tmp_4056;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_4056 += Conj(ZDX(gI2,j2))*ZDX(gI1,j2);
   }
   tmp_4054 += tmp_4056;
   result += (0.05*Sqr(g1)) * tmp_4053 * tmp_4054;
   std::complex<double> tmp_4057;
   std::complex<double> tmp_4059;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4059 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_4057 += tmp_4059;
   std::complex<double> tmp_4058;
   std::complex<double> tmp_4060;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_4060 += Conj(ZDX(gI2,j2))*ZDX(gI1,j2);
   }
   tmp_4058 += tmp_4060;
   result += (-0.05*Sqr(gN)) * tmp_4057 * tmp_4058;
   std::complex<double> tmp_4061;
   std::complex<double> tmp_4063;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4063 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_4061 += tmp_4063;
   std::complex<double> tmp_4062;
   std::complex<double> tmp_4064;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_4064 += Conj(ZDX(gI2,3 + j2))*ZDX(gI1,3 + j2);
   }
   tmp_4062 += tmp_4064;
   result += (-0.05*Sqr(g1)) * tmp_4061 * tmp_4062;
   std::complex<double> tmp_4065;
   std::complex<double> tmp_4067;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4067 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_4065 += tmp_4067;
   std::complex<double> tmp_4066;
   std::complex<double> tmp_4068;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_4068 += Conj(ZDX(gI2,3 + j2))*ZDX(gI1,3 + j2);
   }
   tmp_4066 += tmp_4068;
   result += (-0.075*Sqr(gN)) * tmp_4065 * tmp_4066;
   if (gO1 < 2) {
      std::complex<double> tmp_4069;
      std::complex<double> tmp_4070;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_4070 += Conj(ZDX(gI2,j1))*ZDX(gI1,j1);
      }
      tmp_4069 += tmp_4070;
      result += (-0.05*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_4069;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_4071;
      std::complex<double> tmp_4072;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_4072 += Conj(ZDX(gI2,j1))*ZDX(gI1,j1);
      }
      tmp_4071 += tmp_4072;
      result += (-0.075*KroneckerDelta(gO1,gO2)*Sqr(gN)) * tmp_4071;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_4073;
      std::complex<double> tmp_4074;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_4074 += Conj(ZDX(gI2,3 + j1))*ZDX(gI1,3 + j1);
      }
      tmp_4073 += tmp_4074;
      result += (0.05*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_4073;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_4075;
      std::complex<double> tmp_4076;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_4076 += Conj(ZDX(gI2,3 + j1))*ZDX(gI1,3 + j1);
      }
      tmp_4075 += tmp_4076;
      result += (-0.1125*KroneckerDelta(gO1,gO2)*Sqr(gN)) * tmp_4075;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_4077;
      std::complex<double> tmp_4078;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_4078 += Conj(ZDX(gI2,j2))*ZDX(gI1,j2);
      }
      tmp_4077 += tmp_4078;
      result += (-0.05*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_4077;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_4079;
      std::complex<double> tmp_4080;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_4080 += Conj(ZDX(gI2,j2))*ZDX(gI1,j2);
      }
      tmp_4079 += tmp_4080;
      result += (-0.075*KroneckerDelta(gO1,gO2)*Sqr(gN)) * tmp_4079;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_4081;
      std::complex<double> tmp_4082;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_4082 += Conj(ZDX(gI2,3 + j2))*ZDX(gI1,3 + j2);
      }
      tmp_4081 += tmp_4082;
      result += (0.05*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_4081;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_4083;
      std::complex<double> tmp_4084;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_4084 += Conj(ZDX(gI2,3 + j2))*ZDX(gI1,3 + j2);
      }
      tmp_4083 += tmp_4084;
      result += (-0.1125*KroneckerDelta(gO1,gO2)*Sqr(gN)) * tmp_4083;
   }
   if (gO2 < 2) {
      std::complex<double> tmp_4085;
      std::complex<double> tmp_4086;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_4086 += Conj(ZDX(gI2,j1))*ZDX(gI1,3 + j1)*Kappa(j1,j1);
      }
      tmp_4085 += tmp_4086;
      result += (-(Conj(Lambda12(gO2,gO2))*KroneckerDelta(gO1,2 + gO2))) *
         tmp_4085;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_4087;
      std::complex<double> tmp_4088;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_4088 += Conj(ZDX(gI2,3 + j2))*Conj(Kappa(j2,j2))*ZDX(gI1,j2)
            ;
      }
      tmp_4087 += tmp_4088;
      result += (-(KroneckerDelta(2 + gO1,gO2)*Lambda12(gO1,gO1))) *
         tmp_4087;
   }

   return result;
}

std::complex<double> CLASSNAME::CpUSHIpconjUSHIpconjSeSe(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_4089;
   std::complex<double> tmp_4091;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4091 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
   }
   tmp_4089 += tmp_4091;
   std::complex<double> tmp_4090;
   std::complex<double> tmp_4092;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_4092 += KroneckerDelta(gO1,2 + j2)*KroneckerDelta(gO2,2 + j2);
   }
   tmp_4090 += tmp_4092;
   result += (0.075*Sqr(g1)) * tmp_4089 * tmp_4090;
   std::complex<double> tmp_4093;
   std::complex<double> tmp_4095;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4095 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
   }
   tmp_4093 += tmp_4095;
   std::complex<double> tmp_4094;
   std::complex<double> tmp_4096;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_4096 += KroneckerDelta(gO1,2 + j2)*KroneckerDelta(gO2,2 + j2);
   }
   tmp_4094 += tmp_4096;
   result += (0.125*Sqr(g2)) * tmp_4093 * tmp_4094;
   std::complex<double> tmp_4097;
   std::complex<double> tmp_4099;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4099 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
   }
   tmp_4097 += tmp_4099;
   std::complex<double> tmp_4098;
   std::complex<double> tmp_4100;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_4100 += KroneckerDelta(gO1,2 + j2)*KroneckerDelta(gO2,2 + j2);
   }
   tmp_4098 += tmp_4100;
   result += (0.05*Sqr(gN)) * tmp_4097 * tmp_4098;
   std::complex<double> tmp_4101;
   std::complex<double> tmp_4103;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4103 += Conj(ZE(gI2,3 + j1))*ZE(gI1,3 + j1);
   }
   tmp_4101 += tmp_4103;
   std::complex<double> tmp_4102;
   std::complex<double> tmp_4104;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_4104 += KroneckerDelta(gO1,2 + j2)*KroneckerDelta(gO2,2 + j2);
   }
   tmp_4102 += tmp_4104;
   result += (-0.15*Sqr(g1)) * tmp_4101 * tmp_4102;
   std::complex<double> tmp_4105;
   std::complex<double> tmp_4107;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4107 += Conj(ZE(gI2,3 + j1))*ZE(gI1,3 + j1);
   }
   tmp_4105 += tmp_4107;
   std::complex<double> tmp_4106;
   std::complex<double> tmp_4108;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_4108 += KroneckerDelta(gO1,2 + j2)*KroneckerDelta(gO2,2 + j2);
   }
   tmp_4106 += tmp_4108;
   result += (0.025*Sqr(gN)) * tmp_4105 * tmp_4106;
   std::complex<double> tmp_4109;
   std::complex<double> tmp_4111;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4111 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_4109 += tmp_4111;
   std::complex<double> tmp_4110;
   std::complex<double> tmp_4112;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_4112 += Conj(ZE(gI2,j2))*ZE(gI1,j2);
   }
   tmp_4110 += tmp_4112;
   result += (0.075*Sqr(g1)) * tmp_4109 * tmp_4110;
   std::complex<double> tmp_4113;
   std::complex<double> tmp_4115;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4115 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_4113 += tmp_4115;
   std::complex<double> tmp_4114;
   std::complex<double> tmp_4116;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_4116 += Conj(ZE(gI2,j2))*ZE(gI1,j2);
   }
   tmp_4114 += tmp_4116;
   result += (0.125*Sqr(g2)) * tmp_4113 * tmp_4114;
   std::complex<double> tmp_4117;
   std::complex<double> tmp_4119;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4119 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_4117 += tmp_4119;
   std::complex<double> tmp_4118;
   std::complex<double> tmp_4120;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_4120 += Conj(ZE(gI2,j2))*ZE(gI1,j2);
   }
   tmp_4118 += tmp_4120;
   result += (0.05*Sqr(gN)) * tmp_4117 * tmp_4118;
   std::complex<double> tmp_4121;
   std::complex<double> tmp_4123;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4123 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_4121 += tmp_4123;
   std::complex<double> tmp_4122;
   std::complex<double> tmp_4124;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_4124 += Conj(ZE(gI2,3 + j2))*ZE(gI1,3 + j2);
   }
   tmp_4122 += tmp_4124;
   result += (-0.15*Sqr(g1)) * tmp_4121 * tmp_4122;
   std::complex<double> tmp_4125;
   std::complex<double> tmp_4127;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4127 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_4125 += tmp_4127;
   std::complex<double> tmp_4126;
   std::complex<double> tmp_4128;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_4128 += Conj(ZE(gI2,3 + j2))*ZE(gI1,3 + j2);
   }
   tmp_4126 += tmp_4128;
   result += (0.025*Sqr(gN)) * tmp_4125 * tmp_4126;
   if (gO1 < 2) {
      std::complex<double> tmp_4129;
      std::complex<double> tmp_4130;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_4130 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
      }
      tmp_4129 += tmp_4130;
      result += (-0.075*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_4129;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_4131;
      std::complex<double> tmp_4132;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_4132 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
      }
      tmp_4131 += tmp_4132;
      result += (-0.125*KroneckerDelta(gO1,gO2)*Sqr(g2)) * tmp_4131;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_4133;
      std::complex<double> tmp_4134;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_4134 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
      }
      tmp_4133 += tmp_4134;
      result += (0.075*KroneckerDelta(gO1,gO2)*Sqr(gN)) * tmp_4133;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_4135;
      std::complex<double> tmp_4136;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_4136 += Conj(ZE(gI2,3 + j1))*ZE(gI1,3 + j1);
      }
      tmp_4135 += tmp_4136;
      result += (0.15*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_4135;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_4137;
      std::complex<double> tmp_4138;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_4138 += Conj(ZE(gI2,3 + j1))*ZE(gI1,3 + j1);
      }
      tmp_4137 += tmp_4138;
      result += (0.0375*KroneckerDelta(gO1,gO2)*Sqr(gN)) * tmp_4137;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_4139;
      std::complex<double> tmp_4140;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_4140 += Conj(ZE(gI2,j2))*ZE(gI1,j2);
      }
      tmp_4139 += tmp_4140;
      result += (-0.075*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_4139;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_4141;
      std::complex<double> tmp_4142;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_4142 += Conj(ZE(gI2,j2))*ZE(gI1,j2);
      }
      tmp_4141 += tmp_4142;
      result += (-0.125*KroneckerDelta(gO1,gO2)*Sqr(g2)) * tmp_4141;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_4143;
      std::complex<double> tmp_4144;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_4144 += Conj(ZE(gI2,j2))*ZE(gI1,j2);
      }
      tmp_4143 += tmp_4144;
      result += (0.075*KroneckerDelta(gO1,gO2)*Sqr(gN)) * tmp_4143;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_4145;
      std::complex<double> tmp_4146;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_4146 += Conj(ZE(gI2,3 + j2))*ZE(gI1,3 + j2);
      }
      tmp_4145 += tmp_4146;
      result += (0.15*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_4145;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_4147;
      std::complex<double> tmp_4148;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_4148 += Conj(ZE(gI2,3 + j2))*ZE(gI1,3 + j2);
      }
      tmp_4147 += tmp_4148;
      result += (0.0375*KroneckerDelta(gO1,gO2)*Sqr(gN)) * tmp_4147;
   }

   return result;
}

std::complex<double> CLASSNAME::CpUSHIpconjUSHIpconjSuSu(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_4149;
   std::complex<double> tmp_4151;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4151 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
   }
   tmp_4149 += tmp_4151;
   std::complex<double> tmp_4150;
   std::complex<double> tmp_4152;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_4152 += KroneckerDelta(gO1,2 + j2)*KroneckerDelta(gO2,2 + j2);
   }
   tmp_4150 += tmp_4152;
   result += (-0.025*Sqr(g1)) * tmp_4149 * tmp_4150;
   std::complex<double> tmp_4153;
   std::complex<double> tmp_4155;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4155 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
   }
   tmp_4153 += tmp_4155;
   std::complex<double> tmp_4154;
   std::complex<double> tmp_4156;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_4156 += KroneckerDelta(gO1,2 + j2)*KroneckerDelta(gO2,2 + j2);
   }
   tmp_4154 += tmp_4156;
   result += (-0.125*Sqr(g2)) * tmp_4153 * tmp_4154;
   std::complex<double> tmp_4157;
   std::complex<double> tmp_4159;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4159 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
   }
   tmp_4157 += tmp_4159;
   std::complex<double> tmp_4158;
   std::complex<double> tmp_4160;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_4160 += KroneckerDelta(gO1,2 + j2)*KroneckerDelta(gO2,2 + j2);
   }
   tmp_4158 += tmp_4160;
   result += (0.025*Sqr(gN)) * tmp_4157 * tmp_4158;
   std::complex<double> tmp_4161;
   std::complex<double> tmp_4163;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4163 += Conj(ZU(gI2,3 + j1))*ZU(gI1,3 + j1);
   }
   tmp_4161 += tmp_4163;
   std::complex<double> tmp_4162;
   std::complex<double> tmp_4164;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_4164 += KroneckerDelta(gO1,2 + j2)*KroneckerDelta(gO2,2 + j2);
   }
   tmp_4162 += tmp_4164;
   result += (0.1*Sqr(g1)) * tmp_4161 * tmp_4162;
   std::complex<double> tmp_4165;
   std::complex<double> tmp_4167;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4167 += Conj(ZU(gI2,3 + j1))*ZU(gI1,3 + j1);
   }
   tmp_4165 += tmp_4167;
   std::complex<double> tmp_4166;
   std::complex<double> tmp_4168;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_4168 += KroneckerDelta(gO1,2 + j2)*KroneckerDelta(gO2,2 + j2);
   }
   tmp_4166 += tmp_4168;
   result += (0.025*Sqr(gN)) * tmp_4165 * tmp_4166;
   std::complex<double> tmp_4169;
   std::complex<double> tmp_4171;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4171 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_4169 += tmp_4171;
   std::complex<double> tmp_4170;
   std::complex<double> tmp_4172;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_4172 += Conj(ZU(gI2,j2))*ZU(gI1,j2);
   }
   tmp_4170 += tmp_4172;
   result += (-0.025*Sqr(g1)) * tmp_4169 * tmp_4170;
   std::complex<double> tmp_4173;
   std::complex<double> tmp_4175;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4175 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_4173 += tmp_4175;
   std::complex<double> tmp_4174;
   std::complex<double> tmp_4176;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_4176 += Conj(ZU(gI2,j2))*ZU(gI1,j2);
   }
   tmp_4174 += tmp_4176;
   result += (-0.125*Sqr(g2)) * tmp_4173 * tmp_4174;
   std::complex<double> tmp_4177;
   std::complex<double> tmp_4179;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4179 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_4177 += tmp_4179;
   std::complex<double> tmp_4178;
   std::complex<double> tmp_4180;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_4180 += Conj(ZU(gI2,j2))*ZU(gI1,j2);
   }
   tmp_4178 += tmp_4180;
   result += (0.025*Sqr(gN)) * tmp_4177 * tmp_4178;
   std::complex<double> tmp_4181;
   std::complex<double> tmp_4183;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4183 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_4181 += tmp_4183;
   std::complex<double> tmp_4182;
   std::complex<double> tmp_4184;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_4184 += Conj(ZU(gI2,3 + j2))*ZU(gI1,3 + j2);
   }
   tmp_4182 += tmp_4184;
   result += (0.1*Sqr(g1)) * tmp_4181 * tmp_4182;
   std::complex<double> tmp_4185;
   std::complex<double> tmp_4187;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4187 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_4185 += tmp_4187;
   std::complex<double> tmp_4186;
   std::complex<double> tmp_4188;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_4188 += Conj(ZU(gI2,3 + j2))*ZU(gI1,3 + j2);
   }
   tmp_4186 += tmp_4188;
   result += (0.025*Sqr(gN)) * tmp_4185 * tmp_4186;
   if (gO1 < 2) {
      std::complex<double> tmp_4189;
      std::complex<double> tmp_4190;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_4190 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
      }
      tmp_4189 += tmp_4190;
      result += (0.025*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_4189;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_4191;
      std::complex<double> tmp_4192;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_4192 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
      }
      tmp_4191 += tmp_4192;
      result += (0.125*KroneckerDelta(gO1,gO2)*Sqr(g2)) * tmp_4191;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_4193;
      std::complex<double> tmp_4194;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_4194 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
      }
      tmp_4193 += tmp_4194;
      result += (0.0375*KroneckerDelta(gO1,gO2)*Sqr(gN)) * tmp_4193;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_4195;
      std::complex<double> tmp_4196;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_4196 += Conj(ZU(gI2,3 + j1))*ZU(gI1,3 + j1);
      }
      tmp_4195 += tmp_4196;
      result += (-0.1*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_4195;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_4197;
      std::complex<double> tmp_4198;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_4198 += Conj(ZU(gI2,3 + j1))*ZU(gI1,3 + j1);
      }
      tmp_4197 += tmp_4198;
      result += (0.0375*KroneckerDelta(gO1,gO2)*Sqr(gN)) * tmp_4197;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_4199;
      std::complex<double> tmp_4200;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_4200 += Conj(ZU(gI2,j2))*ZU(gI1,j2);
      }
      tmp_4199 += tmp_4200;
      result += (0.025*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_4199;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_4201;
      std::complex<double> tmp_4202;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_4202 += Conj(ZU(gI2,j2))*ZU(gI1,j2);
      }
      tmp_4201 += tmp_4202;
      result += (0.125*KroneckerDelta(gO1,gO2)*Sqr(g2)) * tmp_4201;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_4203;
      std::complex<double> tmp_4204;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_4204 += Conj(ZU(gI2,j2))*ZU(gI1,j2);
      }
      tmp_4203 += tmp_4204;
      result += (0.0375*KroneckerDelta(gO1,gO2)*Sqr(gN)) * tmp_4203;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_4205;
      std::complex<double> tmp_4206;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_4206 += Conj(ZU(gI2,3 + j2))*ZU(gI1,3 + j2);
      }
      tmp_4205 += tmp_4206;
      result += (-0.1*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_4205;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_4207;
      std::complex<double> tmp_4208;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_4208 += Conj(ZU(gI2,3 + j2))*ZU(gI1,3 + j2);
      }
      tmp_4207 += tmp_4208;
      result += (0.0375*KroneckerDelta(gO1,gO2)*Sqr(gN)) * tmp_4207;
   }

   return result;
}

std::complex<double> CLASSNAME::CpconjUSHIpChiChaIPR(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_4209;
   std::complex<double> tmp_4210;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4210 += KroneckerDelta(gO2,2 + j1)*ZPI(gI2,j1);
   }
   tmp_4209 += tmp_4210;
   result += (-0.5477225575051661*g1*ZN(gI1,0)) * tmp_4209;
   std::complex<double> tmp_4211;
   std::complex<double> tmp_4212;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4212 += KroneckerDelta(gO2,2 + j1)*ZPI(gI2,j1);
   }
   tmp_4211 += tmp_4212;
   result += (-0.7071067811865475*g2*ZN(gI1,1)) * tmp_4211;
   std::complex<double> tmp_4213;
   std::complex<double> tmp_4214;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4214 += KroneckerDelta(gO2,2 + j1)*ZPI(gI2,j1);
   }
   tmp_4213 += tmp_4214;
   result += (0.4472135954999579*gN*ZN(gI1,5)) * tmp_4213;
   if (gO2 < 2) {
      result += -(Conj(Lambda12(gO2,gO2))*ZN(gI1,4)*ZPI(gI2,gO2));
   }

   return result;
}

std::complex<double> CLASSNAME::CpconjUSHIpChiChaIPL(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_4215;
   std::complex<double> tmp_4216;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4216 += Conj(ZMI(gI2,j1))*KroneckerDelta(gO1,2 + j1)*Lambda12(j1,
         j1);
   }
   tmp_4215 += tmp_4216;
   result += (-Conj(ZN(gI1,4))) * tmp_4215;
   if (gO1 < 2) {
      result += 0.5477225575051661*g1*Conj(ZMI(gI2,gO1))*Conj(ZN(gI1,0));
   }
   if (gO1 < 2) {
      result += 0.7071067811865475*g2*Conj(ZMI(gI2,gO1))*Conj(ZN(gI1,1));
   }
   if (gO1 < 2) {
      result += 0.6708203932499369*gN*Conj(ZMI(gI2,gO1))*Conj(ZN(gI1,5));
   }

   return result;
}

std::complex<double> CLASSNAME::CpconjUSHIpVWmSHI0(unsigned gO2, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_4217;
   std::complex<double> tmp_4218;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4218 += Conj(UHI0(gI2,2 + j1))*KroneckerDelta(gO2,2 + j1);
   }
   tmp_4217 += tmp_4218;
   result += (-0.7071067811865475*g2) * tmp_4217;
   if (gO2 < 2) {
      result += 0.7071067811865475*g2*Conj(UHI0(gI2,gO2));
   }

   return result;
}

std::complex<double> CLASSNAME::CpconjUSHIpVPSHIp(unsigned gO2, unsigned gI2) const
{
   std::complex<double> result;

   if (gI2 < 4) {
      result += -0.3872983346207417*g1*Conj(UHIp(gI2,gO2))*Cos(ThetaW());
   }
   if (gI2 < 4) {
      result += -0.5*g2*Conj(UHIp(gI2,gO2))*Sin(ThetaW());
   }

   return result;
}

std::complex<double> CLASSNAME::CpconjUSHIpVZSHIp(unsigned gO2, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_4219;
   std::complex<double> tmp_4220;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4220 += Conj(UHIp(gI2,2 + j1))*KroneckerDelta(gO2,2 + j1);
   }
   tmp_4219 += tmp_4220;
   result += (-0.5*g2*Cos(ThetaW())*Cos(ThetaWp())) * tmp_4219;
   std::complex<double> tmp_4221;
   std::complex<double> tmp_4222;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4222 += Conj(UHIp(gI2,2 + j1))*KroneckerDelta(gO2,2 + j1);
   }
   tmp_4221 += tmp_4222;
   result += (0.3872983346207417*g1*Cos(ThetaWp())*Sin(ThetaW())) * tmp_4221;
   std::complex<double> tmp_4223;
   std::complex<double> tmp_4224;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4224 += Conj(UHIp(gI2,2 + j1))*KroneckerDelta(gO2,2 + j1);
   }
   tmp_4223 += tmp_4224;
   result += (0.31622776601683794*gN*Sin(ThetaWp())) * tmp_4223;
   if (gO2 < 2) {
      result += -0.5*g2*Conj(UHIp(gI2,gO2))*Cos(ThetaW())*Cos(ThetaWp());
   }
   if (gO2 < 2) {
      result += 0.3872983346207417*g1*Conj(UHIp(gI2,gO2))*Cos(ThetaWp())*Sin
         (ThetaW());
   }
   if (gO2 < 2) {
      result += -0.4743416490252569*gN*Conj(UHIp(gI2,gO2))*Sin(ThetaWp());
   }

   return result;
}

std::complex<double> CLASSNAME::CpconjUSHIpVZpSHIp(unsigned gO2, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_4225;
   std::complex<double> tmp_4226;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4226 += Conj(UHIp(gI2,2 + j1))*KroneckerDelta(gO2,2 + j1);
   }
   tmp_4225 += tmp_4226;
   result += (0.31622776601683794*gN*Cos(ThetaWp())) * tmp_4225;
   std::complex<double> tmp_4227;
   std::complex<double> tmp_4228;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4228 += Conj(UHIp(gI2,2 + j1))*KroneckerDelta(gO2,2 + j1);
   }
   tmp_4227 += tmp_4228;
   result += (0.5*g2*Cos(ThetaW())*Sin(ThetaWp())) * tmp_4227;
   std::complex<double> tmp_4229;
   std::complex<double> tmp_4230;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4230 += Conj(UHIp(gI2,2 + j1))*KroneckerDelta(gO2,2 + j1);
   }
   tmp_4229 += tmp_4230;
   result += (-0.3872983346207417*g1*Sin(ThetaW())*Sin(ThetaWp())) * tmp_4229;
   if (gO2 < 2) {
      result += -0.4743416490252569*gN*Conj(UHIp(gI2,gO2))*Cos(ThetaWp());
   }
   if (gO2 < 2) {
      result += 0.5*g2*Conj(UHIp(gI2,gO2))*Cos(ThetaW())*Sin(ThetaWp());
   }
   if (gO2 < 2) {
      result += -0.3872983346207417*g1*Conj(UHIp(gI2,gO2))*Sin(ThetaW())*Sin
         (ThetaWp());
   }

   return result;
}

double CLASSNAME::CpUSSI0conjUSSI0VZVZ(unsigned gO1, unsigned gO2) const
{
   double result = 0.0;

   result = 1.25*KroneckerDelta(gO1,gO2)*Sqr(gN)*Sqr(Sin(ThetaWp()));

   return result;
}

double CLASSNAME::CpUSSI0conjUSSI0VZpVZp(unsigned gO1, unsigned gO2) const
{
   double result = 0.0;

   result = 1.25*KroneckerDelta(gO1,gO2)*Sqr(gN)*Sqr(Cos(ThetaWp()));

   return result;
}

std::complex<double> CLASSNAME::CpUSSI0conjUSSI0conjHpmHpm(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = 0.125*KroneckerDelta(gO1,gO2)*Sqr(gN)*(3*ZP(gI1,0)*ZP(gI2,0) + 2*ZP
      (gI1,1)*ZP(gI2,1));

   return result;
}

std::complex<double> CLASSNAME::CpUSSI0conjUSSI0conjSHp0SHp0(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = 0.25*KroneckerDelta(gO1,gO2)*Sqr(gN)*(-(Conj(UHp0(gI2,0))*UHp0(gI1,
      0)) + Conj(UHp0(gI2,1))*UHp0(gI1,1));

   return result;
}

std::complex<double> CLASSNAME::CpUSSI0conjUSSI0conjSHppSHpp(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = 0.25*KroneckerDelta(gO1,gO2)*Sqr(gN)*(-(Conj(UHpp(gI2,0))*UHpp(gI1,
      0)) + Conj(UHpp(gI2,1))*UHpp(gI1,1));

   return result;
}

std::complex<double> CLASSNAME::CpUSSI0conjUSSI0conjSSI0SSI0(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result += -0.625*KroneckerDelta(gI1,gI2)*KroneckerDelta(gO1,gO2)*Sqr(gN);
   if (gI1 < 2 && gI2 < 2) {
      result += -0.625*Conj(ZSSI(gI2,gO2))*Sqr(gN)*ZSSI(gI1,gO1);
   }

   return result;
}

std::complex<double> CLASSNAME::CpconjUSSI0SSI0hh(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   if (gI1 < 2) {
      result += 0.375*vd*Conj(ZSSI(gI1,gO2))*Sqr(gN)*ZH(gI2,0);
   }
   if (gI1 < 2) {
      result += 0.25*vu*Conj(ZSSI(gI1,gO2))*Sqr(gN)*ZH(gI2,1);
   }
   if (gI1 < 2) {
      result += -0.625*vs*Conj(ZSSI(gI1,gO2))*Sqr(gN)*ZH(gI2,2);
   }

   return result;
}

double CLASSNAME::CpconjUSSI0FSIChiPR(unsigned , unsigned , unsigned ) const
{
   double result = 0.0;

   result = 0;

   return result;
}

std::complex<double> CLASSNAME::CpconjUSSI0FSIChiPL(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   if (gO1 < 2) {
      result += -1.118033988749895*gN*Conj(ZFSI(gI1,gO1))*Conj(ZN(gI2,5));
   }

   return result;
}

std::complex<double> CLASSNAME::CpUSSI0conjUSSI0AhAh(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = 0.125*KroneckerDelta(gO1,gO2)*Sqr(gN)*(3*ZA(gI1,0)*ZA(gI2,0) + 2*ZA
      (gI1,1)*ZA(gI2,1) - 5*ZA(gI1,2)*ZA(gI2,2));

   return result;
}

double CLASSNAME::CpUSSI0conjUSSI0conjSvSv(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   double result = 0.0;

   result = -0.25*KroneckerDelta(gI1,gI2)*KroneckerDelta(gO1,gO2)*Sqr(gN);

   return result;
}

std::complex<double> CLASSNAME::CpUSSI0conjUSSI0hhhh(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = 0.125*KroneckerDelta(gO1,gO2)*Sqr(gN)*(3*ZH(gI1,0)*ZH(gI2,0) + 2*ZH
      (gI1,1)*ZH(gI2,1) - 5*ZH(gI1,2)*ZH(gI2,2));

   return result;
}

std::complex<double> CLASSNAME::CpUSSI0conjUSSI0conjSHI0SHI0(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_4231;
   std::complex<double> tmp_4232;
   std::complex<double> tmp_4233;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4233 += Conj(UHI0(gI2,j1))*UHI0(gI1,j1);
   }
   tmp_4232 += tmp_4233;
   tmp_4231 += (std::complex<double>(0,0.375)*KroneckerDelta(gO1,gO2)*Sqr(gN))
      * tmp_4232;
   std::complex<double> tmp_4234;
   std::complex<double> tmp_4235;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4235 += Conj(UHI0(gI2,2 + j1))*UHI0(gI1,2 + j1);
   }
   tmp_4234 += tmp_4235;
   tmp_4231 += (std::complex<double>(0,0.25)*KroneckerDelta(gO1,gO2)*Sqr(gN)) *
      tmp_4234;
   result += (std::complex<double>(0,-1)) * tmp_4231;

   return result;
}

std::complex<double> CLASSNAME::CpUSSI0conjUSSI0conjSHIpSHIp(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_4236;
   std::complex<double> tmp_4237;
   std::complex<double> tmp_4238;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4238 += Conj(UHIp(gI2,j1))*UHIp(gI1,j1);
   }
   tmp_4237 += tmp_4238;
   tmp_4236 += (std::complex<double>(0,0.375)*KroneckerDelta(gO1,gO2)*Sqr(gN))
      * tmp_4237;
   std::complex<double> tmp_4239;
   std::complex<double> tmp_4240;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4240 += Conj(UHIp(gI2,2 + j1))*UHIp(gI1,2 + j1);
   }
   tmp_4239 += tmp_4240;
   tmp_4236 += (std::complex<double>(0,0.25)*KroneckerDelta(gO1,gO2)*Sqr(gN)) *
      tmp_4239;
   result += (std::complex<double>(0,-1)) * tmp_4236;

   return result;
}

std::complex<double> CLASSNAME::CpUSSI0conjUSSI0conjSdSd(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_4241;
   std::complex<double> tmp_4242;
   std::complex<double> tmp_4243;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4243 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
   }
   tmp_4242 += tmp_4243;
   tmp_4241 += (std::complex<double>(0,-0.125)*KroneckerDelta(gO1,gO2)*Sqr(gN))
      * tmp_4242;
   std::complex<double> tmp_4244;
   std::complex<double> tmp_4245;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4245 += Conj(ZD(gI2,3 + j1))*ZD(gI1,3 + j1);
   }
   tmp_4244 += tmp_4245;
   tmp_4241 += (std::complex<double>(0,-0.25)*KroneckerDelta(gO1,gO2)*Sqr(gN))
      * tmp_4244;
   result += (std::complex<double>(0,-1)) * tmp_4241;

   return result;
}

std::complex<double> CLASSNAME::CpUSSI0conjUSSI0conjSDXSDX(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_4246;
   std::complex<double> tmp_4247;
   std::complex<double> tmp_4248;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4248 += Conj(ZDX(gI2,j1))*ZDX(gI1,j1);
   }
   tmp_4247 += tmp_4248;
   tmp_4246 += (std::complex<double>(0,0.25)*KroneckerDelta(gO1,gO2)*Sqr(gN)) *
      tmp_4247;
   std::complex<double> tmp_4249;
   std::complex<double> tmp_4250;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4250 += Conj(ZDX(gI2,3 + j1))*ZDX(gI1,3 + j1);
   }
   tmp_4249 += tmp_4250;
   tmp_4246 += (std::complex<double>(0,0.375)*KroneckerDelta(gO1,gO2)*Sqr(gN))
      * tmp_4249;
   result += (std::complex<double>(0,-1)) * tmp_4246;

   return result;
}

std::complex<double> CLASSNAME::CpUSSI0conjUSSI0conjSeSe(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_4251;
   std::complex<double> tmp_4252;
   std::complex<double> tmp_4253;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4253 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
   }
   tmp_4252 += tmp_4253;
   tmp_4251 += (std::complex<double>(0,-0.25)*KroneckerDelta(gO1,gO2)*Sqr(gN))
      * tmp_4252;
   std::complex<double> tmp_4254;
   std::complex<double> tmp_4255;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4255 += Conj(ZE(gI2,3 + j1))*ZE(gI1,3 + j1);
   }
   tmp_4254 += tmp_4255;
   tmp_4251 += (std::complex<double>(0,-0.125)*KroneckerDelta(gO1,gO2)*Sqr(gN))
      * tmp_4254;
   result += (std::complex<double>(0,-1)) * tmp_4251;

   return result;
}

double CLASSNAME::CpUSSI0conjUSSI0conjSuSu(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   double result = 0.0;

   result = -0.125*KroneckerDelta(gI1,gI2)*KroneckerDelta(gO1,gO2)*Sqr(gN);

   return result;
}

std::complex<double> CLASSNAME::CpconjUSSI0VZSSI0(unsigned gO2, unsigned gI2) const
{
   std::complex<double> result;

   if (gI2 < 2) {
      result += 0.7905694150420949*gN*Conj(ZSSI(gI2,gO2))*Sin(ThetaWp());
   }

   return result;
}

std::complex<double> CLASSNAME::CpconjUSSI0VZpSSI0(unsigned gO2, unsigned gI2) const
{
   std::complex<double> result;

   if (gI2 < 2) {
      result += 0.7905694150420949*gN*Conj(ZSSI(gI2,gO2))*Cos(ThetaWp());
   }

   return result;
}

std::complex<double> CLASSNAME::CpUSHp0conjUSHp0VZVZ(unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   result = -0.0125*(KroneckerDelta(0,gO1)*KroneckerDelta(0,gO2) +
      KroneckerDelta(1,gO1)*KroneckerDelta(1,gO2))*(-9.797958971132712*g1*gN*Cos(
      ThetaW() - 2*ThetaWp()) + 9.797958971132712*g1*gN*Cos(ThetaW() + 2*ThetaWp()
      ) - 15.491933384829668*g1*g2*Sin(2*ThetaW()) + 12.649110640673518*g2*gN*Sin(
      ThetaW() - 2*ThetaWp()) - 7.745966692414834*g1*g2*Sin(2*(ThetaW() - ThetaWp(
      ))) - 7.745966692414834*g1*g2*Sin(2*(ThetaW() + ThetaWp())) -
      12.649110640673518*g2*gN*Sin(ThetaW() + 2*ThetaWp()) - 6*Sqr(g1) + 3*Cos(2*(
      ThetaW() - ThetaWp()))*Sqr(g1) - 6*Cos(2*ThetaWp())*Sqr(g1) + 3*Cos(2*(
      ThetaW() + ThetaWp()))*Sqr(g1) + 2*Cos(2*ThetaW())*(3*Sqr(g1) - 5*Sqr(g2)) -
      10*Sqr(g2) - 5*Cos(2*(ThetaW() - ThetaWp()))*Sqr(g2) - 10*Cos(2*ThetaWp())*
      Sqr(g2) - 5*Cos(2*(ThetaW() + ThetaWp()))*Sqr(g2) - 8*Sqr(gN) + 8*Cos(2*
      ThetaWp())*Sqr(gN));

   return result;
}

std::complex<double> CLASSNAME::CpUSHp0conjUSHp0VZpVZp(unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   result = 0.0125*(KroneckerDelta(0,gO1)*KroneckerDelta(0,gO2) +
      KroneckerDelta(1,gO1)*KroneckerDelta(1,gO2))*(-9.797958971132712*g1*gN*Cos(
      ThetaW() - 2*ThetaWp()) + 9.797958971132712*g1*gN*Cos(ThetaW() + 2*ThetaWp()
      ) + 15.491933384829668*g1*g2*Sin(2*ThetaW()) + 12.649110640673518*g2*gN*Sin(
      ThetaW() - 2*ThetaWp()) - 7.745966692414834*g1*g2*Sin(2*(ThetaW() - ThetaWp(
      ))) - 7.745966692414834*g1*g2*Sin(2*(ThetaW() + ThetaWp())) -
      12.649110640673518*g2*gN*Sin(ThetaW() + 2*ThetaWp()) + 6*Sqr(g1) + 3*Cos(2*(
      ThetaW() - ThetaWp()))*Sqr(g1) - 6*Cos(2*ThetaWp())*Sqr(g1) + 3*Cos(2*(
      ThetaW() + ThetaWp()))*Sqr(g1) + 10*Sqr(g2) - 5*Cos(2*(ThetaW() - ThetaWp())
      )*Sqr(g2) - 10*Cos(2*ThetaWp())*Sqr(g2) - 5*Cos(2*(ThetaW() + ThetaWp()))*
      Sqr(g2) + Cos(2*ThetaW())*(-6*Sqr(g1) + 10*Sqr(g2)) + 8*Sqr(gN) + 8*Cos(2*
      ThetaWp())*Sqr(gN));

   return result;
}

std::complex<double> CLASSNAME::CpUSHp0conjUSHp0conjVWmVWm(unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   result = 0.5*(KroneckerDelta(0,gO1)*KroneckerDelta(0,gO2) + KroneckerDelta(1
      ,gO1)*KroneckerDelta(1,gO2))*Sqr(g2);

   return result;
}

std::complex<double> CLASSNAME::CpUSHp0conjUSHp0conjHpmHpm(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = -0.05*(KroneckerDelta(0,gO1)*KroneckerDelta(0,gO2) - KroneckerDelta
      (1,gO1)*KroneckerDelta(1,gO2))*((3*Sqr(g1) - 5*Sqr(g2) - 3*Sqr(gN))*ZP(gI1,0
      )*ZP(gI2,0) + (-3*Sqr(g1) + 5*Sqr(g2) - 2*Sqr(gN))*ZP(gI1,1)*ZP(gI2,1));

   return result;
}

std::complex<double> CLASSNAME::CpUSHp0conjUSHp0conjSHp0SHp0(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = -0.05*(3*Sqr(g1) + 5*Sqr(g2) + 2*Sqr(gN))*(-(Conj(UHp0(gI2,1))*(-2*
      KroneckerDelta(1,gO1)*KroneckerDelta(1,gO2)*UHp0(gI1,1) + KroneckerDelta(0,
      gO1)*(KroneckerDelta(1,gO2)*UHp0(gI1,0) + KroneckerDelta(0,gO2)*UHp0(gI1,1))
      )) + Conj(UHp0(gI2,0))*(2*KroneckerDelta(0,gO1)*KroneckerDelta(0,gO2)*UHp0(
      gI1,0) - KroneckerDelta(1,gO1)*(KroneckerDelta(1,gO2)*UHp0(gI1,0) +
      KroneckerDelta(0,gO2)*UHp0(gI1,1))));

   return result;
}

std::complex<double> CLASSNAME::CpUSHp0conjUSHp0conjSHppSHpp(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = 0.05*(-(Conj(UHpp(gI2,0))*(KroneckerDelta(0,gO1)*KroneckerDelta(0,
      gO2)*(3*Sqr(g1) + 5*Sqr(g2) + 2*Sqr(gN))*UHpp(gI1,0) + KroneckerDelta(1,gO1)
      *(KroneckerDelta(1,gO2)*(-3*Sqr(g1) + 5*Sqr(g2) - 2*Sqr(gN))*UHpp(gI1,0) +
      10*KroneckerDelta(0,gO2)*Sqr(g2)*UHpp(gI1,1)))) - Conj(UHpp(gI2,1))*(
      KroneckerDelta(1,gO1)*KroneckerDelta(1,gO2)*(3*Sqr(g1) + 5*Sqr(g2) + 2*Sqr(
      gN))*UHpp(gI1,1) + KroneckerDelta(0,gO1)*(10*KroneckerDelta(1,gO2)*Sqr(g2)*
      UHpp(gI1,0) + KroneckerDelta(0,gO2)*(-3*Sqr(g1) + 5*Sqr(g2) - 2*Sqr(gN))*
      UHpp(gI1,1))));

   return result;
}

std::complex<double> CLASSNAME::CpUSHp0conjUSHp0conjSSI0SSI0(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = 0.25*(-(KroneckerDelta(0,gO1)*KroneckerDelta(0,gO2)) +
      KroneckerDelta(1,gO1)*KroneckerDelta(1,gO2))*KroneckerDelta(gI1,gI2)*Sqr(gN)
      ;

   return result;
}

std::complex<double> CLASSNAME::CpconjUSHp0conjHpmSHpp(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = -0.35355339059327373*(Conj(UHpp(gI2,0))*KroneckerDelta(0,gO2) +
      Conj(UHpp(gI2,1))*KroneckerDelta(1,gO2))*Sqr(g2)*(vd*ZP(gI1,0) + vu*ZP(gI1,1
      ));

   return result;
}

std::complex<double> CLASSNAME::CpconjUSHp0SHp0hh(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = -0.05*(Conj(UHp0(gI1,0))*KroneckerDelta(0,gO2) - Conj(UHp0(gI1,1))*
      KroneckerDelta(1,gO2))*(vd*(3*Sqr(g1) + 5*Sqr(g2) - 3*Sqr(gN))*ZH(gI2,0) -
      vu*(3*Sqr(g1) + 5*Sqr(g2) + 2*Sqr(gN))*ZH(gI2,1) + 5*vs*Sqr(gN)*ZH(gI2,2));

   return result;
}

std::complex<double> CLASSNAME::CpconjUSHp0ChiPChiPR(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = 0.1*KroneckerDelta(1,gO2)*(-5.477225575051661*g1*ZN(gI2,0) +
      7.0710678118654755*g2*ZN(gI2,1) + 4.47213595499958*gN*ZN(gI2,5))*ZNp(gI1,1);

   return result;
}

std::complex<double> CLASSNAME::CpconjUSHp0ChiPChiPL(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = 0.1*(5.477225575051661*g1*Conj(ZN(gI2,0)) - 7.0710678118654755*g2*
      Conj(ZN(gI2,1)) - 4.47213595499958*gN*Conj(ZN(gI2,5)))*Conj(ZNp(gI1,0))*
      KroneckerDelta(0,gO1);

   return result;
}

std::complex<double> CLASSNAME::CpconjUSHp0barChaChaPPR(unsigned gO2, unsigned gI1) const
{
   std::complex<double> result;

   result = -(g2*KroneckerDelta(1,gO2)*UM(gI1,0));

   return result;
}

std::complex<double> CLASSNAME::CpconjUSHp0barChaChaPPL(unsigned gO1, unsigned gI1) const
{
   std::complex<double> result;

   result = -(g2*Conj(UP(gI1,0))*KroneckerDelta(0,gO1));

   return result;
}

std::complex<double> CLASSNAME::CpUSHp0conjUSHp0AhAh(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = -0.05*(KroneckerDelta(0,gO1)*KroneckerDelta(0,gO2) - KroneckerDelta
      (1,gO1)*KroneckerDelta(1,gO2))*((3*Sqr(g1) + 5*Sqr(g2) - 3*Sqr(gN))*ZA(gI1,0
      )*ZA(gI2,0) - (3*Sqr(g1) + 5*Sqr(g2) + 2*Sqr(gN))*ZA(gI1,1)*ZA(gI2,1) + 5*
      Sqr(gN)*ZA(gI1,2)*ZA(gI2,2));

   return result;
}

std::complex<double> CLASSNAME::CpUSHp0conjUSHp0conjSvSv(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = -0.05*(KroneckerDelta(0,gO1)*KroneckerDelta(0,gO2) - KroneckerDelta
      (1,gO1)*KroneckerDelta(1,gO2))*KroneckerDelta(gI1,gI2)*(3*Sqr(g1) + 5*Sqr(g2
      ) + 2*Sqr(gN));

   return result;
}

std::complex<double> CLASSNAME::CpUSHp0conjUSHp0hhhh(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = -0.05*(KroneckerDelta(0,gO1)*KroneckerDelta(0,gO2) - KroneckerDelta
      (1,gO1)*KroneckerDelta(1,gO2))*((3*Sqr(g1) + 5*Sqr(g2) - 3*Sqr(gN))*ZH(gI1,0
      )*ZH(gI2,0) - (3*Sqr(g1) + 5*Sqr(g2) + 2*Sqr(gN))*ZH(gI1,1)*ZH(gI2,1) + 5*
      Sqr(gN)*ZH(gI1,2)*ZH(gI2,2));

   return result;
}

std::complex<double> CLASSNAME::CpUSHp0conjUSHp0conjSHI0SHI0(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_4256;
   std::complex<double> tmp_4257;
   std::complex<double> tmp_4258;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4258 += Conj(UHI0(gI2,j1))*UHI0(gI1,j1);
   }
   tmp_4257 += tmp_4258;
   tmp_4256 += (std::complex<double>(0,-0.15)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1)) * tmp_4257;
   std::complex<double> tmp_4259;
   std::complex<double> tmp_4260;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4260 += Conj(UHI0(gI2,j1))*UHI0(gI1,j1);
   }
   tmp_4259 += tmp_4260;
   tmp_4256 += (std::complex<double>(0,-0.25)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g2)) * tmp_4259;
   std::complex<double> tmp_4261;
   std::complex<double> tmp_4262;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4262 += Conj(UHI0(gI2,j1))*UHI0(gI1,j1);
   }
   tmp_4261 += tmp_4262;
   tmp_4256 += (std::complex<double>(0,0.15)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(gN)) * tmp_4261;
   std::complex<double> tmp_4263;
   std::complex<double> tmp_4264;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4264 += Conj(UHI0(gI2,j1))*UHI0(gI1,j1);
   }
   tmp_4263 += tmp_4264;
   tmp_4256 += (std::complex<double>(0,0.15)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1)) * tmp_4263;
   std::complex<double> tmp_4265;
   std::complex<double> tmp_4266;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4266 += Conj(UHI0(gI2,j1))*UHI0(gI1,j1);
   }
   tmp_4265 += tmp_4266;
   tmp_4256 += (std::complex<double>(0,0.25)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g2)) * tmp_4265;
   std::complex<double> tmp_4267;
   std::complex<double> tmp_4268;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4268 += Conj(UHI0(gI2,j1))*UHI0(gI1,j1);
   }
   tmp_4267 += tmp_4268;
   tmp_4256 += (std::complex<double>(0,-0.15)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(gN)) * tmp_4267;
   std::complex<double> tmp_4269;
   std::complex<double> tmp_4270;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4270 += Conj(UHI0(gI2,2 + j1))*UHI0(gI1,2 + j1);
   }
   tmp_4269 += tmp_4270;
   tmp_4256 += (std::complex<double>(0,0.15)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1)) * tmp_4269;
   std::complex<double> tmp_4271;
   std::complex<double> tmp_4272;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4272 += Conj(UHI0(gI2,2 + j1))*UHI0(gI1,2 + j1);
   }
   tmp_4271 += tmp_4272;
   tmp_4256 += (std::complex<double>(0,0.25)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g2)) * tmp_4271;
   std::complex<double> tmp_4273;
   std::complex<double> tmp_4274;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4274 += Conj(UHI0(gI2,2 + j1))*UHI0(gI1,2 + j1);
   }
   tmp_4273 += tmp_4274;
   tmp_4256 += (std::complex<double>(0,0.1)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(gN)) * tmp_4273;
   std::complex<double> tmp_4275;
   std::complex<double> tmp_4276;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4276 += Conj(UHI0(gI2,2 + j1))*UHI0(gI1,2 + j1);
   }
   tmp_4275 += tmp_4276;
   tmp_4256 += (std::complex<double>(0,-0.15)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1)) * tmp_4275;
   std::complex<double> tmp_4277;
   std::complex<double> tmp_4278;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4278 += Conj(UHI0(gI2,2 + j1))*UHI0(gI1,2 + j1);
   }
   tmp_4277 += tmp_4278;
   tmp_4256 += (std::complex<double>(0,-0.25)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g2)) * tmp_4277;
   std::complex<double> tmp_4279;
   std::complex<double> tmp_4280;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4280 += Conj(UHI0(gI2,2 + j1))*UHI0(gI1,2 + j1);
   }
   tmp_4279 += tmp_4280;
   tmp_4256 += (std::complex<double>(0,-0.1)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(gN)) * tmp_4279;
   result += (std::complex<double>(0,-1)) * tmp_4256;

   return result;
}

std::complex<double> CLASSNAME::CpUSHp0conjUSHp0conjSHIpSHIp(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_4281;
   std::complex<double> tmp_4282;
   std::complex<double> tmp_4283;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4283 += Conj(UHIp(gI2,j1))*UHIp(gI1,j1);
   }
   tmp_4282 += tmp_4283;
   tmp_4281 += (std::complex<double>(0,-0.15)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1)) * tmp_4282;
   std::complex<double> tmp_4284;
   std::complex<double> tmp_4285;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4285 += Conj(UHIp(gI2,j1))*UHIp(gI1,j1);
   }
   tmp_4284 += tmp_4285;
   tmp_4281 += (std::complex<double>(0,0.25)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g2)) * tmp_4284;
   std::complex<double> tmp_4286;
   std::complex<double> tmp_4287;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4287 += Conj(UHIp(gI2,j1))*UHIp(gI1,j1);
   }
   tmp_4286 += tmp_4287;
   tmp_4281 += (std::complex<double>(0,0.15)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(gN)) * tmp_4286;
   std::complex<double> tmp_4288;
   std::complex<double> tmp_4289;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4289 += Conj(UHIp(gI2,j1))*UHIp(gI1,j1);
   }
   tmp_4288 += tmp_4289;
   tmp_4281 += (std::complex<double>(0,0.15)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1)) * tmp_4288;
   std::complex<double> tmp_4290;
   std::complex<double> tmp_4291;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4291 += Conj(UHIp(gI2,j1))*UHIp(gI1,j1);
   }
   tmp_4290 += tmp_4291;
   tmp_4281 += (std::complex<double>(0,-0.25)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g2)) * tmp_4290;
   std::complex<double> tmp_4292;
   std::complex<double> tmp_4293;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4293 += Conj(UHIp(gI2,j1))*UHIp(gI1,j1);
   }
   tmp_4292 += tmp_4293;
   tmp_4281 += (std::complex<double>(0,-0.15)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(gN)) * tmp_4292;
   std::complex<double> tmp_4294;
   std::complex<double> tmp_4295;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4295 += Conj(UHIp(gI2,2 + j1))*UHIp(gI1,2 + j1);
   }
   tmp_4294 += tmp_4295;
   tmp_4281 += (std::complex<double>(0,0.15)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1)) * tmp_4294;
   std::complex<double> tmp_4296;
   std::complex<double> tmp_4297;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4297 += Conj(UHIp(gI2,2 + j1))*UHIp(gI1,2 + j1);
   }
   tmp_4296 += tmp_4297;
   tmp_4281 += (std::complex<double>(0,-0.25)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g2)) * tmp_4296;
   std::complex<double> tmp_4298;
   std::complex<double> tmp_4299;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4299 += Conj(UHIp(gI2,2 + j1))*UHIp(gI1,2 + j1);
   }
   tmp_4298 += tmp_4299;
   tmp_4281 += (std::complex<double>(0,0.1)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(gN)) * tmp_4298;
   std::complex<double> tmp_4300;
   std::complex<double> tmp_4301;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4301 += Conj(UHIp(gI2,2 + j1))*UHIp(gI1,2 + j1);
   }
   tmp_4300 += tmp_4301;
   tmp_4281 += (std::complex<double>(0,-0.15)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1)) * tmp_4300;
   std::complex<double> tmp_4302;
   std::complex<double> tmp_4303;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4303 += Conj(UHIp(gI2,2 + j1))*UHIp(gI1,2 + j1);
   }
   tmp_4302 += tmp_4303;
   tmp_4281 += (std::complex<double>(0,0.25)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g2)) * tmp_4302;
   std::complex<double> tmp_4304;
   std::complex<double> tmp_4305;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4305 += Conj(UHIp(gI2,2 + j1))*UHIp(gI1,2 + j1);
   }
   tmp_4304 += tmp_4305;
   tmp_4281 += (std::complex<double>(0,-0.1)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(gN)) * tmp_4304;
   result += (std::complex<double>(0,-1)) * tmp_4281;

   return result;
}

std::complex<double> CLASSNAME::CpUSHp0conjUSHp0conjSdSd(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_4306;
   std::complex<double> tmp_4307;
   std::complex<double> tmp_4308;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4308 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
   }
   tmp_4307 += tmp_4308;
   tmp_4306 += (std::complex<double>(0,0.05)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1)) * tmp_4307;
   std::complex<double> tmp_4309;
   std::complex<double> tmp_4310;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4310 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
   }
   tmp_4309 += tmp_4310;
   tmp_4306 += (std::complex<double>(0,0.25)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g2)) * tmp_4309;
   std::complex<double> tmp_4311;
   std::complex<double> tmp_4312;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4312 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
   }
   tmp_4311 += tmp_4312;
   tmp_4306 += (std::complex<double>(0,-0.05)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(gN)) * tmp_4311;
   std::complex<double> tmp_4313;
   std::complex<double> tmp_4314;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4314 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
   }
   tmp_4313 += tmp_4314;
   tmp_4306 += (std::complex<double>(0,-0.05)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1)) * tmp_4313;
   std::complex<double> tmp_4315;
   std::complex<double> tmp_4316;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4316 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
   }
   tmp_4315 += tmp_4316;
   tmp_4306 += (std::complex<double>(0,-0.25)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g2)) * tmp_4315;
   std::complex<double> tmp_4317;
   std::complex<double> tmp_4318;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4318 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
   }
   tmp_4317 += tmp_4318;
   tmp_4306 += (std::complex<double>(0,0.05)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(gN)) * tmp_4317;
   std::complex<double> tmp_4319;
   std::complex<double> tmp_4320;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4320 += Conj(ZD(gI2,3 + j1))*ZD(gI1,3 + j1);
   }
   tmp_4319 += tmp_4320;
   tmp_4306 += (std::complex<double>(0,0.1)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1)) * tmp_4319;
   std::complex<double> tmp_4321;
   std::complex<double> tmp_4322;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4322 += Conj(ZD(gI2,3 + j1))*ZD(gI1,3 + j1);
   }
   tmp_4321 += tmp_4322;
   tmp_4306 += (std::complex<double>(0,-0.1)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(gN)) * tmp_4321;
   std::complex<double> tmp_4323;
   std::complex<double> tmp_4324;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4324 += Conj(ZD(gI2,3 + j1))*ZD(gI1,3 + j1);
   }
   tmp_4323 += tmp_4324;
   tmp_4306 += (std::complex<double>(0,-0.1)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1)) * tmp_4323;
   std::complex<double> tmp_4325;
   std::complex<double> tmp_4326;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4326 += Conj(ZD(gI2,3 + j1))*ZD(gI1,3 + j1);
   }
   tmp_4325 += tmp_4326;
   tmp_4306 += (std::complex<double>(0,0.1)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(gN)) * tmp_4325;
   result += (std::complex<double>(0,-1)) * tmp_4306;

   return result;
}

std::complex<double> CLASSNAME::CpUSHp0conjUSHp0conjSDXSDX(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_4327;
   std::complex<double> tmp_4328;
   std::complex<double> tmp_4329;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4329 += Conj(ZDX(gI2,j1))*ZDX(gI1,j1);
   }
   tmp_4328 += tmp_4329;
   tmp_4327 += (std::complex<double>(0,-0.1)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1)) * tmp_4328;
   std::complex<double> tmp_4330;
   std::complex<double> tmp_4331;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4331 += Conj(ZDX(gI2,j1))*ZDX(gI1,j1);
   }
   tmp_4330 += tmp_4331;
   tmp_4327 += (std::complex<double>(0,0.1)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(gN)) * tmp_4330;
   std::complex<double> tmp_4332;
   std::complex<double> tmp_4333;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4333 += Conj(ZDX(gI2,j1))*ZDX(gI1,j1);
   }
   tmp_4332 += tmp_4333;
   tmp_4327 += (std::complex<double>(0,0.1)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1)) * tmp_4332;
   std::complex<double> tmp_4334;
   std::complex<double> tmp_4335;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4335 += Conj(ZDX(gI2,j1))*ZDX(gI1,j1);
   }
   tmp_4334 += tmp_4335;
   tmp_4327 += (std::complex<double>(0,-0.1)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(gN)) * tmp_4334;
   std::complex<double> tmp_4336;
   std::complex<double> tmp_4337;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4337 += Conj(ZDX(gI2,3 + j1))*ZDX(gI1,3 + j1);
   }
   tmp_4336 += tmp_4337;
   tmp_4327 += (std::complex<double>(0,0.1)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1)) * tmp_4336;
   std::complex<double> tmp_4338;
   std::complex<double> tmp_4339;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4339 += Conj(ZDX(gI2,3 + j1))*ZDX(gI1,3 + j1);
   }
   tmp_4338 += tmp_4339;
   tmp_4327 += (std::complex<double>(0,0.15)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(gN)) * tmp_4338;
   std::complex<double> tmp_4340;
   std::complex<double> tmp_4341;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4341 += Conj(ZDX(gI2,3 + j1))*ZDX(gI1,3 + j1);
   }
   tmp_4340 += tmp_4341;
   tmp_4327 += (std::complex<double>(0,-0.1)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1)) * tmp_4340;
   std::complex<double> tmp_4342;
   std::complex<double> tmp_4343;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4343 += Conj(ZDX(gI2,3 + j1))*ZDX(gI1,3 + j1);
   }
   tmp_4342 += tmp_4343;
   tmp_4327 += (std::complex<double>(0,-0.15)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(gN)) * tmp_4342;
   result += (std::complex<double>(0,-1)) * tmp_4327;

   return result;
}

std::complex<double> CLASSNAME::CpUSHp0conjUSHp0conjSeSe(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_4344;
   std::complex<double> tmp_4345;
   std::complex<double> tmp_4346;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4346 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
   }
   tmp_4345 += tmp_4346;
   tmp_4344 += (std::complex<double>(0,-0.15)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1)) * tmp_4345;
   std::complex<double> tmp_4347;
   std::complex<double> tmp_4348;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4348 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
   }
   tmp_4347 += tmp_4348;
   tmp_4344 += (std::complex<double>(0,0.25)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g2)) * tmp_4347;
   std::complex<double> tmp_4349;
   std::complex<double> tmp_4350;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4350 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
   }
   tmp_4349 += tmp_4350;
   tmp_4344 += (std::complex<double>(0,-0.1)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(gN)) * tmp_4349;
   std::complex<double> tmp_4351;
   std::complex<double> tmp_4352;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4352 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
   }
   tmp_4351 += tmp_4352;
   tmp_4344 += (std::complex<double>(0,0.15)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1)) * tmp_4351;
   std::complex<double> tmp_4353;
   std::complex<double> tmp_4354;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4354 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
   }
   tmp_4353 += tmp_4354;
   tmp_4344 += (std::complex<double>(0,-0.25)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g2)) * tmp_4353;
   std::complex<double> tmp_4355;
   std::complex<double> tmp_4356;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4356 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
   }
   tmp_4355 += tmp_4356;
   tmp_4344 += (std::complex<double>(0,0.1)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(gN)) * tmp_4355;
   std::complex<double> tmp_4357;
   std::complex<double> tmp_4358;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4358 += Conj(ZE(gI2,3 + j1))*ZE(gI1,3 + j1);
   }
   tmp_4357 += tmp_4358;
   tmp_4344 += (std::complex<double>(0,0.3)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1)) * tmp_4357;
   std::complex<double> tmp_4359;
   std::complex<double> tmp_4360;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4360 += Conj(ZE(gI2,3 + j1))*ZE(gI1,3 + j1);
   }
   tmp_4359 += tmp_4360;
   tmp_4344 += (std::complex<double>(0,-0.05)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(gN)) * tmp_4359;
   std::complex<double> tmp_4361;
   std::complex<double> tmp_4362;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4362 += Conj(ZE(gI2,3 + j1))*ZE(gI1,3 + j1);
   }
   tmp_4361 += tmp_4362;
   tmp_4344 += (std::complex<double>(0,-0.3)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1)) * tmp_4361;
   std::complex<double> tmp_4363;
   std::complex<double> tmp_4364;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4364 += Conj(ZE(gI2,3 + j1))*ZE(gI1,3 + j1);
   }
   tmp_4363 += tmp_4364;
   tmp_4344 += (std::complex<double>(0,0.05)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(gN)) * tmp_4363;
   result += (std::complex<double>(0,-1)) * tmp_4344;

   return result;
}

std::complex<double> CLASSNAME::CpUSHp0conjUSHp0conjSuSu(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_4365;
   std::complex<double> tmp_4366;
   std::complex<double> tmp_4367;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4367 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
   }
   tmp_4366 += tmp_4367;
   tmp_4365 += (std::complex<double>(0,0.05)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1)) * tmp_4366;
   std::complex<double> tmp_4368;
   std::complex<double> tmp_4369;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4369 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
   }
   tmp_4368 += tmp_4369;
   tmp_4365 += (std::complex<double>(0,-0.25)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g2)) * tmp_4368;
   std::complex<double> tmp_4370;
   std::complex<double> tmp_4371;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4371 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
   }
   tmp_4370 += tmp_4371;
   tmp_4365 += (std::complex<double>(0,-0.05)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(gN)) * tmp_4370;
   std::complex<double> tmp_4372;
   std::complex<double> tmp_4373;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4373 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
   }
   tmp_4372 += tmp_4373;
   tmp_4365 += (std::complex<double>(0,-0.05)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1)) * tmp_4372;
   std::complex<double> tmp_4374;
   std::complex<double> tmp_4375;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4375 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
   }
   tmp_4374 += tmp_4375;
   tmp_4365 += (std::complex<double>(0,0.25)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g2)) * tmp_4374;
   std::complex<double> tmp_4376;
   std::complex<double> tmp_4377;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4377 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
   }
   tmp_4376 += tmp_4377;
   tmp_4365 += (std::complex<double>(0,0.05)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(gN)) * tmp_4376;
   std::complex<double> tmp_4378;
   std::complex<double> tmp_4379;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4379 += Conj(ZU(gI2,3 + j1))*ZU(gI1,3 + j1);
   }
   tmp_4378 += tmp_4379;
   tmp_4365 += (std::complex<double>(0,-0.2)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1)) * tmp_4378;
   std::complex<double> tmp_4380;
   std::complex<double> tmp_4381;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4381 += Conj(ZU(gI2,3 + j1))*ZU(gI1,3 + j1);
   }
   tmp_4380 += tmp_4381;
   tmp_4365 += (std::complex<double>(0,-0.05)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(gN)) * tmp_4380;
   std::complex<double> tmp_4382;
   std::complex<double> tmp_4383;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4383 += Conj(ZU(gI2,3 + j1))*ZU(gI1,3 + j1);
   }
   tmp_4382 += tmp_4383;
   tmp_4365 += (std::complex<double>(0,0.2)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1)) * tmp_4382;
   std::complex<double> tmp_4384;
   std::complex<double> tmp_4385;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4385 += Conj(ZU(gI2,3 + j1))*ZU(gI1,3 + j1);
   }
   tmp_4384 += tmp_4385;
   tmp_4365 += (std::complex<double>(0,0.05)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(gN)) * tmp_4384;
   result += (std::complex<double>(0,-1)) * tmp_4365;

   return result;
}

std::complex<double> CLASSNAME::CpconjUSHp0VZSHp0(unsigned gO2, unsigned gI2) const
{
   std::complex<double> result;

   if (gI2 < 2) {
      result += 0.5*g2*Conj(UHp0(gI2,gO2))*Cos(ThetaW())*Cos(ThetaWp());
   }
   if (gI2 < 2) {
      result += 0.3872983346207417*g1*Conj(UHp0(gI2,gO2))*Cos(ThetaWp())*Sin
         (ThetaW());
   }
   if (gI2 < 2) {
      result += 0.31622776601683794*gN*Conj(UHp0(gI2,gO2))*Sin(ThetaWp());
   }

   return result;
}

std::complex<double> CLASSNAME::CpconjUSHp0VZpSHp0(unsigned gO2, unsigned gI2) const
{
   std::complex<double> result;

   if (gI2 < 2) {
      result += 0.31622776601683794*gN*Conj(UHp0(gI2,gO2))*Cos(ThetaWp());
   }
   if (gI2 < 2) {
      result += -0.5*g2*Conj(UHp0(gI2,gO2))*Cos(ThetaW())*Sin(ThetaWp());
   }
   if (gI2 < 2) {
      result += -0.3872983346207417*g1*Conj(UHp0(gI2,gO2))*Sin(ThetaW())*Sin
         (ThetaWp());
   }

   return result;
}

std::complex<double> CLASSNAME::CpconjUSHp0conjVWmSHpp(unsigned gO2, unsigned gI2) const
{
   std::complex<double> result;

   result = 0.7071067811865475*g2*(Conj(UHpp(gI2,0))*KroneckerDelta(0,gO2) -
      Conj(UHpp(gI2,1))*KroneckerDelta(1,gO2));

   return result;
}

std::complex<double> CLASSNAME::CpUSHppconjUSHppVZVZ(unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   result = -0.0125*(KroneckerDelta(0,gO1)*KroneckerDelta(0,gO2) +
      KroneckerDelta(1,gO1)*KroneckerDelta(1,gO2))*(-9.797958971132712*g1*gN*Cos(
      ThetaW() - 2*ThetaWp()) + 9.797958971132712*g1*gN*Cos(ThetaW() + 2*ThetaWp()
      ) + 15.491933384829668*g1*g2*Sin(2*ThetaW()) - 12.649110640673518*g2*gN*Sin(
      ThetaW() - 2*ThetaWp()) + 7.745966692414834*g1*g2*Sin(2*(ThetaW() - ThetaWp(
      ))) + 7.745966692414834*g1*g2*Sin(2*(ThetaW() + ThetaWp())) +
      12.649110640673518*g2*gN*Sin(ThetaW() + 2*ThetaWp()) - 6*Sqr(g1) + 3*Cos(2*(
      ThetaW() - ThetaWp()))*Sqr(g1) - 6*Cos(2*ThetaWp())*Sqr(g1) + 3*Cos(2*(
      ThetaW() + ThetaWp()))*Sqr(g1) + 2*Cos(2*ThetaW())*(3*Sqr(g1) - 5*Sqr(g2)) -
      10*Sqr(g2) - 5*Cos(2*(ThetaW() - ThetaWp()))*Sqr(g2) - 10*Cos(2*ThetaWp())*
      Sqr(g2) - 5*Cos(2*(ThetaW() + ThetaWp()))*Sqr(g2) - 8*Sqr(gN) + 8*Cos(2*
      ThetaWp())*Sqr(gN));

   return result;
}

std::complex<double> CLASSNAME::CpUSHppconjUSHppVZpVZp(unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   result = 0.0125*(KroneckerDelta(0,gO1)*KroneckerDelta(0,gO2) +
      KroneckerDelta(1,gO1)*KroneckerDelta(1,gO2))*(-9.797958971132712*g1*gN*Cos(
      ThetaW() - 2*ThetaWp()) + 9.797958971132712*g1*gN*Cos(ThetaW() + 2*ThetaWp()
      ) - 15.491933384829668*g1*g2*Sin(2*ThetaW()) - 12.649110640673518*g2*gN*Sin(
      ThetaW() - 2*ThetaWp()) + 7.745966692414834*g1*g2*Sin(2*(ThetaW() - ThetaWp(
      ))) + 7.745966692414834*g1*g2*Sin(2*(ThetaW() + ThetaWp())) +
      12.649110640673518*g2*gN*Sin(ThetaW() + 2*ThetaWp()) + 6*Sqr(g1) + 3*Cos(2*(
      ThetaW() - ThetaWp()))*Sqr(g1) - 6*Cos(2*ThetaWp())*Sqr(g1) + 3*Cos(2*(
      ThetaW() + ThetaWp()))*Sqr(g1) + 10*Sqr(g2) - 5*Cos(2*(ThetaW() - ThetaWp())
      )*Sqr(g2) - 10*Cos(2*ThetaWp())*Sqr(g2) - 5*Cos(2*(ThetaW() + ThetaWp()))*
      Sqr(g2) + Cos(2*ThetaW())*(-6*Sqr(g1) + 10*Sqr(g2)) + 8*Sqr(gN) + 8*Cos(2*
      ThetaWp())*Sqr(gN));

   return result;
}

std::complex<double> CLASSNAME::CpUSHppconjUSHppconjVWmVWm(unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   result = 0.5*(KroneckerDelta(0,gO1)*KroneckerDelta(0,gO2) + KroneckerDelta(1
      ,gO1)*KroneckerDelta(1,gO2))*Sqr(g2);

   return result;
}

std::complex<double> CLASSNAME::CpUSHppconjUSHppconjHpmHpm(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = -0.05*(KroneckerDelta(0,gO1)*KroneckerDelta(0,gO2) - KroneckerDelta
      (1,gO1)*KroneckerDelta(1,gO2))*((3*Sqr(g1) + 5*Sqr(g2) - 3*Sqr(gN))*ZP(gI1,0
      )*ZP(gI2,0) - (3*Sqr(g1) + 5*Sqr(g2) + 2*Sqr(gN))*ZP(gI1,1)*ZP(gI2,1));

   return result;
}

std::complex<double> CLASSNAME::CpUSHppconjUSHppconjSHp0SHp0(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = 0.05*(-(Conj(UHp0(gI2,0))*(KroneckerDelta(0,gO1)*KroneckerDelta(0,
      gO2)*(3*Sqr(g1) + 5*Sqr(g2) + 2*Sqr(gN))*UHp0(gI1,0) + KroneckerDelta(1,gO1)
      *(KroneckerDelta(1,gO2)*(-3*Sqr(g1) + 5*Sqr(g2) - 2*Sqr(gN))*UHp0(gI1,0) +
      10*KroneckerDelta(0,gO2)*Sqr(g2)*UHp0(gI1,1)))) - Conj(UHp0(gI2,1))*(
      KroneckerDelta(1,gO1)*KroneckerDelta(1,gO2)*(3*Sqr(g1) + 5*Sqr(g2) + 2*Sqr(
      gN))*UHp0(gI1,1) + KroneckerDelta(0,gO1)*(10*KroneckerDelta(1,gO2)*Sqr(g2)*
      UHp0(gI1,0) + KroneckerDelta(0,gO2)*(-3*Sqr(g1) + 5*Sqr(g2) - 2*Sqr(gN))*
      UHp0(gI1,1))));

   return result;
}

std::complex<double> CLASSNAME::CpUSHppconjUSHppconjSHppSHpp(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = -0.05*(3*Sqr(g1) + 5*Sqr(g2) + 2*Sqr(gN))*(-(Conj(UHpp(gI2,1))*(-2*
      KroneckerDelta(1,gO1)*KroneckerDelta(1,gO2)*UHpp(gI1,1) + KroneckerDelta(0,
      gO1)*(KroneckerDelta(1,gO2)*UHpp(gI1,0) + KroneckerDelta(0,gO2)*UHpp(gI1,1))
      )) + Conj(UHpp(gI2,0))*(2*KroneckerDelta(0,gO1)*KroneckerDelta(0,gO2)*UHpp(
      gI1,0) - KroneckerDelta(1,gO1)*(KroneckerDelta(1,gO2)*UHpp(gI1,0) +
      KroneckerDelta(0,gO2)*UHpp(gI1,1))));

   return result;
}

std::complex<double> CLASSNAME::CpUSHppconjUSHppconjSSI0SSI0(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = 0.25*(-(KroneckerDelta(0,gO1)*KroneckerDelta(0,gO2)) +
      KroneckerDelta(1,gO1)*KroneckerDelta(1,gO2))*KroneckerDelta(gI1,gI2)*Sqr(gN)
      ;

   return result;
}

std::complex<double> CLASSNAME::CpconjUSHppSHp0Hpm(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = -0.35355339059327373*(Conj(UHp0(gI1,0))*KroneckerDelta(0,gO2) +
      Conj(UHp0(gI1,1))*KroneckerDelta(1,gO2))*Sqr(g2)*(vd*ZP(gI2,0) + vu*ZP(gI2,1
      ));

   return result;
}

std::complex<double> CLASSNAME::CpconjUSHppChiPChaPR(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = -(g2*KroneckerDelta(1,gO2)*UP(gI2,0)*ZNp(gI1,1));

   return result;
}

std::complex<double> CLASSNAME::CpconjUSHppChiPChaPL(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = -(g2*Conj(UM(gI2,0))*Conj(ZNp(gI1,0))*KroneckerDelta(0,gO1));

   return result;
}

std::complex<double> CLASSNAME::CpconjUSHppSHpphh(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = -0.05*(Conj(UHpp(gI1,0))*KroneckerDelta(0,gO2) - Conj(UHpp(gI1,1))*
      KroneckerDelta(1,gO2))*(vd*(3*Sqr(g1) - 5*Sqr(g2) - 3*Sqr(gN))*ZH(gI2,0) +
      vu*(-3*Sqr(g1) + 5*Sqr(g2) - 2*Sqr(gN))*ZH(gI2,1) + 5*vs*Sqr(gN)*ZH(gI2,2));

   return result;
}

std::complex<double> CLASSNAME::CpUSHppconjUSHppAhAh(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = -0.05*(KroneckerDelta(0,gO1)*KroneckerDelta(0,gO2) - KroneckerDelta
      (1,gO1)*KroneckerDelta(1,gO2))*((3*Sqr(g1) - 5*Sqr(g2) - 3*Sqr(gN))*ZA(gI1,0
      )*ZA(gI2,0) + (-3*Sqr(g1) + 5*Sqr(g2) - 2*Sqr(gN))*ZA(gI1,1)*ZA(gI2,1) + 5*
      Sqr(gN)*ZA(gI1,2)*ZA(gI2,2));

   return result;
}

std::complex<double> CLASSNAME::CpUSHppconjUSHppconjSvSv(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = -0.05*(KroneckerDelta(0,gO1)*KroneckerDelta(0,gO2) - KroneckerDelta
      (1,gO1)*KroneckerDelta(1,gO2))*KroneckerDelta(gI1,gI2)*(3*Sqr(g1) - 5*Sqr(g2
      ) + 2*Sqr(gN));

   return result;
}

std::complex<double> CLASSNAME::CpUSHppconjUSHpphhhh(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = -0.05*(KroneckerDelta(0,gO1)*KroneckerDelta(0,gO2) - KroneckerDelta
      (1,gO1)*KroneckerDelta(1,gO2))*((3*Sqr(g1) - 5*Sqr(g2) - 3*Sqr(gN))*ZH(gI1,0
      )*ZH(gI2,0) + (-3*Sqr(g1) + 5*Sqr(g2) - 2*Sqr(gN))*ZH(gI1,1)*ZH(gI2,1) + 5*
      Sqr(gN)*ZH(gI1,2)*ZH(gI2,2));

   return result;
}

std::complex<double> CLASSNAME::CpUSHppconjUSHppconjSHI0SHI0(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_4386;
   std::complex<double> tmp_4387;
   std::complex<double> tmp_4388;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4388 += Conj(UHI0(gI2,j1))*UHI0(gI1,j1);
   }
   tmp_4387 += tmp_4388;
   tmp_4386 += (std::complex<double>(0,-0.15)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1)) * tmp_4387;
   std::complex<double> tmp_4389;
   std::complex<double> tmp_4390;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4390 += Conj(UHI0(gI2,j1))*UHI0(gI1,j1);
   }
   tmp_4389 += tmp_4390;
   tmp_4386 += (std::complex<double>(0,0.25)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g2)) * tmp_4389;
   std::complex<double> tmp_4391;
   std::complex<double> tmp_4392;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4392 += Conj(UHI0(gI2,j1))*UHI0(gI1,j1);
   }
   tmp_4391 += tmp_4392;
   tmp_4386 += (std::complex<double>(0,0.15)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(gN)) * tmp_4391;
   std::complex<double> tmp_4393;
   std::complex<double> tmp_4394;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4394 += Conj(UHI0(gI2,j1))*UHI0(gI1,j1);
   }
   tmp_4393 += tmp_4394;
   tmp_4386 += (std::complex<double>(0,0.15)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1)) * tmp_4393;
   std::complex<double> tmp_4395;
   std::complex<double> tmp_4396;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4396 += Conj(UHI0(gI2,j1))*UHI0(gI1,j1);
   }
   tmp_4395 += tmp_4396;
   tmp_4386 += (std::complex<double>(0,-0.25)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g2)) * tmp_4395;
   std::complex<double> tmp_4397;
   std::complex<double> tmp_4398;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4398 += Conj(UHI0(gI2,j1))*UHI0(gI1,j1);
   }
   tmp_4397 += tmp_4398;
   tmp_4386 += (std::complex<double>(0,-0.15)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(gN)) * tmp_4397;
   std::complex<double> tmp_4399;
   std::complex<double> tmp_4400;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4400 += Conj(UHI0(gI2,2 + j1))*UHI0(gI1,2 + j1);
   }
   tmp_4399 += tmp_4400;
   tmp_4386 += (std::complex<double>(0,0.15)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1)) * tmp_4399;
   std::complex<double> tmp_4401;
   std::complex<double> tmp_4402;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4402 += Conj(UHI0(gI2,2 + j1))*UHI0(gI1,2 + j1);
   }
   tmp_4401 += tmp_4402;
   tmp_4386 += (std::complex<double>(0,-0.25)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g2)) * tmp_4401;
   std::complex<double> tmp_4403;
   std::complex<double> tmp_4404;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4404 += Conj(UHI0(gI2,2 + j1))*UHI0(gI1,2 + j1);
   }
   tmp_4403 += tmp_4404;
   tmp_4386 += (std::complex<double>(0,0.1)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(gN)) * tmp_4403;
   std::complex<double> tmp_4405;
   std::complex<double> tmp_4406;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4406 += Conj(UHI0(gI2,2 + j1))*UHI0(gI1,2 + j1);
   }
   tmp_4405 += tmp_4406;
   tmp_4386 += (std::complex<double>(0,-0.15)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1)) * tmp_4405;
   std::complex<double> tmp_4407;
   std::complex<double> tmp_4408;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4408 += Conj(UHI0(gI2,2 + j1))*UHI0(gI1,2 + j1);
   }
   tmp_4407 += tmp_4408;
   tmp_4386 += (std::complex<double>(0,0.25)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g2)) * tmp_4407;
   std::complex<double> tmp_4409;
   std::complex<double> tmp_4410;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4410 += Conj(UHI0(gI2,2 + j1))*UHI0(gI1,2 + j1);
   }
   tmp_4409 += tmp_4410;
   tmp_4386 += (std::complex<double>(0,-0.1)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(gN)) * tmp_4409;
   result += (std::complex<double>(0,-1)) * tmp_4386;

   return result;
}

std::complex<double> CLASSNAME::CpUSHppconjUSHppconjSHIpSHIp(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_4411;
   std::complex<double> tmp_4412;
   std::complex<double> tmp_4413;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4413 += Conj(UHIp(gI2,j1))*UHIp(gI1,j1);
   }
   tmp_4412 += tmp_4413;
   tmp_4411 += (std::complex<double>(0,-0.15)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1)) * tmp_4412;
   std::complex<double> tmp_4414;
   std::complex<double> tmp_4415;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4415 += Conj(UHIp(gI2,j1))*UHIp(gI1,j1);
   }
   tmp_4414 += tmp_4415;
   tmp_4411 += (std::complex<double>(0,-0.25)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g2)) * tmp_4414;
   std::complex<double> tmp_4416;
   std::complex<double> tmp_4417;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4417 += Conj(UHIp(gI2,j1))*UHIp(gI1,j1);
   }
   tmp_4416 += tmp_4417;
   tmp_4411 += (std::complex<double>(0,0.15)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(gN)) * tmp_4416;
   std::complex<double> tmp_4418;
   std::complex<double> tmp_4419;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4419 += Conj(UHIp(gI2,j1))*UHIp(gI1,j1);
   }
   tmp_4418 += tmp_4419;
   tmp_4411 += (std::complex<double>(0,0.15)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1)) * tmp_4418;
   std::complex<double> tmp_4420;
   std::complex<double> tmp_4421;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4421 += Conj(UHIp(gI2,j1))*UHIp(gI1,j1);
   }
   tmp_4420 += tmp_4421;
   tmp_4411 += (std::complex<double>(0,0.25)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g2)) * tmp_4420;
   std::complex<double> tmp_4422;
   std::complex<double> tmp_4423;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4423 += Conj(UHIp(gI2,j1))*UHIp(gI1,j1);
   }
   tmp_4422 += tmp_4423;
   tmp_4411 += (std::complex<double>(0,-0.15)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(gN)) * tmp_4422;
   std::complex<double> tmp_4424;
   std::complex<double> tmp_4425;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4425 += Conj(UHIp(gI2,2 + j1))*UHIp(gI1,2 + j1);
   }
   tmp_4424 += tmp_4425;
   tmp_4411 += (std::complex<double>(0,0.15)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1)) * tmp_4424;
   std::complex<double> tmp_4426;
   std::complex<double> tmp_4427;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4427 += Conj(UHIp(gI2,2 + j1))*UHIp(gI1,2 + j1);
   }
   tmp_4426 += tmp_4427;
   tmp_4411 += (std::complex<double>(0,0.25)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g2)) * tmp_4426;
   std::complex<double> tmp_4428;
   std::complex<double> tmp_4429;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4429 += Conj(UHIp(gI2,2 + j1))*UHIp(gI1,2 + j1);
   }
   tmp_4428 += tmp_4429;
   tmp_4411 += (std::complex<double>(0,0.1)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(gN)) * tmp_4428;
   std::complex<double> tmp_4430;
   std::complex<double> tmp_4431;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4431 += Conj(UHIp(gI2,2 + j1))*UHIp(gI1,2 + j1);
   }
   tmp_4430 += tmp_4431;
   tmp_4411 += (std::complex<double>(0,-0.15)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1)) * tmp_4430;
   std::complex<double> tmp_4432;
   std::complex<double> tmp_4433;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4433 += Conj(UHIp(gI2,2 + j1))*UHIp(gI1,2 + j1);
   }
   tmp_4432 += tmp_4433;
   tmp_4411 += (std::complex<double>(0,-0.25)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g2)) * tmp_4432;
   std::complex<double> tmp_4434;
   std::complex<double> tmp_4435;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4435 += Conj(UHIp(gI2,2 + j1))*UHIp(gI1,2 + j1);
   }
   tmp_4434 += tmp_4435;
   tmp_4411 += (std::complex<double>(0,-0.1)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(gN)) * tmp_4434;
   result += (std::complex<double>(0,-1)) * tmp_4411;

   return result;
}

std::complex<double> CLASSNAME::CpUSHppconjUSHppconjSdSd(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_4436;
   std::complex<double> tmp_4437;
   std::complex<double> tmp_4438;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4438 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
   }
   tmp_4437 += tmp_4438;
   tmp_4436 += (std::complex<double>(0,0.05)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1)) * tmp_4437;
   std::complex<double> tmp_4439;
   std::complex<double> tmp_4440;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4440 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
   }
   tmp_4439 += tmp_4440;
   tmp_4436 += (std::complex<double>(0,-0.25)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g2)) * tmp_4439;
   std::complex<double> tmp_4441;
   std::complex<double> tmp_4442;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4442 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
   }
   tmp_4441 += tmp_4442;
   tmp_4436 += (std::complex<double>(0,-0.05)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(gN)) * tmp_4441;
   std::complex<double> tmp_4443;
   std::complex<double> tmp_4444;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4444 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
   }
   tmp_4443 += tmp_4444;
   tmp_4436 += (std::complex<double>(0,-0.05)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1)) * tmp_4443;
   std::complex<double> tmp_4445;
   std::complex<double> tmp_4446;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4446 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
   }
   tmp_4445 += tmp_4446;
   tmp_4436 += (std::complex<double>(0,0.25)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g2)) * tmp_4445;
   std::complex<double> tmp_4447;
   std::complex<double> tmp_4448;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4448 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
   }
   tmp_4447 += tmp_4448;
   tmp_4436 += (std::complex<double>(0,0.05)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(gN)) * tmp_4447;
   std::complex<double> tmp_4449;
   std::complex<double> tmp_4450;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4450 += Conj(ZD(gI2,3 + j1))*ZD(gI1,3 + j1);
   }
   tmp_4449 += tmp_4450;
   tmp_4436 += (std::complex<double>(0,0.1)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1)) * tmp_4449;
   std::complex<double> tmp_4451;
   std::complex<double> tmp_4452;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4452 += Conj(ZD(gI2,3 + j1))*ZD(gI1,3 + j1);
   }
   tmp_4451 += tmp_4452;
   tmp_4436 += (std::complex<double>(0,-0.1)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(gN)) * tmp_4451;
   std::complex<double> tmp_4453;
   std::complex<double> tmp_4454;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4454 += Conj(ZD(gI2,3 + j1))*ZD(gI1,3 + j1);
   }
   tmp_4453 += tmp_4454;
   tmp_4436 += (std::complex<double>(0,-0.1)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1)) * tmp_4453;
   std::complex<double> tmp_4455;
   std::complex<double> tmp_4456;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4456 += Conj(ZD(gI2,3 + j1))*ZD(gI1,3 + j1);
   }
   tmp_4455 += tmp_4456;
   tmp_4436 += (std::complex<double>(0,0.1)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(gN)) * tmp_4455;
   result += (std::complex<double>(0,-1)) * tmp_4436;

   return result;
}

std::complex<double> CLASSNAME::CpUSHppconjUSHppconjSDXSDX(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_4457;
   std::complex<double> tmp_4458;
   std::complex<double> tmp_4459;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4459 += Conj(ZDX(gI2,j1))*ZDX(gI1,j1);
   }
   tmp_4458 += tmp_4459;
   tmp_4457 += (std::complex<double>(0,-0.1)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1)) * tmp_4458;
   std::complex<double> tmp_4460;
   std::complex<double> tmp_4461;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4461 += Conj(ZDX(gI2,j1))*ZDX(gI1,j1);
   }
   tmp_4460 += tmp_4461;
   tmp_4457 += (std::complex<double>(0,0.1)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(gN)) * tmp_4460;
   std::complex<double> tmp_4462;
   std::complex<double> tmp_4463;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4463 += Conj(ZDX(gI2,j1))*ZDX(gI1,j1);
   }
   tmp_4462 += tmp_4463;
   tmp_4457 += (std::complex<double>(0,0.1)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1)) * tmp_4462;
   std::complex<double> tmp_4464;
   std::complex<double> tmp_4465;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4465 += Conj(ZDX(gI2,j1))*ZDX(gI1,j1);
   }
   tmp_4464 += tmp_4465;
   tmp_4457 += (std::complex<double>(0,-0.1)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(gN)) * tmp_4464;
   std::complex<double> tmp_4466;
   std::complex<double> tmp_4467;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4467 += Conj(ZDX(gI2,3 + j1))*ZDX(gI1,3 + j1);
   }
   tmp_4466 += tmp_4467;
   tmp_4457 += (std::complex<double>(0,0.1)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1)) * tmp_4466;
   std::complex<double> tmp_4468;
   std::complex<double> tmp_4469;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4469 += Conj(ZDX(gI2,3 + j1))*ZDX(gI1,3 + j1);
   }
   tmp_4468 += tmp_4469;
   tmp_4457 += (std::complex<double>(0,0.15)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(gN)) * tmp_4468;
   std::complex<double> tmp_4470;
   std::complex<double> tmp_4471;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4471 += Conj(ZDX(gI2,3 + j1))*ZDX(gI1,3 + j1);
   }
   tmp_4470 += tmp_4471;
   tmp_4457 += (std::complex<double>(0,-0.1)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1)) * tmp_4470;
   std::complex<double> tmp_4472;
   std::complex<double> tmp_4473;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4473 += Conj(ZDX(gI2,3 + j1))*ZDX(gI1,3 + j1);
   }
   tmp_4472 += tmp_4473;
   tmp_4457 += (std::complex<double>(0,-0.15)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(gN)) * tmp_4472;
   result += (std::complex<double>(0,-1)) * tmp_4457;

   return result;
}

std::complex<double> CLASSNAME::CpUSHppconjUSHppconjSeSe(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_4474;
   std::complex<double> tmp_4475;
   std::complex<double> tmp_4476;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4476 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
   }
   tmp_4475 += tmp_4476;
   tmp_4474 += (std::complex<double>(0,-0.15)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1)) * tmp_4475;
   std::complex<double> tmp_4477;
   std::complex<double> tmp_4478;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4478 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
   }
   tmp_4477 += tmp_4478;
   tmp_4474 += (std::complex<double>(0,-0.25)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g2)) * tmp_4477;
   std::complex<double> tmp_4479;
   std::complex<double> tmp_4480;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4480 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
   }
   tmp_4479 += tmp_4480;
   tmp_4474 += (std::complex<double>(0,-0.1)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(gN)) * tmp_4479;
   std::complex<double> tmp_4481;
   std::complex<double> tmp_4482;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4482 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
   }
   tmp_4481 += tmp_4482;
   tmp_4474 += (std::complex<double>(0,0.15)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1)) * tmp_4481;
   std::complex<double> tmp_4483;
   std::complex<double> tmp_4484;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4484 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
   }
   tmp_4483 += tmp_4484;
   tmp_4474 += (std::complex<double>(0,0.25)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g2)) * tmp_4483;
   std::complex<double> tmp_4485;
   std::complex<double> tmp_4486;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4486 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
   }
   tmp_4485 += tmp_4486;
   tmp_4474 += (std::complex<double>(0,0.1)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(gN)) * tmp_4485;
   std::complex<double> tmp_4487;
   std::complex<double> tmp_4488;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4488 += Conj(ZE(gI2,3 + j1))*ZE(gI1,3 + j1);
   }
   tmp_4487 += tmp_4488;
   tmp_4474 += (std::complex<double>(0,0.3)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1)) * tmp_4487;
   std::complex<double> tmp_4489;
   std::complex<double> tmp_4490;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4490 += Conj(ZE(gI2,3 + j1))*ZE(gI1,3 + j1);
   }
   tmp_4489 += tmp_4490;
   tmp_4474 += (std::complex<double>(0,-0.05)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(gN)) * tmp_4489;
   std::complex<double> tmp_4491;
   std::complex<double> tmp_4492;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4492 += Conj(ZE(gI2,3 + j1))*ZE(gI1,3 + j1);
   }
   tmp_4491 += tmp_4492;
   tmp_4474 += (std::complex<double>(0,-0.3)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1)) * tmp_4491;
   std::complex<double> tmp_4493;
   std::complex<double> tmp_4494;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4494 += Conj(ZE(gI2,3 + j1))*ZE(gI1,3 + j1);
   }
   tmp_4493 += tmp_4494;
   tmp_4474 += (std::complex<double>(0,0.05)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(gN)) * tmp_4493;
   result += (std::complex<double>(0,-1)) * tmp_4474;

   return result;
}

std::complex<double> CLASSNAME::CpUSHppconjUSHppconjSuSu(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_4495;
   std::complex<double> tmp_4496;
   std::complex<double> tmp_4497;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4497 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
   }
   tmp_4496 += tmp_4497;
   tmp_4495 += (std::complex<double>(0,0.05)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1)) * tmp_4496;
   std::complex<double> tmp_4498;
   std::complex<double> tmp_4499;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4499 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
   }
   tmp_4498 += tmp_4499;
   tmp_4495 += (std::complex<double>(0,0.25)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g2)) * tmp_4498;
   std::complex<double> tmp_4500;
   std::complex<double> tmp_4501;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4501 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
   }
   tmp_4500 += tmp_4501;
   tmp_4495 += (std::complex<double>(0,-0.05)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(gN)) * tmp_4500;
   std::complex<double> tmp_4502;
   std::complex<double> tmp_4503;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4503 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
   }
   tmp_4502 += tmp_4503;
   tmp_4495 += (std::complex<double>(0,-0.05)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1)) * tmp_4502;
   std::complex<double> tmp_4504;
   std::complex<double> tmp_4505;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4505 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
   }
   tmp_4504 += tmp_4505;
   tmp_4495 += (std::complex<double>(0,-0.25)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g2)) * tmp_4504;
   std::complex<double> tmp_4506;
   std::complex<double> tmp_4507;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4507 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
   }
   tmp_4506 += tmp_4507;
   tmp_4495 += (std::complex<double>(0,0.05)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(gN)) * tmp_4506;
   std::complex<double> tmp_4508;
   std::complex<double> tmp_4509;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4509 += Conj(ZU(gI2,3 + j1))*ZU(gI1,3 + j1);
   }
   tmp_4508 += tmp_4509;
   tmp_4495 += (std::complex<double>(0,-0.2)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1)) * tmp_4508;
   std::complex<double> tmp_4510;
   std::complex<double> tmp_4511;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4511 += Conj(ZU(gI2,3 + j1))*ZU(gI1,3 + j1);
   }
   tmp_4510 += tmp_4511;
   tmp_4495 += (std::complex<double>(0,-0.05)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(gN)) * tmp_4510;
   std::complex<double> tmp_4512;
   std::complex<double> tmp_4513;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4513 += Conj(ZU(gI2,3 + j1))*ZU(gI1,3 + j1);
   }
   tmp_4512 += tmp_4513;
   tmp_4495 += (std::complex<double>(0,0.2)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1)) * tmp_4512;
   std::complex<double> tmp_4514;
   std::complex<double> tmp_4515;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4515 += Conj(ZU(gI2,3 + j1))*ZU(gI1,3 + j1);
   }
   tmp_4514 += tmp_4515;
   tmp_4495 += (std::complex<double>(0,0.05)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(gN)) * tmp_4514;
   result += (std::complex<double>(0,-1)) * tmp_4495;

   return result;
}

std::complex<double> CLASSNAME::CpconjUSHppChiChaPPR(unsigned gO2, unsigned gI1) const
{
   std::complex<double> result;

   result = -0.1*KroneckerDelta(1,gO2)*(5.477225575051661*g1*ZN(gI1,0) +
      7.0710678118654755*g2*ZN(gI1,1) - 4.47213595499958*gN*ZN(gI1,5));

   return result;
}

std::complex<double> CLASSNAME::CpconjUSHppChiChaPPL(unsigned gO1, unsigned gI1) const
{
   std::complex<double> result;

   result = 0.1*(5.477225575051661*g1*Conj(ZN(gI1,0)) + 7.0710678118654755*g2*
      Conj(ZN(gI1,1)) - 4.47213595499958*gN*Conj(ZN(gI1,5)))*KroneckerDelta(0,gO1)
      ;

   return result;
}

std::complex<double> CLASSNAME::CpconjUSHppVWmSHp0(unsigned gO2, unsigned gI2) const
{
   std::complex<double> result;

   result = 0.7071067811865475*g2*(Conj(UHp0(gI2,0))*KroneckerDelta(0,gO2) -
      Conj(UHp0(gI2,1))*KroneckerDelta(1,gO2));

   return result;
}

std::complex<double> CLASSNAME::CpconjUSHppVPSHpp(unsigned gO2, unsigned gI2) const
{
   std::complex<double> result;

   if (gI2 < 2) {
      result += -0.3872983346207417*g1*Conj(UHpp(gI2,gO2))*Cos(ThetaW());
   }
   if (gI2 < 2) {
      result += -0.5*g2*Conj(UHpp(gI2,gO2))*Sin(ThetaW());
   }

   return result;
}

std::complex<double> CLASSNAME::CpconjUSHppVZSHpp(unsigned gO2, unsigned gI2) const
{
   std::complex<double> result;

   if (gI2 < 2) {
      result += -0.5*g2*Conj(UHpp(gI2,gO2))*Cos(ThetaW())*Cos(ThetaWp());
   }
   if (gI2 < 2) {
      result += 0.3872983346207417*g1*Conj(UHpp(gI2,gO2))*Cos(ThetaWp())*Sin
         (ThetaW());
   }
   if (gI2 < 2) {
      result += 0.31622776601683794*gN*Conj(UHpp(gI2,gO2))*Sin(ThetaWp());
   }

   return result;
}

std::complex<double> CLASSNAME::CpconjUSHppVZpSHpp(unsigned gO2, unsigned gI2) const
{
   std::complex<double> result;

   if (gI2 < 2) {
      result += 0.31622776601683794*gN*Conj(UHpp(gI2,gO2))*Cos(ThetaWp());
   }
   if (gI2 < 2) {
      result += 0.5*g2*Conj(UHpp(gI2,gO2))*Cos(ThetaW())*Sin(ThetaWp());
   }
   if (gI2 < 2) {
      result += -0.3872983346207417*g1*Conj(UHpp(gI2,gO2))*Sin(ThetaW())*Sin
         (ThetaWp());
   }

   return result;
}

double CLASSNAME::CpVZbargWmgWm() const
{
   double result = 0.0;

   result = -(g2*Cos(ThetaW())*Cos(ThetaWp()));

   return result;
}

double CLASSNAME::CpVZbargWmCgWmC() const
{
   double result = 0.0;

   result = g2*Cos(ThetaW())*Cos(ThetaWp());

   return result;
}

double CLASSNAME::CpVZconjVWmVWm() const
{
   double result = 0.0;

   result = -(g2*Cos(ThetaW())*Cos(ThetaWp()));

   return result;
}

double CLASSNAME::CpVZbarChaPChaPPL() const
{
   double result = 0.0;

   result = 0.1*(5*g2*Cos(ThetaW())*Cos(ThetaWp()) - 3.872983346207417*g1*Cos(
      ThetaWp())*Sin(ThetaW()) - 3.1622776601683795*gN*Sin(ThetaWp()));

   return result;
}

double CLASSNAME::CpVZbarChaPChaPPR() const
{
   double result = 0.0;

   result = 0.1*(5*g2*Cos(ThetaW())*Cos(ThetaWp()) - 3.872983346207417*g1*Cos(
      ThetaWp())*Sin(ThetaW()) - 3.1622776601683795*gN*Sin(ThetaWp()));

   return result;
}

std::complex<double> CLASSNAME::CpVZVZconjHpmHpm(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = 0.05*((-14.696938456699067*g1*gN*Cos(ThetaWp())*Sin(ThetaW())*Sin(
      ThetaWp()) + 10*Sqr(g2)*Sqr(Cos(ThetaW()))*Sqr(Cos(ThetaWp())) + Cos(ThetaW(
      ))*(18.973665961010276*g2*gN*Cos(ThetaWp())*Sin(ThetaWp()) -
      15.491933384829668*g1*g2*Sin(ThetaW())*Sqr(Cos(ThetaWp()))) + 6*Sqr(g1)*Sqr(
      Cos(ThetaWp()))*Sqr(Sin(ThetaW())) + 9*Sqr(gN)*Sqr(Sin(ThetaWp())))*ZP(gI1,0
      )*ZP(gI2,0) + 2*(2.449489742783178*g1*gN*Sin(ThetaW())*Sin(2*ThetaWp()) + 5*
      Sqr(g2)*Sqr(Cos(ThetaW()))*Sqr(Cos(ThetaWp())) - 2*Cos(ThetaW())*(
      3.1622776601683795*g2*gN*Cos(ThetaWp())*Sin(ThetaWp()) + 3.872983346207417*
      g1*g2*Sin(ThetaW())*Sqr(Cos(ThetaWp()))) + 3*Sqr(g1)*Sqr(Cos(ThetaWp()))*Sqr
      (Sin(ThetaW())) + 2*Sqr(gN)*Sqr(Sin(ThetaWp())))*ZP(gI1,1)*ZP(gI2,1));

   return result;
}

std::complex<double> CLASSNAME::CpVZVZconjSHp0SHp0(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = -0.0125*(-9.797958971132712*g1*gN*Cos(ThetaW() - 2*ThetaWp()) +
      9.797958971132712*g1*gN*Cos(ThetaW() + 2*ThetaWp()) - 15.491933384829668*g1*
      g2*Sin(2*ThetaW()) + 12.649110640673518*g2*gN*Sin(ThetaW() - 2*ThetaWp()) -
      7.745966692414834*g1*g2*Sin(2*(ThetaW() - ThetaWp())) - 7.745966692414834*g1
      *g2*Sin(2*(ThetaW() + ThetaWp())) - 12.649110640673518*g2*gN*Sin(ThetaW() +
      2*ThetaWp()) - 6*Sqr(g1) + 3*Cos(2*(ThetaW() - ThetaWp()))*Sqr(g1) - 6*Cos(2
      *ThetaWp())*Sqr(g1) + 3*Cos(2*(ThetaW() + ThetaWp()))*Sqr(g1) + 2*Cos(2*
      ThetaW())*(3*Sqr(g1) - 5*Sqr(g2)) - 10*Sqr(g2) - 5*Cos(2*(ThetaW() - ThetaWp
      ()))*Sqr(g2) - 10*Cos(2*ThetaWp())*Sqr(g2) - 5*Cos(2*(ThetaW() + ThetaWp()))
      *Sqr(g2) - 8*Sqr(gN) + 8*Cos(2*ThetaWp())*Sqr(gN))*(Conj(UHp0(gI2,0))*UHp0(
      gI1,0) + Conj(UHp0(gI2,1))*UHp0(gI1,1));

   return result;
}

std::complex<double> CLASSNAME::CpVZVZconjSHppSHpp(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = -0.0125*(-9.797958971132712*g1*gN*Cos(ThetaW() - 2*ThetaWp()) +
      9.797958971132712*g1*gN*Cos(ThetaW() + 2*ThetaWp()) + 15.491933384829668*g1*
      g2*Sin(2*ThetaW()) - 12.649110640673518*g2*gN*Sin(ThetaW() - 2*ThetaWp()) +
      7.745966692414834*g1*g2*Sin(2*(ThetaW() - ThetaWp())) + 7.745966692414834*g1
      *g2*Sin(2*(ThetaW() + ThetaWp())) + 12.649110640673518*g2*gN*Sin(ThetaW() +
      2*ThetaWp()) - 6*Sqr(g1) + 3*Cos(2*(ThetaW() - ThetaWp()))*Sqr(g1) - 6*Cos(2
      *ThetaWp())*Sqr(g1) + 3*Cos(2*(ThetaW() + ThetaWp()))*Sqr(g1) + 2*Cos(2*
      ThetaW())*(3*Sqr(g1) - 5*Sqr(g2)) - 10*Sqr(g2) - 5*Cos(2*(ThetaW() - ThetaWp
      ()))*Sqr(g2) - 10*Cos(2*ThetaWp())*Sqr(g2) - 5*Cos(2*(ThetaW() + ThetaWp()))
      *Sqr(g2) - 8*Sqr(gN) + 8*Cos(2*ThetaWp())*Sqr(gN))*(Conj(UHpp(gI2,0))*UHpp(
      gI1,0) + Conj(UHpp(gI2,1))*UHpp(gI1,1));

   return result;
}

double CLASSNAME::CpVZVZconjSSI0SSI0(unsigned gI1, unsigned gI2) const
{
   double result = 0.0;

   result = 1.25*KroneckerDelta(gI1,gI2)*Sqr(gN)*Sqr(Sin(ThetaWp()));

   return result;
}

std::complex<double> CLASSNAME::CpVZconjHpmHpm(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = 0.05*((-10*g2*Cos(ThetaW())*Cos(ThetaWp()) + 7.745966692414834*g1*
      Cos(ThetaWp())*Sin(ThetaW()) - 9.486832980505138*gN*Sin(ThetaWp()))*ZP(gI1,0
      )*ZP(gI2,0) + 2*(-5*g2*Cos(ThetaW())*Cos(ThetaWp()) + 3.872983346207417*g1*
      Cos(ThetaWp())*Sin(ThetaW()) + 3.1622776601683795*gN*Sin(ThetaWp()))*ZP(gI1,
      1)*ZP(gI2,1));

   return result;
}

double CLASSNAME::CpVZconjSHp0SHp0(unsigned gI1, unsigned gI2) const
{
   double result = 0.0;

   result = 0.1*KroneckerDelta(gI1,gI2)*(5*g2*Cos(ThetaW())*Cos(ThetaWp()) +
      3.872983346207417*g1*Cos(ThetaWp())*Sin(ThetaW()) + 3.1622776601683795*gN*
      Sin(ThetaWp()));

   return result;
}

double CLASSNAME::CpVZconjSHppSHpp(unsigned gI1, unsigned gI2) const
{
   double result = 0.0;

   result = -0.1*KroneckerDelta(gI1,gI2)*(5*g2*Cos(ThetaW())*Cos(ThetaWp()) -
      3.872983346207417*g1*Cos(ThetaWp())*Sin(ThetaW()) - 3.1622776601683795*gN*
      Sin(ThetaWp()));

   return result;
}

double CLASSNAME::CpVZconjSSI0SSI0(unsigned gI1, unsigned gI2) const
{
   double result = 0.0;

   result = 0.7905694150420949*gN*KroneckerDelta(gI1,gI2)*Sin(ThetaWp());

   return result;
}

std::complex<double> CLASSNAME::CpVZbarChaChaPL(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = 0.05*(20*g2*Conj(UM(gI2,0))*Cos(ThetaW())*Cos(ThetaWp())*UM(gI1,0)
      + Conj(UM(gI2,1))*(10*g2*Cos(ThetaW())*Cos(ThetaWp()) - 7.745966692414834*g1
      *Cos(ThetaWp())*Sin(ThetaW()) + 9.486832980505138*gN*Sin(ThetaWp()))*UM(gI1,
      1));

   return result;
}

std::complex<double> CLASSNAME::CpVZbarChaChaPR(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = 0.1*(10*g2*Conj(UP(gI1,0))*Cos(ThetaW())*Cos(ThetaWp())*UP(gI2,0) +
      Conj(UP(gI1,1))*(5*g2*Cos(ThetaW())*Cos(ThetaWp()) - 3.872983346207417*g1*
      Cos(ThetaWp())*Sin(ThetaW()) - 3.1622776601683795*gN*Sin(ThetaWp()))*UP(gI2,
      1));

   return result;
}

double CLASSNAME::CpVZbarChaIChaIPL(unsigned gI1, unsigned gI2) const
{
   double result = 0.0;

   result = 0.05*KroneckerDelta(gI1,gI2)*(10*g2*Cos(ThetaW())*Cos(ThetaWp()) -
      7.745966692414834*g1*Cos(ThetaWp())*Sin(ThetaW()) + 9.486832980505138*gN*Sin
      (ThetaWp()));

   return result;
}

double CLASSNAME::CpVZbarChaIChaIPR(unsigned gI1, unsigned gI2) const
{
   double result = 0.0;

   result = 0.1*KroneckerDelta(gI1,gI2)*(5*g2*Cos(ThetaW())*Cos(ThetaWp()) -
      3.872983346207417*g1*Cos(ThetaWp())*Sin(ThetaW()) - 3.1622776601683795*gN*
      Sin(ThetaWp()));

   return result;
}

std::complex<double> CLASSNAME::CpVZChiPChiPPL(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = -0.1*(5*g2*Cos(ThetaW())*Cos(ThetaWp()) + 3.872983346207417*g1*Cos(
      ThetaWp())*Sin(ThetaW()) + 3.1622776601683795*gN*Sin(ThetaWp()))*(Conj(ZNp(
      gI2,0))*ZNp(gI1,0) - Conj(ZNp(gI2,1))*ZNp(gI1,1));

   return result;
}

std::complex<double> CLASSNAME::CpVZChiPChiPPR(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = 0.1*(5*g2*Cos(ThetaW())*Cos(ThetaWp()) + 3.872983346207417*g1*Cos(
      ThetaWp())*Sin(ThetaW()) + 3.1622776601683795*gN*Sin(ThetaWp()))*(Conj(ZNp(
      gI1,0))*ZNp(gI2,0) - Conj(ZNp(gI1,1))*ZNp(gI2,1));

   return result;
}

double CLASSNAME::CpVZFSIFSIPL(unsigned gI1, unsigned gI2) const
{
   double result = 0.0;

   result = -0.7905694150420949*gN*KroneckerDelta(gI1,gI2)*Sin(ThetaWp());

   return result;
}

double CLASSNAME::CpVZFSIFSIPR(unsigned gI1, unsigned gI2) const
{
   double result = 0.0;

   result = 0.7905694150420949*gN*KroneckerDelta(gI1,gI2)*Sin(ThetaWp());

   return result;
}

std::complex<double> CLASSNAME::CpVZVZAhAh(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = 0.05*((-14.696938456699067*g1*gN*Cos(ThetaWp())*Sin(ThetaW())*Sin(
      ThetaWp()) + 10*Sqr(g2)*Sqr(Cos(ThetaW()))*Sqr(Cos(ThetaWp())) + Cos(ThetaW(
      ))*(-18.973665961010276*g2*gN*Cos(ThetaWp())*Sin(ThetaWp()) +
      15.491933384829668*g1*g2*Sin(ThetaW())*Sqr(Cos(ThetaWp()))) + 6*Sqr(g1)*Sqr(
      Cos(ThetaWp()))*Sqr(Sin(ThetaW())) + 9*Sqr(gN)*Sqr(Sin(ThetaWp())))*ZA(gI1,0
      )*ZA(gI2,0) + 2*(3.1622776601683795*g2*gN*Cos(ThetaW())*Sin(2*ThetaWp()) +
      g1*Sin(ThetaW())*(7.745966692414834*g2*Cos(ThetaW()) + 3*g1*Sin(ThetaW()))*
      Sqr(Cos(ThetaWp())) + 5*Sqr(g2)*Sqr(Cos(ThetaW()))*Sqr(Cos(ThetaWp())) + gN*
      (2.449489742783178*g1*Sin(ThetaW())*Sin(2*ThetaWp()) + 2*gN*Sqr(Sin(ThetaWp(
      )))))*ZA(gI1,1)*ZA(gI2,1) + 25*Sqr(gN)*Sqr(Sin(ThetaWp()))*ZA(gI1,2)*ZA(gI2,
      2));

   return result;
}

std::complex<double> CLASSNAME::CpVZVZconjSvSv(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = 0.1*KroneckerDelta(gI1,gI2)*(3.1622776601683795*g2*gN*Cos(ThetaW())
      *Sin(2*ThetaWp()) + g1*Sin(ThetaW())*(7.745966692414834*g2*Cos(ThetaW()) + 3
      *g1*Sin(ThetaW()))*Sqr(Cos(ThetaWp())) + 5*Sqr(g2)*Sqr(Cos(ThetaW()))*Sqr(
      Cos(ThetaWp())) + gN*(2.449489742783178*g1*Sin(ThetaW())*Sin(2*ThetaWp()) +
      2*gN*Sqr(Sin(ThetaWp()))));

   return result;
}

std::complex<double> CLASSNAME::CpVZVZhhhh(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = 0.05*((-14.696938456699067*g1*gN*Cos(ThetaWp())*Sin(ThetaW())*Sin(
      ThetaWp()) + 10*Sqr(g2)*Sqr(Cos(ThetaW()))*Sqr(Cos(ThetaWp())) + Cos(ThetaW(
      ))*(-18.973665961010276*g2*gN*Cos(ThetaWp())*Sin(ThetaWp()) +
      15.491933384829668*g1*g2*Sin(ThetaW())*Sqr(Cos(ThetaWp()))) + 6*Sqr(g1)*Sqr(
      Cos(ThetaWp()))*Sqr(Sin(ThetaW())) + 9*Sqr(gN)*Sqr(Sin(ThetaWp())))*ZH(gI1,0
      )*ZH(gI2,0) + 2*(3.1622776601683795*g2*gN*Cos(ThetaW())*Sin(2*ThetaWp()) +
      g1*Sin(ThetaW())*(7.745966692414834*g2*Cos(ThetaW()) + 3*g1*Sin(ThetaW()))*
      Sqr(Cos(ThetaWp())) + 5*Sqr(g2)*Sqr(Cos(ThetaW()))*Sqr(Cos(ThetaWp())) + gN*
      (2.449489742783178*g1*Sin(ThetaW())*Sin(2*ThetaWp()) + 2*gN*Sqr(Sin(ThetaWp(
      )))))*ZH(gI1,1)*ZH(gI2,1) + 25*Sqr(gN)*Sqr(Sin(ThetaWp()))*ZH(gI1,2)*ZH(gI2,
      2));

   return result;
}

double CLASSNAME::CpVZconjSvSv(unsigned gI1, unsigned gI2) const
{
   double result = 0.0;

   result = 0.1*KroneckerDelta(gI1,gI2)*(5*g2*Cos(ThetaW())*Cos(ThetaWp()) +
      3.872983346207417*g1*Cos(ThetaWp())*Sin(ThetaW()) + 3.1622776601683795*gN*
      Sin(ThetaWp()));

   return result;
}

std::complex<double> CLASSNAME::CpVZhhAh(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = std::complex<double>(0,-0.05)*((10*g2*Cos(ThetaW())*Cos(ThetaWp())
      + 7.745966692414834*g1*Cos(ThetaWp())*Sin(ThetaW()) - 9.486832980505138*gN*
      Sin(ThetaWp()))*ZA(gI2,0)*ZH(gI1,0) - 2*(5*g2*Cos(ThetaW())*Cos(ThetaWp()) +
      3.872983346207417*g1*Cos(ThetaWp())*Sin(ThetaW()) + 3.1622776601683795*gN*
      Sin(ThetaWp()))*ZA(gI2,1)*ZH(gI1,1) + 15.811388300841898*gN*Sin(ThetaWp())*
      ZA(gI2,2)*ZH(gI1,2));

   return result;
}

double CLASSNAME::CpVZbarFdFdPL(unsigned gI1, unsigned gI2) const
{
   double result = 0.0;

   result = 0.016666666666666666*KroneckerDelta(gI1,gI2)*(30*g2*Cos(ThetaW())*
      Cos(ThetaWp()) + 7.745966692414834*g1*Cos(ThetaWp())*Sin(ThetaW()) -
      9.486832980505138*gN*Sin(ThetaWp()));

   return result;
}

double CLASSNAME::CpVZbarFdFdPR(unsigned gI1, unsigned gI2) const
{
   double result = 0.0;

   result = KroneckerDelta(gI1,gI2)*(-0.2581988897471611*g1*Cos(ThetaWp())*Sin(
      ThetaW()) + 0.31622776601683794*gN*Sin(ThetaWp()));

   return result;
}

double CLASSNAME::CpVZbarFDXFDXPL(unsigned gI1, unsigned gI2) const
{
   double result = 0.0;

   result = KroneckerDelta(gI1,gI2)*(-0.2581988897471611*g1*Cos(ThetaWp())*Sin(
      ThetaW()) + 0.31622776601683794*gN*Sin(ThetaWp()));

   return result;
}

double CLASSNAME::CpVZbarFDXFDXPR(unsigned gI1, unsigned gI2) const
{
   double result = 0.0;

   result = -0.016666666666666666*KroneckerDelta(gI1,gI2)*(15.491933384829668*
      g1*Cos(ThetaWp())*Sin(ThetaW()) + 28.460498941515414*gN*Sin(ThetaWp()));

   return result;
}

double CLASSNAME::CpVZbarFeFePL(unsigned gI1, unsigned gI2) const
{
   double result = 0.0;

   result = 0.1*KroneckerDelta(gI1,gI2)*(5*g2*Cos(ThetaW())*Cos(ThetaWp()) -
      3.872983346207417*g1*Cos(ThetaWp())*Sin(ThetaW()) - 3.1622776601683795*gN*
      Sin(ThetaWp()));

   return result;
}

double CLASSNAME::CpVZbarFeFePR(unsigned gI1, unsigned gI2) const
{
   double result = 0.0;

   result = -0.05*KroneckerDelta(gI1,gI2)*(15.491933384829668*g1*Cos(ThetaWp())
      *Sin(ThetaW()) - 3.1622776601683795*gN*Sin(ThetaWp()));

   return result;
}

double CLASSNAME::CpVZbarFuFuPL(unsigned gI1, unsigned gI2) const
{
   double result = 0.0;

   result = -0.016666666666666666*KroneckerDelta(gI1,gI2)*(30*g2*Cos(ThetaW())*
      Cos(ThetaWp()) - 7.745966692414834*g1*Cos(ThetaWp())*Sin(ThetaW()) +
      9.486832980505138*gN*Sin(ThetaWp()));

   return result;
}

double CLASSNAME::CpVZbarFuFuPR(unsigned gI1, unsigned gI2) const
{
   double result = 0.0;

   result = 0.016666666666666666*KroneckerDelta(gI1,gI2)*(30.983866769659336*g1
      *Cos(ThetaWp())*Sin(ThetaW()) + 9.486832980505138*gN*Sin(ThetaWp()));

   return result;
}

double CLASSNAME::CpVZbarFvFvPL(unsigned gI1, unsigned gI2) const
{
   double result = 0.0;

   result = -0.1*KroneckerDelta(gI1,gI2)*(5*g2*Cos(ThetaW())*Cos(ThetaWp()) +
      3.872983346207417*g1*Cos(ThetaWp())*Sin(ThetaW()) + 3.1622776601683795*gN*
      Sin(ThetaWp()));

   return result;
}

double CLASSNAME::CpVZbarFvFvPR(unsigned , unsigned ) const
{
   double result = 0.0;

   result = 0;

   return result;
}

std::complex<double> CLASSNAME::CpVZVZconjSHI0SHI0(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_4516;
   std::complex<double> tmp_4517;
   std::complex<double> tmp_4518;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4518 += Conj(UHI0(gI2,j1))*UHI0(gI1,j1);
   }
   tmp_4517 += tmp_4518;
   tmp_4516 += (std::complex<double>(0,0.5)*Sqr(g2)*Sqr(Cos(ThetaW()))*Sqr(Cos(
      ThetaWp()))) * tmp_4517;
   std::complex<double> tmp_4519;
   std::complex<double> tmp_4520;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4520 += Conj(UHI0(gI2,2 + j1))*UHI0(gI1,2 + j1);
   }
   tmp_4519 += tmp_4520;
   tmp_4516 += (std::complex<double>(0,0.5)*Sqr(g2)*Sqr(Cos(ThetaW()))*Sqr(Cos(
      ThetaWp()))) * tmp_4519;
   std::complex<double> tmp_4521;
   std::complex<double> tmp_4522;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4522 += Conj(UHI0(gI2,j1))*UHI0(gI1,j1);
   }
   tmp_4521 += tmp_4522;
   tmp_4516 += (std::complex<double>(0.,0.7745966692414834)*g1*g2*Cos(ThetaW())
      *Sin(ThetaW())*Sqr(Cos(ThetaWp()))) * tmp_4521;
   std::complex<double> tmp_4523;
   std::complex<double> tmp_4524;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4524 += Conj(UHI0(gI2,2 + j1))*UHI0(gI1,2 + j1);
   }
   tmp_4523 += tmp_4524;
   tmp_4516 += (std::complex<double>(0.,0.7745966692414834)*g1*g2*Cos(ThetaW())
      *Sin(ThetaW())*Sqr(Cos(ThetaWp()))) * tmp_4523;
   std::complex<double> tmp_4525;
   std::complex<double> tmp_4526;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4526 += Conj(UHI0(gI2,j1))*UHI0(gI1,j1);
   }
   tmp_4525 += tmp_4526;
   tmp_4516 += (std::complex<double>(0,0.3)*Sqr(g1)*Sqr(Cos(ThetaWp()))*Sqr(Sin
      (ThetaW()))) * tmp_4525;
   std::complex<double> tmp_4527;
   std::complex<double> tmp_4528;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4528 += Conj(UHI0(gI2,2 + j1))*UHI0(gI1,2 + j1);
   }
   tmp_4527 += tmp_4528;
   tmp_4516 += (std::complex<double>(0,0.3)*Sqr(g1)*Sqr(Cos(ThetaWp()))*Sqr(Sin
      (ThetaW()))) * tmp_4527;
   std::complex<double> tmp_4529;
   std::complex<double> tmp_4530;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4530 += Conj(UHI0(gI2,j1))*UHI0(gI1,j1);
   }
   tmp_4529 += tmp_4530;
   tmp_4516 += (std::complex<double>(0.,-0.9486832980505138)*g2*gN*Cos(ThetaW()
      )*Cos(ThetaWp())*Sin(ThetaWp())) * tmp_4529;
   std::complex<double> tmp_4531;
   std::complex<double> tmp_4532;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4532 += Conj(UHI0(gI2,j1))*UHI0(gI1,j1);
   }
   tmp_4531 += tmp_4532;
   tmp_4516 += (std::complex<double>(0.,-0.7348469228349533)*g1*gN*Cos(ThetaWp(
      ))*Sin(ThetaW())*Sin(ThetaWp())) * tmp_4531;
   std::complex<double> tmp_4533;
   std::complex<double> tmp_4534;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4534 += Conj(UHI0(gI2,j1))*UHI0(gI1,j1);
   }
   tmp_4533 += tmp_4534;
   tmp_4516 += (std::complex<double>(0,0.45)*Sqr(gN)*Sqr(Sin(ThetaWp()))) *
      tmp_4533;
   std::complex<double> tmp_4535;
   std::complex<double> tmp_4536;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4536 += Conj(UHI0(gI2,2 + j1))*UHI0(gI1,2 + j1);
   }
   tmp_4535 += tmp_4536;
   tmp_4516 += (std::complex<double>(0,0.2)*Sqr(gN)*Sqr(Sin(ThetaWp()))) *
      tmp_4535;
   std::complex<double> tmp_4537;
   std::complex<double> tmp_4538;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4538 += Conj(UHI0(gI2,2 + j1))*UHI0(gI1,2 + j1);
   }
   tmp_4537 += tmp_4538;
   tmp_4516 += (std::complex<double>(0.,0.31622776601683794)*g2*gN*Cos(ThetaW()
      )*Sin(2*ThetaWp())) * tmp_4537;
   std::complex<double> tmp_4539;
   std::complex<double> tmp_4540;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4540 += Conj(UHI0(gI2,2 + j1))*UHI0(gI1,2 + j1);
   }
   tmp_4539 += tmp_4540;
   tmp_4516 += (std::complex<double>(0.,0.2449489742783178)*g1*gN*Sin(ThetaW())
      *Sin(2*ThetaWp())) * tmp_4539;
   result += (std::complex<double>(0,-1)) * tmp_4516;

   return result;
}

std::complex<double> CLASSNAME::CpVZVZconjSHIpSHIp(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_4541;
   std::complex<double> tmp_4542;
   std::complex<double> tmp_4543;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4543 += Conj(UHIp(gI2,j1))*UHIp(gI1,j1);
   }
   tmp_4542 += tmp_4543;
   tmp_4541 += (std::complex<double>(0,0.5)*Sqr(g2)*Sqr(Cos(ThetaW()))*Sqr(Cos(
      ThetaWp()))) * tmp_4542;
   std::complex<double> tmp_4544;
   std::complex<double> tmp_4545;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4545 += Conj(UHIp(gI2,2 + j1))*UHIp(gI1,2 + j1);
   }
   tmp_4544 += tmp_4545;
   tmp_4541 += (std::complex<double>(0,0.5)*Sqr(g2)*Sqr(Cos(ThetaW()))*Sqr(Cos(
      ThetaWp()))) * tmp_4544;
   std::complex<double> tmp_4546;
   std::complex<double> tmp_4547;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4547 += Conj(UHIp(gI2,j1))*UHIp(gI1,j1);
   }
   tmp_4546 += tmp_4547;
   tmp_4541 += (std::complex<double>(0.,-0.7745966692414834)*g1*g2*Cos(ThetaW()
      )*Sin(ThetaW())*Sqr(Cos(ThetaWp()))) * tmp_4546;
   std::complex<double> tmp_4548;
   std::complex<double> tmp_4549;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4549 += Conj(UHIp(gI2,2 + j1))*UHIp(gI1,2 + j1);
   }
   tmp_4548 += tmp_4549;
   tmp_4541 += (std::complex<double>(0.,-0.7745966692414834)*g1*g2*Cos(ThetaW()
      )*Sin(ThetaW())*Sqr(Cos(ThetaWp()))) * tmp_4548;
   std::complex<double> tmp_4550;
   std::complex<double> tmp_4551;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4551 += Conj(UHIp(gI2,j1))*UHIp(gI1,j1);
   }
   tmp_4550 += tmp_4551;
   tmp_4541 += (std::complex<double>(0,0.3)*Sqr(g1)*Sqr(Cos(ThetaWp()))*Sqr(Sin
      (ThetaW()))) * tmp_4550;
   std::complex<double> tmp_4552;
   std::complex<double> tmp_4553;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4553 += Conj(UHIp(gI2,2 + j1))*UHIp(gI1,2 + j1);
   }
   tmp_4552 += tmp_4553;
   tmp_4541 += (std::complex<double>(0,0.3)*Sqr(g1)*Sqr(Cos(ThetaWp()))*Sqr(Sin
      (ThetaW()))) * tmp_4552;
   std::complex<double> tmp_4554;
   std::complex<double> tmp_4555;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4555 += Conj(UHIp(gI2,j1))*UHIp(gI1,j1);
   }
   tmp_4554 += tmp_4555;
   tmp_4541 += (std::complex<double>(0.,0.9486832980505138)*g2*gN*Cos(ThetaW())
      *Cos(ThetaWp())*Sin(ThetaWp())) * tmp_4554;
   std::complex<double> tmp_4556;
   std::complex<double> tmp_4557;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4557 += Conj(UHIp(gI2,2 + j1))*UHIp(gI1,2 + j1);
   }
   tmp_4556 += tmp_4557;
   tmp_4541 += (std::complex<double>(0.,-0.6324555320336759)*g2*gN*Cos(ThetaW()
      )*Cos(ThetaWp())*Sin(ThetaWp())) * tmp_4556;
   std::complex<double> tmp_4558;
   std::complex<double> tmp_4559;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4559 += Conj(UHIp(gI2,j1))*UHIp(gI1,j1);
   }
   tmp_4558 += tmp_4559;
   tmp_4541 += (std::complex<double>(0.,-0.7348469228349533)*g1*gN*Cos(ThetaWp(
      ))*Sin(ThetaW())*Sin(ThetaWp())) * tmp_4558;
   std::complex<double> tmp_4560;
   std::complex<double> tmp_4561;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4561 += Conj(UHIp(gI2,j1))*UHIp(gI1,j1);
   }
   tmp_4560 += tmp_4561;
   tmp_4541 += (std::complex<double>(0,0.45)*Sqr(gN)*Sqr(Sin(ThetaWp()))) *
      tmp_4560;
   std::complex<double> tmp_4562;
   std::complex<double> tmp_4563;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4563 += Conj(UHIp(gI2,2 + j1))*UHIp(gI1,2 + j1);
   }
   tmp_4562 += tmp_4563;
   tmp_4541 += (std::complex<double>(0,0.2)*Sqr(gN)*Sqr(Sin(ThetaWp()))) *
      tmp_4562;
   std::complex<double> tmp_4564;
   std::complex<double> tmp_4565;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4565 += Conj(UHIp(gI2,2 + j1))*UHIp(gI1,2 + j1);
   }
   tmp_4564 += tmp_4565;
   tmp_4541 += (std::complex<double>(0.,0.2449489742783178)*g1*gN*Sin(ThetaW())
      *Sin(2*ThetaWp())) * tmp_4564;
   result += (std::complex<double>(0,-1)) * tmp_4541;

   return result;
}

std::complex<double> CLASSNAME::CpVZconjSHI0SHI0(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_4566;
   std::complex<double> tmp_4567;
   std::complex<double> tmp_4568;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4568 += Conj(UHI0(gI2,j1))*UHI0(gI1,j1);
   }
   tmp_4567 += tmp_4568;
   tmp_4566 += (10*g2*Cos(ThetaW())*Cos(ThetaWp()) + 7.745966692414834*g1*Cos(
      ThetaWp())*Sin(ThetaW()) - 9.486832980505138*gN*Sin(ThetaWp())) * tmp_4567;
   std::complex<double> tmp_4569;
   std::complex<double> tmp_4570;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4570 += Conj(UHI0(gI2,2 + j1))*UHI0(gI1,2 + j1);
   }
   tmp_4569 += tmp_4570;
   tmp_4566 += (2*(5*g2*Cos(ThetaW())*Cos(ThetaWp()) + 3.872983346207417*g1*Cos
      (ThetaWp())*Sin(ThetaW()) + 3.1622776601683795*gN*Sin(ThetaWp()))) *
      tmp_4569;
   result += (0.05) * tmp_4566;

   return result;
}

std::complex<double> CLASSNAME::CpVZconjSHIpSHIp(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_4571;
   std::complex<double> tmp_4572;
   std::complex<double> tmp_4573;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4573 += Conj(UHIp(gI2,2 + j1))*UHIp(gI1,2 + j1);
   }
   tmp_4572 += tmp_4573;
   tmp_4571 += (-2*(5*g2*Cos(ThetaW())*Cos(ThetaWp()) - 3.872983346207417*g1*
      Cos(ThetaWp())*Sin(ThetaW()) - 3.1622776601683795*gN*Sin(ThetaWp()))) *
      tmp_4572;
   std::complex<double> tmp_4574;
   std::complex<double> tmp_4575;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4575 += Conj(UHIp(gI2,j1))*UHIp(gI1,j1);
   }
   tmp_4574 += tmp_4575;
   tmp_4571 += (-10*g2*Cos(ThetaW())*Cos(ThetaWp()) + 7.745966692414834*g1*Cos(
      ThetaWp())*Sin(ThetaW()) - 9.486832980505138*gN*Sin(ThetaWp())) * tmp_4574;
   result += (0.05) * tmp_4571;

   return result;
}

std::complex<double> CLASSNAME::CpVZChiIChiIPL(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_4576;
   std::complex<double> tmp_4577;
   std::complex<double> tmp_4578;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4578 += Conj(ZNI(gI2,j1))*ZNI(gI1,j1);
   }
   tmp_4577 += tmp_4578;
   tmp_4576 += (-10*g2*Cos(ThetaW())*Cos(ThetaWp()) - 7.745966692414834*g1*Cos(
      ThetaWp())*Sin(ThetaW()) + 9.486832980505138*gN*Sin(ThetaWp())) * tmp_4577;
   std::complex<double> tmp_4579;
   std::complex<double> tmp_4580;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4580 += Conj(ZNI(gI2,2 + j1))*ZNI(gI1,2 + j1);
   }
   tmp_4579 += tmp_4580;
   tmp_4576 += (2*(5*g2*Cos(ThetaW())*Cos(ThetaWp()) + 3.872983346207417*g1*Cos
      (ThetaWp())*Sin(ThetaW()) + 3.1622776601683795*gN*Sin(ThetaWp()))) *
      tmp_4579;
   result += (0.05) * tmp_4576;

   return result;
}

std::complex<double> CLASSNAME::CpVZChiIChiIPR(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_4581;
   std::complex<double> tmp_4582;
   std::complex<double> tmp_4583;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4583 += Conj(ZNI(gI1,j1))*ZNI(gI2,j1);
   }
   tmp_4582 += tmp_4583;
   tmp_4581 += (10*g2*Cos(ThetaW())*Cos(ThetaWp()) + 7.745966692414834*g1*Cos(
      ThetaWp())*Sin(ThetaW()) - 9.486832980505138*gN*Sin(ThetaWp())) * tmp_4582;
   std::complex<double> tmp_4584;
   std::complex<double> tmp_4585;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4585 += Conj(ZNI(gI1,2 + j1))*ZNI(gI2,2 + j1);
   }
   tmp_4584 += tmp_4585;
   tmp_4581 += (-2*(5*g2*Cos(ThetaW())*Cos(ThetaWp()) + 3.872983346207417*g1*
      Cos(ThetaWp())*Sin(ThetaW()) + 3.1622776601683795*gN*Sin(ThetaWp()))) *
      tmp_4584;
   result += (0.05) * tmp_4581;

   return result;
}

std::complex<double> CLASSNAME::CpVZVZconjSdSd(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_4586;
   std::complex<double> tmp_4587;
   std::complex<double> tmp_4588;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4588 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
   }
   tmp_4587 += tmp_4588;
   tmp_4586 += (std::complex<double>(0,0.5)*Sqr(g2)*Sqr(Cos(ThetaW()))*Sqr(Cos(
      ThetaWp()))) * tmp_4587;
   std::complex<double> tmp_4589;
   std::complex<double> tmp_4590;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4590 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
   }
   tmp_4589 += tmp_4590;
   tmp_4586 += (std::complex<double>(0.,0.2581988897471611)*g1*g2*Cos(ThetaW())
      *Sin(ThetaW())*Sqr(Cos(ThetaWp()))) * tmp_4589;
   std::complex<double> tmp_4591;
   std::complex<double> tmp_4592;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4592 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
   }
   tmp_4591 += tmp_4592;
   tmp_4586 += (std::complex<double>(0,0.03333333333333333)*Sqr(g1)*Sqr(Cos(
      ThetaWp()))*Sqr(Sin(ThetaW()))) * tmp_4591;
   std::complex<double> tmp_4593;
   std::complex<double> tmp_4594;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4594 += Conj(ZD(gI2,3 + j1))*ZD(gI1,3 + j1);
   }
   tmp_4593 += tmp_4594;
   tmp_4586 += (std::complex<double>(0,0.13333333333333333)*Sqr(g1)*Sqr(Cos(
      ThetaWp()))*Sqr(Sin(ThetaW()))) * tmp_4593;
   std::complex<double> tmp_4595;
   std::complex<double> tmp_4596;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4596 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
   }
   tmp_4595 += tmp_4596;
   tmp_4586 += (std::complex<double>(0.,-0.08164965809277262)*g1*gN*Cos(ThetaWp
      ())*Sin(ThetaW())*Sin(ThetaWp())) * tmp_4595;
   std::complex<double> tmp_4597;
   std::complex<double> tmp_4598;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4598 += Conj(ZD(gI2,3 + j1))*ZD(gI1,3 + j1);
   }
   tmp_4597 += tmp_4598;
   tmp_4586 += (std::complex<double>(0.,-0.32659863237109044)*g1*gN*Cos(ThetaWp
      ())*Sin(ThetaW())*Sin(ThetaWp())) * tmp_4597;
   std::complex<double> tmp_4599;
   std::complex<double> tmp_4600;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4600 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
   }
   tmp_4599 += tmp_4600;
   tmp_4586 += (std::complex<double>(0,0.05)*Sqr(gN)*Sqr(Sin(ThetaWp()))) *
      tmp_4599;
   std::complex<double> tmp_4601;
   std::complex<double> tmp_4602;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4602 += Conj(ZD(gI2,3 + j1))*ZD(gI1,3 + j1);
   }
   tmp_4601 += tmp_4602;
   tmp_4586 += (std::complex<double>(0,0.2)*Sqr(gN)*Sqr(Sin(ThetaWp()))) *
      tmp_4601;
   std::complex<double> tmp_4603;
   std::complex<double> tmp_4604;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4604 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
   }
   tmp_4603 += tmp_4604;
   tmp_4586 += (std::complex<double>(0.,-0.15811388300841897)*g2*gN*Cos(ThetaW(
      ))*Sin(2*ThetaWp())) * tmp_4603;
   result += (std::complex<double>(0,-1)) * tmp_4586;

   return result;
}

std::complex<double> CLASSNAME::CpVZVZconjSDXSDX(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_4605;
   std::complex<double> tmp_4606;
   std::complex<double> tmp_4607;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4607 += Conj(ZDX(gI2,j1))*ZDX(gI1,j1);
   }
   tmp_4606 += tmp_4607;
   tmp_4605 += (std::complex<double>(0,0.13333333333333333)*Sqr(g1)*Sqr(Cos(
      ThetaWp()))*Sqr(Sin(ThetaW()))) * tmp_4606;
   std::complex<double> tmp_4608;
   std::complex<double> tmp_4609;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4609 += Conj(ZDX(gI2,3 + j1))*ZDX(gI1,3 + j1);
   }
   tmp_4608 += tmp_4609;
   tmp_4605 += (std::complex<double>(0,0.13333333333333333)*Sqr(g1)*Sqr(Cos(
      ThetaWp()))*Sqr(Sin(ThetaW()))) * tmp_4608;
   std::complex<double> tmp_4610;
   std::complex<double> tmp_4611;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4611 += Conj(ZDX(gI2,j1))*ZDX(gI1,j1);
   }
   tmp_4610 += tmp_4611;
   tmp_4605 += (std::complex<double>(0.,-0.32659863237109044)*g1*gN*Cos(ThetaWp
      ())*Sin(ThetaW())*Sin(ThetaWp())) * tmp_4610;
   std::complex<double> tmp_4612;
   std::complex<double> tmp_4613;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4613 += Conj(ZDX(gI2,3 + j1))*ZDX(gI1,3 + j1);
   }
   tmp_4612 += tmp_4613;
   tmp_4605 += (std::complex<double>(0.,0.4898979485566356)*g1*gN*Cos(ThetaWp()
      )*Sin(ThetaW())*Sin(ThetaWp())) * tmp_4612;
   std::complex<double> tmp_4614;
   std::complex<double> tmp_4615;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4615 += Conj(ZDX(gI2,j1))*ZDX(gI1,j1);
   }
   tmp_4614 += tmp_4615;
   tmp_4605 += (std::complex<double>(0,0.2)*Sqr(gN)*Sqr(Sin(ThetaWp()))) *
      tmp_4614;
   std::complex<double> tmp_4616;
   std::complex<double> tmp_4617;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4617 += Conj(ZDX(gI2,3 + j1))*ZDX(gI1,3 + j1);
   }
   tmp_4616 += tmp_4617;
   tmp_4605 += (std::complex<double>(0,0.45)*Sqr(gN)*Sqr(Sin(ThetaWp()))) *
      tmp_4616;
   result += (std::complex<double>(0,-1)) * tmp_4605;

   return result;
}

std::complex<double> CLASSNAME::CpVZVZconjSeSe(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_4618;
   std::complex<double> tmp_4619;
   std::complex<double> tmp_4620;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4620 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
   }
   tmp_4619 += tmp_4620;
   tmp_4618 += (std::complex<double>(0,0.5)*Sqr(g2)*Sqr(Cos(ThetaW()))*Sqr(Cos(
      ThetaWp()))) * tmp_4619;
   std::complex<double> tmp_4621;
   std::complex<double> tmp_4622;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4622 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
   }
   tmp_4621 += tmp_4622;
   tmp_4618 += (std::complex<double>(0.,-0.7745966692414834)*g1*g2*Cos(ThetaW()
      )*Sin(ThetaW())*Sqr(Cos(ThetaWp()))) * tmp_4621;
   std::complex<double> tmp_4623;
   std::complex<double> tmp_4624;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4624 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
   }
   tmp_4623 += tmp_4624;
   tmp_4618 += (std::complex<double>(0,0.3)*Sqr(g1)*Sqr(Cos(ThetaWp()))*Sqr(Sin
      (ThetaW()))) * tmp_4623;
   std::complex<double> tmp_4625;
   std::complex<double> tmp_4626;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4626 += Conj(ZE(gI2,3 + j1))*ZE(gI1,3 + j1);
   }
   tmp_4625 += tmp_4626;
   tmp_4618 += (std::complex<double>(0,1.2)*Sqr(g1)*Sqr(Cos(ThetaWp()))*Sqr(Sin
      (ThetaW()))) * tmp_4625;
   std::complex<double> tmp_4627;
   std::complex<double> tmp_4628;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4628 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
   }
   tmp_4627 += tmp_4628;
   tmp_4618 += (std::complex<double>(0.,-0.6324555320336759)*g2*gN*Cos(ThetaW()
      )*Cos(ThetaWp())*Sin(ThetaWp())) * tmp_4627;
   std::complex<double> tmp_4629;
   std::complex<double> tmp_4630;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4630 += Conj(ZE(gI2,3 + j1))*ZE(gI1,3 + j1);
   }
   tmp_4629 += tmp_4630;
   tmp_4618 += (std::complex<double>(0.,-0.4898979485566356)*g1*gN*Cos(ThetaWp(
      ))*Sin(ThetaW())*Sin(ThetaWp())) * tmp_4629;
   std::complex<double> tmp_4631;
   std::complex<double> tmp_4632;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4632 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
   }
   tmp_4631 += tmp_4632;
   tmp_4618 += (std::complex<double>(0,0.2)*Sqr(gN)*Sqr(Sin(ThetaWp()))) *
      tmp_4631;
   std::complex<double> tmp_4633;
   std::complex<double> tmp_4634;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4634 += Conj(ZE(gI2,3 + j1))*ZE(gI1,3 + j1);
   }
   tmp_4633 += tmp_4634;
   tmp_4618 += (std::complex<double>(0,0.05)*Sqr(gN)*Sqr(Sin(ThetaWp()))) *
      tmp_4633;
   std::complex<double> tmp_4635;
   std::complex<double> tmp_4636;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4636 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
   }
   tmp_4635 += tmp_4636;
   tmp_4618 += (std::complex<double>(0.,0.2449489742783178)*g1*gN*Sin(ThetaW())
      *Sin(2*ThetaWp())) * tmp_4635;
   result += (std::complex<double>(0,-1)) * tmp_4618;

   return result;
}

std::complex<double> CLASSNAME::CpVZVZconjSuSu(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_4637;
   std::complex<double> tmp_4638;
   std::complex<double> tmp_4639;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4639 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
   }
   tmp_4638 += tmp_4639;
   tmp_4637 += (std::complex<double>(0,0.5)*Sqr(g2)*Sqr(Cos(ThetaW()))*Sqr(Cos(
      ThetaWp()))) * tmp_4638;
   std::complex<double> tmp_4640;
   std::complex<double> tmp_4641;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4641 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
   }
   tmp_4640 += tmp_4641;
   tmp_4637 += (std::complex<double>(0.,-0.2581988897471611)*g1*g2*Cos(ThetaW()
      )*Sin(ThetaW())*Sqr(Cos(ThetaWp()))) * tmp_4640;
   std::complex<double> tmp_4642;
   std::complex<double> tmp_4643;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4643 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
   }
   tmp_4642 += tmp_4643;
   tmp_4637 += (std::complex<double>(0,0.03333333333333333)*Sqr(g1)*Sqr(Cos(
      ThetaWp()))*Sqr(Sin(ThetaW()))) * tmp_4642;
   std::complex<double> tmp_4644;
   std::complex<double> tmp_4645;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4645 += Conj(ZU(gI2,3 + j1))*ZU(gI1,3 + j1);
   }
   tmp_4644 += tmp_4645;
   tmp_4637 += (std::complex<double>(0,0.5333333333333333)*Sqr(g1)*Sqr(Cos(
      ThetaWp()))*Sqr(Sin(ThetaW()))) * tmp_4644;
   std::complex<double> tmp_4646;
   std::complex<double> tmp_4647;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4647 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
   }
   tmp_4646 += tmp_4647;
   tmp_4637 += (std::complex<double>(0.,-0.08164965809277262)*g1*gN*Cos(ThetaWp
      ())*Sin(ThetaW())*Sin(ThetaWp())) * tmp_4646;
   std::complex<double> tmp_4648;
   std::complex<double> tmp_4649;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4649 += Conj(ZU(gI2,3 + j1))*ZU(gI1,3 + j1);
   }
   tmp_4648 += tmp_4649;
   tmp_4637 += (std::complex<double>(0.,0.32659863237109044)*g1*gN*Cos(ThetaWp(
      ))*Sin(ThetaW())*Sin(ThetaWp())) * tmp_4648;
   std::complex<double> tmp_4650;
   std::complex<double> tmp_4651;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4651 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
   }
   tmp_4650 += tmp_4651;
   tmp_4637 += (std::complex<double>(0,0.05)*Sqr(gN)*Sqr(Sin(ThetaWp()))) *
      tmp_4650;
   std::complex<double> tmp_4652;
   std::complex<double> tmp_4653;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4653 += Conj(ZU(gI2,3 + j1))*ZU(gI1,3 + j1);
   }
   tmp_4652 += tmp_4653;
   tmp_4637 += (std::complex<double>(0,0.05)*Sqr(gN)*Sqr(Sin(ThetaWp()))) *
      tmp_4652;
   std::complex<double> tmp_4654;
   std::complex<double> tmp_4655;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4655 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
   }
   tmp_4654 += tmp_4655;
   tmp_4637 += (std::complex<double>(0.,0.15811388300841897)*g2*gN*Cos(ThetaW()
      )*Sin(2*ThetaWp())) * tmp_4654;
   result += (std::complex<double>(0,-1)) * tmp_4637;

   return result;
}

std::complex<double> CLASSNAME::CpVZconjSdSd(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_4656;
   std::complex<double> tmp_4657;
   std::complex<double> tmp_4658;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4658 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
   }
   tmp_4657 += tmp_4658;
   tmp_4656 += (-30*g2*Cos(ThetaW())*Cos(ThetaWp()) - 7.745966692414834*g1*Cos(
      ThetaWp())*Sin(ThetaW()) + 9.486832980505138*gN*Sin(ThetaWp())) * tmp_4657;
   std::complex<double> tmp_4659;
   std::complex<double> tmp_4660;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4660 += Conj(ZD(gI2,3 + j1))*ZD(gI1,3 + j1);
   }
   tmp_4659 += tmp_4660;
   tmp_4656 += (-2*(-7.745966692414834*g1*Cos(ThetaWp())*Sin(ThetaW()) +
      9.486832980505138*gN*Sin(ThetaWp()))) * tmp_4659;
   result += (0.016666666666666666) * tmp_4656;

   return result;
}

std::complex<double> CLASSNAME::CpVZconjSDXSDX(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_4661;
   std::complex<double> tmp_4662;
   std::complex<double> tmp_4663;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4663 += Conj(ZDX(gI2,j1))*ZDX(gI1,j1);
   }
   tmp_4662 += tmp_4663;
   tmp_4661 += (15.491933384829668*g1*Cos(ThetaWp())*Sin(ThetaW()) -
      18.973665961010276*gN*Sin(ThetaWp())) * tmp_4662;
   std::complex<double> tmp_4664;
   std::complex<double> tmp_4665;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4665 += Conj(ZDX(gI2,3 + j1))*ZDX(gI1,3 + j1);
   }
   tmp_4664 += tmp_4665;
   tmp_4661 += (15.491933384829668*g1*Cos(ThetaWp())*Sin(ThetaW()) +
      28.460498941515414*gN*Sin(ThetaWp())) * tmp_4664;
   result += (0.016666666666666666) * tmp_4661;

   return result;
}

std::complex<double> CLASSNAME::CpVZconjSeSe(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_4666;
   std::complex<double> tmp_4667;
   std::complex<double> tmp_4668;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4668 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
   }
   tmp_4667 += tmp_4668;
   tmp_4666 += (-2*(5*g2*Cos(ThetaW())*Cos(ThetaWp()) - 3.872983346207417*g1*
      Cos(ThetaWp())*Sin(ThetaW()) - 3.1622776601683795*gN*Sin(ThetaWp()))) *
      tmp_4667;
   std::complex<double> tmp_4669;
   std::complex<double> tmp_4670;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4670 += Conj(ZE(gI2,3 + j1))*ZE(gI1,3 + j1);
   }
   tmp_4669 += tmp_4670;
   tmp_4666 += (15.491933384829668*g1*Cos(ThetaWp())*Sin(ThetaW()) -
      3.1622776601683795*gN*Sin(ThetaWp())) * tmp_4669;
   result += (0.05) * tmp_4666;

   return result;
}

std::complex<double> CLASSNAME::CpVZconjSuSu(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_4671;
   std::complex<double> tmp_4672;
   std::complex<double> tmp_4673;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4673 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
   }
   tmp_4672 += tmp_4673;
   tmp_4671 += (30*g2*Cos(ThetaW())*Cos(ThetaWp()) - 7.745966692414834*g1*Cos(
      ThetaWp())*Sin(ThetaW()) + 9.486832980505138*gN*Sin(ThetaWp())) * tmp_4672;
   std::complex<double> tmp_4674;
   std::complex<double> tmp_4675;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4675 += Conj(ZU(gI2,3 + j1))*ZU(gI1,3 + j1);
   }
   tmp_4674 += tmp_4675;
   tmp_4671 += (-30.983866769659336*g1*Cos(ThetaWp())*Sin(ThetaW()) -
      9.486832980505138*gN*Sin(ThetaWp())) * tmp_4674;
   result += (0.016666666666666666) * tmp_4671;

   return result;
}

std::complex<double> CLASSNAME::CpVZChiChiPL(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = 0.05*(Conj(ZN(gI2,2))*(-10*g2*Cos(ThetaW())*Cos(ThetaWp()) -
      7.745966692414834*g1*Cos(ThetaWp())*Sin(ThetaW()) + 9.486832980505138*gN*Sin
      (ThetaWp()))*ZN(gI1,2) + 2*Conj(ZN(gI2,3))*(5*g2*Cos(ThetaW())*Cos(ThetaWp()
      ) + 3.872983346207417*g1*Cos(ThetaWp())*Sin(ThetaW()) + 3.1622776601683795*
      gN*Sin(ThetaWp()))*ZN(gI1,3) - 15.811388300841898*gN*Conj(ZN(gI2,4))*Sin(
      ThetaWp())*ZN(gI1,4));

   return result;
}

std::complex<double> CLASSNAME::CpVZChiChiPR(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = 0.05*(Conj(ZN(gI1,2))*(10*g2*Cos(ThetaW())*Cos(ThetaWp()) +
      7.745966692414834*g1*Cos(ThetaWp())*Sin(ThetaW()) - 9.486832980505138*gN*Sin
      (ThetaWp()))*ZN(gI2,2) - 2*Conj(ZN(gI1,3))*(5*g2*Cos(ThetaW())*Cos(ThetaWp()
      ) + 3.872983346207417*g1*Cos(ThetaWp())*Sin(ThetaW()) + 3.1622776601683795*
      gN*Sin(ThetaWp()))*ZN(gI2,3) + 15.811388300841898*gN*Conj(ZN(gI1,4))*Sin(
      ThetaWp())*ZN(gI2,4));

   return result;
}

std::complex<double> CLASSNAME::CpVZconjVWmHpm(unsigned gI2) const
{
   std::complex<double> result;

   result = 0.05*g2*(vd*(7.745966692414834*g1*Cos(ThetaWp())*Sin(ThetaW()) -
      9.486832980505138*gN*Sin(ThetaWp()))*ZP(gI2,0) - 2*vu*(3.872983346207417*g1*
      Cos(ThetaWp())*Sin(ThetaW()) + 3.1622776601683795*gN*Sin(ThetaWp()))*ZP(gI2,
      1));

   return result;
}

std::complex<double> CLASSNAME::CpVZVZhh(unsigned gI2) const
{
   std::complex<double> result;

   result = 0.05*(vd*(-14.696938456699067*g1*gN*Cos(ThetaWp())*Sin(ThetaW())*
      Sin(ThetaWp()) + 10*Sqr(g2)*Sqr(Cos(ThetaW()))*Sqr(Cos(ThetaWp())) + Cos(
      ThetaW())*(-18.973665961010276*g2*gN*Cos(ThetaWp())*Sin(ThetaWp()) +
      15.491933384829668*g1*g2*Sin(ThetaW())*Sqr(Cos(ThetaWp()))) + 6*Sqr(g1)*Sqr(
      Cos(ThetaWp()))*Sqr(Sin(ThetaW())) + 9*Sqr(gN)*Sqr(Sin(ThetaWp())))*ZH(gI2,0
      ) + 2*vu*(3.1622776601683795*g2*gN*Cos(ThetaW())*Sin(2*ThetaWp()) + g1*Sin(
      ThetaW())*(7.745966692414834*g2*Cos(ThetaW()) + 3*g1*Sin(ThetaW()))*Sqr(Cos(
      ThetaWp())) + 5*Sqr(g2)*Sqr(Cos(ThetaW()))*Sqr(Cos(ThetaWp())) + gN*(
      2.449489742783178*g1*Sin(ThetaW())*Sin(2*ThetaWp()) + 2*gN*Sqr(Sin(ThetaWp()
      ))))*ZH(gI2,1) + 25*vs*Sqr(gN)*Sqr(Sin(ThetaWp()))*ZH(gI2,2));

   return result;
}

std::complex<double> CLASSNAME::CpVZVZphh(unsigned gI2) const
{
   std::complex<double> result;

   result = 0.05*(-(vd*(9.486832980505138*g2*gN*Cos(ThetaW())*Cos(2*ThetaWp())
      - 9*Cos(ThetaWp())*Sin(ThetaWp())*Sqr(gN) + 5*Sin(2*ThetaWp())*Sqr(g2)*Sqr(
      Cos(ThetaW())) + 7.348469228349534*g1*gN*Sin(ThetaW())*Sqr(Cos(ThetaWp())) +
      g1*(3.872983346207417*g2*Sin(2*ThetaW())*Sin(2*ThetaWp()) + 3*g1*Sin(2*
      ThetaWp())*Sqr(Sin(ThetaW())) - 7.348469228349534*gN*Sin(ThetaW())*Sqr(Sin(
      ThetaWp()))))*ZH(gI2,0)) + vu*(6.324555320336759*g2*gN*Cos(ThetaW())*Cos(2*
      ThetaWp()) + 4*Cos(ThetaWp())*Sin(ThetaWp())*Sqr(gN) - 5*Sin(2*ThetaWp())*
      Sqr(g2)*Sqr(Cos(ThetaW())) + 4.898979485566356*g1*gN*Sin(ThetaW())*Sqr(Cos(
      ThetaWp())) - g1*(3.872983346207417*g2*Sin(2*ThetaW())*Sin(2*ThetaWp()) + 3*
      g1*Sin(2*ThetaWp())*Sqr(Sin(ThetaW())) + 4.898979485566356*gN*Sin(ThetaW())*
      Sqr(Sin(ThetaWp()))))*ZH(gI2,1) + 25*vs*Cos(ThetaWp())*Sin(ThetaWp())*Sqr(gN
      )*ZH(gI2,2));

   return result;
}

double CLASSNAME::CpVZVZconjVWmVWm1() const
{
   double result = 0.0;

   result = -2*Sqr(g2)*Sqr(Cos(ThetaW()))*Sqr(Cos(ThetaWp()));

   return result;
}

double CLASSNAME::CpVZVZconjVWmVWm2() const
{
   double result = 0.0;

   result = Sqr(g2)*Sqr(Cos(ThetaW()))*Sqr(Cos(ThetaWp()));

   return result;
}

double CLASSNAME::CpVZVZconjVWmVWm3() const
{
   double result = 0.0;

   result = Sqr(g2)*Sqr(Cos(ThetaW()))*Sqr(Cos(ThetaWp()));

   return result;
}

double CLASSNAME::CpVZpbargWmgWm() const
{
   double result = 0.0;

   result = g2*Cos(ThetaW())*Sin(ThetaWp());

   return result;
}

double CLASSNAME::CpVZpbargWmCgWmC() const
{
   double result = 0.0;

   result = -(g2*Cos(ThetaW())*Sin(ThetaWp()));

   return result;
}

double CLASSNAME::CpVZpconjVWmVWm() const
{
   double result = 0.0;

   result = g2*Cos(ThetaW())*Sin(ThetaWp());

   return result;
}

double CLASSNAME::CpVZpbarChaPChaPPL() const
{
   double result = 0.0;

   result = 0.1*(-3.1622776601683795*gN*Cos(ThetaWp()) - 5*g2*Cos(ThetaW())*Sin
      (ThetaWp()) + 3.872983346207417*g1*Sin(ThetaW())*Sin(ThetaWp()));

   return result;
}

double CLASSNAME::CpVZpbarChaPChaPPR() const
{
   double result = 0.0;

   result = 0.1*(-3.1622776601683795*gN*Cos(ThetaWp()) - 5*g2*Cos(ThetaW())*Sin
      (ThetaWp()) + 3.872983346207417*g1*Sin(ThetaW())*Sin(ThetaWp()));

   return result;
}

std::complex<double> CLASSNAME::CpVZpVZpconjHpmHpm(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = 0.05*((9*Sqr(gN)*Sqr(Cos(ThetaWp())) + 10*Sqr(g2)*Sqr(Cos(ThetaW())
      )*Sqr(Sin(ThetaWp())) + 3*g1*Sin(ThetaW())*(2.449489742783178*gN*Sin(2*
      ThetaWp()) + 2*g1*Sin(ThetaW())*Sqr(Sin(ThetaWp()))) - Cos(ThetaW())*(
      9.486832980505138*g2*gN*Sin(2*ThetaWp()) + 15.491933384829668*g1*g2*Sin(
      ThetaW())*Sqr(Sin(ThetaWp()))))*ZP(gI1,0)*ZP(gI2,0) + 2*(-4.898979485566356*
      g1*gN*Cos(ThetaWp())*Sin(ThetaW())*Sin(ThetaWp()) + 2*Sqr(gN)*Sqr(Cos(
      ThetaWp())) + 5*Sqr(g2)*Sqr(Cos(ThetaW()))*Sqr(Sin(ThetaWp())) + 3*Sqr(g1)*
      Sqr(Sin(ThetaW()))*Sqr(Sin(ThetaWp())) + Cos(ThetaW())*(3.1622776601683795*
      g2*gN*Sin(2*ThetaWp()) - 7.745966692414834*g1*g2*Sin(ThetaW())*Sqr(Sin(
      ThetaWp()))))*ZP(gI1,1)*ZP(gI2,1));

   return result;
}

std::complex<double> CLASSNAME::CpVZpVZpconjSHp0SHp0(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = 0.0125*(-9.797958971132712*g1*gN*Cos(ThetaW() - 2*ThetaWp()) +
      9.797958971132712*g1*gN*Cos(ThetaW() + 2*ThetaWp()) + 15.491933384829668*g1*
      g2*Sin(2*ThetaW()) + 12.649110640673518*g2*gN*Sin(ThetaW() - 2*ThetaWp()) -
      7.745966692414834*g1*g2*Sin(2*(ThetaW() - ThetaWp())) - 7.745966692414834*g1
      *g2*Sin(2*(ThetaW() + ThetaWp())) - 12.649110640673518*g2*gN*Sin(ThetaW() +
      2*ThetaWp()) + 6*Sqr(g1) + 3*Cos(2*(ThetaW() - ThetaWp()))*Sqr(g1) - 6*Cos(2
      *ThetaWp())*Sqr(g1) + 3*Cos(2*(ThetaW() + ThetaWp()))*Sqr(g1) + 10*Sqr(g2) -
      5*Cos(2*(ThetaW() - ThetaWp()))*Sqr(g2) - 10*Cos(2*ThetaWp())*Sqr(g2) - 5*
      Cos(2*(ThetaW() + ThetaWp()))*Sqr(g2) + Cos(2*ThetaW())*(-6*Sqr(g1) + 10*Sqr
      (g2)) + 8*Sqr(gN) + 8*Cos(2*ThetaWp())*Sqr(gN))*(Conj(UHp0(gI2,0))*UHp0(gI1,
      0) + Conj(UHp0(gI2,1))*UHp0(gI1,1));

   return result;
}

std::complex<double> CLASSNAME::CpVZpVZpconjSHppSHpp(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = 0.0125*(-9.797958971132712*g1*gN*Cos(ThetaW() - 2*ThetaWp()) +
      9.797958971132712*g1*gN*Cos(ThetaW() + 2*ThetaWp()) - 15.491933384829668*g1*
      g2*Sin(2*ThetaW()) - 12.649110640673518*g2*gN*Sin(ThetaW() - 2*ThetaWp()) +
      7.745966692414834*g1*g2*Sin(2*(ThetaW() - ThetaWp())) + 7.745966692414834*g1
      *g2*Sin(2*(ThetaW() + ThetaWp())) + 12.649110640673518*g2*gN*Sin(ThetaW() +
      2*ThetaWp()) + 6*Sqr(g1) + 3*Cos(2*(ThetaW() - ThetaWp()))*Sqr(g1) - 6*Cos(2
      *ThetaWp())*Sqr(g1) + 3*Cos(2*(ThetaW() + ThetaWp()))*Sqr(g1) + 10*Sqr(g2) -
      5*Cos(2*(ThetaW() - ThetaWp()))*Sqr(g2) - 10*Cos(2*ThetaWp())*Sqr(g2) - 5*
      Cos(2*(ThetaW() + ThetaWp()))*Sqr(g2) + Cos(2*ThetaW())*(-6*Sqr(g1) + 10*Sqr
      (g2)) + 8*Sqr(gN) + 8*Cos(2*ThetaWp())*Sqr(gN))*(Conj(UHpp(gI2,0))*UHpp(gI1,
      0) + Conj(UHpp(gI2,1))*UHpp(gI1,1));

   return result;
}

double CLASSNAME::CpVZpVZpconjSSI0SSI0(unsigned gI1, unsigned gI2) const
{
   double result = 0.0;

   result = 1.25*KroneckerDelta(gI1,gI2)*Sqr(gN)*Sqr(Cos(ThetaWp()));

   return result;
}

std::complex<double> CLASSNAME::CpVZpconjHpmHpm(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = 0.05*((-9.486832980505138*gN*Cos(ThetaWp()) + 2*(5*g2*Cos(ThetaW())
      - 3.872983346207417*g1*Sin(ThetaW()))*Sin(ThetaWp()))*ZP(gI1,0)*ZP(gI2,0) +
      2*(3.1622776601683795*gN*Cos(ThetaWp()) + (5*g2*Cos(ThetaW()) -
      3.872983346207417*g1*Sin(ThetaW()))*Sin(ThetaWp()))*ZP(gI1,1)*ZP(gI2,1));

   return result;
}

double CLASSNAME::CpVZpconjSHp0SHp0(unsigned gI1, unsigned gI2) const
{
   double result = 0.0;

   result = 0.1*KroneckerDelta(gI1,gI2)*(3.1622776601683795*gN*Cos(ThetaWp()) -
      (5*g2*Cos(ThetaW()) + 3.872983346207417*g1*Sin(ThetaW()))*Sin(ThetaWp()));

   return result;
}

double CLASSNAME::CpVZpconjSHppSHpp(unsigned gI1, unsigned gI2) const
{
   double result = 0.0;

   result = 0.1*KroneckerDelta(gI1,gI2)*(3.1622776601683795*gN*Cos(ThetaWp()) +
      (5*g2*Cos(ThetaW()) - 3.872983346207417*g1*Sin(ThetaW()))*Sin(ThetaWp()));

   return result;
}

double CLASSNAME::CpVZpconjSSI0SSI0(unsigned gI1, unsigned gI2) const
{
   double result = 0.0;

   result = 0.7905694150420949*gN*Cos(ThetaWp())*KroneckerDelta(gI1,gI2);

   return result;
}

std::complex<double> CLASSNAME::CpVZpbarChaChaPL(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = 0.05*(-20*g2*Conj(UM(gI2,0))*Cos(ThetaW())*Sin(ThetaWp())*UM(gI1,0)
      + Conj(UM(gI2,1))*(9.486832980505138*gN*Cos(ThetaWp()) + 2*(-5*g2*Cos(
      ThetaW()) + 3.872983346207417*g1*Sin(ThetaW()))*Sin(ThetaWp()))*UM(gI1,1));

   return result;
}

std::complex<double> CLASSNAME::CpVZpbarChaChaPR(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = 0.1*(-10*g2*Conj(UP(gI1,0))*Cos(ThetaW())*Sin(ThetaWp())*UP(gI2,0)
      + Conj(UP(gI1,1))*(-3.1622776601683795*gN*Cos(ThetaWp()) + (-5*g2*Cos(ThetaW
      ()) + 3.872983346207417*g1*Sin(ThetaW()))*Sin(ThetaWp()))*UP(gI2,1));

   return result;
}

double CLASSNAME::CpVZpbarChaIChaIPL(unsigned gI1, unsigned gI2) const
{
   double result = 0.0;

   result = 0.05*KroneckerDelta(gI1,gI2)*(9.486832980505138*gN*Cos(ThetaWp()) +
      2*(-5*g2*Cos(ThetaW()) + 3.872983346207417*g1*Sin(ThetaW()))*Sin(ThetaWp())
      );

   return result;
}

double CLASSNAME::CpVZpbarChaIChaIPR(unsigned gI1, unsigned gI2) const
{
   double result = 0.0;

   result = -0.1*KroneckerDelta(gI1,gI2)*(3.1622776601683795*gN*Cos(ThetaWp())
      + (5*g2*Cos(ThetaW()) - 3.872983346207417*g1*Sin(ThetaW()))*Sin(ThetaWp()));

   return result;
}

std::complex<double> CLASSNAME::CpVZpChiPChiPPL(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = -0.1*(3.1622776601683795*gN*Cos(ThetaWp()) - (5*g2*Cos(ThetaW()) +
      3.872983346207417*g1*Sin(ThetaW()))*Sin(ThetaWp()))*(Conj(ZNp(gI2,0))*ZNp(
      gI1,0) - Conj(ZNp(gI2,1))*ZNp(gI1,1));

   return result;
}

std::complex<double> CLASSNAME::CpVZpChiPChiPPR(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = 0.1*(3.1622776601683795*gN*Cos(ThetaWp()) - (5*g2*Cos(ThetaW()) +
      3.872983346207417*g1*Sin(ThetaW()))*Sin(ThetaWp()))*(Conj(ZNp(gI1,0))*ZNp(
      gI2,0) - Conj(ZNp(gI1,1))*ZNp(gI2,1));

   return result;
}

double CLASSNAME::CpVZpFSIFSIPL(unsigned gI1, unsigned gI2) const
{
   double result = 0.0;

   result = -0.7905694150420949*gN*Cos(ThetaWp())*KroneckerDelta(gI1,gI2);

   return result;
}

double CLASSNAME::CpVZpFSIFSIPR(unsigned gI1, unsigned gI2) const
{
   double result = 0.0;

   result = 0.7905694150420949*gN*Cos(ThetaWp())*KroneckerDelta(gI1,gI2);

   return result;
}

std::complex<double> CLASSNAME::CpVZpVZpAhAh(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = 0.05*((9*Sqr(gN)*Sqr(Cos(ThetaWp())) + 10*Sqr(g2)*Sqr(Cos(ThetaW())
      )*Sqr(Sin(ThetaWp())) + 3*g1*Sin(ThetaW())*(2.449489742783178*gN*Sin(2*
      ThetaWp()) + 2*g1*Sin(ThetaW())*Sqr(Sin(ThetaWp()))) + Cos(ThetaW())*(
      9.486832980505138*g2*gN*Sin(2*ThetaWp()) + 15.491933384829668*g1*g2*Sin(
      ThetaW())*Sqr(Sin(ThetaWp()))))*ZA(gI1,0)*ZA(gI2,0) + 2*(-4.898979485566356*
      g1*gN*Cos(ThetaWp())*Sin(ThetaW())*Sin(ThetaWp()) - 3.1622776601683795*g2*gN
      *Cos(ThetaW())*Sin(2*ThetaWp()) + 2*Sqr(gN)*Sqr(Cos(ThetaWp())) + g1*Sin(
      ThetaW())*(7.745966692414834*g2*Cos(ThetaW()) + 3*g1*Sin(ThetaW()))*Sqr(Sin(
      ThetaWp())) + 5*Sqr(g2)*Sqr(Cos(ThetaW()))*Sqr(Sin(ThetaWp())))*ZA(gI1,1)*ZA
      (gI2,1) + 25*Sqr(gN)*Sqr(Cos(ThetaWp()))*ZA(gI1,2)*ZA(gI2,2));

   return result;
}

std::complex<double> CLASSNAME::CpVZpVZpconjSvSv(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = 0.1*KroneckerDelta(gI1,gI2)*(-4.898979485566356*g1*gN*Cos(ThetaWp()
      )*Sin(ThetaW())*Sin(ThetaWp()) - 3.1622776601683795*g2*gN*Cos(ThetaW())*Sin(
      2*ThetaWp()) + 2*Sqr(gN)*Sqr(Cos(ThetaWp())) + g1*Sin(ThetaW())*(
      7.745966692414834*g2*Cos(ThetaW()) + 3*g1*Sin(ThetaW()))*Sqr(Sin(ThetaWp()))
      + 5*Sqr(g2)*Sqr(Cos(ThetaW()))*Sqr(Sin(ThetaWp())));

   return result;
}

std::complex<double> CLASSNAME::CpVZpVZphhhh(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = 0.05*((9*Sqr(gN)*Sqr(Cos(ThetaWp())) + 10*Sqr(g2)*Sqr(Cos(ThetaW())
      )*Sqr(Sin(ThetaWp())) + 3*g1*Sin(ThetaW())*(2.449489742783178*gN*Sin(2*
      ThetaWp()) + 2*g1*Sin(ThetaW())*Sqr(Sin(ThetaWp()))) + Cos(ThetaW())*(
      9.486832980505138*g2*gN*Sin(2*ThetaWp()) + 15.491933384829668*g1*g2*Sin(
      ThetaW())*Sqr(Sin(ThetaWp()))))*ZH(gI1,0)*ZH(gI2,0) + 2*(-4.898979485566356*
      g1*gN*Cos(ThetaWp())*Sin(ThetaW())*Sin(ThetaWp()) - 3.1622776601683795*g2*gN
      *Cos(ThetaW())*Sin(2*ThetaWp()) + 2*Sqr(gN)*Sqr(Cos(ThetaWp())) + g1*Sin(
      ThetaW())*(7.745966692414834*g2*Cos(ThetaW()) + 3*g1*Sin(ThetaW()))*Sqr(Sin(
      ThetaWp())) + 5*Sqr(g2)*Sqr(Cos(ThetaW()))*Sqr(Sin(ThetaWp())))*ZH(gI1,1)*ZH
      (gI2,1) + 25*Sqr(gN)*Sqr(Cos(ThetaWp()))*ZH(gI1,2)*ZH(gI2,2));

   return result;
}

double CLASSNAME::CpVZpconjSvSv(unsigned gI1, unsigned gI2) const
{
   double result = 0.0;

   result = 0.1*KroneckerDelta(gI1,gI2)*(3.1622776601683795*gN*Cos(ThetaWp()) -
      (5*g2*Cos(ThetaW()) + 3.872983346207417*g1*Sin(ThetaW()))*Sin(ThetaWp()));

   return result;
}

std::complex<double> CLASSNAME::CpVZphhAh(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = std::complex<double>(0,0.05)*((9.486832980505138*gN*Cos(ThetaWp())
      + 2*(5*g2*Cos(ThetaW()) + 3.872983346207417*g1*Sin(ThetaW()))*Sin(ThetaWp())
      )*ZA(gI2,0)*ZH(gI1,0) + 2*(3.1622776601683795*gN*Cos(ThetaWp()) - (5*g2*Cos(
      ThetaW()) + 3.872983346207417*g1*Sin(ThetaW()))*Sin(ThetaWp()))*ZA(gI2,1)*ZH
      (gI1,1) - 15.811388300841898*gN*Cos(ThetaWp())*ZA(gI2,2)*ZH(gI1,2));

   return result;
}

double CLASSNAME::CpVZpbarFdFdPL(unsigned gI1, unsigned gI2) const
{
   double result = 0.0;

   result = -0.016666666666666666*KroneckerDelta(gI1,gI2)*(9.486832980505138*gN
      *Cos(ThetaWp()) + 2*(15*g2*Cos(ThetaW()) + 3.872983346207417*g1*Sin(ThetaW()
      ))*Sin(ThetaWp()));

   return result;
}

double CLASSNAME::CpVZpbarFdFdPR(unsigned gI1, unsigned gI2) const
{
   double result = 0.0;

   result = KroneckerDelta(gI1,gI2)*(0.31622776601683794*gN*Cos(ThetaWp()) +
      0.2581988897471611*g1*Sin(ThetaW())*Sin(ThetaWp()));

   return result;
}

double CLASSNAME::CpVZpbarFDXFDXPL(unsigned gI1, unsigned gI2) const
{
   double result = 0.0;

   result = KroneckerDelta(gI1,gI2)*(0.31622776601683794*gN*Cos(ThetaWp()) +
      0.2581988897471611*g1*Sin(ThetaW())*Sin(ThetaWp()));

   return result;
}

double CLASSNAME::CpVZpbarFDXFDXPR(unsigned gI1, unsigned gI2) const
{
   double result = 0.0;

   result = -0.016666666666666666*KroneckerDelta(gI1,gI2)*(28.460498941515414*
      gN*Cos(ThetaWp()) - 15.491933384829668*g1*Sin(ThetaW())*Sin(ThetaWp()));

   return result;
}

double CLASSNAME::CpVZpbarFeFePL(unsigned gI1, unsigned gI2) const
{
   double result = 0.0;

   result = -0.1*KroneckerDelta(gI1,gI2)*(3.1622776601683795*gN*Cos(ThetaWp())
      + (5*g2*Cos(ThetaW()) - 3.872983346207417*g1*Sin(ThetaW()))*Sin(ThetaWp()));

   return result;
}

double CLASSNAME::CpVZpbarFeFePR(unsigned gI1, unsigned gI2) const
{
   double result = 0.0;

   result = 0.05*KroneckerDelta(gI1,gI2)*(3.1622776601683795*gN*Cos(ThetaWp())
      + 15.491933384829668*g1*Sin(ThetaW())*Sin(ThetaWp()));

   return result;
}

double CLASSNAME::CpVZpbarFuFuPL(unsigned gI1, unsigned gI2) const
{
   double result = 0.0;

   result = -0.016666666666666666*KroneckerDelta(gI1,gI2)*(9.486832980505138*gN
      *Cos(ThetaWp()) + 2*(-15*g2*Cos(ThetaW()) + 3.872983346207417*g1*Sin(ThetaW(
      )))*Sin(ThetaWp()));

   return result;
}

double CLASSNAME::CpVZpbarFuFuPR(unsigned gI1, unsigned gI2) const
{
   double result = 0.0;

   result = 0.016666666666666666*KroneckerDelta(gI1,gI2)*(9.486832980505138*gN*
      Cos(ThetaWp()) - 30.983866769659336*g1*Sin(ThetaW())*Sin(ThetaWp()));

   return result;
}

double CLASSNAME::CpVZpbarFvFvPL(unsigned gI1, unsigned gI2) const
{
   double result = 0.0;

   result = -0.1*KroneckerDelta(gI1,gI2)*(3.1622776601683795*gN*Cos(ThetaWp())
      - (5*g2*Cos(ThetaW()) + 3.872983346207417*g1*Sin(ThetaW()))*Sin(ThetaWp()));

   return result;
}

double CLASSNAME::CpVZpbarFvFvPR(unsigned , unsigned ) const
{
   double result = 0.0;

   result = 0;

   return result;
}

std::complex<double> CLASSNAME::CpVZpVZpconjSHI0SHI0(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_4676;
   std::complex<double> tmp_4677;
   std::complex<double> tmp_4678;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4678 += Conj(UHI0(gI2,j1))*UHI0(gI1,j1);
   }
   tmp_4677 += tmp_4678;
   tmp_4676 += (std::complex<double>(0,0.45)*Sqr(gN)*Sqr(Cos(ThetaWp()))) *
      tmp_4677;
   std::complex<double> tmp_4679;
   std::complex<double> tmp_4680;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4680 += Conj(UHI0(gI2,2 + j1))*UHI0(gI1,2 + j1);
   }
   tmp_4679 += tmp_4680;
   tmp_4676 += (std::complex<double>(0,0.2)*Sqr(gN)*Sqr(Cos(ThetaWp()))) *
      tmp_4679;
   std::complex<double> tmp_4681;
   std::complex<double> tmp_4682;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4682 += Conj(UHI0(gI2,j1))*UHI0(gI1,j1);
   }
   tmp_4681 += tmp_4682;
   tmp_4676 += (std::complex<double>(0,0.5)*Sqr(g2)*Sqr(Cos(ThetaW()))*Sqr(Sin(
      ThetaWp()))) * tmp_4681;
   std::complex<double> tmp_4683;
   std::complex<double> tmp_4684;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4684 += Conj(UHI0(gI2,2 + j1))*UHI0(gI1,2 + j1);
   }
   tmp_4683 += tmp_4684;
   tmp_4676 += (std::complex<double>(0,0.5)*Sqr(g2)*Sqr(Cos(ThetaW()))*Sqr(Sin(
      ThetaWp()))) * tmp_4683;
   std::complex<double> tmp_4685;
   std::complex<double> tmp_4686;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4686 += Conj(UHI0(gI2,j1))*UHI0(gI1,j1);
   }
   tmp_4685 += tmp_4686;
   tmp_4676 += (std::complex<double>(0.,0.7745966692414834)*g1*g2*Cos(ThetaW())
      *Sin(ThetaW())*Sqr(Sin(ThetaWp()))) * tmp_4685;
   std::complex<double> tmp_4687;
   std::complex<double> tmp_4688;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4688 += Conj(UHI0(gI2,2 + j1))*UHI0(gI1,2 + j1);
   }
   tmp_4687 += tmp_4688;
   tmp_4676 += (std::complex<double>(0.,0.7745966692414834)*g1*g2*Cos(ThetaW())
      *Sin(ThetaW())*Sqr(Sin(ThetaWp()))) * tmp_4687;
   std::complex<double> tmp_4689;
   std::complex<double> tmp_4690;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4690 += Conj(UHI0(gI2,j1))*UHI0(gI1,j1);
   }
   tmp_4689 += tmp_4690;
   tmp_4676 += (std::complex<double>(0,0.3)*Sqr(g1)*Sqr(Sin(ThetaW()))*Sqr(Sin(
      ThetaWp()))) * tmp_4689;
   std::complex<double> tmp_4691;
   std::complex<double> tmp_4692;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4692 += Conj(UHI0(gI2,2 + j1))*UHI0(gI1,2 + j1);
   }
   tmp_4691 += tmp_4692;
   tmp_4676 += (std::complex<double>(0,0.3)*Sqr(g1)*Sqr(Sin(ThetaW()))*Sqr(Sin(
      ThetaWp()))) * tmp_4691;
   std::complex<double> tmp_4693;
   std::complex<double> tmp_4694;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4694 += Conj(UHI0(gI2,j1))*UHI0(gI1,j1);
   }
   tmp_4693 += tmp_4694;
   tmp_4676 += (std::complex<double>(0.,0.4743416490252569)*g2*gN*Cos(ThetaW())
      *Sin(2*ThetaWp())) * tmp_4693;
   std::complex<double> tmp_4695;
   std::complex<double> tmp_4696;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4696 += Conj(UHI0(gI2,2 + j1))*UHI0(gI1,2 + j1);
   }
   tmp_4695 += tmp_4696;
   tmp_4676 += (std::complex<double>(0.,-0.31622776601683794)*g2*gN*Cos(ThetaW(
      ))*Sin(2*ThetaWp())) * tmp_4695;
   std::complex<double> tmp_4697;
   std::complex<double> tmp_4698;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4698 += Conj(UHI0(gI2,j1))*UHI0(gI1,j1);
   }
   tmp_4697 += tmp_4698;
   tmp_4676 += (std::complex<double>(0.,0.36742346141747667)*g1*gN*Sin(ThetaW()
      )*Sin(2*ThetaWp())) * tmp_4697;
   std::complex<double> tmp_4699;
   std::complex<double> tmp_4700;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4700 += Conj(UHI0(gI2,2 + j1))*UHI0(gI1,2 + j1);
   }
   tmp_4699 += tmp_4700;
   tmp_4676 += (std::complex<double>(0.,-0.2449489742783178)*g1*gN*Sin(ThetaW()
      )*Sin(2*ThetaWp())) * tmp_4699;
   result += (std::complex<double>(0,-1)) * tmp_4676;

   return result;
}

std::complex<double> CLASSNAME::CpVZpVZpconjSHIpSHIp(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_4701;
   std::complex<double> tmp_4702;
   std::complex<double> tmp_4703;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4703 += Conj(UHIp(gI2,j1))*UHIp(gI1,j1);
   }
   tmp_4702 += tmp_4703;
   tmp_4701 += (std::complex<double>(0,0.45)*Sqr(gN)*Sqr(Cos(ThetaWp()))) *
      tmp_4702;
   std::complex<double> tmp_4704;
   std::complex<double> tmp_4705;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4705 += Conj(UHIp(gI2,2 + j1))*UHIp(gI1,2 + j1);
   }
   tmp_4704 += tmp_4705;
   tmp_4701 += (std::complex<double>(0,0.2)*Sqr(gN)*Sqr(Cos(ThetaWp()))) *
      tmp_4704;
   std::complex<double> tmp_4706;
   std::complex<double> tmp_4707;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4707 += Conj(UHIp(gI2,2 + j1))*UHIp(gI1,2 + j1);
   }
   tmp_4706 += tmp_4707;
   tmp_4701 += (std::complex<double>(0.,-0.4898979485566356)*g1*gN*Cos(ThetaWp(
      ))*Sin(ThetaW())*Sin(ThetaWp())) * tmp_4706;
   std::complex<double> tmp_4708;
   std::complex<double> tmp_4709;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4709 += Conj(UHIp(gI2,j1))*UHIp(gI1,j1);
   }
   tmp_4708 += tmp_4709;
   tmp_4701 += (std::complex<double>(0,0.5)*Sqr(g2)*Sqr(Cos(ThetaW()))*Sqr(Sin(
      ThetaWp()))) * tmp_4708;
   std::complex<double> tmp_4710;
   std::complex<double> tmp_4711;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4711 += Conj(UHIp(gI2,2 + j1))*UHIp(gI1,2 + j1);
   }
   tmp_4710 += tmp_4711;
   tmp_4701 += (std::complex<double>(0,0.5)*Sqr(g2)*Sqr(Cos(ThetaW()))*Sqr(Sin(
      ThetaWp()))) * tmp_4710;
   std::complex<double> tmp_4712;
   std::complex<double> tmp_4713;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4713 += Conj(UHIp(gI2,j1))*UHIp(gI1,j1);
   }
   tmp_4712 += tmp_4713;
   tmp_4701 += (std::complex<double>(0.,-0.7745966692414834)*g1*g2*Cos(ThetaW()
      )*Sin(ThetaW())*Sqr(Sin(ThetaWp()))) * tmp_4712;
   std::complex<double> tmp_4714;
   std::complex<double> tmp_4715;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4715 += Conj(UHIp(gI2,2 + j1))*UHIp(gI1,2 + j1);
   }
   tmp_4714 += tmp_4715;
   tmp_4701 += (std::complex<double>(0.,-0.7745966692414834)*g1*g2*Cos(ThetaW()
      )*Sin(ThetaW())*Sqr(Sin(ThetaWp()))) * tmp_4714;
   std::complex<double> tmp_4716;
   std::complex<double> tmp_4717;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4717 += Conj(UHIp(gI2,j1))*UHIp(gI1,j1);
   }
   tmp_4716 += tmp_4717;
   tmp_4701 += (std::complex<double>(0,0.3)*Sqr(g1)*Sqr(Sin(ThetaW()))*Sqr(Sin(
      ThetaWp()))) * tmp_4716;
   std::complex<double> tmp_4718;
   std::complex<double> tmp_4719;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4719 += Conj(UHIp(gI2,2 + j1))*UHIp(gI1,2 + j1);
   }
   tmp_4718 += tmp_4719;
   tmp_4701 += (std::complex<double>(0,0.3)*Sqr(g1)*Sqr(Sin(ThetaW()))*Sqr(Sin(
      ThetaWp()))) * tmp_4718;
   std::complex<double> tmp_4720;
   std::complex<double> tmp_4721;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4721 += Conj(UHIp(gI2,j1))*UHIp(gI1,j1);
   }
   tmp_4720 += tmp_4721;
   tmp_4701 += (std::complex<double>(0.,-0.4743416490252569)*g2*gN*Cos(ThetaW()
      )*Sin(2*ThetaWp())) * tmp_4720;
   std::complex<double> tmp_4722;
   std::complex<double> tmp_4723;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4723 += Conj(UHIp(gI2,2 + j1))*UHIp(gI1,2 + j1);
   }
   tmp_4722 += tmp_4723;
   tmp_4701 += (std::complex<double>(0.,0.31622776601683794)*g2*gN*Cos(ThetaW()
      )*Sin(2*ThetaWp())) * tmp_4722;
   std::complex<double> tmp_4724;
   std::complex<double> tmp_4725;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4725 += Conj(UHIp(gI2,j1))*UHIp(gI1,j1);
   }
   tmp_4724 += tmp_4725;
   tmp_4701 += (std::complex<double>(0.,0.36742346141747667)*g1*gN*Sin(ThetaW()
      )*Sin(2*ThetaWp())) * tmp_4724;
   result += (std::complex<double>(0,-1)) * tmp_4701;

   return result;
}

std::complex<double> CLASSNAME::CpVZpconjSHI0SHI0(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_4726;
   std::complex<double> tmp_4727;
   std::complex<double> tmp_4728;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4728 += Conj(UHI0(gI2,2 + j1))*UHI0(gI1,2 + j1);
   }
   tmp_4727 += tmp_4728;
   tmp_4726 += (-2*(-3.1622776601683795*gN*Cos(ThetaWp()) + 5*(g2*Cos(ThetaW())
      + 0.7745966692414834*g1*Sin(ThetaW()))*Sin(ThetaWp()))) * tmp_4727;
   std::complex<double> tmp_4729;
   std::complex<double> tmp_4730;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4730 += Conj(UHI0(gI2,j1))*UHI0(gI1,j1);
   }
   tmp_4729 += tmp_4730;
   tmp_4726 += (-9.486832980505138*gN*Cos(ThetaWp()) - 10*(g2*Cos(ThetaW()) +
      0.7745966692414834*g1*Sin(ThetaW()))*Sin(ThetaWp())) * tmp_4729;
   result += (0.05) * tmp_4726;

   return result;
}

std::complex<double> CLASSNAME::CpVZpconjSHIpSHIp(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_4731;
   std::complex<double> tmp_4732;
   std::complex<double> tmp_4733;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4733 += Conj(UHIp(gI2,2 + j1))*UHIp(gI1,2 + j1);
   }
   tmp_4732 += tmp_4733;
   tmp_4731 += (2*(3.1622776601683795*gN*Cos(ThetaWp()) + 5*(g2*Cos(ThetaW()) -
      0.7745966692414834*g1*Sin(ThetaW()))*Sin(ThetaWp()))) * tmp_4732;
   std::complex<double> tmp_4734;
   std::complex<double> tmp_4735;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4735 += Conj(UHIp(gI2,j1))*UHIp(gI1,j1);
   }
   tmp_4734 += tmp_4735;
   tmp_4731 += (-9.486832980505138*gN*Cos(ThetaWp()) - 10*(-(g2*Cos(ThetaW()))
      + 0.7745966692414834*g1*Sin(ThetaW()))*Sin(ThetaWp())) * tmp_4734;
   result += (0.05) * tmp_4731;

   return result;
}

std::complex<double> CLASSNAME::CpVZpChiIChiIPL(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_4736;
   std::complex<double> tmp_4737;
   std::complex<double> tmp_4738;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4738 += Conj(ZNI(gI2,2 + j1))*ZNI(gI1,2 + j1);
   }
   tmp_4737 += tmp_4738;
   tmp_4736 += (2*(3.1622776601683795*gN*Cos(ThetaWp()) - 5*(g2*Cos(ThetaW()) +
      0.7745966692414834*g1*Sin(ThetaW()))*Sin(ThetaWp()))) * tmp_4737;
   std::complex<double> tmp_4739;
   std::complex<double> tmp_4740;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4740 += Conj(ZNI(gI2,j1))*ZNI(gI1,j1);
   }
   tmp_4739 += tmp_4740;
   tmp_4736 += (9.486832980505138*gN*Cos(ThetaWp()) + 10*(g2*Cos(ThetaW()) +
      0.7745966692414834*g1*Sin(ThetaW()))*Sin(ThetaWp())) * tmp_4739;
   result += (0.05) * tmp_4736;

   return result;
}

std::complex<double> CLASSNAME::CpVZpChiIChiIPR(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_4741;
   std::complex<double> tmp_4742;
   std::complex<double> tmp_4743;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4743 += Conj(ZNI(gI1,2 + j1))*ZNI(gI2,2 + j1);
   }
   tmp_4742 += tmp_4743;
   tmp_4741 += (-2*(3.1622776601683795*gN*Cos(ThetaWp()) - 5*(g2*Cos(ThetaW())
      + 0.7745966692414834*g1*Sin(ThetaW()))*Sin(ThetaWp()))) * tmp_4742;
   std::complex<double> tmp_4744;
   std::complex<double> tmp_4745;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4745 += Conj(ZNI(gI1,j1))*ZNI(gI2,j1);
   }
   tmp_4744 += tmp_4745;
   tmp_4741 += (-9.486832980505138*gN*Cos(ThetaWp()) - 10*(g2*Cos(ThetaW()) +
      0.7745966692414834*g1*Sin(ThetaW()))*Sin(ThetaWp())) * tmp_4744;
   result += (0.05) * tmp_4741;

   return result;
}

std::complex<double> CLASSNAME::CpVZpVZpconjSdSd(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_4746;
   std::complex<double> tmp_4747;
   std::complex<double> tmp_4748;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4748 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
   }
   tmp_4747 += tmp_4748;
   tmp_4746 += (std::complex<double>(0,0.05)*Sqr(gN)*Sqr(Cos(ThetaWp()))) *
      tmp_4747;
   std::complex<double> tmp_4749;
   std::complex<double> tmp_4750;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4750 += Conj(ZD(gI2,3 + j1))*ZD(gI1,3 + j1);
   }
   tmp_4749 += tmp_4750;
   tmp_4746 += (std::complex<double>(0,0.2)*Sqr(gN)*Sqr(Cos(ThetaWp()))) *
      tmp_4749;
   std::complex<double> tmp_4751;
   std::complex<double> tmp_4752;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4752 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
   }
   tmp_4751 += tmp_4752;
   tmp_4746 += (std::complex<double>(0.,0.08164965809277262)*g1*gN*Cos(ThetaWp(
      ))*Sin(ThetaW())*Sin(ThetaWp())) * tmp_4751;
   std::complex<double> tmp_4753;
   std::complex<double> tmp_4754;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4754 += Conj(ZD(gI2,3 + j1))*ZD(gI1,3 + j1);
   }
   tmp_4753 += tmp_4754;
   tmp_4746 += (std::complex<double>(0.,0.32659863237109044)*g1*gN*Cos(ThetaWp(
      ))*Sin(ThetaW())*Sin(ThetaWp())) * tmp_4753;
   std::complex<double> tmp_4755;
   std::complex<double> tmp_4756;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4756 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
   }
   tmp_4755 += tmp_4756;
   tmp_4746 += (std::complex<double>(0,0.5)*Sqr(g2)*Sqr(Cos(ThetaW()))*Sqr(Sin(
      ThetaWp()))) * tmp_4755;
   std::complex<double> tmp_4757;
   std::complex<double> tmp_4758;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4758 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
   }
   tmp_4757 += tmp_4758;
   tmp_4746 += (std::complex<double>(0.,0.2581988897471611)*g1*g2*Cos(ThetaW())
      *Sin(ThetaW())*Sqr(Sin(ThetaWp()))) * tmp_4757;
   std::complex<double> tmp_4759;
   std::complex<double> tmp_4760;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4760 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
   }
   tmp_4759 += tmp_4760;
   tmp_4746 += (std::complex<double>(0,0.03333333333333333)*Sqr(g1)*Sqr(Sin(
      ThetaW()))*Sqr(Sin(ThetaWp()))) * tmp_4759;
   std::complex<double> tmp_4761;
   std::complex<double> tmp_4762;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4762 += Conj(ZD(gI2,3 + j1))*ZD(gI1,3 + j1);
   }
   tmp_4761 += tmp_4762;
   tmp_4746 += (std::complex<double>(0,0.13333333333333333)*Sqr(g1)*Sqr(Sin(
      ThetaW()))*Sqr(Sin(ThetaWp()))) * tmp_4761;
   std::complex<double> tmp_4763;
   std::complex<double> tmp_4764;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4764 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
   }
   tmp_4763 += tmp_4764;
   tmp_4746 += (std::complex<double>(0.,0.15811388300841897)*g2*gN*Cos(ThetaW()
      )*Sin(2*ThetaWp())) * tmp_4763;
   result += (std::complex<double>(0,-1)) * tmp_4746;

   return result;
}

std::complex<double> CLASSNAME::CpVZpVZpconjSDXSDX(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_4765;
   std::complex<double> tmp_4766;
   std::complex<double> tmp_4767;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4767 += Conj(ZDX(gI2,j1))*ZDX(gI1,j1);
   }
   tmp_4766 += tmp_4767;
   tmp_4765 += (std::complex<double>(0,0.2)*Sqr(gN)*Sqr(Cos(ThetaWp()))) *
      tmp_4766;
   std::complex<double> tmp_4768;
   std::complex<double> tmp_4769;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4769 += Conj(ZDX(gI2,3 + j1))*ZDX(gI1,3 + j1);
   }
   tmp_4768 += tmp_4769;
   tmp_4765 += (std::complex<double>(0,0.45)*Sqr(gN)*Sqr(Cos(ThetaWp()))) *
      tmp_4768;
   std::complex<double> tmp_4770;
   std::complex<double> tmp_4771;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4771 += Conj(ZDX(gI2,j1))*ZDX(gI1,j1);
   }
   tmp_4770 += tmp_4771;
   tmp_4765 += (std::complex<double>(0.,0.32659863237109044)*g1*gN*Cos(ThetaWp(
      ))*Sin(ThetaW())*Sin(ThetaWp())) * tmp_4770;
   std::complex<double> tmp_4772;
   std::complex<double> tmp_4773;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4773 += Conj(ZDX(gI2,3 + j1))*ZDX(gI1,3 + j1);
   }
   tmp_4772 += tmp_4773;
   tmp_4765 += (std::complex<double>(0.,-0.4898979485566356)*g1*gN*Cos(ThetaWp(
      ))*Sin(ThetaW())*Sin(ThetaWp())) * tmp_4772;
   std::complex<double> tmp_4774;
   std::complex<double> tmp_4775;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4775 += Conj(ZDX(gI2,j1))*ZDX(gI1,j1);
   }
   tmp_4774 += tmp_4775;
   tmp_4765 += (std::complex<double>(0,0.13333333333333333)*Sqr(g1)*Sqr(Sin(
      ThetaW()))*Sqr(Sin(ThetaWp()))) * tmp_4774;
   std::complex<double> tmp_4776;
   std::complex<double> tmp_4777;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4777 += Conj(ZDX(gI2,3 + j1))*ZDX(gI1,3 + j1);
   }
   tmp_4776 += tmp_4777;
   tmp_4765 += (std::complex<double>(0,0.13333333333333333)*Sqr(g1)*Sqr(Sin(
      ThetaW()))*Sqr(Sin(ThetaWp()))) * tmp_4776;
   result += (std::complex<double>(0,-1)) * tmp_4765;

   return result;
}

std::complex<double> CLASSNAME::CpVZpVZpconjSeSe(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_4778;
   std::complex<double> tmp_4779;
   std::complex<double> tmp_4780;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4780 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
   }
   tmp_4779 += tmp_4780;
   tmp_4778 += (std::complex<double>(0,0.2)*Sqr(gN)*Sqr(Cos(ThetaWp()))) *
      tmp_4779;
   std::complex<double> tmp_4781;
   std::complex<double> tmp_4782;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4782 += Conj(ZE(gI2,3 + j1))*ZE(gI1,3 + j1);
   }
   tmp_4781 += tmp_4782;
   tmp_4778 += (std::complex<double>(0,0.05)*Sqr(gN)*Sqr(Cos(ThetaWp()))) *
      tmp_4781;
   std::complex<double> tmp_4783;
   std::complex<double> tmp_4784;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4784 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
   }
   tmp_4783 += tmp_4784;
   tmp_4778 += (std::complex<double>(0.,-0.4898979485566356)*g1*gN*Cos(ThetaWp(
      ))*Sin(ThetaW())*Sin(ThetaWp())) * tmp_4783;
   std::complex<double> tmp_4785;
   std::complex<double> tmp_4786;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4786 += Conj(ZE(gI2,3 + j1))*ZE(gI1,3 + j1);
   }
   tmp_4785 += tmp_4786;
   tmp_4778 += (std::complex<double>(0.,0.4898979485566356)*g1*gN*Cos(ThetaWp()
      )*Sin(ThetaW())*Sin(ThetaWp())) * tmp_4785;
   std::complex<double> tmp_4787;
   std::complex<double> tmp_4788;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4788 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
   }
   tmp_4787 += tmp_4788;
   tmp_4778 += (std::complex<double>(0,0.5)*Sqr(g2)*Sqr(Cos(ThetaW()))*Sqr(Sin(
      ThetaWp()))) * tmp_4787;
   std::complex<double> tmp_4789;
   std::complex<double> tmp_4790;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4790 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
   }
   tmp_4789 += tmp_4790;
   tmp_4778 += (std::complex<double>(0.,-0.7745966692414834)*g1*g2*Cos(ThetaW()
      )*Sin(ThetaW())*Sqr(Sin(ThetaWp()))) * tmp_4789;
   std::complex<double> tmp_4791;
   std::complex<double> tmp_4792;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4792 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
   }
   tmp_4791 += tmp_4792;
   tmp_4778 += (std::complex<double>(0,0.3)*Sqr(g1)*Sqr(Sin(ThetaW()))*Sqr(Sin(
      ThetaWp()))) * tmp_4791;
   std::complex<double> tmp_4793;
   std::complex<double> tmp_4794;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4794 += Conj(ZE(gI2,3 + j1))*ZE(gI1,3 + j1);
   }
   tmp_4793 += tmp_4794;
   tmp_4778 += (std::complex<double>(0,1.2)*Sqr(g1)*Sqr(Sin(ThetaW()))*Sqr(Sin(
      ThetaWp()))) * tmp_4793;
   std::complex<double> tmp_4795;
   std::complex<double> tmp_4796;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4796 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
   }
   tmp_4795 += tmp_4796;
   tmp_4778 += (std::complex<double>(0.,0.31622776601683794)*g2*gN*Cos(ThetaW()
      )*Sin(2*ThetaWp())) * tmp_4795;
   result += (std::complex<double>(0,-1)) * tmp_4778;

   return result;
}

std::complex<double> CLASSNAME::CpVZpVZpconjSuSu(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_4797;
   std::complex<double> tmp_4798;
   std::complex<double> tmp_4799;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4799 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
   }
   tmp_4798 += tmp_4799;
   tmp_4797 += (std::complex<double>(0,0.05)*Sqr(gN)*Sqr(Cos(ThetaWp()))) *
      tmp_4798;
   std::complex<double> tmp_4800;
   std::complex<double> tmp_4801;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4801 += Conj(ZU(gI2,3 + j1))*ZU(gI1,3 + j1);
   }
   tmp_4800 += tmp_4801;
   tmp_4797 += (std::complex<double>(0,0.05)*Sqr(gN)*Sqr(Cos(ThetaWp()))) *
      tmp_4800;
   std::complex<double> tmp_4802;
   std::complex<double> tmp_4803;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4803 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
   }
   tmp_4802 += tmp_4803;
   tmp_4797 += (std::complex<double>(0.,0.08164965809277262)*g1*gN*Cos(ThetaWp(
      ))*Sin(ThetaW())*Sin(ThetaWp())) * tmp_4802;
   std::complex<double> tmp_4804;
   std::complex<double> tmp_4805;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4805 += Conj(ZU(gI2,3 + j1))*ZU(gI1,3 + j1);
   }
   tmp_4804 += tmp_4805;
   tmp_4797 += (std::complex<double>(0.,-0.32659863237109044)*g1*gN*Cos(ThetaWp
      ())*Sin(ThetaW())*Sin(ThetaWp())) * tmp_4804;
   std::complex<double> tmp_4806;
   std::complex<double> tmp_4807;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4807 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
   }
   tmp_4806 += tmp_4807;
   tmp_4797 += (std::complex<double>(0,0.5)*Sqr(g2)*Sqr(Cos(ThetaW()))*Sqr(Sin(
      ThetaWp()))) * tmp_4806;
   std::complex<double> tmp_4808;
   std::complex<double> tmp_4809;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4809 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
   }
   tmp_4808 += tmp_4809;
   tmp_4797 += (std::complex<double>(0.,-0.2581988897471611)*g1*g2*Cos(ThetaW()
      )*Sin(ThetaW())*Sqr(Sin(ThetaWp()))) * tmp_4808;
   std::complex<double> tmp_4810;
   std::complex<double> tmp_4811;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4811 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
   }
   tmp_4810 += tmp_4811;
   tmp_4797 += (std::complex<double>(0,0.03333333333333333)*Sqr(g1)*Sqr(Sin(
      ThetaW()))*Sqr(Sin(ThetaWp()))) * tmp_4810;
   std::complex<double> tmp_4812;
   std::complex<double> tmp_4813;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4813 += Conj(ZU(gI2,3 + j1))*ZU(gI1,3 + j1);
   }
   tmp_4812 += tmp_4813;
   tmp_4797 += (std::complex<double>(0,0.5333333333333333)*Sqr(g1)*Sqr(Sin(
      ThetaW()))*Sqr(Sin(ThetaWp()))) * tmp_4812;
   std::complex<double> tmp_4814;
   std::complex<double> tmp_4815;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4815 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
   }
   tmp_4814 += tmp_4815;
   tmp_4797 += (std::complex<double>(0.,-0.15811388300841897)*g2*gN*Cos(ThetaW(
      ))*Sin(2*ThetaWp())) * tmp_4814;
   result += (std::complex<double>(0,-1)) * tmp_4797;

   return result;
}

std::complex<double> CLASSNAME::CpVZpconjSdSd(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_4816;
   std::complex<double> tmp_4817;
   std::complex<double> tmp_4818;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4818 += Conj(ZD(gI2,3 + j1))*ZD(gI1,3 + j1);
   }
   tmp_4817 += tmp_4818;
   tmp_4816 += (-2*(9.486832980505138*gN*Cos(ThetaWp()) + 7.745966692414834*g1*
      Sin(ThetaW())*Sin(ThetaWp()))) * tmp_4817;
   std::complex<double> tmp_4819;
   std::complex<double> tmp_4820;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4820 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
   }
   tmp_4819 += tmp_4820;
   tmp_4816 += (9.486832980505138*gN*Cos(ThetaWp()) + 10*(3*g2*Cos(ThetaW()) +
      0.7745966692414834*g1*Sin(ThetaW()))*Sin(ThetaWp())) * tmp_4819;
   result += (0.016666666666666666) * tmp_4816;

   return result;
}

std::complex<double> CLASSNAME::CpVZpconjSDXSDX(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_4821;
   std::complex<double> tmp_4822;
   std::complex<double> tmp_4823;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4823 += Conj(ZDX(gI2,3 + j1))*ZDX(gI1,3 + j1);
   }
   tmp_4822 += tmp_4823;
   tmp_4821 += (28.460498941515414*gN*Cos(ThetaWp()) - 15.491933384829668*g1*
      Sin(ThetaW())*Sin(ThetaWp())) * tmp_4822;
   std::complex<double> tmp_4824;
   std::complex<double> tmp_4825;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4825 += Conj(ZDX(gI2,j1))*ZDX(gI1,j1);
   }
   tmp_4824 += tmp_4825;
   tmp_4821 += (-18.973665961010276*gN*Cos(ThetaWp()) - 15.491933384829668*g1*
      Sin(ThetaW())*Sin(ThetaWp())) * tmp_4824;
   result += (0.016666666666666666) * tmp_4821;

   return result;
}

std::complex<double> CLASSNAME::CpVZpconjSeSe(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_4826;
   std::complex<double> tmp_4827;
   std::complex<double> tmp_4828;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4828 += Conj(ZE(gI2,3 + j1))*ZE(gI1,3 + j1);
   }
   tmp_4827 += tmp_4828;
   tmp_4826 += (-3.1622776601683795*gN*Cos(ThetaWp()) - 15.491933384829668*g1*
      Sin(ThetaW())*Sin(ThetaWp())) * tmp_4827;
   std::complex<double> tmp_4829;
   std::complex<double> tmp_4830;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4830 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
   }
   tmp_4829 += tmp_4830;
   tmp_4826 += (2*(3.1622776601683795*gN*Cos(ThetaWp()) + 5*(g2*Cos(ThetaW()) -
      0.7745966692414834*g1*Sin(ThetaW()))*Sin(ThetaWp()))) * tmp_4829;
   result += (0.05) * tmp_4826;

   return result;
}

std::complex<double> CLASSNAME::CpVZpconjSuSu(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_4831;
   std::complex<double> tmp_4832;
   std::complex<double> tmp_4833;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4833 += Conj(ZU(gI2,3 + j1))*ZU(gI1,3 + j1);
   }
   tmp_4832 += tmp_4833;
   tmp_4831 += (-9.486832980505138*gN*Cos(ThetaWp()) + 30.983866769659336*g1*
      Sin(ThetaW())*Sin(ThetaWp())) * tmp_4832;
   std::complex<double> tmp_4834;
   std::complex<double> tmp_4835;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4835 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
   }
   tmp_4834 += tmp_4835;
   tmp_4831 += (9.486832980505138*gN*Cos(ThetaWp()) + 10*(-3*g2*Cos(ThetaW()) +
      0.7745966692414834*g1*Sin(ThetaW()))*Sin(ThetaWp())) * tmp_4834;
   result += (0.016666666666666666) * tmp_4831;

   return result;
}

std::complex<double> CLASSNAME::CpVZpChiChiPL(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = 0.05*(Conj(ZN(gI2,2))*(9.486832980505138*gN*Cos(ThetaWp()) + 2*(5*
      g2*Cos(ThetaW()) + 3.872983346207417*g1*Sin(ThetaW()))*Sin(ThetaWp()))*ZN(
      gI1,2) + 2*Conj(ZN(gI2,3))*(3.1622776601683795*gN*Cos(ThetaWp()) - (5*g2*Cos
      (ThetaW()) + 3.872983346207417*g1*Sin(ThetaW()))*Sin(ThetaWp()))*ZN(gI1,3) -
      15.811388300841898*gN*Conj(ZN(gI2,4))*Cos(ThetaWp())*ZN(gI1,4));

   return result;
}

std::complex<double> CLASSNAME::CpVZpChiChiPR(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = 0.05*(-(Conj(ZN(gI1,2))*(9.486832980505138*gN*Cos(ThetaWp()) + 2*(5
      *g2*Cos(ThetaW()) + 3.872983346207417*g1*Sin(ThetaW()))*Sin(ThetaWp()))*ZN(
      gI2,2)) + 2*Conj(ZN(gI1,3))*(-3.1622776601683795*gN*Cos(ThetaWp()) + 5*g2*
      Cos(ThetaW())*Sin(ThetaWp()) + 3.872983346207417*g1*Sin(ThetaW())*Sin(
      ThetaWp()))*ZN(gI2,3) + 15.811388300841898*gN*Conj(ZN(gI1,4))*Cos(ThetaWp())
      *ZN(gI2,4));

   return result;
}

std::complex<double> CLASSNAME::CpVZpconjVWmHpm(unsigned gI2) const
{
   std::complex<double> result;

   result = -0.05*g2*(vd*(9.486832980505138*gN*Cos(ThetaWp()) +
      7.745966692414834*g1*Sin(ThetaW())*Sin(ThetaWp()))*ZP(gI2,0) + 2*vu*(
      3.1622776601683795*gN*Cos(ThetaWp()) - 3.872983346207417*g1*Sin(ThetaW())*
      Sin(ThetaWp()))*ZP(gI2,1));

   return result;
}

std::complex<double> CLASSNAME::CpVZpVZhh(unsigned gI2) const
{
   std::complex<double> result;

   result = 0.05*(-(vd*(9.486832980505138*g2*gN*Cos(ThetaW())*Cos(2*ThetaWp())
      - 9*Cos(ThetaWp())*Sin(ThetaWp())*Sqr(gN) + 5*Sin(2*ThetaWp())*Sqr(g2)*Sqr(
      Cos(ThetaW())) + 7.348469228349534*g1*gN*Sin(ThetaW())*Sqr(Cos(ThetaWp())) +
      g1*(3.872983346207417*g2*Sin(2*ThetaW())*Sin(2*ThetaWp()) + 3*g1*Sin(2*
      ThetaWp())*Sqr(Sin(ThetaW())) - 7.348469228349534*gN*Sin(ThetaW())*Sqr(Sin(
      ThetaWp()))))*ZH(gI2,0)) + vu*(6.324555320336759*g2*gN*Cos(ThetaW())*Cos(2*
      ThetaWp()) + 4*Cos(ThetaWp())*Sin(ThetaWp())*Sqr(gN) - 5*Sin(2*ThetaWp())*
      Sqr(g2)*Sqr(Cos(ThetaW())) + 4.898979485566356*g1*gN*Sin(ThetaW())*Sqr(Cos(
      ThetaWp())) - g1*(3.872983346207417*g2*Sin(2*ThetaW())*Sin(2*ThetaWp()) + 3*
      g1*Sin(2*ThetaWp())*Sqr(Sin(ThetaW())) + 4.898979485566356*gN*Sin(ThetaW())*
      Sqr(Sin(ThetaWp()))))*ZH(gI2,1) + 25*vs*Cos(ThetaWp())*Sin(ThetaWp())*Sqr(gN
      )*ZH(gI2,2));

   return result;
}

std::complex<double> CLASSNAME::CpVZpVZphh(unsigned gI2) const
{
   std::complex<double> result;

   result = 0.05*(vd*(9.486832980505138*gN*(g2*Cos(ThetaW()) +
      0.7745966692414834*g1*Sin(ThetaW()))*Sin(2*ThetaWp()) + 9*Sqr(gN)*Sqr(Cos(
      ThetaWp())) + 10*Sqr(g2*Cos(ThetaW()) + 0.7745966692414834*g1*Sin(ThetaW()))
      *Sqr(Sin(ThetaWp())))*ZH(gI2,0) + 2*vu*(-3.1622776601683795*gN*(g2*Cos(
      ThetaW()) + 0.7745966692414834*g1*Sin(ThetaW()))*Sin(2*ThetaWp()) + 2*Sqr(gN
      )*Sqr(Cos(ThetaWp())) + 5*Sqr(g2*Cos(ThetaW()) + 0.7745966692414834*g1*Sin(
      ThetaW()))*Sqr(Sin(ThetaWp())))*ZH(gI2,1) + 25*vs*Sqr(gN)*Sqr(Cos(ThetaWp())
      )*ZH(gI2,2));

   return result;
}

double CLASSNAME::CpVZpVZpconjVWmVWm1() const
{
   double result = 0.0;

   result = -2*Sqr(g2)*Sqr(Cos(ThetaW()))*Sqr(Sin(ThetaWp()));

   return result;
}

double CLASSNAME::CpVZpVZpconjVWmVWm2() const
{
   double result = 0.0;

   result = Sqr(g2)*Sqr(Cos(ThetaW()))*Sqr(Sin(ThetaWp()));

   return result;
}

double CLASSNAME::CpVZpVZpconjVWmVWm3() const
{
   double result = 0.0;

   result = Sqr(g2)*Sqr(Cos(ThetaW()))*Sqr(Sin(ThetaWp()));

   return result;
}

double CLASSNAME::CpconjVWmbargPgWm() const
{
   double result = 0.0;

   result = g2*Sin(ThetaW());

   return result;
}

double CLASSNAME::CpconjVWmbargWmCgP() const
{
   double result = 0.0;

   result = -(g2*Sin(ThetaW()));

   return result;
}

double CLASSNAME::CpconjVWmbargWmCgZ() const
{
   double result = 0.0;

   result = -(g2*Cos(ThetaW())*Cos(ThetaWp()));

   return result;
}

double CLASSNAME::CpconjVWmbargWmCgZp() const
{
   double result = 0.0;

   result = g2*Cos(ThetaW())*Sin(ThetaWp());

   return result;
}

double CLASSNAME::CpconjVWmbargZgWm() const
{
   double result = 0.0;

   result = g2*Cos(ThetaW())*Cos(ThetaWp());

   return result;
}

double CLASSNAME::CpconjVWmbargZpgWm() const
{
   double result = 0.0;

   result = -(g2*Cos(ThetaW())*Sin(ThetaWp()));

   return result;
}

double CLASSNAME::CpconjVWmVWmVP() const
{
   double result = 0.0;

   result = -(g2*Sin(ThetaW()));

   return result;
}

double CLASSNAME::CpconjVWmVZVWm() const
{
   double result = 0.0;

   result = g2*Cos(ThetaW())*Cos(ThetaWp());

   return result;
}

double CLASSNAME::CpconjVWmVZpVWm() const
{
   double result = 0.0;

   result = -(g2*Cos(ThetaW())*Sin(ThetaWp()));

   return result;
}

std::complex<double> CLASSNAME::CpVWmconjVWmconjHpmHpm(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = 0.5*Sqr(g2)*(ZP(gI1,0)*ZP(gI2,0) + ZP(gI1,1)*ZP(gI2,1));

   return result;
}

std::complex<double> CLASSNAME::CpVWmconjVWmconjSHp0SHp0(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = 0.5*Sqr(g2)*(Conj(UHp0(gI2,0))*UHp0(gI1,0) + Conj(UHp0(gI2,1))*UHp0
      (gI1,1));

   return result;
}

std::complex<double> CLASSNAME::CpVWmconjVWmconjSHppSHpp(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = 0.5*Sqr(g2)*(Conj(UHpp(gI2,0))*UHpp(gI1,0) + Conj(UHpp(gI2,1))*UHpp
      (gI1,1));

   return result;
}

std::complex<double> CLASSNAME::CpconjVWmconjSHp0SHpp(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = 0.7071067811865475*g2*(Conj(UHpp(gI2,0))*UHp0(gI1,0) - Conj(UHpp(
      gI2,1))*UHp0(gI1,1));

   return result;
}

std::complex<double> CLASSNAME::CpconjVWmHpmAh(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = std::complex<double>(0,-0.5)*g2*(ZA(gI2,0)*ZP(gI1,0) + ZA(gI2,1)*ZP
      (gI1,1));

   return result;
}

std::complex<double> CLASSNAME::CpconjVWmHpmhh(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = 0.5*g2*(ZH(gI2,0)*ZP(gI1,0) - ZH(gI2,1)*ZP(gI1,1));

   return result;
}

std::complex<double> CLASSNAME::CpconjVWmChiPChaPPL(unsigned gI1) const
{
   std::complex<double> result;

   result = -0.7071067811865475*g2*ZNp(gI1,0);

   return result;
}

std::complex<double> CLASSNAME::CpconjVWmChiPChaPPR(unsigned gI1) const
{
   std::complex<double> result;

   result = 0.7071067811865475*g2*Conj(ZNp(gI1,1));

   return result;
}

std::complex<double> CLASSNAME::CpVWmconjVWmAhAh(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = 0.5*Sqr(g2)*(ZA(gI1,0)*ZA(gI2,0) + ZA(gI1,1)*ZA(gI2,1));

   return result;
}

double CLASSNAME::CpVWmconjVWmconjSvSv(unsigned gI1, unsigned gI2) const
{
   double result = 0.0;

   result = 0.5*KroneckerDelta(gI1,gI2)*Sqr(g2);

   return result;
}

std::complex<double> CLASSNAME::CpVWmconjVWmhhhh(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = 0.5*Sqr(g2)*(ZH(gI1,0)*ZH(gI2,0) + ZH(gI1,1)*ZH(gI2,1));

   return result;
}

std::complex<double> CLASSNAME::CpconjVWmbarFuFdPL(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_4836;
   std::complex<double> tmp_4837;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4837 += Conj(ZDL(gI2,j1))*ZUL(gI1,j1);
   }
   tmp_4836 += tmp_4837;
   result += (-0.7071067811865475*g2) * tmp_4836;

   return result;
}

double CLASSNAME::CpconjVWmbarFuFdPR(unsigned , unsigned ) const
{
   double result = 0.0;

   result = 0;

   return result;
}

std::complex<double> CLASSNAME::CpconjVWmbarFvFePL(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   if (gI1 < 3) {
      result += -0.7071067811865475*g2*Conj(ZEL(gI2,gI1));
   }

   return result;
}

double CLASSNAME::CpconjVWmbarFvFePR(unsigned , unsigned ) const
{
   double result = 0.0;

   result = 0;

   return result;
}

std::complex<double> CLASSNAME::CpconjVWmconjSvSe(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_4838;
   std::complex<double> tmp_4839;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4839 += Conj(ZE(gI2,j1))*ZV(gI1,j1);
   }
   tmp_4838 += tmp_4839;
   result += (0.7071067811865475*g2) * tmp_4838;

   return result;
}

double CLASSNAME::CpVWmconjVWmconjSHI0SHI0(unsigned gI1, unsigned gI2) const
{
   double result = 0.0;

   result = 0.5*KroneckerDelta(gI1,gI2)*Sqr(g2);

   return result;
}

double CLASSNAME::CpVWmconjVWmconjSHIpSHIp(unsigned gI1, unsigned gI2) const
{
   double result = 0.0;

   result = 0.5*KroneckerDelta(gI1,gI2)*Sqr(g2);

   return result;
}

std::complex<double> CLASSNAME::CpconjVWmChiIChaIPL(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_4840;
   std::complex<double> tmp_4841;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4841 += Conj(ZMI(gI2,j1))*ZNI(gI1,j1);
   }
   tmp_4840 += tmp_4841;
   result += (-0.7071067811865475*g2) * tmp_4840;

   return result;
}

std::complex<double> CLASSNAME::CpconjVWmChiIChaIPR(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_4842;
   std::complex<double> tmp_4843;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4843 += Conj(ZNI(gI1,2 + j1))*ZPI(gI2,j1);
   }
   tmp_4842 += tmp_4843;
   result += (0.7071067811865475*g2) * tmp_4842;

   return result;
}

std::complex<double> CLASSNAME::CpconjVWmconjSHI0SHIp(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_4844;
   std::complex<double> tmp_4845;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4845 += Conj(UHIp(gI2,j1))*UHI0(gI1,j1);
   }
   tmp_4844 += tmp_4845;
   std::complex<double> tmp_4846;
   std::complex<double> tmp_4847;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4847 += Conj(UHIp(gI2,2 + j1))*UHI0(gI1,2 + j1);
   }
   tmp_4846 += tmp_4847;
   tmp_4844 += (-1) * tmp_4846;
   result += (0.7071067811865475*g2) * tmp_4844;

   return result;
}

std::complex<double> CLASSNAME::CpVWmconjVWmconjSdSd(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_4848;
   std::complex<double> tmp_4849;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4849 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
   }
   tmp_4848 += tmp_4849;
   result += (0.5*Sqr(g2)) * tmp_4848;

   return result;
}

std::complex<double> CLASSNAME::CpVWmconjVWmconjSeSe(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_4850;
   std::complex<double> tmp_4851;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4851 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
   }
   tmp_4850 += tmp_4851;
   result += (0.5*Sqr(g2)) * tmp_4850;

   return result;
}

std::complex<double> CLASSNAME::CpVWmconjVWmconjSuSu(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_4852;
   std::complex<double> tmp_4853;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4853 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
   }
   tmp_4852 += tmp_4853;
   result += (0.5*Sqr(g2)) * tmp_4852;

   return result;
}

std::complex<double> CLASSNAME::CpconjVWmChiChaPL(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = -0.5*g2*(2*Conj(UM(gI2,0))*ZN(gI1,1) + 1.4142135623730951*Conj(UM(
      gI2,1))*ZN(gI1,2));

   return result;
}

std::complex<double> CLASSNAME::CpconjVWmChiChaPR(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = -(g2*Conj(ZN(gI1,1))*UP(gI2,0)) + 0.7071067811865475*g2*Conj(ZN(gI1
      ,3))*UP(gI2,1);

   return result;
}

std::complex<double> CLASSNAME::CpconjVWmconjSuSd(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_4854;
   std::complex<double> tmp_4855;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4855 += Conj(ZD(gI2,j1))*ZU(gI1,j1);
   }
   tmp_4854 += tmp_4855;
   result += (0.7071067811865475*g2) * tmp_4854;

   return result;
}

std::complex<double> CLASSNAME::CpconjVWmVPHpm(unsigned gI2) const
{
   std::complex<double> result;

   result = -0.3872983346207417*g1*g2*Cos(ThetaW())*(vd*ZP(gI2,0) - vu*ZP(gI2,1
      ));

   return result;
}

std::complex<double> CLASSNAME::CpconjVWmVZHpm(unsigned gI2) const
{
   std::complex<double> result;

   result = 0.05*g2*(vd*(7.745966692414834*g1*Cos(ThetaWp())*Sin(ThetaW()) -
      9.486832980505138*gN*Sin(ThetaWp()))*ZP(gI2,0) - 2*vu*(3.872983346207417*g1*
      Cos(ThetaWp())*Sin(ThetaW()) + 3.1622776601683795*gN*Sin(ThetaWp()))*ZP(gI2,
      1));

   return result;
}

std::complex<double> CLASSNAME::CpconjVWmVZpHpm(unsigned gI2) const
{
   std::complex<double> result;

   result = -0.05*g2*(vd*(9.486832980505138*gN*Cos(ThetaWp()) +
      7.745966692414834*g1*Sin(ThetaW())*Sin(ThetaWp()))*ZP(gI2,0) + 2*vu*(
      3.1622776601683795*gN*Cos(ThetaWp()) - 3.872983346207417*g1*Sin(ThetaW())*
      Sin(ThetaWp()))*ZP(gI2,1));

   return result;
}

std::complex<double> CLASSNAME::CpconjVWmVWmhh(unsigned gI2) const
{
   std::complex<double> result;

   result = 0.5*Sqr(g2)*(vd*ZH(gI2,0) + vu*ZH(gI2,1));

   return result;
}

double CLASSNAME::CpVWmconjVWmVPVP1() const
{
   double result = 0.0;

   result = -2*Sqr(g2)*Sqr(Sin(ThetaW()));

   return result;
}

double CLASSNAME::CpVWmconjVWmVPVP2() const
{
   double result = 0.0;

   result = Sqr(g2)*Sqr(Sin(ThetaW()));

   return result;
}

double CLASSNAME::CpVWmconjVWmVPVP3() const
{
   double result = 0.0;

   result = Sqr(g2)*Sqr(Sin(ThetaW()));

   return result;
}

double CLASSNAME::CpVWmconjVWmVZVZ1() const
{
   double result = 0.0;

   result = -2*Sqr(g2)*Sqr(Cos(ThetaW()))*Sqr(Cos(ThetaWp()));

   return result;
}

double CLASSNAME::CpVWmconjVWmVZVZ2() const
{
   double result = 0.0;

   result = Sqr(g2)*Sqr(Cos(ThetaW()))*Sqr(Cos(ThetaWp()));

   return result;
}

double CLASSNAME::CpVWmconjVWmVZVZ3() const
{
   double result = 0.0;

   result = Sqr(g2)*Sqr(Cos(ThetaW()))*Sqr(Cos(ThetaWp()));

   return result;
}

double CLASSNAME::CpVWmconjVWmVZpVZp1() const
{
   double result = 0.0;

   result = -2*Sqr(g2)*Sqr(Cos(ThetaW()))*Sqr(Sin(ThetaWp()));

   return result;
}

double CLASSNAME::CpVWmconjVWmVZpVZp2() const
{
   double result = 0.0;

   result = Sqr(g2)*Sqr(Cos(ThetaW()))*Sqr(Sin(ThetaWp()));

   return result;
}

double CLASSNAME::CpVWmconjVWmVZpVZp3() const
{
   double result = 0.0;

   result = Sqr(g2)*Sqr(Cos(ThetaW()))*Sqr(Sin(ThetaWp()));

   return result;
}

double CLASSNAME::CpVWmconjVWmconjVWmVWm1() const
{
   double result = 0.0;

   result = -Sqr(g2);

   return result;
}

double CLASSNAME::CpVWmconjVWmconjVWmVWm2() const
{
   double result = 0.0;

   result = -Sqr(g2);

   return result;
}

double CLASSNAME::CpVWmconjVWmconjVWmVWm3() const
{
   double result = 0.0;

   result = 2*Sqr(g2);

   return result;
}

std::complex<double> CLASSNAME::CpUChiconjHpmChaPL(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = -(g2*Conj(UM(gI2,0))*KroneckerDelta(2,gO2)*ZP(gI1,0)) + 0.1*Conj(UM
      (gI2,1))*(5.477225575051661*g1*KroneckerDelta(0,gO2)*ZP(gI1,0) +
      7.0710678118654755*g2*KroneckerDelta(1,gO2)*ZP(gI1,0) + 6.708203932499369*gN
      *KroneckerDelta(5,gO2)*ZP(gI1,0) - 10*KroneckerDelta(4,gO2)*Lambdax*ZP(gI1,1
      ));

   return result;
}

std::complex<double> CLASSNAME::CpUChiconjHpmChaPR(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = -(Conj(Lambdax)*KroneckerDelta(4,gO1)*UP(gI2,1)*ZP(gI1,0)) - 0.1*(
      10*g2*KroneckerDelta(3,gO1)*UP(gI2,0) + (5.477225575051661*g1*KroneckerDelta
      (0,gO1) + 7.0710678118654755*g2*KroneckerDelta(1,gO1) - 4.47213595499958*gN*
      KroneckerDelta(5,gO1))*UP(gI2,1))*ZP(gI1,1);

   return result;
}

std::complex<double> CLASSNAME::CpUChiconjSHp0ChiPPL(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = 0.1*Conj(ZNp(gI2,0))*(5.477225575051661*g1*KroneckerDelta(0,gO2) -
      7.0710678118654755*g2*KroneckerDelta(1,gO2) - 4.47213595499958*gN*
      KroneckerDelta(5,gO2))*UHp0(gI1,0);

   return result;
}

std::complex<double> CLASSNAME::CpUChiconjSHp0ChiPPR(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = 0.1*(-5.477225575051661*g1*KroneckerDelta(0,gO1) +
      7.0710678118654755*g2*KroneckerDelta(1,gO1) + 4.47213595499958*gN*
      KroneckerDelta(5,gO1))*UHp0(gI1,1)*ZNp(gI2,1);

   return result;
}

std::complex<double> CLASSNAME::CpUChiconjSSI0FSIPL(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_4856;
   std::complex<double> tmp_4857;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4857 += Conj(ZFSI(gI2,j1))*ZSSI(gI1,j1);
   }
   tmp_4856 += tmp_4857;
   result += (-1.118033988749895*gN*KroneckerDelta(5,gO2)) * tmp_4856;

   return result;
}

double CLASSNAME::CpUChiconjSSI0FSIPR(unsigned , unsigned , unsigned ) const
{
   double result = 0.0;

   result = 0;

   return result;
}

std::complex<double> CLASSNAME::CpUChiconjSHppChaPPL(unsigned gO2, unsigned gI1) const
{
   std::complex<double> result;

   result = 0.1*(5.477225575051661*g1*KroneckerDelta(0,gO2) +
      7.0710678118654755*g2*KroneckerDelta(1,gO2) - 4.47213595499958*gN*
      KroneckerDelta(5,gO2))*UHpp(gI1,0);

   return result;
}

std::complex<double> CLASSNAME::CpUChiconjSHppChaPPR(unsigned gO1, unsigned gI1) const
{
   std::complex<double> result;

   result = -0.1*(5.477225575051661*g1*KroneckerDelta(0,gO1) +
      7.0710678118654755*g2*KroneckerDelta(1,gO1) - 4.47213595499958*gN*
      KroneckerDelta(5,gO1))*UHpp(gI1,1);

   return result;
}

std::complex<double> CLASSNAME::CpUChiconjSvFvPL(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   if (gI2 < 3) {
      result += 0.5477225575051661*g1*KroneckerDelta(0,gO2)*ZV(gI1,gI2);
   }
   if (gI2 < 3) {
      result += -0.7071067811865475*g2*KroneckerDelta(1,gO2)*ZV(gI1,gI2);
   }
   if (gI2 < 3) {
      result += -0.4472135954999579*gN*KroneckerDelta(5,gO2)*ZV(gI1,gI2);
   }

   return result;
}

double CLASSNAME::CpUChiconjSvFvPR(unsigned , unsigned , unsigned ) const
{
   double result = 0.0;

   result = 0;

   return result;
}

std::complex<double> CLASSNAME::CpUChihhChiPL(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = 0.05*(-10*g2*Conj(ZN(gI2,1))*KroneckerDelta(2,gO2)*ZH(gI1,0) +
      9.486832980505138*gN*Conj(ZN(gI2,5))*KroneckerDelta(2,gO2)*ZH(gI1,0) +
      14.142135623730951*Conj(ZN(gI2,4))*KroneckerDelta(3,gO2)*Lambdax*ZH(gI1,0) +
      14.142135623730951*Conj(ZN(gI2,3))*KroneckerDelta(4,gO2)*Lambdax*ZH(gI1,0)
      - 7.745966692414834*g1*Conj(ZN(gI2,3))*KroneckerDelta(0,gO2)*ZH(gI1,1) + 10*
      g2*Conj(ZN(gI2,3))*KroneckerDelta(1,gO2)*ZH(gI1,1) + 10*g2*Conj(ZN(gI2,1))*
      KroneckerDelta(3,gO2)*ZH(gI1,1) + 6.324555320336759*gN*Conj(ZN(gI2,5))*
      KroneckerDelta(3,gO2)*ZH(gI1,1) + 6.324555320336759*gN*Conj(ZN(gI2,3))*
      KroneckerDelta(5,gO2)*ZH(gI1,1) + 14.142135623730951*Conj(ZN(gI2,4))*
      KroneckerDelta(2,gO2)*Lambdax*ZH(gI1,1) + 7.745966692414834*g1*Conj(ZN(gI2,0
      ))*(KroneckerDelta(2,gO2)*ZH(gI1,0) - KroneckerDelta(3,gO2)*ZH(gI1,1)) -
      15.811388300841898*gN*Conj(ZN(gI2,5))*KroneckerDelta(4,gO2)*ZH(gI1,2) -
      15.811388300841898*gN*Conj(ZN(gI2,4))*KroneckerDelta(5,gO2)*ZH(gI1,2) +
      14.142135623730951*Conj(ZN(gI2,3))*KroneckerDelta(2,gO2)*Lambdax*ZH(gI1,2) +
      Conj(ZN(gI2,2))*(7.745966692414834*g1*KroneckerDelta(0,gO2)*ZH(gI1,0) - 10*
      g2*KroneckerDelta(1,gO2)*ZH(gI1,0) + 1.4142135623730951*(6.708203932499369*
      gN*KroneckerDelta(5,gO2)*ZH(gI1,0) + 10*Lambdax*(KroneckerDelta(4,gO2)*ZH(
      gI1,1) + KroneckerDelta(3,gO2)*ZH(gI1,2)))));

   return result;
}

std::complex<double> CLASSNAME::CpUChihhChiPR(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = 0.05*(7.745966692414834*g1*KroneckerDelta(0,gO1)*ZH(gI1,0)*ZN(gI2,2
      ) - 10*g2*KroneckerDelta(1,gO1)*ZH(gI1,0)*ZN(gI2,2) + 9.486832980505138*gN*
      KroneckerDelta(5,gO1)*ZH(gI1,0)*ZN(gI2,2) + 14.142135623730951*Conj(Lambdax)
      *KroneckerDelta(4,gO1)*ZH(gI1,1)*ZN(gI2,2) + 14.142135623730951*Conj(Lambdax
      )*KroneckerDelta(4,gO1)*ZH(gI1,0)*ZN(gI2,3) - 7.745966692414834*g1*
      KroneckerDelta(0,gO1)*ZH(gI1,1)*ZN(gI2,3) + 10*g2*KroneckerDelta(1,gO1)*ZH(
      gI1,1)*ZN(gI2,3) + 6.324555320336759*gN*KroneckerDelta(5,gO1)*ZH(gI1,1)*ZN(
      gI2,3) - 15.811388300841898*gN*KroneckerDelta(5,gO1)*ZH(gI1,2)*ZN(gI2,4) -
      15.811388300841898*gN*KroneckerDelta(4,gO1)*ZH(gI1,2)*ZN(gI2,5) + 2*
      KroneckerDelta(3,gO1)*(7.0710678118654755*Conj(Lambdax)*(ZH(gI1,2)*ZN(gI2,2)
      + ZH(gI1,0)*ZN(gI2,4)) + ZH(gI1,1)*(-3.872983346207417*g1*ZN(gI2,0) + 5*g2*
      ZN(gI2,1) + 3.1622776601683795*gN*ZN(gI2,5))) + KroneckerDelta(2,gO1)*(
      14.142135623730951*Conj(Lambdax)*(ZH(gI1,2)*ZN(gI2,3) + ZH(gI1,1)*ZN(gI2,4))
      + ZH(gI1,0)*(7.745966692414834*g1*ZN(gI2,0) - 10*g2*ZN(gI2,1) +
      9.486832980505138*gN*ZN(gI2,5))));

   return result;
}

std::complex<double> CLASSNAME::CpUChiconjSHIpChaIPL(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_4858;
   std::complex<double> tmp_4859;
   std::complex<double> tmp_4860;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4860 += Conj(ZMI(gI2,j1))*UHIp(gI1,j1);
   }
   tmp_4859 += tmp_4860;
   tmp_4858 += (std::complex<double>(0.,0.5477225575051661)*g1*KroneckerDelta(0
      ,gO2)) * tmp_4859;
   std::complex<double> tmp_4861;
   std::complex<double> tmp_4862;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4862 += Conj(ZMI(gI2,j1))*UHIp(gI1,j1);
   }
   tmp_4861 += tmp_4862;
   tmp_4858 += (std::complex<double>(0.,0.7071067811865475)*g2*KroneckerDelta(1
      ,gO2)) * tmp_4861;
   std::complex<double> tmp_4863;
   std::complex<double> tmp_4864;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4864 += Conj(ZMI(gI2,j1))*UHIp(gI1,j1);
   }
   tmp_4863 += tmp_4864;
   tmp_4858 += (std::complex<double>(0.,0.6708203932499369)*gN*KroneckerDelta(5
      ,gO2)) * tmp_4863;
   std::complex<double> tmp_4865;
   std::complex<double> tmp_4866;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4866 += Conj(ZMI(gI2,j1))*UHIp(gI1,2 + j1)*Lambda12(j1,j1);
   }
   tmp_4865 += tmp_4866;
   tmp_4858 += (std::complex<double>(0,-1)*KroneckerDelta(4,gO2)) * tmp_4865;
   result += (std::complex<double>(0,-1)) * tmp_4858;

   return result;
}

std::complex<double> CLASSNAME::CpUChiconjSHIpChaIPR(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_4867;
   std::complex<double> tmp_4868;
   std::complex<double> tmp_4869;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4869 += Conj(Lambda12(j1,j1))*UHIp(gI1,j1)*ZPI(gI2,j1);
   }
   tmp_4868 += tmp_4869;
   tmp_4867 += (std::complex<double>(0,-1)*KroneckerDelta(4,gO1)) * tmp_4868;
   std::complex<double> tmp_4870;
   std::complex<double> tmp_4871;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4871 += UHIp(gI1,2 + j1)*ZPI(gI2,j1);
   }
   tmp_4870 += tmp_4871;
   tmp_4867 += (std::complex<double>(0.,-0.5477225575051661)*g1*KroneckerDelta(
      0,gO1)) * tmp_4870;
   std::complex<double> tmp_4872;
   std::complex<double> tmp_4873;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4873 += UHIp(gI1,2 + j1)*ZPI(gI2,j1);
   }
   tmp_4872 += tmp_4873;
   tmp_4867 += (std::complex<double>(0.,-0.7071067811865475)*g2*KroneckerDelta(
      1,gO1)) * tmp_4872;
   std::complex<double> tmp_4874;
   std::complex<double> tmp_4875;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4875 += UHIp(gI1,2 + j1)*ZPI(gI2,j1);
   }
   tmp_4874 += tmp_4875;
   tmp_4867 += (std::complex<double>(0.,0.4472135954999579)*gN*KroneckerDelta(5
      ,gO1)) * tmp_4874;
   result += (std::complex<double>(0,-1)) * tmp_4867;

   return result;
}

std::complex<double> CLASSNAME::CpUChiconjSHI0ChiIPL(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_4876;
   std::complex<double> tmp_4877;
   std::complex<double> tmp_4878;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4878 += Conj(ZNI(gI2,j1))*UHI0(gI1,j1);
   }
   tmp_4877 += tmp_4878;
   tmp_4876 += (std::complex<double>(0.,0.5477225575051661)*g1*KroneckerDelta(0
      ,gO2)) * tmp_4877;
   std::complex<double> tmp_4879;
   std::complex<double> tmp_4880;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4880 += Conj(ZNI(gI2,j1))*UHI0(gI1,j1);
   }
   tmp_4879 += tmp_4880;
   tmp_4876 += (std::complex<double>(0.,-0.7071067811865475)*g2*KroneckerDelta(
      1,gO2)) * tmp_4879;
   std::complex<double> tmp_4881;
   std::complex<double> tmp_4882;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4882 += Conj(ZNI(gI2,j1))*UHI0(gI1,j1);
   }
   tmp_4881 += tmp_4882;
   tmp_4876 += (std::complex<double>(0.,0.6708203932499369)*gN*KroneckerDelta(5
      ,gO2)) * tmp_4881;
   std::complex<double> tmp_4883;
   std::complex<double> tmp_4884;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4884 += Conj(ZNI(gI2,j1))*UHI0(gI1,2 + j1)*Lambda12(j1,j1);
   }
   tmp_4883 += tmp_4884;
   tmp_4876 += (std::complex<double>(0,1)*KroneckerDelta(4,gO2)) * tmp_4883;
   result += (std::complex<double>(0,-1)) * tmp_4876;

   return result;
}

std::complex<double> CLASSNAME::CpUChiconjSHI0ChiIPR(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_4885;
   std::complex<double> tmp_4886;
   std::complex<double> tmp_4887;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4887 += Conj(Lambda12(j1,j1))*UHI0(gI1,j1)*ZNI(gI2,2 + j1);
   }
   tmp_4886 += tmp_4887;
   tmp_4885 += (std::complex<double>(0,1)*KroneckerDelta(4,gO1)) * tmp_4886;
   std::complex<double> tmp_4888;
   std::complex<double> tmp_4889;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4889 += UHI0(gI1,2 + j1)*ZNI(gI2,2 + j1);
   }
   tmp_4888 += tmp_4889;
   tmp_4885 += (std::complex<double>(0.,-0.5477225575051661)*g1*KroneckerDelta(
      0,gO1)) * tmp_4888;
   std::complex<double> tmp_4890;
   std::complex<double> tmp_4891;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4891 += UHI0(gI1,2 + j1)*ZNI(gI2,2 + j1);
   }
   tmp_4890 += tmp_4891;
   tmp_4885 += (std::complex<double>(0.,0.7071067811865475)*g2*KroneckerDelta(1
      ,gO1)) * tmp_4890;
   std::complex<double> tmp_4892;
   std::complex<double> tmp_4893;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4893 += UHI0(gI1,2 + j1)*ZNI(gI2,2 + j1);
   }
   tmp_4892 += tmp_4893;
   tmp_4885 += (std::complex<double>(0.,0.4472135954999579)*gN*KroneckerDelta(5
      ,gO1)) * tmp_4892;
   result += (std::complex<double>(0,-1)) * tmp_4885;

   return result;
}

std::complex<double> CLASSNAME::CpUChiChiAhPL(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = std::complex<double>(0,0.05)*(10*g2*Conj(ZN(gI1,1))*KroneckerDelta(
      2,gO2)*ZA(gI2,0) - 9.486832980505138*gN*Conj(ZN(gI1,5))*KroneckerDelta(2,gO2
      )*ZA(gI2,0) + 14.142135623730951*Conj(ZN(gI1,4))*KroneckerDelta(3,gO2)*
      Lambdax*ZA(gI2,0) + 14.142135623730951*Conj(ZN(gI1,3))*KroneckerDelta(4,gO2)
      *Lambdax*ZA(gI2,0) + 7.745966692414834*g1*Conj(ZN(gI1,3))*KroneckerDelta(0,
      gO2)*ZA(gI2,1) - 10*g2*Conj(ZN(gI1,3))*KroneckerDelta(1,gO2)*ZA(gI2,1) - 10*
      g2*Conj(ZN(gI1,1))*KroneckerDelta(3,gO2)*ZA(gI2,1) - 6.324555320336759*gN*
      Conj(ZN(gI1,5))*KroneckerDelta(3,gO2)*ZA(gI2,1) - 6.324555320336759*gN*Conj(
      ZN(gI1,3))*KroneckerDelta(5,gO2)*ZA(gI2,1) + 14.142135623730951*Conj(ZN(gI1,
      4))*KroneckerDelta(2,gO2)*Lambdax*ZA(gI2,1) + 7.745966692414834*g1*Conj(ZN(
      gI1,0))*(-(KroneckerDelta(2,gO2)*ZA(gI2,0)) + KroneckerDelta(3,gO2)*ZA(gI2,1
      )) + 15.811388300841898*gN*Conj(ZN(gI1,5))*KroneckerDelta(4,gO2)*ZA(gI2,2) +
      15.811388300841898*gN*Conj(ZN(gI1,4))*KroneckerDelta(5,gO2)*ZA(gI2,2) +
      14.142135623730951*Conj(ZN(gI1,3))*KroneckerDelta(2,gO2)*Lambdax*ZA(gI2,2) +
      Conj(ZN(gI1,2))*(-7.745966692414834*g1*KroneckerDelta(0,gO2)*ZA(gI2,0) + 10
      *g2*KroneckerDelta(1,gO2)*ZA(gI2,0) + 1.4142135623730951*(-6.708203932499369
      *gN*KroneckerDelta(5,gO2)*ZA(gI2,0) + 10*Lambdax*(KroneckerDelta(4,gO2)*ZA(
      gI2,1) + KroneckerDelta(3,gO2)*ZA(gI2,2)))));

   return result;
}

std::complex<double> CLASSNAME::CpUChiChiAhPR(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = std::complex<double>(0,0.05)*(7.745966692414834*g1*KroneckerDelta(0
      ,gO1)*ZA(gI2,0)*ZN(gI1,2) - 10*g2*KroneckerDelta(1,gO1)*ZA(gI2,0)*ZN(gI1,2)
      + 9.486832980505138*gN*KroneckerDelta(5,gO1)*ZA(gI2,0)*ZN(gI1,2) -
      14.142135623730951*Conj(Lambdax)*KroneckerDelta(4,gO1)*ZA(gI2,1)*ZN(gI1,2) -
      14.142135623730951*Conj(Lambdax)*KroneckerDelta(4,gO1)*ZA(gI2,0)*ZN(gI1,3)
      - 7.745966692414834*g1*KroneckerDelta(0,gO1)*ZA(gI2,1)*ZN(gI1,3) + 10*g2*
      KroneckerDelta(1,gO1)*ZA(gI2,1)*ZN(gI1,3) + 6.324555320336759*gN*
      KroneckerDelta(5,gO1)*ZA(gI2,1)*ZN(gI1,3) - 15.811388300841898*gN*
      KroneckerDelta(5,gO1)*ZA(gI2,2)*ZN(gI1,4) - 15.811388300841898*gN*
      KroneckerDelta(4,gO1)*ZA(gI2,2)*ZN(gI1,5) - 2*KroneckerDelta(3,gO1)*(
      7.0710678118654755*Conj(Lambdax)*(ZA(gI2,2)*ZN(gI1,2) + ZA(gI2,0)*ZN(gI1,4))
      + ZA(gI2,1)*(3.872983346207417*g1*ZN(gI1,0) - 5*g2*ZN(gI1,1) -
      3.1622776601683795*gN*ZN(gI1,5))) + KroneckerDelta(2,gO1)*(
      -14.142135623730951*Conj(Lambdax)*(ZA(gI2,2)*ZN(gI1,3) + ZA(gI2,1)*ZN(gI1,4)
      ) + ZA(gI2,0)*(7.745966692414834*g1*ZN(gI1,0) - 10*g2*ZN(gI1,1) +
      9.486832980505138*gN*ZN(gI1,5))));

   return result;
}

std::complex<double> CLASSNAME::CpUChiconjSdFdPL(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_4894;
   std::complex<double> tmp_4895;
   std::complex<double> tmp_4896;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4896 += Conj(ZDL(gI2,j1))*ZD(gI1,j1);
   }
   tmp_4895 += tmp_4896;
   tmp_4894 += (std::complex<double>(0.,-0.18257418583505536)*g1*KroneckerDelta
      (0,gO2)) * tmp_4895;
   std::complex<double> tmp_4897;
   std::complex<double> tmp_4898;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4898 += Conj(ZDL(gI2,j1))*ZD(gI1,j1);
   }
   tmp_4897 += tmp_4898;
   tmp_4894 += (std::complex<double>(0.,0.7071067811865475)*g2*KroneckerDelta(1
      ,gO2)) * tmp_4897;
   std::complex<double> tmp_4899;
   std::complex<double> tmp_4900;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4900 += Conj(ZDL(gI2,j1))*ZD(gI1,j1);
   }
   tmp_4899 += tmp_4900;
   tmp_4894 += (std::complex<double>(0.,-0.22360679774997896)*gN*KroneckerDelta
      (5,gO2)) * tmp_4899;
   std::complex<double> tmp_4901;
   std::complex<double> tmp_4902;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4902 += Conj(ZDL(gI2,j1))*Yd(j1,j1)*ZD(gI1,3 + j1);
   }
   tmp_4901 += tmp_4902;
   tmp_4894 += (std::complex<double>(0,-1)*KroneckerDelta(2,gO2)) * tmp_4901;
   result += (std::complex<double>(0,-1)) * tmp_4894;

   return result;
}

std::complex<double> CLASSNAME::CpUChiconjSdFdPR(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_4903;
   std::complex<double> tmp_4904;
   std::complex<double> tmp_4905;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4905 += Conj(Yd(j1,j1))*ZD(gI1,j1)*ZDR(gI2,j1);
   }
   tmp_4904 += tmp_4905;
   tmp_4903 += (std::complex<double>(0,-1)*KroneckerDelta(2,gO1)) * tmp_4904;
   std::complex<double> tmp_4906;
   std::complex<double> tmp_4907;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4907 += ZD(gI1,3 + j1)*ZDR(gI2,j1);
   }
   tmp_4906 += tmp_4907;
   tmp_4903 += (std::complex<double>(0.,-0.3651483716701107)*g1*KroneckerDelta(
      0,gO1)) * tmp_4906;
   std::complex<double> tmp_4908;
   std::complex<double> tmp_4909;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4909 += ZD(gI1,3 + j1)*ZDR(gI2,j1);
   }
   tmp_4908 += tmp_4909;
   tmp_4903 += (std::complex<double>(0.,-0.4472135954999579)*gN*KroneckerDelta(
      5,gO1)) * tmp_4908;
   result += (std::complex<double>(0,-1)) * tmp_4903;

   return result;
}

std::complex<double> CLASSNAME::CpUChiconjSDXFDXPL(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_4910;
   std::complex<double> tmp_4911;
   std::complex<double> tmp_4912;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4912 += Conj(ZDXL(gI2,j1))*ZDX(gI1,j1);
   }
   tmp_4911 += tmp_4912;
   tmp_4910 += (std::complex<double>(0.,0.3651483716701107)*g1*KroneckerDelta(0
      ,gO2)) * tmp_4911;
   std::complex<double> tmp_4913;
   std::complex<double> tmp_4914;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4914 += Conj(ZDXL(gI2,j1))*ZDX(gI1,j1);
   }
   tmp_4913 += tmp_4914;
   tmp_4910 += (std::complex<double>(0.,0.4472135954999579)*gN*KroneckerDelta(5
      ,gO2)) * tmp_4913;
   std::complex<double> tmp_4915;
   std::complex<double> tmp_4916;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4916 += Conj(ZDXL(gI2,j1))*ZDX(gI1,3 + j1)*Kappa(j1,j1);
   }
   tmp_4915 += tmp_4916;
   tmp_4910 += (std::complex<double>(0,-1)*KroneckerDelta(4,gO2)) * tmp_4915;
   result += (std::complex<double>(0,-1)) * tmp_4910;

   return result;
}

std::complex<double> CLASSNAME::CpUChiconjSDXFDXPR(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_4917;
   std::complex<double> tmp_4918;
   std::complex<double> tmp_4919;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4919 += Conj(Kappa(j1,j1))*ZDX(gI1,j1)*ZDXR(gI2,j1);
   }
   tmp_4918 += tmp_4919;
   tmp_4917 += (std::complex<double>(0,-1)*KroneckerDelta(4,gO1)) * tmp_4918;
   std::complex<double> tmp_4920;
   std::complex<double> tmp_4921;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4921 += ZDX(gI1,3 + j1)*ZDXR(gI2,j1);
   }
   tmp_4920 += tmp_4921;
   tmp_4917 += (std::complex<double>(0.,-0.3651483716701107)*g1*KroneckerDelta(
      0,gO1)) * tmp_4920;
   std::complex<double> tmp_4922;
   std::complex<double> tmp_4923;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4923 += ZDX(gI1,3 + j1)*ZDXR(gI2,j1);
   }
   tmp_4922 += tmp_4923;
   tmp_4917 += (std::complex<double>(0.,0.6708203932499369)*gN*KroneckerDelta(5
      ,gO1)) * tmp_4922;
   result += (std::complex<double>(0,-1)) * tmp_4917;

   return result;
}

std::complex<double> CLASSNAME::CpUChiconjSeFePL(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_4924;
   std::complex<double> tmp_4925;
   std::complex<double> tmp_4926;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4926 += Conj(ZEL(gI2,j1))*ZE(gI1,j1);
   }
   tmp_4925 += tmp_4926;
   tmp_4924 += (std::complex<double>(0.,0.5477225575051661)*g1*KroneckerDelta(0
      ,gO2)) * tmp_4925;
   std::complex<double> tmp_4927;
   std::complex<double> tmp_4928;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4928 += Conj(ZEL(gI2,j1))*ZE(gI1,j1);
   }
   tmp_4927 += tmp_4928;
   tmp_4924 += (std::complex<double>(0.,0.7071067811865475)*g2*KroneckerDelta(1
      ,gO2)) * tmp_4927;
   std::complex<double> tmp_4929;
   std::complex<double> tmp_4930;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4930 += Conj(ZEL(gI2,j1))*ZE(gI1,j1);
   }
   tmp_4929 += tmp_4930;
   tmp_4924 += (std::complex<double>(0.,-0.4472135954999579)*gN*KroneckerDelta(
      5,gO2)) * tmp_4929;
   std::complex<double> tmp_4931;
   std::complex<double> tmp_4932;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4932 += Conj(ZEL(gI2,j1))*Ye(j1,j1)*ZE(gI1,3 + j1);
   }
   tmp_4931 += tmp_4932;
   tmp_4924 += (std::complex<double>(0,-1)*KroneckerDelta(2,gO2)) * tmp_4931;
   result += (std::complex<double>(0,-1)) * tmp_4924;

   return result;
}

std::complex<double> CLASSNAME::CpUChiconjSeFePR(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_4933;
   std::complex<double> tmp_4934;
   std::complex<double> tmp_4935;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4935 += Conj(Ye(j1,j1))*ZE(gI1,j1)*ZER(gI2,j1);
   }
   tmp_4934 += tmp_4935;
   tmp_4933 += (std::complex<double>(0,-1)*KroneckerDelta(2,gO1)) * tmp_4934;
   std::complex<double> tmp_4936;
   std::complex<double> tmp_4937;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4937 += ZE(gI1,3 + j1)*ZER(gI2,j1);
   }
   tmp_4936 += tmp_4937;
   tmp_4933 += (std::complex<double>(0.,-1.0954451150103321)*g1*KroneckerDelta(
      0,gO1)) * tmp_4936;
   std::complex<double> tmp_4938;
   std::complex<double> tmp_4939;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4939 += ZE(gI1,3 + j1)*ZER(gI2,j1);
   }
   tmp_4938 += tmp_4939;
   tmp_4933 += (std::complex<double>(0.,-0.22360679774997896)*gN*KroneckerDelta
      (5,gO1)) * tmp_4938;
   result += (std::complex<double>(0,-1)) * tmp_4933;

   return result;
}

std::complex<double> CLASSNAME::CpUChiconjSuFuPL(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_4940;
   std::complex<double> tmp_4941;
   std::complex<double> tmp_4942;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4942 += Conj(ZUL(gI2,j1))*ZU(gI1,j1);
   }
   tmp_4941 += tmp_4942;
   tmp_4940 += (std::complex<double>(0.,-0.18257418583505536)*g1*KroneckerDelta
      (0,gO2)) * tmp_4941;
   std::complex<double> tmp_4943;
   std::complex<double> tmp_4944;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4944 += Conj(ZUL(gI2,j1))*ZU(gI1,j1);
   }
   tmp_4943 += tmp_4944;
   tmp_4940 += (std::complex<double>(0.,-0.7071067811865475)*g2*KroneckerDelta(
      1,gO2)) * tmp_4943;
   std::complex<double> tmp_4945;
   std::complex<double> tmp_4946;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4946 += Conj(ZUL(gI2,j1))*ZU(gI1,j1);
   }
   tmp_4945 += tmp_4946;
   tmp_4940 += (std::complex<double>(0.,-0.22360679774997896)*gN*KroneckerDelta
      (5,gO2)) * tmp_4945;
   std::complex<double> tmp_4947;
   std::complex<double> tmp_4948;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4948 += Conj(ZUL(gI2,j1))*Yu(j1,j1)*ZU(gI1,3 + j1);
   }
   tmp_4947 += tmp_4948;
   tmp_4940 += (std::complex<double>(0,-1)*KroneckerDelta(3,gO2)) * tmp_4947;
   result += (std::complex<double>(0,-1)) * tmp_4940;

   return result;
}

std::complex<double> CLASSNAME::CpUChiconjSuFuPR(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_4949;
   std::complex<double> tmp_4950;
   std::complex<double> tmp_4951;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4951 += Conj(Yu(j1,j1))*ZU(gI1,j1)*ZUR(gI2,j1);
   }
   tmp_4950 += tmp_4951;
   tmp_4949 += (std::complex<double>(0,-1)*KroneckerDelta(3,gO1)) * tmp_4950;
   std::complex<double> tmp_4952;
   std::complex<double> tmp_4953;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4953 += ZU(gI1,3 + j1)*ZUR(gI2,j1);
   }
   tmp_4952 += tmp_4953;
   tmp_4949 += (std::complex<double>(0.,0.7302967433402214)*g1*KroneckerDelta(0
      ,gO1)) * tmp_4952;
   std::complex<double> tmp_4954;
   std::complex<double> tmp_4955;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4955 += ZU(gI1,3 + j1)*ZUR(gI2,j1);
   }
   tmp_4954 += tmp_4955;
   tmp_4949 += (std::complex<double>(0.,-0.22360679774997896)*gN*KroneckerDelta
      (5,gO1)) * tmp_4954;
   result += (std::complex<double>(0,-1)) * tmp_4949;

   return result;
}

std::complex<double> CLASSNAME::CpUChiconjVWmChaPR(unsigned gO2, unsigned gI2) const
{
   std::complex<double> result;

   result = -(g2*KroneckerDelta(1,gO2)*UP(gI2,0)) + 0.7071067811865475*g2*
      KroneckerDelta(3,gO2)*UP(gI2,1);

   return result;
}

std::complex<double> CLASSNAME::CpUChiconjVWmChaPL(unsigned gO1, unsigned gI2) const
{
   std::complex<double> result;

   result = -0.5*g2*(2*Conj(UM(gI2,0))*KroneckerDelta(1,gO1) +
      1.4142135623730951*Conj(UM(gI2,1))*KroneckerDelta(2,gO1));

   return result;
}

std::complex<double> CLASSNAME::CpUChiVZChiPR(unsigned gO2, unsigned gI2) const
{
   std::complex<double> result;

   result = 0.05*(KroneckerDelta(2,gO2)*(10*g2*Cos(ThetaW())*Cos(ThetaWp()) +
      7.745966692414834*g1*Cos(ThetaWp())*Sin(ThetaW()) - 9.486832980505138*gN*Sin
      (ThetaWp()))*ZN(gI2,2) - 2*KroneckerDelta(3,gO2)*(5*g2*Cos(ThetaW())*Cos(
      ThetaWp()) + 3.872983346207417*g1*Cos(ThetaWp())*Sin(ThetaW()) +
      3.1622776601683795*gN*Sin(ThetaWp()))*ZN(gI2,3) + 15.811388300841898*gN*
      KroneckerDelta(4,gO2)*Sin(ThetaWp())*ZN(gI2,4));

   return result;
}

std::complex<double> CLASSNAME::CpUChiVZChiPL(unsigned gO1, unsigned gI2) const
{
   std::complex<double> result;

   result = 0.05*(-15.811388300841898*gN*Conj(ZN(gI2,4))*KroneckerDelta(4,gO1)*
      Sin(ThetaWp()) + 2*Conj(ZN(gI2,3))*KroneckerDelta(3,gO1)*(5*g2*Cos(ThetaW())
      *Cos(ThetaWp()) + 3.872983346207417*g1*Cos(ThetaWp())*Sin(ThetaW()) +
      3.1622776601683795*gN*Sin(ThetaWp())) + Conj(ZN(gI2,2))*KroneckerDelta(2,gO1
      )*(-10*g2*Cos(ThetaW())*Cos(ThetaWp()) - 7.745966692414834*g1*Cos(ThetaWp())
      *Sin(ThetaW()) + 9.486832980505138*gN*Sin(ThetaWp())));

   return result;
}

std::complex<double> CLASSNAME::CpUChiVZpChiPR(unsigned gO2, unsigned gI2) const
{
   std::complex<double> result;

   result = 0.05*(-(KroneckerDelta(2,gO2)*(9.486832980505138*gN*Cos(ThetaWp())
      + 2*(5*g2*Cos(ThetaW()) + 3.872983346207417*g1*Sin(ThetaW()))*Sin(ThetaWp())
      )*ZN(gI2,2)) + 2*KroneckerDelta(3,gO2)*(-3.1622776601683795*gN*Cos(ThetaWp()
      ) + 5*g2*Cos(ThetaW())*Sin(ThetaWp()) + 3.872983346207417*g1*Sin(ThetaW())*
      Sin(ThetaWp()))*ZN(gI2,3) + 15.811388300841898*gN*Cos(ThetaWp())*
      KroneckerDelta(4,gO2)*ZN(gI2,4));

   return result;
}

std::complex<double> CLASSNAME::CpUChiVZpChiPL(unsigned gO1, unsigned gI2) const
{
   std::complex<double> result;

   result = 0.05*(-15.811388300841898*gN*Conj(ZN(gI2,4))*Cos(ThetaWp())*
      KroneckerDelta(4,gO1) + 2*Conj(ZN(gI2,3))*KroneckerDelta(3,gO1)*(
      3.1622776601683795*gN*Cos(ThetaWp()) - (5*g2*Cos(ThetaW()) +
      3.872983346207417*g1*Sin(ThetaW()))*Sin(ThetaWp())) + Conj(ZN(gI2,2))*
      KroneckerDelta(2,gO1)*(9.486832980505138*gN*Cos(ThetaWp()) + 2*(5*g2*Cos(
      ThetaW()) + 3.872983346207417*g1*Sin(ThetaW()))*Sin(ThetaWp())));

   return result;
}

std::complex<double> CLASSNAME::CpbarUChaSHppChiPPL(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = -(g2*Conj(UHpp(gI1,1))*Conj(ZNp(gI2,1))*KroneckerDelta(0,gO2));

   return result;
}

std::complex<double> CLASSNAME::CpbarUChaSHppChiPPR(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = -(g2*Conj(UHpp(gI1,0))*KroneckerDelta(0,gO1)*ZNp(gI2,0));

   return result;
}

std::complex<double> CLASSNAME::CpbarUChaChaAhPL(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = std::complex<double>(0.,0.7071067811865475)*(g2*Conj(UM(gI1,0))*
      KroneckerDelta(1,gO2)*ZA(gI2,1) + Conj(UM(gI1,1))*(g2*KroneckerDelta(0,gO2)*
      ZA(gI2,0) - KroneckerDelta(1,gO2)*Lambdax*ZA(gI2,2)));

   return result;
}

std::complex<double> CLASSNAME::CpbarUChaChaAhPR(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = std::complex<double>(0.,-0.7071067811865475)*(g2*KroneckerDelta(0,
      gO1)*UP(gI1,1)*ZA(gI2,1) + KroneckerDelta(1,gO1)*(g2*UP(gI1,0)*ZA(gI2,0) -
      Conj(Lambdax)*UP(gI1,1)*ZA(gI2,2)));

   return result;
}

std::complex<double> CLASSNAME::CpbarUChaHpmChiPL(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = -(Conj(ZN(gI2,4))*KroneckerDelta(1,gO2)*Lambdax*ZP(gI1,0)) - 0.1*(
      10*g2*Conj(ZN(gI2,3))*KroneckerDelta(0,gO2) + (5.477225575051661*g1*Conj(ZN(
      gI2,0)) + 7.0710678118654755*g2*Conj(ZN(gI2,1)) - 4.47213595499958*gN*Conj(
      ZN(gI2,5)))*KroneckerDelta(1,gO2))*ZP(gI1,1);

   return result;
}

std::complex<double> CLASSNAME::CpbarUChaHpmChiPR(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = -(g2*KroneckerDelta(0,gO1)*ZN(gI2,2)*ZP(gI1,0)) + 0.1*
      KroneckerDelta(1,gO1)*(5.477225575051661*g1*ZN(gI2,0)*ZP(gI1,0) +
      7.0710678118654755*g2*ZN(gI2,1)*ZP(gI1,0) + 6.708203932499369*gN*ZN(gI2,5)*
      ZP(gI1,0) - 10*Conj(Lambdax)*ZN(gI2,4)*ZP(gI1,1));

   return result;
}

std::complex<double> CLASSNAME::CpbarUChaconjSHp0ChaPPL(unsigned gO2, unsigned gI1) const
{
   std::complex<double> result;

   result = -(g2*KroneckerDelta(0,gO2)*UHp0(gI1,0));

   return result;
}

std::complex<double> CLASSNAME::CpbarUChaconjSHp0ChaPPR(unsigned gO1, unsigned gI1) const
{
   std::complex<double> result;

   result = -(g2*KroneckerDelta(0,gO1)*UHp0(gI1,1));

   return result;
}

std::complex<double> CLASSNAME::CpbarUChahhChaPL(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = -0.7071067811865475*(g2*Conj(UM(gI2,0))*KroneckerDelta(1,gO2)*ZH(
      gI1,1) + Conj(UM(gI2,1))*(g2*KroneckerDelta(0,gO2)*ZH(gI1,0) +
      KroneckerDelta(1,gO2)*Lambdax*ZH(gI1,2)));

   return result;
}

std::complex<double> CLASSNAME::CpbarUChahhChaPR(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = -0.7071067811865475*(g2*KroneckerDelta(0,gO1)*UP(gI2,1)*ZH(gI1,1) +
      KroneckerDelta(1,gO1)*(g2*UP(gI2,0)*ZH(gI1,0) + Conj(Lambdax)*UP(gI2,1)*ZH(
      gI1,2)));

   return result;
}

std::complex<double> CLASSNAME::CpbarUChaconjSvFePL(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_4956;
   std::complex<double> tmp_4957;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4957 += Conj(ZEL(gI2,j1))*ZV(gI1,j1);
   }
   tmp_4956 += tmp_4957;
   result += (-(g2*KroneckerDelta(0,gO2))) * tmp_4956;

   return result;
}

std::complex<double> CLASSNAME::CpbarUChaconjSvFePR(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_4958;
   std::complex<double> tmp_4959;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4959 += Conj(Ye(j1,j1))*ZER(gI2,j1)*ZV(gI1,j1);
   }
   tmp_4958 += tmp_4959;
   result += (KroneckerDelta(1,gO1)) * tmp_4958;

   return result;
}

std::complex<double> CLASSNAME::CpbarUChabarFuSdPL(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_4960;
   std::complex<double> tmp_4961;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4961 += Conj(ZD(gI2,j1))*Conj(ZUR(gI1,j1))*Yu(j1,j1);
   }
   tmp_4960 += tmp_4961;
   result += (KroneckerDelta(1,gO2)) * tmp_4960;

   return result;
}

std::complex<double> CLASSNAME::CpbarUChabarFuSdPR(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_4962;
   std::complex<double> tmp_4963;
   std::complex<double> tmp_4964;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4964 += Conj(ZD(gI2,j1))*ZUL(gI1,j1);
   }
   tmp_4963 += tmp_4964;
   tmp_4962 += (std::complex<double>(0,-1)*g2*KroneckerDelta(0,gO1)) * tmp_4963
      ;
   std::complex<double> tmp_4965;
   std::complex<double> tmp_4966;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4966 += Conj(Yd(j1,j1))*Conj(ZD(gI2,3 + j1))*ZUL(gI1,j1);
   }
   tmp_4965 += tmp_4966;
   tmp_4962 += (std::complex<double>(0,1)*KroneckerDelta(1,gO1)) * tmp_4965;
   result += (std::complex<double>(0,-1)) * tmp_4962;

   return result;
}

double CLASSNAME::CpbarUChabarFvSePL(unsigned , unsigned , unsigned ) const
{
   double result = 0.0;

   result = 0;

   return result;
}

std::complex<double> CLASSNAME::CpbarUChabarFvSePR(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   if (gI1 < 3) {
      result += -(g2*Conj(ZE(gI2,gI1))*KroneckerDelta(0,gO1));
   }
   if (gI1 < 3) {
      result += Conj(Ye(gI1,gI1))*Conj(ZE(gI2,3 + gI1))*KroneckerDelta(1,gO1
         );
   }

   return result;
}

std::complex<double> CLASSNAME::CpbarUChaconjSHI0ChaIPL(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_4967;
   std::complex<double> tmp_4968;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4968 += Conj(ZMI(gI2,j1))*UHI0(gI1,j1);
   }
   tmp_4967 += tmp_4968;
   result += (-(g2*KroneckerDelta(0,gO2))) * tmp_4967;

   return result;
}

std::complex<double> CLASSNAME::CpbarUChaconjSHI0ChaIPR(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_4969;
   std::complex<double> tmp_4970;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4970 += UHI0(gI1,2 + j1)*ZPI(gI2,j1);
   }
   tmp_4969 += tmp_4970;
   result += (-(g2*KroneckerDelta(0,gO1))) * tmp_4969;

   return result;
}

std::complex<double> CLASSNAME::CpbarUChaSHIpChiIPL(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_4971;
   std::complex<double> tmp_4972;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4972 += Conj(UHIp(gI1,2 + j1))*Conj(ZNI(gI2,2 + j1));
   }
   tmp_4971 += tmp_4972;
   result += (-(g2*KroneckerDelta(0,gO2))) * tmp_4971;

   return result;
}

std::complex<double> CLASSNAME::CpbarUChaSHIpChiIPR(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_4973;
   std::complex<double> tmp_4974;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4974 += Conj(UHIp(gI1,j1))*ZNI(gI2,j1);
   }
   tmp_4973 += tmp_4974;
   result += (-(g2*KroneckerDelta(0,gO1))) * tmp_4973;

   return result;
}

std::complex<double> CLASSNAME::CpbarUChaconjSuFdPL(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_4975;
   std::complex<double> tmp_4976;
   std::complex<double> tmp_4977;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4977 += Conj(ZDL(gI2,j1))*ZU(gI1,j1);
   }
   tmp_4976 += tmp_4977;
   tmp_4975 += (std::complex<double>(0,-1)*g2*KroneckerDelta(0,gO2)) * tmp_4976
      ;
   std::complex<double> tmp_4978;
   std::complex<double> tmp_4979;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4979 += Conj(ZDL(gI2,j1))*Yu(j1,j1)*ZU(gI1,3 + j1);
   }
   tmp_4978 += tmp_4979;
   tmp_4975 += (std::complex<double>(0,1)*KroneckerDelta(1,gO2)) * tmp_4978;
   result += (std::complex<double>(0,-1)) * tmp_4975;

   return result;
}

std::complex<double> CLASSNAME::CpbarUChaconjSuFdPR(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_4980;
   std::complex<double> tmp_4981;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4981 += Conj(Yd(j1,j1))*ZDR(gI2,j1)*ZU(gI1,j1);
   }
   tmp_4980 += tmp_4981;
   result += (KroneckerDelta(1,gO1)) * tmp_4980;

   return result;
}

std::complex<double> CLASSNAME::CpbarUChaVPChaPR(unsigned gO2, unsigned gI2) const
{
   std::complex<double> result;

   result = g2*KroneckerDelta(0,gO2)*Sin(ThetaW())*UP(gI2,0) + 0.1*
      KroneckerDelta(1,gO2)*(3.872983346207417*g1*Cos(ThetaW()) + 5*g2*Sin(ThetaW(
      )))*UP(gI2,1);

   return result;
}

std::complex<double> CLASSNAME::CpbarUChaVPChaPL(unsigned gO1, unsigned gI2) const
{
   std::complex<double> result;

   result = g2*Conj(UM(gI2,0))*KroneckerDelta(0,gO1)*Sin(ThetaW()) + 0.1*Conj(
      UM(gI2,1))*KroneckerDelta(1,gO1)*(3.872983346207417*g1*Cos(ThetaW()) + 5*g2*
      Sin(ThetaW()));

   return result;
}

std::complex<double> CLASSNAME::CpbarUChaVZChaPR(unsigned gO2, unsigned gI2) const
{
   std::complex<double> result;

   result = g2*Cos(ThetaW())*Cos(ThetaWp())*KroneckerDelta(0,gO2)*UP(gI2,0) +
      0.1*KroneckerDelta(1,gO2)*(5*g2*Cos(ThetaW())*Cos(ThetaWp()) -
      3.872983346207417*g1*Cos(ThetaWp())*Sin(ThetaW()) - 3.1622776601683795*gN*
      Sin(ThetaWp()))*UP(gI2,1);

   return result;
}

std::complex<double> CLASSNAME::CpbarUChaVZChaPL(unsigned gO1, unsigned gI2) const
{
   std::complex<double> result;

   result = 0.05*(20*g2*Conj(UM(gI2,0))*Cos(ThetaW())*Cos(ThetaWp())*
      KroneckerDelta(0,gO1) + Conj(UM(gI2,1))*KroneckerDelta(1,gO1)*(10*g2*Cos(
      ThetaW())*Cos(ThetaWp()) - 7.745966692414834*g1*Cos(ThetaWp())*Sin(ThetaW())
      + 9.486832980505138*gN*Sin(ThetaWp())));

   return result;
}

std::complex<double> CLASSNAME::CpbarUChaVZpChaPR(unsigned gO2, unsigned gI2) const
{
   std::complex<double> result;

   result = 0.1*(-10*g2*Cos(ThetaW())*KroneckerDelta(0,gO2)*Sin(ThetaWp())*UP(
      gI2,0) + KroneckerDelta(1,gO2)*(-3.1622776601683795*gN*Cos(ThetaWp()) + (-5*
      g2*Cos(ThetaW()) + 3.872983346207417*g1*Sin(ThetaW()))*Sin(ThetaWp()))*UP(
      gI2,1));

   return result;
}

std::complex<double> CLASSNAME::CpbarUChaVZpChaPL(unsigned gO1, unsigned gI2) const
{
   std::complex<double> result;

   result = 0.05*(-20*g2*Conj(UM(gI2,0))*Cos(ThetaW())*KroneckerDelta(0,gO1)*
      Sin(ThetaWp()) + Conj(UM(gI2,1))*KroneckerDelta(1,gO1)*(9.486832980505138*gN
      *Cos(ThetaWp()) + 2*(-5*g2*Cos(ThetaW()) + 3.872983346207417*g1*Sin(ThetaW()
      ))*Sin(ThetaWp())));

   return result;
}

std::complex<double> CLASSNAME::CpbarUChaVWmChiPR(unsigned gO2, unsigned gI2) const
{
   std::complex<double> result;

   result = -(g2*KroneckerDelta(0,gO2)*ZN(gI2,1)) + 0.7071067811865475*g2*
      KroneckerDelta(1,gO2)*ZN(gI2,3);

   return result;
}

std::complex<double> CLASSNAME::CpbarUChaVWmChiPL(unsigned gO1, unsigned gI2) const
{
   std::complex<double> result;

   result = -0.5*g2*(2*Conj(ZN(gI2,1))*KroneckerDelta(0,gO1) +
      1.4142135623730951*Conj(ZN(gI2,2))*KroneckerDelta(1,gO1));

   return result;
}

std::complex<double> CLASSNAME::CpbarUFeHpmFvPL(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   if (gI2 < 3) {
      result += KroneckerDelta(gI2,gO2)*Ye(gI2,gI2)*ZP(gI1,0);
   }

   return result;
}

double CLASSNAME::CpbarUFeHpmFvPR(unsigned , unsigned , unsigned ) const
{
   double result = 0.0;

   result = 0;

   return result;
}

std::complex<double> CLASSNAME::CpbarUFeSvChaPL(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   if (gO2 < 3) {
      result += Conj(UM(gI2,1))*Conj(ZV(gI1,gO2))*Ye(gO2,gO2);
   }

   return result;
}

std::complex<double> CLASSNAME::CpbarUFeSvChaPR(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   if (gO1 < 3) {
      result += -(g2*Conj(ZV(gI1,gO1))*UP(gI2,0));
   }

   return result;
}

std::complex<double> CLASSNAME::CpbarUFeFeAhPL(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   if (gO2 < 3) {
      result += std::complex<double>(0.,-0.7071067811865475)*Conj(ZEL(gI1,
         gO2))*Ye(gO2,gO2)*ZA(gI2,0);
   }

   return result;
}

std::complex<double> CLASSNAME::CpbarUFeFeAhPR(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   if (gO1 < 3) {
      result += std::complex<double>(0.,0.7071067811865475)*Conj(Ye(gO1,gO1)
         )*ZA(gI2,0)*ZER(gI1,gO1);
   }

   return result;
}

std::complex<double> CLASSNAME::CpbarUFehhFePL(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   if (gO2 < 3) {
      result += -0.7071067811865475*Conj(ZEL(gI2,gO2))*Ye(gO2,gO2)*ZH(gI1,0)
         ;
   }

   return result;
}

std::complex<double> CLASSNAME::CpbarUFehhFePR(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   if (gO1 < 3) {
      result += -0.7071067811865475*Conj(Ye(gO1,gO1))*ZER(gI2,gO1)*ZH(gI1,0)
         ;
   }

   return result;
}

std::complex<double> CLASSNAME::CpbarUFeSeChiPL(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   if (gO2 < 3) {
      result += -1.0954451150103321*g1*Conj(ZE(gI1,3 + gO2))*Conj(ZN(gI2,0))
         ;
   }
   if (gO2 < 3) {
      result += -0.22360679774997896*gN*Conj(ZE(gI1,3 + gO2))*Conj(ZN(gI2,5)
         );
   }
   if (gO2 < 3) {
      result += -(Conj(ZE(gI1,gO2))*Conj(ZN(gI2,2))*Ye(gO2,gO2));
   }

   return result;
}

std::complex<double> CLASSNAME::CpbarUFeSeChiPR(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   if (gO1 < 3) {
      result += -(Conj(Ye(gO1,gO1))*Conj(ZE(gI1,3 + gO1))*ZN(gI2,2));
   }
   if (gO1 < 3) {
      result += 0.5477225575051661*g1*Conj(ZE(gI1,gO1))*ZN(gI2,0);
   }
   if (gO1 < 3) {
      result += 0.7071067811865475*g2*Conj(ZE(gI1,gO1))*ZN(gI2,1);
   }
   if (gO1 < 3) {
      result += -0.4472135954999579*gN*Conj(ZE(gI1,gO1))*ZN(gI2,5);
   }

   return result;
}

std::complex<double> CLASSNAME::CpbarUFeVPFePR(unsigned gO2, unsigned gI2) const
{
   std::complex<double> result;

   if (gI2 < 3) {
      result += 0.7745966692414834*g1*Cos(ThetaW())*ZER(gI2,gO2);
   }

   return result;
}

std::complex<double> CLASSNAME::CpbarUFeVPFePL(unsigned gO1, unsigned gI2) const
{
   std::complex<double> result;

   if (gI2 < 3) {
      result += 0.3872983346207417*g1*Conj(ZEL(gI2,gO1))*Cos(ThetaW());
   }
   if (gI2 < 3) {
      result += 0.5*g2*Conj(ZEL(gI2,gO1))*Sin(ThetaW());
   }

   return result;
}

double CLASSNAME::CpbarUFeVWmFvPR(unsigned , unsigned ) const
{
   double result = 0.0;

   result = 0;

   return result;
}

double CLASSNAME::CpbarUFeVWmFvPL(unsigned gO1, unsigned gI2) const
{
   double result = 0.0;

   if (gI2 < 3) {
      result += -0.7071067811865475*g2*KroneckerDelta(gI2,gO1);
   }

   return result;
}

std::complex<double> CLASSNAME::CpbarUFeVZFePR(unsigned gO2, unsigned gI2) const
{
   std::complex<double> result;

   if (gI2 < 3) {
      result += -0.7745966692414834*g1*Cos(ThetaWp())*Sin(ThetaW())*ZER(gI2,
         gO2);
   }
   if (gI2 < 3) {
      result += 0.15811388300841897*gN*Sin(ThetaWp())*ZER(gI2,gO2);
   }

   return result;
}

std::complex<double> CLASSNAME::CpbarUFeVZFePL(unsigned gO1, unsigned gI2) const
{
   std::complex<double> result;

   if (gI2 < 3) {
      result += 0.5*g2*Conj(ZEL(gI2,gO1))*Cos(ThetaW())*Cos(ThetaWp());
   }
   if (gI2 < 3) {
      result += -0.3872983346207417*g1*Conj(ZEL(gI2,gO1))*Cos(ThetaWp())*Sin
         (ThetaW());
   }
   if (gI2 < 3) {
      result += -0.31622776601683794*gN*Conj(ZEL(gI2,gO1))*Sin(ThetaWp());
   }

   return result;
}

std::complex<double> CLASSNAME::CpbarUFeVZpFePR(unsigned gO2, unsigned gI2) const
{
   std::complex<double> result;

   if (gI2 < 3) {
      result += 0.15811388300841897*gN*Cos(ThetaWp())*ZER(gI2,gO2);
   }
   if (gI2 < 3) {
      result += 0.7745966692414834*g1*Sin(ThetaW())*Sin(ThetaWp())*ZER(gI2,
         gO2);
   }

   return result;
}

std::complex<double> CLASSNAME::CpbarUFeVZpFePL(unsigned gO1, unsigned gI2) const
{
   std::complex<double> result;

   if (gI2 < 3) {
      result += -0.31622776601683794*gN*Conj(ZEL(gI2,gO1))*Cos(ThetaWp());
   }
   if (gI2 < 3) {
      result += -0.5*g2*Conj(ZEL(gI2,gO1))*Cos(ThetaW())*Sin(ThetaWp());
   }
   if (gI2 < 3) {
      result += 0.3872983346207417*g1*Conj(ZEL(gI2,gO1))*Sin(ThetaW())*Sin(
         ThetaWp());
   }

   return result;
}

std::complex<double> CLASSNAME::CpbarUFdHpmFuPL(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   if (gO2 < 3) {
      result += Conj(ZUL(gI2,gO2))*Yd(gO2,gO2)*ZP(gI1,0);
   }

   return result;
}

std::complex<double> CLASSNAME::CpbarUFdHpmFuPR(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   if (gO1 < 3) {
      result += Conj(Yu(gO1,gO1))*ZP(gI1,1)*ZUR(gI2,gO1);
   }

   return result;
}

std::complex<double> CLASSNAME::CpbarUFdFdAhPL(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   if (gO2 < 3) {
      result += std::complex<double>(0.,-0.7071067811865475)*Conj(ZDL(gI1,
         gO2))*Yd(gO2,gO2)*ZA(gI2,0);
   }

   return result;
}

std::complex<double> CLASSNAME::CpbarUFdFdAhPR(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   if (gO1 < 3) {
      result += std::complex<double>(0.,0.7071067811865475)*Conj(Yd(gO1,gO1)
         )*ZA(gI2,0)*ZDR(gI1,gO1);
   }

   return result;
}

std::complex<double> CLASSNAME::CpbarUFdhhFdPL(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   if (gO2 < 3) {
      result += -0.7071067811865475*Conj(ZDL(gI2,gO2))*Yd(gO2,gO2)*ZH(gI1,0)
         ;
   }

   return result;
}

std::complex<double> CLASSNAME::CpbarUFdhhFdPR(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   if (gO1 < 3) {
      result += -0.7071067811865475*Conj(Yd(gO1,gO1))*ZDR(gI2,gO1)*ZH(gI1,0)
         ;
   }

   return result;
}

std::complex<double> CLASSNAME::CpbarUFdSuChaPL(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   if (gO2 < 3) {
      result += Conj(UM(gI2,1))*Conj(ZU(gI1,gO2))*Yd(gO2,gO2);
   }

   return result;
}

std::complex<double> CLASSNAME::CpbarUFdSuChaPR(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   if (gO1 < 3) {
      result += -(g2*Conj(ZU(gI1,gO1))*UP(gI2,0));
   }
   if (gO1 < 3) {
      result += Conj(Yu(gO1,gO1))*Conj(ZU(gI1,3 + gO1))*UP(gI2,1);
   }

   return result;
}

std::complex<double> CLASSNAME::CpbarUFdSdChiPL(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   if (gO2 < 3) {
      result += -0.3651483716701107*g1*Conj(ZD(gI1,3 + gO2))*Conj(ZN(gI2,0))
         ;
   }
   if (gO2 < 3) {
      result += -0.4472135954999579*gN*Conj(ZD(gI1,3 + gO2))*Conj(ZN(gI2,5))
         ;
   }
   if (gO2 < 3) {
      result += -(Conj(ZD(gI1,gO2))*Conj(ZN(gI2,2))*Yd(gO2,gO2));
   }

   return result;
}

std::complex<double> CLASSNAME::CpbarUFdSdChiPR(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   if (gO1 < 3) {
      result += -0.18257418583505536*g1*Conj(ZD(gI1,gO1))*ZN(gI2,0);
   }
   if (gO1 < 3) {
      result += 0.7071067811865475*g2*Conj(ZD(gI1,gO1))*ZN(gI2,1);
   }
   if (gO1 < 3) {
      result += -(Conj(Yd(gO1,gO1))*Conj(ZD(gI1,3 + gO1))*ZN(gI2,2));
   }
   if (gO1 < 3) {
      result += -0.22360679774997896*gN*Conj(ZD(gI1,gO1))*ZN(gI2,5);
   }

   return result;
}

std::complex<double> CLASSNAME::CpbarUFdSdGluPL(unsigned gO2, unsigned gI1, unsigned ) const
{
   std::complex<double> result;

   if (gO2 < 3) {
      result += 1.4142135623730951*g3*PhaseGlu*Conj(ZD(gI1,3 + gO2));
   }

   return result;
}

std::complex<double> CLASSNAME::CpbarUFdSdGluPR(unsigned gO1, unsigned gI1, unsigned ) const
{
   std::complex<double> result;

   if (gO1 < 3) {
      result += -1.4142135623730951*g3*Conj(PhaseGlu)*Conj(ZD(gI1,gO1));
   }

   return result;
}

std::complex<double> CLASSNAME::CpbarUFdVGFdPR(unsigned gO2, unsigned gI2) const
{
   std::complex<double> result;

   if (gI2 < 3) {
      result += -(g3*ZDR(gI2,gO2));
   }

   return result;
}

std::complex<double> CLASSNAME::CpbarUFdVGFdPL(unsigned gO1, unsigned gI2) const
{
   std::complex<double> result;

   if (gI2 < 3) {
      result += -(g3*Conj(ZDL(gI2,gO1)));
   }

   return result;
}

std::complex<double> CLASSNAME::CpbarUFdVPFdPR(unsigned gO2, unsigned gI2) const
{
   std::complex<double> result;

   if (gI2 < 3) {
      result += 0.2581988897471611*g1*Cos(ThetaW())*ZDR(gI2,gO2);
   }

   return result;
}

std::complex<double> CLASSNAME::CpbarUFdVPFdPL(unsigned gO1, unsigned gI2) const
{
   std::complex<double> result;

   if (gI2 < 3) {
      result += -0.12909944487358055*g1*Conj(ZDL(gI2,gO1))*Cos(ThetaW());
   }
   if (gI2 < 3) {
      result += 0.5*g2*Conj(ZDL(gI2,gO1))*Sin(ThetaW());
   }

   return result;
}

double CLASSNAME::CpbarUFdVWmFuPR(unsigned , unsigned ) const
{
   double result = 0.0;

   result = 0;

   return result;
}

std::complex<double> CLASSNAME::CpbarUFdVWmFuPL(unsigned gO1, unsigned gI2) const
{
   std::complex<double> result;

   if (gO1 < 3) {
      result += -0.7071067811865475*g2*Conj(ZUL(gI2,gO1));
   }

   return result;
}

std::complex<double> CLASSNAME::CpbarUFdVZFdPR(unsigned gO2, unsigned gI2) const
{
   std::complex<double> result;

   if (gI2 < 3) {
      result += -0.2581988897471611*g1*Cos(ThetaWp())*Sin(ThetaW())*ZDR(gI2,
         gO2);
   }
   if (gI2 < 3) {
      result += 0.31622776601683794*gN*Sin(ThetaWp())*ZDR(gI2,gO2);
   }

   return result;
}

std::complex<double> CLASSNAME::CpbarUFdVZFdPL(unsigned gO1, unsigned gI2) const
{
   std::complex<double> result;

   if (gI2 < 3) {
      result += 0.5*g2*Conj(ZDL(gI2,gO1))*Cos(ThetaW())*Cos(ThetaWp());
   }
   if (gI2 < 3) {
      result += 0.12909944487358055*g1*Conj(ZDL(gI2,gO1))*Cos(ThetaWp())*Sin
         (ThetaW());
   }
   if (gI2 < 3) {
      result += -0.15811388300841897*gN*Conj(ZDL(gI2,gO1))*Sin(ThetaWp());
   }

   return result;
}

std::complex<double> CLASSNAME::CpbarUFdVZpFdPR(unsigned gO2, unsigned gI2) const
{
   std::complex<double> result;

   if (gI2 < 3) {
      result += 0.31622776601683794*gN*Cos(ThetaWp())*ZDR(gI2,gO2);
   }
   if (gI2 < 3) {
      result += 0.2581988897471611*g1*Sin(ThetaW())*Sin(ThetaWp())*ZDR(gI2,
         gO2);
   }

   return result;
}

std::complex<double> CLASSNAME::CpbarUFdVZpFdPL(unsigned gO1, unsigned gI2) const
{
   std::complex<double> result;

   if (gI2 < 3) {
      result += -0.15811388300841897*gN*Conj(ZDL(gI2,gO1))*Cos(ThetaWp());
   }
   if (gI2 < 3) {
      result += -0.5*g2*Conj(ZDL(gI2,gO1))*Cos(ThetaW())*Sin(ThetaWp());
   }
   if (gI2 < 3) {
      result += -0.12909944487358055*g1*Conj(ZDL(gI2,gO1))*Sin(ThetaW())*Sin
         (ThetaWp());
   }

   return result;
}

std::complex<double> CLASSNAME::CpbarUFuconjHpmFdPL(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   if (gO2 < 3) {
      result += Conj(ZDL(gI2,gO2))*Yu(gO2,gO2)*ZP(gI1,1);
   }

   return result;
}

std::complex<double> CLASSNAME::CpbarUFuconjHpmFdPR(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   if (gO1 < 3) {
      result += Conj(Yd(gO1,gO1))*ZDR(gI2,gO1)*ZP(gI1,0);
   }

   return result;
}

std::complex<double> CLASSNAME::CpbarUFubarChaSdPL(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   if (gO2 < 3) {
      result += Conj(UP(gI1,1))*Conj(ZD(gI2,gO2))*Yu(gO2,gO2);
   }

   return result;
}

std::complex<double> CLASSNAME::CpbarUFubarChaSdPR(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   if (gO1 < 3) {
      result += -(g2*Conj(ZD(gI2,gO1))*UM(gI1,0));
   }
   if (gO1 < 3) {
      result += Conj(Yd(gO1,gO1))*Conj(ZD(gI2,3 + gO1))*UM(gI1,1);
   }

   return result;
}

std::complex<double> CLASSNAME::CpbarUFuFuAhPL(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   if (gO2 < 3) {
      result += std::complex<double>(0.,-0.7071067811865475)*Conj(ZUL(gI1,
         gO2))*Yu(gO2,gO2)*ZA(gI2,1);
   }

   return result;
}

std::complex<double> CLASSNAME::CpbarUFuFuAhPR(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   if (gO1 < 3) {
      result += std::complex<double>(0.,0.7071067811865475)*Conj(Yu(gO1,gO1)
         )*ZA(gI2,1)*ZUR(gI1,gO1);
   }

   return result;
}

std::complex<double> CLASSNAME::CpbarUFuhhFuPL(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   if (gO2 < 3) {
      result += -0.7071067811865475*Conj(ZUL(gI2,gO2))*Yu(gO2,gO2)*ZH(gI1,1)
         ;
   }

   return result;
}

std::complex<double> CLASSNAME::CpbarUFuhhFuPR(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   if (gO1 < 3) {
      result += -0.7071067811865475*Conj(Yu(gO1,gO1))*ZH(gI1,1)*ZUR(gI2,gO1)
         ;
   }

   return result;
}

std::complex<double> CLASSNAME::CpbarUFuSuChiPL(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   if (gO2 < 3) {
      result += 0.7302967433402214*g1*Conj(ZN(gI2,0))*Conj(ZU(gI1,3 + gO2));
   }
   if (gO2 < 3) {
      result += -0.22360679774997896*gN*Conj(ZN(gI2,5))*Conj(ZU(gI1,3 + gO2)
         );
   }
   if (gO2 < 3) {
      result += -(Conj(ZN(gI2,3))*Conj(ZU(gI1,gO2))*Yu(gO2,gO2));
   }

   return result;
}

std::complex<double> CLASSNAME::CpbarUFuSuChiPR(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   if (gO1 < 3) {
      result += -0.18257418583505536*g1*Conj(ZU(gI1,gO1))*ZN(gI2,0);
   }
   if (gO1 < 3) {
      result += -0.7071067811865475*g2*Conj(ZU(gI1,gO1))*ZN(gI2,1);
   }
   if (gO1 < 3) {
      result += -(Conj(Yu(gO1,gO1))*Conj(ZU(gI1,3 + gO1))*ZN(gI2,3));
   }
   if (gO1 < 3) {
      result += -0.22360679774997896*gN*Conj(ZU(gI1,gO1))*ZN(gI2,5);
   }

   return result;
}

std::complex<double> CLASSNAME::CpbarUFuSuGluPL(unsigned gO2, unsigned gI1, unsigned ) const
{
   std::complex<double> result;

   if (gO2 < 3) {
      result += 1.4142135623730951*g3*PhaseGlu*Conj(ZU(gI1,3 + gO2));
   }

   return result;
}

std::complex<double> CLASSNAME::CpbarUFuSuGluPR(unsigned gO1, unsigned gI1, unsigned ) const
{
   std::complex<double> result;

   if (gO1 < 3) {
      result += -1.4142135623730951*g3*Conj(PhaseGlu)*Conj(ZU(gI1,gO1));
   }

   return result;
}

std::complex<double> CLASSNAME::CpbarUFuVGFuPR(unsigned gO2, unsigned gI2) const
{
   std::complex<double> result;

   if (gI2 < 3) {
      result += -(g3*ZUR(gI2,gO2));
   }

   return result;
}

std::complex<double> CLASSNAME::CpbarUFuVGFuPL(unsigned gO1, unsigned gI2) const
{
   std::complex<double> result;

   if (gI2 < 3) {
      result += -(g3*Conj(ZUL(gI2,gO1)));
   }

   return result;
}

std::complex<double> CLASSNAME::CpbarUFuVPFuPR(unsigned gO2, unsigned gI2) const
{
   std::complex<double> result;

   if (gI2 < 3) {
      result += -0.5163977794943222*g1*Cos(ThetaW())*ZUR(gI2,gO2);
   }

   return result;
}

std::complex<double> CLASSNAME::CpbarUFuVPFuPL(unsigned gO1, unsigned gI2) const
{
   std::complex<double> result;

   if (gI2 < 3) {
      result += -0.12909944487358055*g1*Conj(ZUL(gI2,gO1))*Cos(ThetaW());
   }
   if (gI2 < 3) {
      result += -0.5*g2*Conj(ZUL(gI2,gO1))*Sin(ThetaW());
   }

   return result;
}

std::complex<double> CLASSNAME::CpbarUFuVZFuPR(unsigned gO2, unsigned gI2) const
{
   std::complex<double> result;

   if (gI2 < 3) {
      result += 0.5163977794943222*g1*Cos(ThetaWp())*Sin(ThetaW())*ZUR(gI2,
         gO2);
   }
   if (gI2 < 3) {
      result += 0.15811388300841897*gN*Sin(ThetaWp())*ZUR(gI2,gO2);
   }

   return result;
}

std::complex<double> CLASSNAME::CpbarUFuVZFuPL(unsigned gO1, unsigned gI2) const
{
   std::complex<double> result;

   if (gI2 < 3) {
      result += -0.5*g2*Conj(ZUL(gI2,gO1))*Cos(ThetaW())*Cos(ThetaWp());
   }
   if (gI2 < 3) {
      result += 0.12909944487358055*g1*Conj(ZUL(gI2,gO1))*Cos(ThetaWp())*Sin
         (ThetaW());
   }
   if (gI2 < 3) {
      result += -0.15811388300841897*gN*Conj(ZUL(gI2,gO1))*Sin(ThetaWp());
   }

   return result;
}

std::complex<double> CLASSNAME::CpbarUFuVZpFuPR(unsigned gO2, unsigned gI2) const
{
   std::complex<double> result;

   if (gI2 < 3) {
      result += 0.15811388300841897*gN*Cos(ThetaWp())*ZUR(gI2,gO2);
   }
   if (gI2 < 3) {
      result += -0.5163977794943222*g1*Sin(ThetaW())*Sin(ThetaWp())*ZUR(gI2,
         gO2);
   }

   return result;
}

std::complex<double> CLASSNAME::CpbarUFuVZpFuPL(unsigned gO1, unsigned gI2) const
{
   std::complex<double> result;

   if (gI2 < 3) {
      result += -0.15811388300841897*gN*Conj(ZUL(gI2,gO1))*Cos(ThetaWp());
   }
   if (gI2 < 3) {
      result += 0.5*g2*Conj(ZUL(gI2,gO1))*Cos(ThetaW())*Sin(ThetaWp());
   }
   if (gI2 < 3) {
      result += -0.12909944487358055*g1*Conj(ZUL(gI2,gO1))*Sin(ThetaW())*Sin
         (ThetaWp());
   }

   return result;
}

double CLASSNAME::CpbarUFuconjVWmFdPR(unsigned , unsigned ) const
{
   double result = 0.0;

   result = 0;

   return result;
}

std::complex<double> CLASSNAME::CpbarUFuconjVWmFdPL(unsigned gO1, unsigned gI2) const
{
   std::complex<double> result;

   if (gO1 < 3) {
      result += -0.7071067811865475*g2*Conj(ZDL(gI2,gO1));
   }

   return result;
}

std::complex<double> CLASSNAME::CpbarUFDXFDXAhPL(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   if (gO2 < 3) {
      result += std::complex<double>(0.,-0.7071067811865475)*Conj(ZDXL(gI1,
         gO2))*ZA(gI2,2)*Kappa(gO2,gO2);
   }

   return result;
}

std::complex<double> CLASSNAME::CpbarUFDXFDXAhPR(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   if (gO1 < 3) {
      result += std::complex<double>(0.,0.7071067811865475)*Conj(Kappa(gO1,
         gO1))*ZA(gI2,2)*ZDXR(gI1,gO1);
   }

   return result;
}

std::complex<double> CLASSNAME::CpbarUFDXhhFDXPL(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   if (gO2 < 3) {
      result += -0.7071067811865475*Conj(ZDXL(gI2,gO2))*ZH(gI1,2)*Kappa(gO2,
         gO2);
   }

   return result;
}

std::complex<double> CLASSNAME::CpbarUFDXhhFDXPR(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   if (gO1 < 3) {
      result += -0.7071067811865475*Conj(Kappa(gO1,gO1))*ZDXR(gI2,gO1)*ZH(
         gI1,2);
   }

   return result;
}

std::complex<double> CLASSNAME::CpbarUFDXSDXChiPL(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   if (gO2 < 3) {
      result += -0.3651483716701107*g1*Conj(ZDX(gI1,3 + gO2))*Conj(ZN(gI2,0)
         );
   }
   if (gO2 < 3) {
      result += 0.6708203932499369*gN*Conj(ZDX(gI1,3 + gO2))*Conj(ZN(gI2,5))
         ;
   }
   if (gO2 < 3) {
      result += -(Conj(ZDX(gI1,gO2))*Conj(ZN(gI2,4))*Kappa(gO2,gO2));
   }

   return result;
}

std::complex<double> CLASSNAME::CpbarUFDXSDXChiPR(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   if (gO1 < 3) {
      result += 0.3651483716701107*g1*Conj(ZDX(gI1,gO1))*ZN(gI2,0);
   }
   if (gO1 < 3) {
      result += -(Conj(ZDX(gI1,3 + gO1))*Conj(Kappa(gO1,gO1))*ZN(gI2,4));
   }
   if (gO1 < 3) {
      result += 0.4472135954999579*gN*Conj(ZDX(gI1,gO1))*ZN(gI2,5);
   }

   return result;
}

std::complex<double> CLASSNAME::CpbarUFDXSDXGluPL(unsigned gO2, unsigned gI1, unsigned ) const
{
   std::complex<double> result;

   if (gO2 < 3) {
      result += 1.4142135623730951*g3*PhaseGlu*Conj(ZDX(gI1,3 + gO2));
   }

   return result;
}

std::complex<double> CLASSNAME::CpbarUFDXSDXGluPR(unsigned gO1, unsigned gI1, unsigned ) const
{
   std::complex<double> result;

   if (gO1 < 3) {
      result += -1.4142135623730951*g3*Conj(PhaseGlu)*Conj(ZDX(gI1,gO1));
   }

   return result;
}

std::complex<double> CLASSNAME::CpbarUFDXVGFDXPR(unsigned gO2, unsigned gI2) const
{
   std::complex<double> result;

   if (gI2 < 3) {
      result += -(g3*ZDXR(gI2,gO2));
   }

   return result;
}

std::complex<double> CLASSNAME::CpbarUFDXVGFDXPL(unsigned gO1, unsigned gI2) const
{
   std::complex<double> result;

   if (gI2 < 3) {
      result += -(g3*Conj(ZDXL(gI2,gO1)));
   }

   return result;
}

std::complex<double> CLASSNAME::CpbarUFDXVPFDXPR(unsigned gO2, unsigned gI2) const
{
   std::complex<double> result;

   if (gI2 < 3) {
      result += 0.2581988897471611*g1*Cos(ThetaW())*ZDXR(gI2,gO2);
   }

   return result;
}

std::complex<double> CLASSNAME::CpbarUFDXVPFDXPL(unsigned gO1, unsigned gI2) const
{
   std::complex<double> result;

   if (gI2 < 3) {
      result += 0.2581988897471611*g1*Conj(ZDXL(gI2,gO1))*Cos(ThetaW());
   }

   return result;
}

std::complex<double> CLASSNAME::CpbarUFDXVZFDXPR(unsigned gO2, unsigned gI2) const
{
   std::complex<double> result;

   if (gI2 < 3) {
      result += -0.2581988897471611*g1*Cos(ThetaWp())*Sin(ThetaW())*ZDXR(gI2
         ,gO2);
   }
   if (gI2 < 3) {
      result += -0.4743416490252569*gN*Sin(ThetaWp())*ZDXR(gI2,gO2);
   }

   return result;
}

std::complex<double> CLASSNAME::CpbarUFDXVZFDXPL(unsigned gO1, unsigned gI2) const
{
   std::complex<double> result;

   if (gI2 < 3) {
      result += -0.2581988897471611*g1*Conj(ZDXL(gI2,gO1))*Cos(ThetaWp())*
         Sin(ThetaW());
   }
   if (gI2 < 3) {
      result += 0.31622776601683794*gN*Conj(ZDXL(gI2,gO1))*Sin(ThetaWp());
   }

   return result;
}

std::complex<double> CLASSNAME::CpbarUFDXVZpFDXPR(unsigned gO2, unsigned gI2) const
{
   std::complex<double> result;

   if (gI2 < 3) {
      result += -0.4743416490252569*gN*Cos(ThetaWp())*ZDXR(gI2,gO2);
   }
   if (gI2 < 3) {
      result += 0.2581988897471611*g1*Sin(ThetaW())*Sin(ThetaWp())*ZDXR(gI2,
         gO2);
   }

   return result;
}

std::complex<double> CLASSNAME::CpbarUFDXVZpFDXPL(unsigned gO1, unsigned gI2) const
{
   std::complex<double> result;

   if (gI2 < 3) {
      result += 0.31622776601683794*gN*Conj(ZDXL(gI2,gO1))*Cos(ThetaWp());
   }
   if (gI2 < 3) {
      result += 0.2581988897471611*g1*Conj(ZDXL(gI2,gO1))*Sin(ThetaW())*Sin(
         ThetaWp());
   }

   return result;
}

std::complex<double> CLASSNAME::CpbarUChaIChaIAhPL(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   if (gO2 < 2) {
      result += std::complex<double>(0.,-0.7071067811865475)*Conj(ZMI(gI1,
         gO2))*ZA(gI2,2)*Lambda12(gO2,gO2);
   }

   return result;
}

std::complex<double> CLASSNAME::CpbarUChaIChaIAhPR(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   if (gO1 < 2) {
      result += std::complex<double>(0.,0.7071067811865475)*Conj(Lambda12(
         gO1,gO1))*ZA(gI2,2)*ZPI(gI1,gO1);
   }

   return result;
}

std::complex<double> CLASSNAME::CpbarUChaIhhChaIPL(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   if (gO2 < 2) {
      result += -0.7071067811865475*Conj(ZMI(gI2,gO2))*ZH(gI1,2)*Lambda12(
         gO2,gO2);
   }

   return result;
}

std::complex<double> CLASSNAME::CpbarUChaIhhChaIPR(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   if (gO1 < 2) {
      result += -0.7071067811865475*Conj(Lambda12(gO1,gO1))*ZH(gI1,2)*ZPI(
         gI2,gO1);
   }

   return result;
}

std::complex<double> CLASSNAME::CpbarUChaISHI0ChaPL(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   if (gO2 < 2) {
      result += -(g2*Conj(UHI0(gI1,2 + gO2))*Conj(UM(gI2,0)));
   }

   return result;
}

std::complex<double> CLASSNAME::CpbarUChaISHI0ChaPR(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   if (gO1 < 2) {
      result += -(g2*Conj(UHI0(gI1,gO1))*UP(gI2,0));
   }

   return result;
}

std::complex<double> CLASSNAME::CpbarUChaISHIpChiPL(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   if (gO2 < 2) {
      result += -0.5477225575051661*g1*Conj(UHIp(gI1,2 + gO2))*Conj(ZN(gI2,0
         ));
   }
   if (gO2 < 2) {
      result += -0.7071067811865475*g2*Conj(UHIp(gI1,2 + gO2))*Conj(ZN(gI2,1
         ));
   }
   if (gO2 < 2) {
      result += 0.4472135954999579*gN*Conj(UHIp(gI1,2 + gO2))*Conj(ZN(gI2,5)
         );
   }
   if (gO2 < 2) {
      result += -(Conj(UHIp(gI1,gO2))*Conj(ZN(gI2,4))*Lambda12(gO2,gO2));
   }

   return result;
}

std::complex<double> CLASSNAME::CpbarUChaISHIpChiPR(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   if (gO1 < 2) {
      result += -(Conj(UHIp(gI1,2 + gO1))*Conj(Lambda12(gO1,gO1))*ZN(gI2,4))
         ;
   }
   if (gO1 < 2) {
      result += 0.5477225575051661*g1*Conj(UHIp(gI1,gO1))*ZN(gI2,0);
   }
   if (gO1 < 2) {
      result += 0.7071067811865475*g2*Conj(UHIp(gI1,gO1))*ZN(gI2,1);
   }
   if (gO1 < 2) {
      result += 0.6708203932499369*gN*Conj(UHIp(gI1,gO1))*ZN(gI2,5);
   }

   return result;
}

std::complex<double> CLASSNAME::CpbarUChaIVPChaIPR(unsigned gO2, unsigned gI2) const
{
   std::complex<double> result;

   if (gI2 < 2) {
      result += 0.3872983346207417*g1*Cos(ThetaW())*ZPI(gI2,gO2);
   }
   if (gI2 < 2) {
      result += 0.5*g2*Sin(ThetaW())*ZPI(gI2,gO2);
   }

   return result;
}

std::complex<double> CLASSNAME::CpbarUChaIVPChaIPL(unsigned gO1, unsigned gI2) const
{
   std::complex<double> result;

   if (gI2 < 2) {
      result += 0.3872983346207417*g1*Conj(ZMI(gI2,gO1))*Cos(ThetaW());
   }
   if (gI2 < 2) {
      result += 0.5*g2*Conj(ZMI(gI2,gO1))*Sin(ThetaW());
   }

   return result;
}

std::complex<double> CLASSNAME::CpbarUChaIVZChaIPR(unsigned gO2, unsigned gI2) const
{
   std::complex<double> result;

   if (gI2 < 2) {
      result += 0.5*g2*Cos(ThetaW())*Cos(ThetaWp())*ZPI(gI2,gO2);
   }
   if (gI2 < 2) {
      result += -0.3872983346207417*g1*Cos(ThetaWp())*Sin(ThetaW())*ZPI(gI2,
         gO2);
   }
   if (gI2 < 2) {
      result += -0.31622776601683794*gN*Sin(ThetaWp())*ZPI(gI2,gO2);
   }

   return result;
}

std::complex<double> CLASSNAME::CpbarUChaIVZChaIPL(unsigned gO1, unsigned gI2) const
{
   std::complex<double> result;

   if (gI2 < 2) {
      result += 0.5*g2*Conj(ZMI(gI2,gO1))*Cos(ThetaW())*Cos(ThetaWp());
   }
   if (gI2 < 2) {
      result += -0.3872983346207417*g1*Conj(ZMI(gI2,gO1))*Cos(ThetaWp())*Sin
         (ThetaW());
   }
   if (gI2 < 2) {
      result += 0.4743416490252569*gN*Conj(ZMI(gI2,gO1))*Sin(ThetaWp());
   }

   return result;
}

std::complex<double> CLASSNAME::CpbarUChaIVZpChaIPR(unsigned gO2, unsigned gI2) const
{
   std::complex<double> result;

   if (gI2 < 2) {
      result += -0.31622776601683794*gN*Cos(ThetaWp())*ZPI(gI2,gO2);
   }
   if (gI2 < 2) {
      result += -0.5*g2*Cos(ThetaW())*Sin(ThetaWp())*ZPI(gI2,gO2);
   }
   if (gI2 < 2) {
      result += 0.3872983346207417*g1*Sin(ThetaW())*Sin(ThetaWp())*ZPI(gI2,
         gO2);
   }

   return result;
}

std::complex<double> CLASSNAME::CpbarUChaIVZpChaIPL(unsigned gO1, unsigned gI2) const
{
   std::complex<double> result;

   if (gI2 < 2) {
      result += 0.4743416490252569*gN*Conj(ZMI(gI2,gO1))*Cos(ThetaWp());
   }
   if (gI2 < 2) {
      result += -0.5*g2*Conj(ZMI(gI2,gO1))*Cos(ThetaW())*Sin(ThetaWp());
   }
   if (gI2 < 2) {
      result += 0.3872983346207417*g1*Conj(ZMI(gI2,gO1))*Sin(ThetaW())*Sin(
         ThetaWp());
   }

   return result;
}

std::complex<double> CLASSNAME::CpbarUChaIVWmChiIPR(unsigned gO2, unsigned gI2) const
{
   std::complex<double> result;

   if (gO2 < 2) {
      result += 0.7071067811865475*g2*ZNI(gI2,2 + gO2);
   }

   return result;
}

std::complex<double> CLASSNAME::CpbarUChaIVWmChiIPL(unsigned gO1, unsigned gI2) const
{
   std::complex<double> result;

   if (gO1 < 2) {
      result += -0.7071067811865475*g2*Conj(ZNI(gI2,gO1));
   }

   return result;
}

std::complex<double> CLASSNAME::CpUChiIhhChiIPL(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_4982;
   std::complex<double> tmp_4983;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4983 += Conj(ZNI(gI2,j1))*KroneckerDelta(gO2,2 + j1)*Lambda12(j1,
         j1);
   }
   tmp_4982 += tmp_4983;
   result += (0.7071067811865475*ZH(gI1,2)) * tmp_4982;
   if (gO2 < 2) {
      result += 0.7071067811865475*Conj(ZNI(gI2,2 + gO2))*ZH(gI1,2)*Lambda12
         (gO2,gO2);
   }

   return result;
}

std::complex<double> CLASSNAME::CpUChiIhhChiIPR(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_4984;
   std::complex<double> tmp_4985;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4985 += Conj(Lambda12(j1,j1))*KroneckerDelta(gO1,2 + j1)*ZNI(gI2,
         j1);
   }
   tmp_4984 += tmp_4985;
   result += (0.7071067811865475*ZH(gI1,2)) * tmp_4984;
   if (gO1 < 2) {
      result += 0.7071067811865475*Conj(Lambda12(gO1,gO1))*ZH(gI1,2)*ZNI(gI2
         ,2 + gO1);
   }

   return result;
}

std::complex<double> CLASSNAME::CpUChiIconjSHIpChaPL(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   if (gO2 < 2) {
      result += -(g2*Conj(UM(gI2,0))*UHIp(gI1,gO2));
   }

   return result;
}

std::complex<double> CLASSNAME::CpUChiIconjSHIpChaPR(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_4986;
   std::complex<double> tmp_4987;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4987 += KroneckerDelta(gO1,2 + j1)*UHIp(gI1,2 + j1);
   }
   tmp_4986 += tmp_4987;
   result += (-(g2*UP(gI2,0))) * tmp_4986;

   return result;
}

std::complex<double> CLASSNAME::CpUChiIChiIAhPL(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_4988;
   std::complex<double> tmp_4989;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4989 += Conj(ZNI(gI1,j1))*KroneckerDelta(gO2,2 + j1)*Lambda12(j1,
         j1);
   }
   tmp_4988 += tmp_4989;
   result += (std::complex<double>(0.,0.7071067811865475)*ZA(gI2,2)) * tmp_4988
      ;
   if (gO2 < 2) {
      result += std::complex<double>(0.,0.7071067811865475)*Conj(ZNI(gI1,2 +
         gO2))*ZA(gI2,2)*Lambda12(gO2,gO2);
   }

   return result;
}

std::complex<double> CLASSNAME::CpUChiIChiIAhPR(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_4990;
   std::complex<double> tmp_4991;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4991 += Conj(Lambda12(j1,j1))*KroneckerDelta(gO1,2 + j1)*ZNI(gI1,
         j1);
   }
   tmp_4990 += tmp_4991;
   result += (std::complex<double>(0.,-0.7071067811865475)*ZA(gI2,2)) *
      tmp_4990;
   if (gO1 < 2) {
      result += std::complex<double>(0.,-0.7071067811865475)*Conj(Lambda12(
         gO1,gO1))*ZA(gI2,2)*ZNI(gI1,2 + gO1);
   }

   return result;
}

std::complex<double> CLASSNAME::CpUChiIconjSHI0ChiPL(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   if (gO2 < 2) {
      result += 0.5477225575051661*g1*Conj(ZN(gI2,0))*UHI0(gI1,gO2);
   }
   if (gO2 < 2) {
      result += -0.7071067811865475*g2*Conj(ZN(gI2,1))*UHI0(gI1,gO2);
   }
   if (gO2 < 2) {
      result += 0.6708203932499369*gN*Conj(ZN(gI2,5))*UHI0(gI1,gO2);
   }
   if (gO2 < 2) {
      result += Conj(ZN(gI2,4))*UHI0(gI1,2 + gO2)*Lambda12(gO2,gO2);
   }

   return result;
}

std::complex<double> CLASSNAME::CpUChiIconjSHI0ChiPR(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_4992;
   std::complex<double> tmp_4993;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4993 += Conj(Lambda12(j1,j1))*KroneckerDelta(gO1,2 + j1)*UHI0(gI1,
         j1);
   }
   tmp_4992 += tmp_4993;
   result += (ZN(gI2,4)) * tmp_4992;
   std::complex<double> tmp_4994;
   std::complex<double> tmp_4995;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4995 += KroneckerDelta(gO1,2 + j1)*UHI0(gI1,2 + j1);
   }
   tmp_4994 += tmp_4995;
   result += (-0.5477225575051661*g1*ZN(gI2,0) + 0.7071067811865475*g2*ZN(gI2,1
      ) + 0.4472135954999579*gN*ZN(gI2,5)) * tmp_4994;

   return result;
}

std::complex<double> CLASSNAME::CpUChiIconjVWmChaIPR(unsigned gO2, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_4996;
   std::complex<double> tmp_4997;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4997 += KroneckerDelta(gO2,2 + j1)*ZPI(gI2,j1);
   }
   tmp_4996 += tmp_4997;
   result += (0.7071067811865475*g2) * tmp_4996;

   return result;
}

std::complex<double> CLASSNAME::CpUChiIconjVWmChaIPL(unsigned gO1, unsigned gI2) const
{
   std::complex<double> result;

   if (gO1 < 2) {
      result += -0.7071067811865475*g2*Conj(ZMI(gI2,gO1));
   }

   return result;
}

std::complex<double> CLASSNAME::CpUChiIVZChiIPR(unsigned gO2, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_4998;
   std::complex<double> tmp_4999;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4999 += KroneckerDelta(gO2,2 + j1)*ZNI(gI2,2 + j1);
   }
   tmp_4998 += tmp_4999;
   result += (-0.5*g2*Cos(ThetaW())*Cos(ThetaWp())) * tmp_4998;
   std::complex<double> tmp_5000;
   std::complex<double> tmp_5001;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_5001 += KroneckerDelta(gO2,2 + j1)*ZNI(gI2,2 + j1);
   }
   tmp_5000 += tmp_5001;
   result += (-0.3872983346207417*g1*Cos(ThetaWp())*Sin(ThetaW())) * tmp_5000;
   std::complex<double> tmp_5002;
   std::complex<double> tmp_5003;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_5003 += KroneckerDelta(gO2,2 + j1)*ZNI(gI2,2 + j1);
   }
   tmp_5002 += tmp_5003;
   result += (-0.31622776601683794*gN*Sin(ThetaWp())) * tmp_5002;
   if (gO2 < 2) {
      result += 0.5*g2*Cos(ThetaW())*Cos(ThetaWp())*ZNI(gI2,gO2);
   }
   if (gO2 < 2) {
      result += 0.3872983346207417*g1*Cos(ThetaWp())*Sin(ThetaW())*ZNI(gI2,
         gO2);
   }
   if (gO2 < 2) {
      result += -0.4743416490252569*gN*Sin(ThetaWp())*ZNI(gI2,gO2);
   }

   return result;
}

std::complex<double> CLASSNAME::CpUChiIVZChiIPL(unsigned gO1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_5004;
   std::complex<double> tmp_5005;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_5005 += Conj(ZNI(gI2,2 + j1))*KroneckerDelta(gO1,2 + j1);
   }
   tmp_5004 += tmp_5005;
   result += (0.5*g2*Cos(ThetaW())*Cos(ThetaWp())) * tmp_5004;
   std::complex<double> tmp_5006;
   std::complex<double> tmp_5007;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_5007 += Conj(ZNI(gI2,2 + j1))*KroneckerDelta(gO1,2 + j1);
   }
   tmp_5006 += tmp_5007;
   result += (0.3872983346207417*g1*Cos(ThetaWp())*Sin(ThetaW())) * tmp_5006;
   std::complex<double> tmp_5008;
   std::complex<double> tmp_5009;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_5009 += Conj(ZNI(gI2,2 + j1))*KroneckerDelta(gO1,2 + j1);
   }
   tmp_5008 += tmp_5009;
   result += (0.31622776601683794*gN*Sin(ThetaWp())) * tmp_5008;
   if (gO1 < 2) {
      result += -0.5*g2*Conj(ZNI(gI2,gO1))*Cos(ThetaW())*Cos(ThetaWp());
   }
   if (gO1 < 2) {
      result += -0.3872983346207417*g1*Conj(ZNI(gI2,gO1))*Cos(ThetaWp())*Sin
         (ThetaW());
   }
   if (gO1 < 2) {
      result += 0.4743416490252569*gN*Conj(ZNI(gI2,gO1))*Sin(ThetaWp());
   }

   return result;
}

std::complex<double> CLASSNAME::CpUChiIVZpChiIPR(unsigned gO2, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_5010;
   std::complex<double> tmp_5011;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_5011 += KroneckerDelta(gO2,2 + j1)*ZNI(gI2,2 + j1);
   }
   tmp_5010 += tmp_5011;
   result += (-0.31622776601683794*gN*Cos(ThetaWp())) * tmp_5010;
   std::complex<double> tmp_5012;
   std::complex<double> tmp_5013;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_5013 += KroneckerDelta(gO2,2 + j1)*ZNI(gI2,2 + j1);
   }
   tmp_5012 += tmp_5013;
   result += (0.5*g2*Cos(ThetaW())*Sin(ThetaWp())) * tmp_5012;
   std::complex<double> tmp_5014;
   std::complex<double> tmp_5015;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_5015 += KroneckerDelta(gO2,2 + j1)*ZNI(gI2,2 + j1);
   }
   tmp_5014 += tmp_5015;
   result += (0.3872983346207417*g1*Sin(ThetaW())*Sin(ThetaWp())) * tmp_5014;
   if (gO2 < 2) {
      result += -0.4743416490252569*gN*Cos(ThetaWp())*ZNI(gI2,gO2);
   }
   if (gO2 < 2) {
      result += -0.5*g2*Cos(ThetaW())*Sin(ThetaWp())*ZNI(gI2,gO2);
   }
   if (gO2 < 2) {
      result += -0.3872983346207417*g1*Sin(ThetaW())*Sin(ThetaWp())*ZNI(gI2,
         gO2);
   }

   return result;
}

std::complex<double> CLASSNAME::CpUChiIVZpChiIPL(unsigned gO1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_5016;
   std::complex<double> tmp_5017;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_5017 += Conj(ZNI(gI2,2 + j1))*KroneckerDelta(gO1,2 + j1);
   }
   tmp_5016 += tmp_5017;
   result += (0.31622776601683794*gN*Cos(ThetaWp())) * tmp_5016;
   std::complex<double> tmp_5018;
   std::complex<double> tmp_5019;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_5019 += Conj(ZNI(gI2,2 + j1))*KroneckerDelta(gO1,2 + j1);
   }
   tmp_5018 += tmp_5019;
   result += (-0.5*g2*Cos(ThetaW())*Sin(ThetaWp())) * tmp_5018;
   std::complex<double> tmp_5020;
   std::complex<double> tmp_5021;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_5021 += Conj(ZNI(gI2,2 + j1))*KroneckerDelta(gO1,2 + j1);
   }
   tmp_5020 += tmp_5021;
   result += (-0.3872983346207417*g1*Sin(ThetaW())*Sin(ThetaWp())) * tmp_5020;
   if (gO1 < 2) {
      result += 0.4743416490252569*gN*Conj(ZNI(gI2,gO1))*Cos(ThetaWp());
   }
   if (gO1 < 2) {
      result += 0.5*g2*Conj(ZNI(gI2,gO1))*Cos(ThetaW())*Sin(ThetaWp());
   }
   if (gO1 < 2) {
      result += 0.3872983346207417*g1*Conj(ZNI(gI2,gO1))*Sin(ThetaW())*Sin(
         ThetaWp());
   }

   return result;
}

std::complex<double> CLASSNAME::CpUFSIconjSSI0ChiPL(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   if (gO2 < 2) {
      result += -1.118033988749895*gN*Conj(ZN(gI2,5))*ZSSI(gI1,gO2);
   }

   return result;
}

double CLASSNAME::CpUFSIconjSSI0ChiPR(unsigned , unsigned , unsigned ) const
{
   double result = 0.0;

   result = 0;

   return result;
}

std::complex<double> CLASSNAME::CpUFSIVZFSIPR(unsigned gO2, unsigned gI2) const
{
   std::complex<double> result;

   if (gI2 < 2) {
      result += 0.7905694150420949*gN*Sin(ThetaWp())*ZFSI(gI2,gO2);
   }

   return result;
}

std::complex<double> CLASSNAME::CpUFSIVZFSIPL(unsigned gO1, unsigned gI2) const
{
   std::complex<double> result;

   if (gI2 < 2) {
      result += -0.7905694150420949*gN*Conj(ZFSI(gI2,gO1))*Sin(ThetaWp());
   }

   return result;
}

std::complex<double> CLASSNAME::CpUFSIVZpFSIPR(unsigned gO2, unsigned gI2) const
{
   std::complex<double> result;

   if (gI2 < 2) {
      result += 0.7905694150420949*gN*Cos(ThetaWp())*ZFSI(gI2,gO2);
   }

   return result;
}

std::complex<double> CLASSNAME::CpUFSIVZpFSIPL(unsigned gO1, unsigned gI2) const
{
   std::complex<double> result;

   if (gI2 < 2) {
      result += -0.7905694150420949*gN*Conj(ZFSI(gI2,gO1))*Cos(ThetaWp());
   }

   return result;
}

std::complex<double> CLASSNAME::CpUChiPconjSHppChaPL(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = -(g2*Conj(UM(gI2,0))*KroneckerDelta(0,gO2)*UHpp(gI1,0));

   return result;
}

std::complex<double> CLASSNAME::CpUChiPconjSHppChaPR(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = -(g2*KroneckerDelta(1,gO1)*UHpp(gI1,1)*UP(gI2,0));

   return result;
}

std::complex<double> CLASSNAME::CpUChiPconjSHp0ChiPL(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = 0.1*(5.477225575051661*g1*Conj(ZN(gI2,0)) - 7.0710678118654755*g2*
      Conj(ZN(gI2,1)) - 4.47213595499958*gN*Conj(ZN(gI2,5)))*KroneckerDelta(0,gO2)
      *UHp0(gI1,0);

   return result;
}

std::complex<double> CLASSNAME::CpUChiPconjSHp0ChiPR(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = 0.1*KroneckerDelta(1,gO1)*UHp0(gI1,1)*(-5.477225575051661*g1*ZN(gI2
      ,0) + 7.0710678118654755*g2*ZN(gI2,1) + 4.47213595499958*gN*ZN(gI2,5));

   return result;
}

std::complex<double> CLASSNAME::CpUChiPVZChiPPR(unsigned gO2, unsigned gI2) const
{
   std::complex<double> result;

   result = 0.1*(5*g2*Cos(ThetaW())*Cos(ThetaWp()) + 3.872983346207417*g1*Cos(
      ThetaWp())*Sin(ThetaW()) + 3.1622776601683795*gN*Sin(ThetaWp()))*(
      KroneckerDelta(0,gO2)*ZNp(gI2,0) - KroneckerDelta(1,gO2)*ZNp(gI2,1));

   return result;
}

std::complex<double> CLASSNAME::CpUChiPVZChiPPL(unsigned gO1, unsigned gI2) const
{
   std::complex<double> result;

   result = -0.1*(Conj(ZNp(gI2,0))*KroneckerDelta(0,gO1) - Conj(ZNp(gI2,1))*
      KroneckerDelta(1,gO1))*(5*g2*Cos(ThetaW())*Cos(ThetaWp()) +
      3.872983346207417*g1*Cos(ThetaWp())*Sin(ThetaW()) + 3.1622776601683795*gN*
      Sin(ThetaWp()));

   return result;
}

std::complex<double> CLASSNAME::CpUChiPVZpChiPPR(unsigned gO2, unsigned gI2) const
{
   std::complex<double> result;

   result = 0.1*(3.1622776601683795*gN*Cos(ThetaWp()) - (5*g2*Cos(ThetaW()) +
      3.872983346207417*g1*Sin(ThetaW()))*Sin(ThetaWp()))*(KroneckerDelta(0,gO2)*
      ZNp(gI2,0) - KroneckerDelta(1,gO2)*ZNp(gI2,1));

   return result;
}

std::complex<double> CLASSNAME::CpUChiPVZpChiPPL(unsigned gO1, unsigned gI2) const
{
   std::complex<double> result;

   result = -0.1*(Conj(ZNp(gI2,0))*KroneckerDelta(0,gO1) - Conj(ZNp(gI2,1))*
      KroneckerDelta(1,gO1))*(3.1622776601683795*gN*Cos(ThetaWp()) - (5*g2*Cos(
      ThetaW()) + 3.872983346207417*g1*Sin(ThetaW()))*Sin(ThetaWp()));

   return result;
}

double CLASSNAME::CpUChiPconjVWmChaPPR(unsigned gO2) const
{
   double result = 0.0;

   result = 0.7071067811865475*g2*KroneckerDelta(1,gO2);

   return result;
}

double CLASSNAME::CpUChiPconjVWmChaPPL(unsigned gO1) const
{
   double result = 0.0;

   result = -0.7071067811865475*g2*KroneckerDelta(0,gO1);

   return result;
}

std::complex<double> CLASSNAME::CpGluconjSdFdPL(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_5022;
   std::complex<double> tmp_5023;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_5023 += Conj(ZDL(gI2,j1))*ZD(gI1,j1);
   }
   tmp_5022 += tmp_5023;
   result += (-1.4142135623730951*g3*PhaseGlu) * tmp_5022;

   return result;
}

std::complex<double> CLASSNAME::CpGluconjSdFdPR(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_5024;
   std::complex<double> tmp_5025;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_5025 += ZD(gI1,3 + j1)*ZDR(gI2,j1);
   }
   tmp_5024 += tmp_5025;
   result += (1.4142135623730951*g3*Conj(PhaseGlu)) * tmp_5024;

   return result;
}

std::complex<double> CLASSNAME::CpGluconjSDXFDXPL(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_5026;
   std::complex<double> tmp_5027;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_5027 += Conj(ZDXL(gI2,j1))*ZDX(gI1,j1);
   }
   tmp_5026 += tmp_5027;
   result += (-1.4142135623730951*g3*PhaseGlu) * tmp_5026;

   return result;
}

std::complex<double> CLASSNAME::CpGluconjSDXFDXPR(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_5028;
   std::complex<double> tmp_5029;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_5029 += ZDX(gI1,3 + j1)*ZDXR(gI2,j1);
   }
   tmp_5028 += tmp_5029;
   result += (1.4142135623730951*g3*Conj(PhaseGlu)) * tmp_5028;

   return result;
}

std::complex<double> CLASSNAME::CpGluconjSuFuPL(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_5030;
   std::complex<double> tmp_5031;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_5031 += Conj(ZUL(gI2,j1))*ZU(gI1,j1);
   }
   tmp_5030 += tmp_5031;
   result += (-1.4142135623730951*g3*PhaseGlu) * tmp_5030;

   return result;
}

std::complex<double> CLASSNAME::CpGluconjSuFuPR(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_5032;
   std::complex<double> tmp_5033;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_5033 += ZU(gI1,3 + j1)*ZUR(gI2,j1);
   }
   tmp_5032 += tmp_5033;
   result += (1.4142135623730951*g3*Conj(PhaseGlu)) * tmp_5032;

   return result;
}

std::complex<double> CLASSNAME::CpGluVGGluPR() const
{
   std::complex<double> result;

   result = std::complex<double>(0,-1)*g3*AbsSqr(PhaseGlu);

   return result;
}

std::complex<double> CLASSNAME::CpGluVGGluPL() const
{
   std::complex<double> result;

   result = std::complex<double>(0,-1)*g3*AbsSqr(PhaseGlu);

   return result;
}

std::complex<double> CLASSNAME::CpbarChaPSHp0ChaPL(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = -(g2*Conj(UHp0(gI1,1))*Conj(UM(gI2,0)));

   return result;
}

std::complex<double> CLASSNAME::CpbarChaPSHp0ChaPR(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = -(g2*Conj(UHp0(gI1,0))*UP(gI2,0));

   return result;
}

std::complex<double> CLASSNAME::CpbarChaPSHppChiPL(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = -0.1*Conj(UHpp(gI1,1))*(5.477225575051661*g1*Conj(ZN(gI2,0)) +
      7.0710678118654755*g2*Conj(ZN(gI2,1)) - 4.47213595499958*gN*Conj(ZN(gI2,5)))
      ;

   return result;
}

std::complex<double> CLASSNAME::CpbarChaPSHppChiPR(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = 0.1*Conj(UHpp(gI1,0))*(5.477225575051661*g1*ZN(gI2,0) +
      7.0710678118654755*g2*ZN(gI2,1) - 4.47213595499958*gN*ZN(gI2,5));

   return result;
}

std::complex<double> CLASSNAME::CpbarChaPVWmChiPPR(unsigned gI2) const
{
   std::complex<double> result;

   result = 0.7071067811865475*g2*ZNp(gI2,1);

   return result;
}

std::complex<double> CLASSNAME::CpbarChaPVWmChiPPL(unsigned gI2) const
{
   std::complex<double> result;

   result = -0.7071067811865475*g2*Conj(ZNp(gI2,0));

   return result;
}

double CLASSNAME::CpbarChaPVPChaPPR() const
{
   double result = 0.0;

   result = 0.5*(0.7745966692414834*g1*Cos(ThetaW()) + g2*Sin(ThetaW()));

   return result;
}

double CLASSNAME::CpbarChaPVPChaPPL() const
{
   double result = 0.0;

   result = 0.5*(0.7745966692414834*g1*Cos(ThetaW()) + g2*Sin(ThetaW()));

   return result;
}

double CLASSNAME::CpbarChaPVZChaPPR() const
{
   double result = 0.0;

   result = 0.1*(5*g2*Cos(ThetaW())*Cos(ThetaWp()) - 3.872983346207417*g1*Cos(
      ThetaWp())*Sin(ThetaW()) - 3.1622776601683795*gN*Sin(ThetaWp()));

   return result;
}

double CLASSNAME::CpbarChaPVZChaPPL() const
{
   double result = 0.0;

   result = 0.1*(5*g2*Cos(ThetaW())*Cos(ThetaWp()) - 3.872983346207417*g1*Cos(
      ThetaWp())*Sin(ThetaW()) - 3.1622776601683795*gN*Sin(ThetaWp()));

   return result;
}

double CLASSNAME::CpbarChaPVZpChaPPR() const
{
   double result = 0.0;

   result = 0.1*(-3.1622776601683795*gN*Cos(ThetaWp()) - 5*g2*Cos(ThetaW())*Sin
      (ThetaWp()) + 3.872983346207417*g1*Sin(ThetaW())*Sin(ThetaWp()));

   return result;
}

double CLASSNAME::CpbarChaPVZpChaPPL() const
{
   double result = 0.0;

   result = 0.1*(-3.1622776601683795*gN*Cos(ThetaWp()) - 5*g2*Cos(ThetaW())*Sin
      (ThetaWp()) + 3.872983346207417*g1*Sin(ThetaW())*Sin(ThetaWp()));

   return result;
}

double CLASSNAME::CpconjVWmbarVWmVZp() const
{
   double result = 0.0;

   result = 0;

   return result;
}

double CLASSNAME::CpconjVWmbarVZpVWm() const
{
   double result = 0.0;

   result = 0;

   return result;
}

std::complex<double> CLASSNAME::CpbarFeHpmFvPL(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   if (gI2 < 3) {
      result += Conj(ZER(gO2,gI2))*Ye(gI2,gI2)*ZP(gI1,0);
   }

   return result;
}

double CLASSNAME::CpbarFeHpmFvPR(unsigned , unsigned , unsigned ) const
{
   double result = 0.0;

   result = 0;

   return result;
}

std::complex<double> CLASSNAME::CpbarFeSvChaPL(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_5034;
   std::complex<double> tmp_5035;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_5035 += Conj(ZER(gO2,j1))*Conj(ZV(gI1,j1))*Ye(j1,j1);
   }
   tmp_5034 += tmp_5035;
   result += (Conj(UM(gI2,1))) * tmp_5034;

   return result;
}

std::complex<double> CLASSNAME::CpbarFeSvChaPR(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_5036;
   std::complex<double> tmp_5037;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_5037 += Conj(ZV(gI1,j1))*ZEL(gO1,j1);
   }
   tmp_5036 += tmp_5037;
   result += (-(g2*UP(gI2,0))) * tmp_5036;

   return result;
}

std::complex<double> CLASSNAME::CpbarFeFeAhPL(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_5038;
   std::complex<double> tmp_5039;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_5039 += Conj(ZEL(gI1,j1))*Conj(ZER(gO2,j1))*Ye(j1,j1);
   }
   tmp_5038 += tmp_5039;
   result += (std::complex<double>(0.,-0.7071067811865475)*ZA(gI2,0)) *
      tmp_5038;

   return result;
}

std::complex<double> CLASSNAME::CpbarFeFeAhPR(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_5040;
   std::complex<double> tmp_5041;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_5041 += Conj(Ye(j1,j1))*ZEL(gO1,j1)*ZER(gI1,j1);
   }
   tmp_5040 += tmp_5041;
   result += (std::complex<double>(0.,0.7071067811865475)*ZA(gI2,0)) * tmp_5040
      ;

   return result;
}

std::complex<double> CLASSNAME::CpbarFehhFePL(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_5042;
   std::complex<double> tmp_5043;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_5043 += Conj(ZEL(gI2,j1))*Conj(ZER(gO2,j1))*Ye(j1,j1);
   }
   tmp_5042 += tmp_5043;
   result += (-0.7071067811865475*ZH(gI1,0)) * tmp_5042;

   return result;
}

std::complex<double> CLASSNAME::CpbarFehhFePR(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_5044;
   std::complex<double> tmp_5045;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_5045 += Conj(Ye(j1,j1))*ZEL(gO1,j1)*ZER(gI2,j1);
   }
   tmp_5044 += tmp_5045;
   result += (-0.7071067811865475*ZH(gI1,0)) * tmp_5044;

   return result;
}

std::complex<double> CLASSNAME::CpbarFeSeChiPL(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_5046;
   std::complex<double> tmp_5047;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_5047 += Conj(ZE(gI1,3 + j1))*Conj(ZER(gO2,j1));
   }
   tmp_5046 += tmp_5047;
   result += (-1.0954451150103321*g1*Conj(ZN(gI2,0))) * tmp_5046;
   std::complex<double> tmp_5048;
   std::complex<double> tmp_5049;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_5049 += Conj(ZE(gI1,3 + j1))*Conj(ZER(gO2,j1));
   }
   tmp_5048 += tmp_5049;
   result += (-0.22360679774997896*gN*Conj(ZN(gI2,5))) * tmp_5048;
   std::complex<double> tmp_5050;
   std::complex<double> tmp_5051;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_5051 += Conj(ZE(gI1,j1))*Conj(ZER(gO2,j1))*Ye(j1,j1);
   }
   tmp_5050 += tmp_5051;
   result += (-Conj(ZN(gI2,2))) * tmp_5050;

   return result;
}

std::complex<double> CLASSNAME::CpbarFeSeChiPR(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_5052;
   std::complex<double> tmp_5053;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_5053 += Conj(Ye(j1,j1))*Conj(ZE(gI1,3 + j1))*ZEL(gO1,j1);
   }
   tmp_5052 += tmp_5053;
   result += (-ZN(gI2,2)) * tmp_5052;
   std::complex<double> tmp_5054;
   std::complex<double> tmp_5055;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_5055 += Conj(ZE(gI1,j1))*ZEL(gO1,j1);
   }
   tmp_5054 += tmp_5055;
   result += (0.5477225575051661*g1*ZN(gI2,0) + 0.7071067811865475*g2*ZN(gI2,1)
      - 0.4472135954999579*gN*ZN(gI2,5)) * tmp_5054;

   return result;
}

double CLASSNAME::CpbarFeVWmFvPR(unsigned , unsigned ) const
{
   double result = 0.0;

   result = 0;

   return result;
}

std::complex<double> CLASSNAME::CpbarFeVWmFvPL(unsigned gO1, unsigned gI2) const
{
   std::complex<double> result;

   if (gI2 < 3) {
      result += -0.7071067811865475*g2*ZEL(gO1,gI2);
   }

   return result;
}

double CLASSNAME::CpbarFeVZFePR(unsigned gO2, unsigned gI2) const
{
   double result = 0.0;

   result = -0.05*KroneckerDelta(gI2,gO2)*(15.491933384829668*g1*Cos(ThetaWp())
      *Sin(ThetaW()) - 3.1622776601683795*gN*Sin(ThetaWp()));

   return result;
}

double CLASSNAME::CpbarFeVZFePL(unsigned gO1, unsigned gI2) const
{
   double result = 0.0;

   result = 0.1*KroneckerDelta(gI2,gO1)*(5*g2*Cos(ThetaW())*Cos(ThetaWp()) -
      3.872983346207417*g1*Cos(ThetaWp())*Sin(ThetaW()) - 3.1622776601683795*gN*
      Sin(ThetaWp()));

   return result;
}

double CLASSNAME::CpbarFeVZpFePR(unsigned gO2, unsigned gI2) const
{
   double result = 0.0;

   result = 0.05*KroneckerDelta(gI2,gO2)*(3.1622776601683795*gN*Cos(ThetaWp())
      + 15.491933384829668*g1*Sin(ThetaW())*Sin(ThetaWp()));

   return result;
}

double CLASSNAME::CpbarFeVZpFePL(unsigned gO1, unsigned gI2) const
{
   double result = 0.0;

   result = -0.1*KroneckerDelta(gI2,gO1)*(3.1622776601683795*gN*Cos(ThetaWp())
      + (5*g2*Cos(ThetaW()) - 3.872983346207417*g1*Sin(ThetaW()))*Sin(ThetaWp()));

   return result;
}

std::complex<double> CLASSNAME::CpbarFdHpmFuPL(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_5056;
   std::complex<double> tmp_5057;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_5057 += Conj(ZDR(gO2,j1))*Conj(ZUL(gI2,j1))*Yd(j1,j1);
   }
   tmp_5056 += tmp_5057;
   result += (ZP(gI1,0)) * tmp_5056;

   return result;
}

std::complex<double> CLASSNAME::CpbarFdHpmFuPR(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_5058;
   std::complex<double> tmp_5059;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_5059 += Conj(Yu(j1,j1))*ZDL(gO1,j1)*ZUR(gI2,j1);
   }
   tmp_5058 += tmp_5059;
   result += (ZP(gI1,1)) * tmp_5058;

   return result;
}

std::complex<double> CLASSNAME::CpbarFdFdAhPL(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_5060;
   std::complex<double> tmp_5061;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_5061 += Conj(ZDL(gI1,j1))*Conj(ZDR(gO2,j1))*Yd(j1,j1);
   }
   tmp_5060 += tmp_5061;
   result += (std::complex<double>(0.,-0.7071067811865475)*ZA(gI2,0)) *
      tmp_5060;

   return result;
}

std::complex<double> CLASSNAME::CpbarFdFdAhPR(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_5062;
   std::complex<double> tmp_5063;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_5063 += Conj(Yd(j1,j1))*ZDL(gO1,j1)*ZDR(gI1,j1);
   }
   tmp_5062 += tmp_5063;
   result += (std::complex<double>(0.,0.7071067811865475)*ZA(gI2,0)) * tmp_5062
      ;

   return result;
}

std::complex<double> CLASSNAME::CpbarFdhhFdPL(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_5064;
   std::complex<double> tmp_5065;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_5065 += Conj(ZDL(gI2,j1))*Conj(ZDR(gO2,j1))*Yd(j1,j1);
   }
   tmp_5064 += tmp_5065;
   result += (-0.7071067811865475*ZH(gI1,0)) * tmp_5064;

   return result;
}

std::complex<double> CLASSNAME::CpbarFdhhFdPR(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_5066;
   std::complex<double> tmp_5067;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_5067 += Conj(Yd(j1,j1))*ZDL(gO1,j1)*ZDR(gI2,j1);
   }
   tmp_5066 += tmp_5067;
   result += (-0.7071067811865475*ZH(gI1,0)) * tmp_5066;

   return result;
}

std::complex<double> CLASSNAME::CpbarFdSuChaPL(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_5068;
   std::complex<double> tmp_5069;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_5069 += Conj(ZDR(gO2,j1))*Conj(ZU(gI1,j1))*Yd(j1,j1);
   }
   tmp_5068 += tmp_5069;
   result += (Conj(UM(gI2,1))) * tmp_5068;

   return result;
}

std::complex<double> CLASSNAME::CpbarFdSuChaPR(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_5070;
   std::complex<double> tmp_5071;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_5071 += Conj(ZU(gI1,j1))*ZDL(gO1,j1);
   }
   tmp_5070 += tmp_5071;
   result += (-(g2*UP(gI2,0))) * tmp_5070;
   std::complex<double> tmp_5072;
   std::complex<double> tmp_5073;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_5073 += Conj(Yu(j1,j1))*Conj(ZU(gI1,3 + j1))*ZDL(gO1,j1);
   }
   tmp_5072 += tmp_5073;
   result += (UP(gI2,1)) * tmp_5072;

   return result;
}

std::complex<double> CLASSNAME::CpbarFdSdChiPL(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_5074;
   std::complex<double> tmp_5075;
   std::complex<double> tmp_5076;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_5076 += Conj(ZD(gI1,3 + j1))*Conj(ZDR(gO2,j1));
   }
   tmp_5075 += tmp_5076;
   tmp_5074 += (-5.477225575051661*g1*Conj(ZN(gI2,0))) * tmp_5075;
   std::complex<double> tmp_5077;
   std::complex<double> tmp_5078;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_5078 += Conj(ZD(gI1,3 + j1))*Conj(ZDR(gO2,j1));
   }
   tmp_5077 += tmp_5078;
   tmp_5074 += (-6.708203932499369*gN*Conj(ZN(gI2,5))) * tmp_5077;
   std::complex<double> tmp_5079;
   std::complex<double> tmp_5080;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_5080 += Conj(ZD(gI1,j1))*Conj(ZDR(gO2,j1))*Yd(j1,j1);
   }
   tmp_5079 += tmp_5080;
   tmp_5074 += (-15*Conj(ZN(gI2,2))) * tmp_5079;
   result += (0.06666666666666667) * tmp_5074;

   return result;
}

std::complex<double> CLASSNAME::CpbarFdSdChiPR(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_5081;
   std::complex<double> tmp_5082;
   std::complex<double> tmp_5083;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_5083 += Conj(Yd(j1,j1))*Conj(ZD(gI1,3 + j1))*ZDL(gO1,j1);
   }
   tmp_5082 += tmp_5083;
   tmp_5081 += (-30*ZN(gI2,2)) * tmp_5082;
   std::complex<double> tmp_5084;
   std::complex<double> tmp_5085;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_5085 += Conj(ZD(gI1,j1))*ZDL(gO1,j1);
   }
   tmp_5084 += tmp_5085;
   tmp_5081 += (-5.477225575051661*g1*ZN(gI2,0) + 21.213203435596427*g2*ZN(gI2,
      1) - 6.708203932499369*gN*ZN(gI2,5)) * tmp_5084;
   result += (0.03333333333333333) * tmp_5081;

   return result;
}

std::complex<double> CLASSNAME::CpbarFdSdGluPL(unsigned gO2, unsigned gI1, unsigned ) const
{
   std::complex<double> result;

   std::complex<double> tmp_5086;
   std::complex<double> tmp_5087;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_5087 += Conj(ZD(gI1,3 + j1))*Conj(ZDR(gO2,j1));
   }
   tmp_5086 += tmp_5087;
   result += (1.4142135623730951*g3*PhaseGlu) * tmp_5086;

   return result;
}

std::complex<double> CLASSNAME::CpbarFdSdGluPR(unsigned gO1, unsigned gI1, unsigned ) const
{
   std::complex<double> result;

   std::complex<double> tmp_5088;
   std::complex<double> tmp_5089;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_5089 += Conj(ZD(gI1,j1))*ZDL(gO1,j1);
   }
   tmp_5088 += tmp_5089;
   result += (-1.4142135623730951*g3*Conj(PhaseGlu)) * tmp_5088;

   return result;
}

double CLASSNAME::CpbarFdVWmFuPR(unsigned , unsigned ) const
{
   double result = 0.0;

   result = 0;

   return result;
}

std::complex<double> CLASSNAME::CpbarFdVWmFuPL(unsigned gO1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_5090;
   std::complex<double> tmp_5091;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_5091 += Conj(ZUL(gI2,j1))*ZDL(gO1,j1);
   }
   tmp_5090 += tmp_5091;
   result += (-0.7071067811865475*g2) * tmp_5090;

   return result;
}

double CLASSNAME::CpbarFdVZFdPR(unsigned gO2, unsigned gI2) const
{
   double result = 0.0;

   result = KroneckerDelta(gI2,gO2)*(-0.2581988897471611*g1*Cos(ThetaWp())*Sin(
      ThetaW()) + 0.31622776601683794*gN*Sin(ThetaWp()));

   return result;
}

double CLASSNAME::CpbarFdVZFdPL(unsigned gO1, unsigned gI2) const
{
   double result = 0.0;

   result = 0.016666666666666666*KroneckerDelta(gI2,gO1)*(30*g2*Cos(ThetaW())*
      Cos(ThetaWp()) + 7.745966692414834*g1*Cos(ThetaWp())*Sin(ThetaW()) -
      9.486832980505138*gN*Sin(ThetaWp()));

   return result;
}

double CLASSNAME::CpbarFdVZpFdPR(unsigned gO2, unsigned gI2) const
{
   double result = 0.0;

   result = KroneckerDelta(gI2,gO2)*(0.31622776601683794*gN*Cos(ThetaWp()) +
      0.2581988897471611*g1*Sin(ThetaW())*Sin(ThetaWp()));

   return result;
}

double CLASSNAME::CpbarFdVZpFdPL(unsigned gO1, unsigned gI2) const
{
   double result = 0.0;

   result = -0.016666666666666666*KroneckerDelta(gI2,gO1)*(9.486832980505138*gN
      *Cos(ThetaWp()) + 2*(15*g2*Cos(ThetaW()) + 3.872983346207417*g1*Sin(ThetaW()
      ))*Sin(ThetaWp()));

   return result;
}

std::complex<double> CLASSNAME::CpbarFuconjHpmFdPL(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_5092;
   std::complex<double> tmp_5093;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_5093 += Conj(ZDL(gI2,j1))*Conj(ZUR(gO2,j1))*Yu(j1,j1);
   }
   tmp_5092 += tmp_5093;
   result += (ZP(gI1,1)) * tmp_5092;

   return result;
}

std::complex<double> CLASSNAME::CpbarFuconjHpmFdPR(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_5094;
   std::complex<double> tmp_5095;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_5095 += Conj(Yd(j1,j1))*ZDR(gI2,j1)*ZUL(gO1,j1);
   }
   tmp_5094 += tmp_5095;
   result += (ZP(gI1,0)) * tmp_5094;

   return result;
}

std::complex<double> CLASSNAME::CpbarFubarChaSdPL(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_5096;
   std::complex<double> tmp_5097;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_5097 += Conj(ZD(gI2,j1))*Conj(ZUR(gO2,j1))*Yu(j1,j1);
   }
   tmp_5096 += tmp_5097;
   result += (Conj(UP(gI1,1))) * tmp_5096;

   return result;
}

std::complex<double> CLASSNAME::CpbarFubarChaSdPR(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_5098;
   std::complex<double> tmp_5099;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_5099 += Conj(ZD(gI2,j1))*ZUL(gO1,j1);
   }
   tmp_5098 += tmp_5099;
   result += (-(g2*UM(gI1,0))) * tmp_5098;
   std::complex<double> tmp_5100;
   std::complex<double> tmp_5101;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_5101 += Conj(Yd(j1,j1))*Conj(ZD(gI2,3 + j1))*ZUL(gO1,j1);
   }
   tmp_5100 += tmp_5101;
   result += (UM(gI1,1)) * tmp_5100;

   return result;
}

std::complex<double> CLASSNAME::CpbarFuFuAhPL(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_5102;
   std::complex<double> tmp_5103;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_5103 += Conj(ZUL(gI1,j1))*Conj(ZUR(gO2,j1))*Yu(j1,j1);
   }
   tmp_5102 += tmp_5103;
   result += (std::complex<double>(0.,-0.7071067811865475)*ZA(gI2,1)) *
      tmp_5102;

   return result;
}

std::complex<double> CLASSNAME::CpbarFuFuAhPR(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_5104;
   std::complex<double> tmp_5105;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_5105 += Conj(Yu(j1,j1))*ZUL(gO1,j1)*ZUR(gI1,j1);
   }
   tmp_5104 += tmp_5105;
   result += (std::complex<double>(0.,0.7071067811865475)*ZA(gI2,1)) * tmp_5104
      ;

   return result;
}

std::complex<double> CLASSNAME::CpbarFuhhFuPL(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_5106;
   std::complex<double> tmp_5107;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_5107 += Conj(ZUL(gI2,j1))*Conj(ZUR(gO2,j1))*Yu(j1,j1);
   }
   tmp_5106 += tmp_5107;
   result += (-0.7071067811865475*ZH(gI1,1)) * tmp_5106;

   return result;
}

std::complex<double> CLASSNAME::CpbarFuhhFuPR(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_5108;
   std::complex<double> tmp_5109;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_5109 += Conj(Yu(j1,j1))*ZUL(gO1,j1)*ZUR(gI2,j1);
   }
   tmp_5108 += tmp_5109;
   result += (-0.7071067811865475*ZH(gI1,1)) * tmp_5108;

   return result;
}

std::complex<double> CLASSNAME::CpbarFuSuChiPL(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_5110;
   std::complex<double> tmp_5111;
   std::complex<double> tmp_5112;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_5112 += Conj(ZU(gI1,3 + j1))*Conj(ZUR(gO2,j1));
   }
   tmp_5111 += tmp_5112;
   tmp_5110 += (21.908902300206645*g1*Conj(ZN(gI2,0))) * tmp_5111;
   std::complex<double> tmp_5113;
   std::complex<double> tmp_5114;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_5114 += Conj(ZU(gI1,3 + j1))*Conj(ZUR(gO2,j1));
   }
   tmp_5113 += tmp_5114;
   tmp_5110 += (-6.708203932499369*gN*Conj(ZN(gI2,5))) * tmp_5113;
   std::complex<double> tmp_5115;
   std::complex<double> tmp_5116;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_5116 += Conj(ZU(gI1,j1))*Conj(ZUR(gO2,j1))*Yu(j1,j1);
   }
   tmp_5115 += tmp_5116;
   tmp_5110 += (-30*Conj(ZN(gI2,3))) * tmp_5115;
   result += (0.03333333333333333) * tmp_5110;

   return result;
}

std::complex<double> CLASSNAME::CpbarFuSuChiPR(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_5117;
   std::complex<double> tmp_5118;
   std::complex<double> tmp_5119;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_5119 += Conj(Yu(j1,j1))*Conj(ZU(gI1,3 + j1))*ZUL(gO1,j1);
   }
   tmp_5118 += tmp_5119;
   tmp_5117 += (-30*ZN(gI2,3)) * tmp_5118;
   std::complex<double> tmp_5120;
   std::complex<double> tmp_5121;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_5121 += Conj(ZU(gI1,j1))*ZUL(gO1,j1);
   }
   tmp_5120 += tmp_5121;
   tmp_5117 += (-5.477225575051661*g1*ZN(gI2,0) - 21.213203435596427*g2*ZN(gI2,
      1) - 6.708203932499369*gN*ZN(gI2,5)) * tmp_5120;
   result += (0.03333333333333333) * tmp_5117;

   return result;
}

std::complex<double> CLASSNAME::CpbarFuSuGluPL(unsigned gO2, unsigned gI1, unsigned ) const
{
   std::complex<double> result;

   std::complex<double> tmp_5122;
   std::complex<double> tmp_5123;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_5123 += Conj(ZU(gI1,3 + j1))*Conj(ZUR(gO2,j1));
   }
   tmp_5122 += tmp_5123;
   result += (1.4142135623730951*g3*PhaseGlu) * tmp_5122;

   return result;
}

std::complex<double> CLASSNAME::CpbarFuSuGluPR(unsigned gO1, unsigned gI1, unsigned ) const
{
   std::complex<double> result;

   std::complex<double> tmp_5124;
   std::complex<double> tmp_5125;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_5125 += Conj(ZU(gI1,j1))*ZUL(gO1,j1);
   }
   tmp_5124 += tmp_5125;
   result += (-1.4142135623730951*g3*Conj(PhaseGlu)) * tmp_5124;

   return result;
}

double CLASSNAME::CpbarFuVPFuPR(unsigned gO2, unsigned gI2) const
{
   double result = 0.0;

   result = -0.5163977794943222*g1*Cos(ThetaW())*KroneckerDelta(gI2,gO2);

   return result;
}

double CLASSNAME::CpbarFuVPFuPL(unsigned gO1, unsigned gI2) const
{
   double result = 0.0;

   result = -0.16666666666666666*KroneckerDelta(gI2,gO1)*(0.7745966692414834*g1
      *Cos(ThetaW()) + 3*g2*Sin(ThetaW()));

   return result;
}

double CLASSNAME::CpbarFuVZFuPR(unsigned gO2, unsigned gI2) const
{
   double result = 0.0;

   result = 0.016666666666666666*KroneckerDelta(gI2,gO2)*(30.983866769659336*g1
      *Cos(ThetaWp())*Sin(ThetaW()) + 9.486832980505138*gN*Sin(ThetaWp()));

   return result;
}

double CLASSNAME::CpbarFuVZFuPL(unsigned gO1, unsigned gI2) const
{
   double result = 0.0;

   result = -0.016666666666666666*KroneckerDelta(gI2,gO1)*(30*g2*Cos(ThetaW())*
      Cos(ThetaWp()) - 7.745966692414834*g1*Cos(ThetaWp())*Sin(ThetaW()) +
      9.486832980505138*gN*Sin(ThetaWp()));

   return result;
}

double CLASSNAME::CpbarFuVZpFuPR(unsigned gO2, unsigned gI2) const
{
   double result = 0.0;

   result = 0.016666666666666666*KroneckerDelta(gI2,gO2)*(9.486832980505138*gN*
      Cos(ThetaWp()) - 30.983866769659336*g1*Sin(ThetaW())*Sin(ThetaWp()));

   return result;
}

double CLASSNAME::CpbarFuVZpFuPL(unsigned gO1, unsigned gI2) const
{
   double result = 0.0;

   result = -0.016666666666666666*KroneckerDelta(gI2,gO1)*(9.486832980505138*gN
      *Cos(ThetaWp()) + 2*(-15*g2*Cos(ThetaW()) + 3.872983346207417*g1*Sin(ThetaW(
      )))*Sin(ThetaWp()));

   return result;
}

double CLASSNAME::CpbarFuconjVWmFdPR(unsigned , unsigned ) const
{
   double result = 0.0;

   result = 0;

   return result;
}

std::complex<double> CLASSNAME::CpbarFuconjVWmFdPL(unsigned gO1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_5126;
   std::complex<double> tmp_5127;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_5127 += Conj(ZDL(gI2,j1))*ZUL(gO1,j1);
   }
   tmp_5126 += tmp_5127;
   result += (-0.7071067811865475*g2) * tmp_5126;

   return result;
}


std::complex<double> CLASSNAME::self_energy_Sd(double p , unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   result += 4*A0(MVWm)*CpUSdconjUSdconjVWmVWm(gO1,gO2);
   result += 2*A0(MVZp)*CpUSdconjUSdVZpVZp(gO1,gO2);
   result += 2*A0(MVZ)*CpUSdconjUSdVZVZ(gO1,gO2);
   std::complex<double> tmp_5128;
   std::complex<double> tmp_5129;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      tmp_5129 += A0(MHpm(gI1))*CpUSdconjUSdconjHpmHpm(gO1,gO2,gI1,gI1);
   }
   tmp_5128 += tmp_5129;
   result += (-1) * tmp_5128;
   std::complex<double> tmp_5130;
   std::complex<double> tmp_5131;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      tmp_5131 += A0(MSHp0(gI1))*CpUSdconjUSdconjSHp0SHp0(gO1,gO2,gI1,gI1);
   }
   tmp_5130 += tmp_5131;
   result += (-1) * tmp_5130;
   std::complex<double> tmp_5132;
   std::complex<double> tmp_5133;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      tmp_5133 += A0(MSHpp(gI1))*CpUSdconjUSdconjSHppSHpp(gO1,gO2,gI1,gI1);
   }
   tmp_5132 += tmp_5133;
   result += (-1) * tmp_5132;
   std::complex<double> tmp_5134;
   std::complex<double> tmp_5135;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      tmp_5135 += A0(MSSI0(gI1))*CpUSdconjUSdconjSSI0SSI0(gO1,gO2,gI1,gI1);
   }
   tmp_5134 += tmp_5135;
   result += (-1) * tmp_5134;
   std::complex<double> tmp_5136;
   std::complex<double> tmp_5137;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      tmp_5137 += A0(MAh(gI1))*CpUSdconjUSdAhAh(gO1,gO2,gI1,gI1);
   }
   tmp_5136 += tmp_5137;
   result += (-0.5) * tmp_5136;
   std::complex<double> tmp_5138;
   std::complex<double> tmp_5139;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      tmp_5139 += A0(MSv(gI1))*CpUSdconjUSdconjSvSv(gO1,gO2,gI1,gI1);
   }
   tmp_5138 += tmp_5139;
   result += (-1) * tmp_5138;
   std::complex<double> tmp_5140;
   std::complex<double> tmp_5141;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      tmp_5141 += A0(Mhh(gI1))*CpUSdconjUSdhhhh(gO1,gO2,gI1,gI1);
   }
   tmp_5140 += tmp_5141;
   result += (-0.5) * tmp_5140;
   std::complex<double> tmp_5142;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_5143;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_5143 += (Conj(CpconjUSdFuChaPL(gO2,gI1,gI2))*
            CpconjUSdFuChaPL(gO1,gI1,gI2) + Conj(CpconjUSdFuChaPR(gO2,gI1,gI2))*
            CpconjUSdFuChaPR(gO1,gI1,gI2))*G0(p,MFu(gI1),MCha(gI2));
      }
      tmp_5142 += tmp_5143;
   }
   result += tmp_5142;
   std::complex<double> tmp_5144;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_5145;
      for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
         tmp_5145 += (Conj(CpconjUSdFdChiPL(gO2,gI1,gI2))*
            CpconjUSdFdChiPL(gO1,gI1,gI2) + Conj(CpconjUSdFdChiPR(gO2,gI1,gI2))*
            CpconjUSdFdChiPR(gO1,gI1,gI2))*G0(p,MFd(gI1),MChi(gI2));
      }
      tmp_5144 += tmp_5145;
   }
   result += tmp_5144;
   std::complex<double> tmp_5146;
   std::complex<double> tmp_5147;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_5148;
      std::complex<double> tmp_5149;
      for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
         tmp_5149 += B0(p,MFd(gI1),MChi(gI2))*(Conj(CpconjUSdFdChiPR(gO2,
            gI1,gI2))*CpconjUSdFdChiPL(gO1,gI1,gI2) + Conj(CpconjUSdFdChiPL(gO2,
            gI1,gI2))*CpconjUSdFdChiPR(gO1,gI1,gI2))*MChi(gI2);
      }
      tmp_5148 += tmp_5149;
      tmp_5147 += (MFd(gI1)) * tmp_5148;
   }
   tmp_5146 += tmp_5147;
   result += (-2) * tmp_5146;
   std::complex<double> tmp_5150;
   std::complex<double> tmp_5151;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_5152;
      std::complex<double> tmp_5153;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_5153 += B0(p,MFu(gI1),MCha(gI2))*(Conj(CpconjUSdFuChaPR(gO2,
            gI1,gI2))*CpconjUSdFuChaPL(gO1,gI1,gI2) + Conj(CpconjUSdFuChaPL(gO2,
            gI1,gI2))*CpconjUSdFuChaPR(gO1,gI1,gI2))*MCha(gI2);
      }
      tmp_5152 += tmp_5153;
      tmp_5151 += (MFu(gI1)) * tmp_5152;
   }
   tmp_5150 += tmp_5151;
   result += (-2) * tmp_5150;
   std::complex<double> tmp_5154;
   std::complex<double> tmp_5155;
   for (unsigned gI1 = 0; gI1 < 4; ++gI1) {
      tmp_5155 += A0(MSHI0(gI1))*CpUSdconjUSdconjSHI0SHI0(gO1,gO2,gI1,gI1);
   }
   tmp_5154 += tmp_5155;
   result += (-1) * tmp_5154;
   std::complex<double> tmp_5156;
   std::complex<double> tmp_5157;
   for (unsigned gI1 = 0; gI1 < 4; ++gI1) {
      tmp_5157 += A0(MSHIp(gI1))*CpUSdconjUSdconjSHIpSHIp(gO1,gO2,gI1,gI1);
   }
   tmp_5156 += tmp_5157;
   result += (-1) * tmp_5156;
   std::complex<double> tmp_5158;
   std::complex<double> tmp_5159;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_5159 += A0(MSd(gI1))*CpUSdconjUSdconjSdSd(gO1,gO2,gI1,gI1);
   }
   tmp_5158 += tmp_5159;
   result += (-1) * tmp_5158;
   std::complex<double> tmp_5160;
   std::complex<double> tmp_5161;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_5161 += A0(MSDX(gI1))*CpUSdconjUSdconjSDXSDX(gO1,gO2,gI1,gI1);
   }
   tmp_5160 += tmp_5161;
   result += (-1) * tmp_5160;
   std::complex<double> tmp_5162;
   std::complex<double> tmp_5163;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_5163 += A0(MSe(gI1))*CpUSdconjUSdconjSeSe(gO1,gO2,gI1,gI1);
   }
   tmp_5162 += tmp_5163;
   result += (-1) * tmp_5162;
   std::complex<double> tmp_5164;
   std::complex<double> tmp_5165;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_5165 += A0(MSu(gI1))*CpUSdconjUSdconjSuSu(gO1,gO2,gI1,gI1);
   }
   tmp_5164 += tmp_5165;
   result += (-1) * tmp_5164;
   std::complex<double> tmp_5166;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_5167;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_5167 += B0(p,MSu(gI1),MHpm(gI2))*Conj(CpconjUSdSuHpm(gO2,gI1
            ,gI2))*CpconjUSdSuHpm(gO1,gI1,gI2);
      }
      tmp_5166 += tmp_5167;
   }
   result += tmp_5166;
   std::complex<double> tmp_5168;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_5169;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_5169 += B0(p,MSd(gI1),MAh(gI2))*Conj(CpconjUSdSdAh(gO2,gI1,
            gI2))*CpconjUSdSdAh(gO1,gI1,gI2);
      }
      tmp_5168 += tmp_5169;
   }
   result += tmp_5168;
   std::complex<double> tmp_5170;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_5171;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_5171 += B0(p,MSd(gI1),Mhh(gI2))*Conj(CpconjUSdSdhh(gO2,gI1,
            gI2))*CpconjUSdSdhh(gO1,gI1,gI2);
      }
      tmp_5170 += tmp_5171;
   }
   result += tmp_5170;
   std::complex<double> tmp_5172;
   std::complex<double> tmp_5173;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_5173 += (Conj(CpconjUSdGluFdPL(gO2,0,gI2))*CpconjUSdGluFdPL(gO1,0,
         gI2) + Conj(CpconjUSdGluFdPR(gO2,0,gI2))*CpconjUSdGluFdPR(gO1,0,gI2))*G0(
         p,MGlu,MFd(gI2));
   }
   tmp_5172 += tmp_5173;
   result += (1.3333333333333333) * tmp_5172;
   std::complex<double> tmp_5174;
   std::complex<double> tmp_5175;
   for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
      tmp_5175 += Conj(CpconjUSdVGSd(gO2,gI2))*CpconjUSdVGSd(gO1,gI2)*F0(p,
         MSd(gI2),0);
   }
   tmp_5174 += tmp_5175;
   result += (1.3333333333333333) * tmp_5174;
   std::complex<double> tmp_5176;
   for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
      tmp_5176 += Conj(CpconjUSdVPSd(gO2,gI2))*CpconjUSdVPSd(gO1,gI2)*F0(p,
         MSd(gI2),0);
   }
   result += tmp_5176;
   std::complex<double> tmp_5177;
   for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
      tmp_5177 += Conj(CpconjUSdVZSd(gO2,gI2))*CpconjUSdVZSd(gO1,gI2)*F0(p,
         MSd(gI2),MVZ);
   }
   result += tmp_5177;
   std::complex<double> tmp_5178;
   for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
      tmp_5178 += Conj(CpconjUSdVZpSd(gO2,gI2))*CpconjUSdVZpSd(gO1,gI2)*F0(p
         ,MSd(gI2),MVZp);
   }
   result += tmp_5178;
   std::complex<double> tmp_5179;
   for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
      tmp_5179 += Conj(CpconjUSdVWmSu(gO2,gI2))*CpconjUSdVWmSu(gO1,gI2)*F0(p
         ,MSu(gI2),MVWm);
   }
   result += tmp_5179;
   std::complex<double> tmp_5180;
   std::complex<double> tmp_5181;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_5181 += B0(p,MGlu,MFd(gI2))*(Conj(CpconjUSdGluFdPR(gO2,0,gI2))*
         CpconjUSdGluFdPL(gO1,0,gI2) + Conj(CpconjUSdGluFdPL(gO2,0,gI2))*
         CpconjUSdGluFdPR(gO1,0,gI2))*MFd(gI2);
   }
   tmp_5180 += tmp_5181;
   result += (-2.6666666666666665*MGlu) * tmp_5180;

   return result * oneOver16PiSqr;

}

std::complex<double> CLASSNAME::self_energy_Sv(double p , unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   result += 4*A0(MVWm)*CpUSvconjUSvconjVWmVWm(gO1,gO2);
   result += 2*A0(MVZp)*CpUSvconjUSvVZpVZp(gO1,gO2);
   result += 2*A0(MVZ)*CpUSvconjUSvVZVZ(gO1,gO2);
   std::complex<double> tmp_5182;
   std::complex<double> tmp_5183;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      tmp_5183 += A0(MHpm(gI1))*CpUSvconjUSvconjHpmHpm(gO1,gO2,gI1,gI1);
   }
   tmp_5182 += tmp_5183;
   result += (-1) * tmp_5182;
   std::complex<double> tmp_5184;
   std::complex<double> tmp_5185;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      tmp_5185 += A0(MSHp0(gI1))*CpUSvconjUSvconjSHp0SHp0(gO1,gO2,gI1,gI1);
   }
   tmp_5184 += tmp_5185;
   result += (-1) * tmp_5184;
   std::complex<double> tmp_5186;
   std::complex<double> tmp_5187;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      tmp_5187 += A0(MSHpp(gI1))*CpUSvconjUSvconjSHppSHpp(gO1,gO2,gI1,gI1);
   }
   tmp_5186 += tmp_5187;
   result += (-1) * tmp_5186;
   std::complex<double> tmp_5188;
   std::complex<double> tmp_5189;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      tmp_5189 += A0(MSSI0(gI1))*CpUSvconjUSvconjSSI0SSI0(gO1,gO2,gI1,gI1);
   }
   tmp_5188 += tmp_5189;
   result += (-1) * tmp_5188;
   std::complex<double> tmp_5190;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_5191;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_5191 += (Conj(CpconjUSvbarChaFePL(gO2,gI1,gI2))*
            CpconjUSvbarChaFePL(gO1,gI1,gI2) + Conj(CpconjUSvbarChaFePR(gO2,gI1,
            gI2))*CpconjUSvbarChaFePR(gO1,gI1,gI2))*G0(p,MCha(gI1),MFe(gI2));
      }
      tmp_5190 += tmp_5191;
   }
   result += tmp_5190;
   std::complex<double> tmp_5192;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_5193;
      for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
         tmp_5193 += B0(p,MHpm(gI1),MSe(gI2))*Conj(CpconjUSvconjHpmSe(gO2
            ,gI1,gI2))*CpconjUSvconjHpmSe(gO1,gI1,gI2);
      }
      tmp_5192 += tmp_5193;
   }
   result += tmp_5192;
   std::complex<double> tmp_5194;
   std::complex<double> tmp_5195;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_5196;
      std::complex<double> tmp_5197;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_5197 += B0(p,MCha(gI1),MFe(gI2))*(Conj(CpconjUSvbarChaFePR(
            gO2,gI1,gI2))*CpconjUSvbarChaFePL(gO1,gI1,gI2) + Conj(
            CpconjUSvbarChaFePL(gO2,gI1,gI2))*CpconjUSvbarChaFePR(gO1,gI1,gI2))*
            MFe(gI2);
      }
      tmp_5196 += tmp_5197;
      tmp_5195 += (MCha(gI1)) * tmp_5196;
   }
   tmp_5194 += tmp_5195;
   result += (-2) * tmp_5194;
   std::complex<double> tmp_5198;
   std::complex<double> tmp_5199;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      tmp_5199 += A0(MAh(gI1))*CpUSvconjUSvAhAh(gO1,gO2,gI1,gI1);
   }
   tmp_5198 += tmp_5199;
   result += (-0.5) * tmp_5198;
   std::complex<double> tmp_5200;
   std::complex<double> tmp_5201;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      tmp_5201 += A0(MSv(gI1))*CpUSvconjUSvconjSvSv(gO1,gO2,gI1,gI1);
   }
   tmp_5200 += tmp_5201;
   result += (-1) * tmp_5200;
   std::complex<double> tmp_5202;
   std::complex<double> tmp_5203;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      tmp_5203 += A0(Mhh(gI1))*CpUSvconjUSvhhhh(gO1,gO2,gI1,gI1);
   }
   tmp_5202 += tmp_5203;
   result += (-0.5) * tmp_5202;
   std::complex<double> tmp_5204;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_5205;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_5205 += B0(p,MSv(gI1),Mhh(gI2))*Conj(CpconjUSvSvhh(gO2,gI1,
            gI2))*CpconjUSvSvhh(gO1,gI1,gI2);
      }
      tmp_5204 += tmp_5205;
   }
   result += tmp_5204;
   std::complex<double> tmp_5206;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_5207;
      for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
         tmp_5207 += (Conj(CpconjUSvFvChiPL(gO2,gI1,gI2))*
            CpconjUSvFvChiPL(gO1,gI1,gI2) + Conj(CpconjUSvFvChiPR(gO2,gI1,gI2))*
            CpconjUSvFvChiPR(gO1,gI1,gI2))*G0(p,MFv(gI1),MChi(gI2));
      }
      tmp_5206 += tmp_5207;
   }
   result += tmp_5206;
   std::complex<double> tmp_5208;
   std::complex<double> tmp_5209;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_5210;
      std::complex<double> tmp_5211;
      for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
         tmp_5211 += B0(p,MFv(gI1),MChi(gI2))*(Conj(CpconjUSvFvChiPR(gO2,
            gI1,gI2))*CpconjUSvFvChiPL(gO1,gI1,gI2) + Conj(CpconjUSvFvChiPL(gO2,
            gI1,gI2))*CpconjUSvFvChiPR(gO1,gI1,gI2))*MChi(gI2);
      }
      tmp_5210 += tmp_5211;
      tmp_5209 += (MFv(gI1)) * tmp_5210;
   }
   tmp_5208 += tmp_5209;
   result += (-2) * tmp_5208;
   std::complex<double> tmp_5212;
   std::complex<double> tmp_5213;
   for (unsigned gI1 = 0; gI1 < 4; ++gI1) {
      tmp_5213 += A0(MSHI0(gI1))*CpUSvconjUSvconjSHI0SHI0(gO1,gO2,gI1,gI1);
   }
   tmp_5212 += tmp_5213;
   result += (-1) * tmp_5212;
   std::complex<double> tmp_5214;
   std::complex<double> tmp_5215;
   for (unsigned gI1 = 0; gI1 < 4; ++gI1) {
      tmp_5215 += A0(MSHIp(gI1))*CpUSvconjUSvconjSHIpSHIp(gO1,gO2,gI1,gI1);
   }
   tmp_5214 += tmp_5215;
   result += (-1) * tmp_5214;
   std::complex<double> tmp_5216;
   std::complex<double> tmp_5217;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_5217 += A0(MSd(gI1))*CpUSvconjUSvconjSdSd(gO1,gO2,gI1,gI1);
   }
   tmp_5216 += tmp_5217;
   result += (-3) * tmp_5216;
   std::complex<double> tmp_5218;
   std::complex<double> tmp_5219;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_5219 += A0(MSDX(gI1))*CpUSvconjUSvconjSDXSDX(gO1,gO2,gI1,gI1);
   }
   tmp_5218 += tmp_5219;
   result += (-3) * tmp_5218;
   std::complex<double> tmp_5220;
   std::complex<double> tmp_5221;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_5221 += A0(MSe(gI1))*CpUSvconjUSvconjSeSe(gO1,gO2,gI1,gI1);
   }
   tmp_5220 += tmp_5221;
   result += (-1) * tmp_5220;
   std::complex<double> tmp_5222;
   std::complex<double> tmp_5223;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_5223 += A0(MSu(gI1))*CpUSvconjUSvconjSuSu(gO1,gO2,gI1,gI1);
   }
   tmp_5222 += tmp_5223;
   result += (-3) * tmp_5222;
   std::complex<double> tmp_5224;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_5224 += Conj(CpconjUSvVZSv(gO2,gI2))*CpconjUSvVZSv(gO1,gI2)*F0(p,
         MSv(gI2),MVZ);
   }
   result += tmp_5224;
   std::complex<double> tmp_5225;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_5225 += Conj(CpconjUSvVZpSv(gO2,gI2))*CpconjUSvVZpSv(gO1,gI2)*F0(p
         ,MSv(gI2),MVZp);
   }
   result += tmp_5225;
   std::complex<double> tmp_5226;
   for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
      tmp_5226 += Conj(CpconjUSvconjVWmSe(gO2,gI2))*CpconjUSvconjVWmSe(gO1,
         gI2)*F0(p,MSe(gI2),MVWm);
   }
   result += tmp_5226;

   return result * oneOver16PiSqr;

}

std::complex<double> CLASSNAME::self_energy_Su(double p , unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   result += 4*A0(MVWm)*CpUSuconjUSuconjVWmVWm(gO1,gO2);
   result += 2*A0(MVZp)*CpUSuconjUSuVZpVZp(gO1,gO2);
   result += 2*A0(MVZ)*CpUSuconjUSuVZVZ(gO1,gO2);
   std::complex<double> tmp_5227;
   std::complex<double> tmp_5228;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      tmp_5228 += A0(MHpm(gI1))*CpUSuconjUSuconjHpmHpm(gO1,gO2,gI1,gI1);
   }
   tmp_5227 += tmp_5228;
   result += (-1) * tmp_5227;
   std::complex<double> tmp_5229;
   std::complex<double> tmp_5230;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      tmp_5230 += A0(MSHp0(gI1))*CpUSuconjUSuconjSHp0SHp0(gO1,gO2,gI1,gI1);
   }
   tmp_5229 += tmp_5230;
   result += (-1) * tmp_5229;
   std::complex<double> tmp_5231;
   std::complex<double> tmp_5232;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      tmp_5232 += A0(MSHpp(gI1))*CpUSuconjUSuconjSHppSHpp(gO1,gO2,gI1,gI1);
   }
   tmp_5231 += tmp_5232;
   result += (-1) * tmp_5231;
   std::complex<double> tmp_5233;
   std::complex<double> tmp_5234;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      tmp_5234 += A0(MSSI0(gI1))*CpUSuconjUSuconjSSI0SSI0(gO1,gO2,gI1,gI1);
   }
   tmp_5233 += tmp_5234;
   result += (-1) * tmp_5233;
   std::complex<double> tmp_5235;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_5236;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_5236 += (Conj(CpconjUSubarChaFdPL(gO2,gI1,gI2))*
            CpconjUSubarChaFdPL(gO1,gI1,gI2) + Conj(CpconjUSubarChaFdPR(gO2,gI1,
            gI2))*CpconjUSubarChaFdPR(gO1,gI1,gI2))*G0(p,MCha(gI1),MFd(gI2));
      }
      tmp_5235 += tmp_5236;
   }
   result += tmp_5235;
   std::complex<double> tmp_5237;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_5238;
      for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
         tmp_5238 += B0(p,MHpm(gI1),MSd(gI2))*Conj(CpconjUSuconjHpmSd(gO2
            ,gI1,gI2))*CpconjUSuconjHpmSd(gO1,gI1,gI2);
      }
      tmp_5237 += tmp_5238;
   }
   result += tmp_5237;
   std::complex<double> tmp_5239;
   std::complex<double> tmp_5240;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_5241;
      std::complex<double> tmp_5242;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_5242 += B0(p,MCha(gI1),MFd(gI2))*(Conj(CpconjUSubarChaFdPR(
            gO2,gI1,gI2))*CpconjUSubarChaFdPL(gO1,gI1,gI2) + Conj(
            CpconjUSubarChaFdPL(gO2,gI1,gI2))*CpconjUSubarChaFdPR(gO1,gI1,gI2))*
            MFd(gI2);
      }
      tmp_5241 += tmp_5242;
      tmp_5240 += (MCha(gI1)) * tmp_5241;
   }
   tmp_5239 += tmp_5240;
   result += (-2) * tmp_5239;
   std::complex<double> tmp_5243;
   std::complex<double> tmp_5244;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      tmp_5244 += A0(MAh(gI1))*CpUSuconjUSuAhAh(gO1,gO2,gI1,gI1);
   }
   tmp_5243 += tmp_5244;
   result += (-0.5) * tmp_5243;
   std::complex<double> tmp_5245;
   std::complex<double> tmp_5246;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      tmp_5246 += A0(MSv(gI1))*CpUSuconjUSuconjSvSv(gO1,gO2,gI1,gI1);
   }
   tmp_5245 += tmp_5246;
   result += (-1) * tmp_5245;
   std::complex<double> tmp_5247;
   std::complex<double> tmp_5248;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      tmp_5248 += A0(Mhh(gI1))*CpUSuconjUSuhhhh(gO1,gO2,gI1,gI1);
   }
   tmp_5247 += tmp_5248;
   result += (-0.5) * tmp_5247;
   std::complex<double> tmp_5249;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_5250;
      for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
         tmp_5250 += (Conj(CpconjUSuFuChiPL(gO2,gI1,gI2))*
            CpconjUSuFuChiPL(gO1,gI1,gI2) + Conj(CpconjUSuFuChiPR(gO2,gI1,gI2))*
            CpconjUSuFuChiPR(gO1,gI1,gI2))*G0(p,MFu(gI1),MChi(gI2));
      }
      tmp_5249 += tmp_5250;
   }
   result += tmp_5249;
   std::complex<double> tmp_5251;
   std::complex<double> tmp_5252;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_5253;
      std::complex<double> tmp_5254;
      for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
         tmp_5254 += B0(p,MFu(gI1),MChi(gI2))*(Conj(CpconjUSuFuChiPR(gO2,
            gI1,gI2))*CpconjUSuFuChiPL(gO1,gI1,gI2) + Conj(CpconjUSuFuChiPL(gO2,
            gI1,gI2))*CpconjUSuFuChiPR(gO1,gI1,gI2))*MChi(gI2);
      }
      tmp_5253 += tmp_5254;
      tmp_5252 += (MFu(gI1)) * tmp_5253;
   }
   tmp_5251 += tmp_5252;
   result += (-2) * tmp_5251;
   std::complex<double> tmp_5255;
   std::complex<double> tmp_5256;
   for (unsigned gI1 = 0; gI1 < 4; ++gI1) {
      tmp_5256 += A0(MSHI0(gI1))*CpUSuconjUSuconjSHI0SHI0(gO1,gO2,gI1,gI1);
   }
   tmp_5255 += tmp_5256;
   result += (-1) * tmp_5255;
   std::complex<double> tmp_5257;
   std::complex<double> tmp_5258;
   for (unsigned gI1 = 0; gI1 < 4; ++gI1) {
      tmp_5258 += A0(MSHIp(gI1))*CpUSuconjUSuconjSHIpSHIp(gO1,gO2,gI1,gI1);
   }
   tmp_5257 += tmp_5258;
   result += (-1) * tmp_5257;
   std::complex<double> tmp_5259;
   std::complex<double> tmp_5260;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_5260 += A0(MSd(gI1))*CpUSuconjUSuconjSdSd(gO1,gO2,gI1,gI1);
   }
   tmp_5259 += tmp_5260;
   result += (-1) * tmp_5259;
   std::complex<double> tmp_5261;
   std::complex<double> tmp_5262;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_5262 += A0(MSDX(gI1))*CpUSuconjUSuconjSDXSDX(gO1,gO2,gI1,gI1);
   }
   tmp_5261 += tmp_5262;
   result += (-1) * tmp_5261;
   std::complex<double> tmp_5263;
   std::complex<double> tmp_5264;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_5264 += A0(MSe(gI1))*CpUSuconjUSuconjSeSe(gO1,gO2,gI1,gI1);
   }
   tmp_5263 += tmp_5264;
   result += (-1) * tmp_5263;
   std::complex<double> tmp_5265;
   std::complex<double> tmp_5266;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_5266 += A0(MSu(gI1))*CpUSuconjUSuconjSuSu(gO1,gO2,gI1,gI1);
   }
   tmp_5265 += tmp_5266;
   result += (-1) * tmp_5265;
   std::complex<double> tmp_5267;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_5268;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_5268 += B0(p,MSu(gI1),MAh(gI2))*Conj(CpconjUSuSuAh(gO2,gI1,
            gI2))*CpconjUSuSuAh(gO1,gI1,gI2);
      }
      tmp_5267 += tmp_5268;
   }
   result += tmp_5267;
   std::complex<double> tmp_5269;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_5270;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_5270 += B0(p,MSu(gI1),Mhh(gI2))*Conj(CpconjUSuSuhh(gO2,gI1,
            gI2))*CpconjUSuSuhh(gO1,gI1,gI2);
      }
      tmp_5269 += tmp_5270;
   }
   result += tmp_5269;
   std::complex<double> tmp_5271;
   std::complex<double> tmp_5272;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_5272 += (Conj(CpconjUSuGluFuPL(gO2,0,gI2))*CpconjUSuGluFuPL(gO1,0,
         gI2) + Conj(CpconjUSuGluFuPR(gO2,0,gI2))*CpconjUSuGluFuPR(gO1,0,gI2))*G0(
         p,MGlu,MFu(gI2));
   }
   tmp_5271 += tmp_5272;
   result += (1.3333333333333333) * tmp_5271;
   std::complex<double> tmp_5273;
   for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
      tmp_5273 += Conj(CpconjUSuconjVWmSd(gO2,gI2))*CpconjUSuconjVWmSd(gO1,
         gI2)*F0(p,MSd(gI2),MVWm);
   }
   result += tmp_5273;
   std::complex<double> tmp_5274;
   std::complex<double> tmp_5275;
   for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
      tmp_5275 += Conj(CpconjUSuVGSu(gO2,gI2))*CpconjUSuVGSu(gO1,gI2)*F0(p,
         MSu(gI2),0);
   }
   tmp_5274 += tmp_5275;
   result += (1.3333333333333333) * tmp_5274;
   std::complex<double> tmp_5276;
   for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
      tmp_5276 += Conj(CpconjUSuVPSu(gO2,gI2))*CpconjUSuVPSu(gO1,gI2)*F0(p,
         MSu(gI2),0);
   }
   result += tmp_5276;
   std::complex<double> tmp_5277;
   for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
      tmp_5277 += Conj(CpconjUSuVZSu(gO2,gI2))*CpconjUSuVZSu(gO1,gI2)*F0(p,
         MSu(gI2),MVZ);
   }
   result += tmp_5277;
   std::complex<double> tmp_5278;
   for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
      tmp_5278 += Conj(CpconjUSuVZpSu(gO2,gI2))*CpconjUSuVZpSu(gO1,gI2)*F0(p
         ,MSu(gI2),MVZp);
   }
   result += tmp_5278;
   std::complex<double> tmp_5279;
   std::complex<double> tmp_5280;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_5280 += B0(p,MGlu,MFu(gI2))*(Conj(CpconjUSuGluFuPR(gO2,0,gI2))*
         CpconjUSuGluFuPL(gO1,0,gI2) + Conj(CpconjUSuGluFuPL(gO2,0,gI2))*
         CpconjUSuGluFuPR(gO1,0,gI2))*MFu(gI2);
   }
   tmp_5279 += tmp_5280;
   result += (-2.6666666666666665*MGlu) * tmp_5279;

   return result * oneOver16PiSqr;

}

std::complex<double> CLASSNAME::self_energy_Se(double p , unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   result += 4*A0(MVWm)*CpUSeconjUSeconjVWmVWm(gO1,gO2);
   result += 2*A0(MVZp)*CpUSeconjUSeVZpVZp(gO1,gO2);
   result += 2*A0(MVZ)*CpUSeconjUSeVZVZ(gO1,gO2);
   std::complex<double> tmp_5281;
   std::complex<double> tmp_5282;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      tmp_5282 += A0(MHpm(gI1))*CpUSeconjUSeconjHpmHpm(gO1,gO2,gI1,gI1);
   }
   tmp_5281 += tmp_5282;
   result += (-1) * tmp_5281;
   std::complex<double> tmp_5283;
   std::complex<double> tmp_5284;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      tmp_5284 += A0(MSHp0(gI1))*CpUSeconjUSeconjSHp0SHp0(gO1,gO2,gI1,gI1);
   }
   tmp_5283 += tmp_5284;
   result += (-1) * tmp_5283;
   std::complex<double> tmp_5285;
   std::complex<double> tmp_5286;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      tmp_5286 += A0(MSHpp(gI1))*CpUSeconjUSeconjSHppSHpp(gO1,gO2,gI1,gI1);
   }
   tmp_5285 += tmp_5286;
   result += (-1) * tmp_5285;
   std::complex<double> tmp_5287;
   std::complex<double> tmp_5288;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      tmp_5288 += A0(MSSI0(gI1))*CpUSeconjUSeconjSSI0SSI0(gO1,gO2,gI1,gI1);
   }
   tmp_5287 += tmp_5288;
   result += (-1) * tmp_5287;
   std::complex<double> tmp_5289;
   std::complex<double> tmp_5290;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      tmp_5290 += A0(MAh(gI1))*CpUSeconjUSeAhAh(gO1,gO2,gI1,gI1);
   }
   tmp_5289 += tmp_5290;
   result += (-0.5) * tmp_5289;
   std::complex<double> tmp_5291;
   std::complex<double> tmp_5292;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      tmp_5292 += A0(MSv(gI1))*CpUSeconjUSeconjSvSv(gO1,gO2,gI1,gI1);
   }
   tmp_5291 += tmp_5292;
   result += (-1) * tmp_5291;
   std::complex<double> tmp_5293;
   std::complex<double> tmp_5294;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      tmp_5294 += A0(Mhh(gI1))*CpUSeconjUSehhhh(gO1,gO2,gI1,gI1);
   }
   tmp_5293 += tmp_5294;
   result += (-0.5) * tmp_5293;
   std::complex<double> tmp_5295;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_5296;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_5296 += B0(p,MSv(gI1),MHpm(gI2))*Conj(CpconjUSeSvHpm(gO2,gI1
            ,gI2))*CpconjUSeSvHpm(gO1,gI1,gI2);
      }
      tmp_5295 += tmp_5296;
   }
   result += tmp_5295;
   std::complex<double> tmp_5297;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_5298;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_5298 += (Conj(CpconjUSeFvChaPL(gO2,gI1,gI2))*
            CpconjUSeFvChaPL(gO1,gI1,gI2) + Conj(CpconjUSeFvChaPR(gO2,gI1,gI2))*
            CpconjUSeFvChaPR(gO1,gI1,gI2))*G0(p,MFv(gI1),MCha(gI2));
      }
      tmp_5297 += tmp_5298;
   }
   result += tmp_5297;
   std::complex<double> tmp_5299;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_5300;
      for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
         tmp_5300 += (Conj(CpconjUSeFeChiPL(gO2,gI1,gI2))*
            CpconjUSeFeChiPL(gO1,gI1,gI2) + Conj(CpconjUSeFeChiPR(gO2,gI1,gI2))*
            CpconjUSeFeChiPR(gO1,gI1,gI2))*G0(p,MFe(gI1),MChi(gI2));
      }
      tmp_5299 += tmp_5300;
   }
   result += tmp_5299;
   std::complex<double> tmp_5301;
   std::complex<double> tmp_5302;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_5303;
      std::complex<double> tmp_5304;
      for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
         tmp_5304 += B0(p,MFe(gI1),MChi(gI2))*(Conj(CpconjUSeFeChiPR(gO2,
            gI1,gI2))*CpconjUSeFeChiPL(gO1,gI1,gI2) + Conj(CpconjUSeFeChiPL(gO2,
            gI1,gI2))*CpconjUSeFeChiPR(gO1,gI1,gI2))*MChi(gI2);
      }
      tmp_5303 += tmp_5304;
      tmp_5302 += (MFe(gI1)) * tmp_5303;
   }
   tmp_5301 += tmp_5302;
   result += (-2) * tmp_5301;
   std::complex<double> tmp_5305;
   std::complex<double> tmp_5306;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_5307;
      std::complex<double> tmp_5308;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_5308 += B0(p,MFv(gI1),MCha(gI2))*(Conj(CpconjUSeFvChaPR(gO2,
            gI1,gI2))*CpconjUSeFvChaPL(gO1,gI1,gI2) + Conj(CpconjUSeFvChaPL(gO2,
            gI1,gI2))*CpconjUSeFvChaPR(gO1,gI1,gI2))*MCha(gI2);
      }
      tmp_5307 += tmp_5308;
      tmp_5306 += (MFv(gI1)) * tmp_5307;
   }
   tmp_5305 += tmp_5306;
   result += (-2) * tmp_5305;
   std::complex<double> tmp_5309;
   std::complex<double> tmp_5310;
   for (unsigned gI1 = 0; gI1 < 4; ++gI1) {
      tmp_5310 += A0(MSHI0(gI1))*CpUSeconjUSeconjSHI0SHI0(gO1,gO2,gI1,gI1);
   }
   tmp_5309 += tmp_5310;
   result += (-1) * tmp_5309;
   std::complex<double> tmp_5311;
   std::complex<double> tmp_5312;
   for (unsigned gI1 = 0; gI1 < 4; ++gI1) {
      tmp_5312 += A0(MSHIp(gI1))*CpUSeconjUSeconjSHIpSHIp(gO1,gO2,gI1,gI1);
   }
   tmp_5311 += tmp_5312;
   result += (-1) * tmp_5311;
   std::complex<double> tmp_5313;
   std::complex<double> tmp_5314;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_5314 += A0(MSd(gI1))*CpUSeconjUSeconjSdSd(gO1,gO2,gI1,gI1);
   }
   tmp_5313 += tmp_5314;
   result += (-3) * tmp_5313;
   std::complex<double> tmp_5315;
   std::complex<double> tmp_5316;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_5316 += A0(MSDX(gI1))*CpUSeconjUSeconjSDXSDX(gO1,gO2,gI1,gI1);
   }
   tmp_5315 += tmp_5316;
   result += (-3) * tmp_5315;
   std::complex<double> tmp_5317;
   std::complex<double> tmp_5318;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_5318 += A0(MSe(gI1))*CpUSeconjUSeconjSeSe(gO1,gO2,gI1,gI1);
   }
   tmp_5317 += tmp_5318;
   result += (-1) * tmp_5317;
   std::complex<double> tmp_5319;
   std::complex<double> tmp_5320;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_5320 += A0(MSu(gI1))*CpUSeconjUSeconjSuSu(gO1,gO2,gI1,gI1);
   }
   tmp_5319 += tmp_5320;
   result += (-3) * tmp_5319;
   std::complex<double> tmp_5321;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_5322;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_5322 += B0(p,MSe(gI1),MAh(gI2))*Conj(CpconjUSeSeAh(gO2,gI1,
            gI2))*CpconjUSeSeAh(gO1,gI1,gI2);
      }
      tmp_5321 += tmp_5322;
   }
   result += tmp_5321;
   std::complex<double> tmp_5323;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_5324;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_5324 += B0(p,MSe(gI1),Mhh(gI2))*Conj(CpconjUSeSehh(gO2,gI1,
            gI2))*CpconjUSeSehh(gO1,gI1,gI2);
      }
      tmp_5323 += tmp_5324;
   }
   result += tmp_5323;
   std::complex<double> tmp_5325;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_5325 += Conj(CpconjUSeVWmSv(gO2,gI2))*CpconjUSeVWmSv(gO1,gI2)*F0(p
         ,MSv(gI2),MVWm);
   }
   result += tmp_5325;
   std::complex<double> tmp_5326;
   for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
      tmp_5326 += Conj(CpconjUSeVPSe(gO2,gI2))*CpconjUSeVPSe(gO1,gI2)*F0(p,
         MSe(gI2),0);
   }
   result += tmp_5326;
   std::complex<double> tmp_5327;
   for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
      tmp_5327 += Conj(CpconjUSeVZSe(gO2,gI2))*CpconjUSeVZSe(gO1,gI2)*F0(p,
         MSe(gI2),MVZ);
   }
   result += tmp_5327;
   std::complex<double> tmp_5328;
   for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
      tmp_5328 += Conj(CpconjUSeVZpSe(gO2,gI2))*CpconjUSeVZpSe(gO1,gI2)*F0(p
         ,MSe(gI2),MVZp);
   }
   result += tmp_5328;

   return result * oneOver16PiSqr;

}

std::complex<double> CLASSNAME::self_energy_SDX(double p , unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   result += 2*A0(MVZp)*CpUSDXconjUSDXVZpVZp(gO1,gO2);
   result += 2*A0(MVZ)*CpUSDXconjUSDXVZVZ(gO1,gO2);
   std::complex<double> tmp_5329;
   std::complex<double> tmp_5330;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      tmp_5330 += A0(MHpm(gI1))*CpUSDXconjUSDXconjHpmHpm(gO1,gO2,gI1,gI1);
   }
   tmp_5329 += tmp_5330;
   result += (-1) * tmp_5329;
   std::complex<double> tmp_5331;
   std::complex<double> tmp_5332;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      tmp_5332 += A0(MSHp0(gI1))*CpUSDXconjUSDXconjSHp0SHp0(gO1,gO2,gI1,gI1)
         ;
   }
   tmp_5331 += tmp_5332;
   result += (-1) * tmp_5331;
   std::complex<double> tmp_5333;
   std::complex<double> tmp_5334;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      tmp_5334 += A0(MSHpp(gI1))*CpUSDXconjUSDXconjSHppSHpp(gO1,gO2,gI1,gI1)
         ;
   }
   tmp_5333 += tmp_5334;
   result += (-1) * tmp_5333;
   std::complex<double> tmp_5335;
   std::complex<double> tmp_5336;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      tmp_5336 += A0(MSSI0(gI1))*CpUSDXconjUSDXconjSSI0SSI0(gO1,gO2,gI1,gI1)
         ;
   }
   tmp_5335 += tmp_5336;
   result += (-1) * tmp_5335;
   std::complex<double> tmp_5337;
   std::complex<double> tmp_5338;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      tmp_5338 += A0(MAh(gI1))*CpUSDXconjUSDXAhAh(gO1,gO2,gI1,gI1);
   }
   tmp_5337 += tmp_5338;
   result += (-0.5) * tmp_5337;
   std::complex<double> tmp_5339;
   std::complex<double> tmp_5340;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      tmp_5340 += A0(MSv(gI1))*CpUSDXconjUSDXconjSvSv(gO1,gO2,gI1,gI1);
   }
   tmp_5339 += tmp_5340;
   result += (-1) * tmp_5339;
   std::complex<double> tmp_5341;
   std::complex<double> tmp_5342;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      tmp_5342 += A0(Mhh(gI1))*CpUSDXconjUSDXhhhh(gO1,gO2,gI1,gI1);
   }
   tmp_5341 += tmp_5342;
   result += (-0.5) * tmp_5341;
   std::complex<double> tmp_5343;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_5344;
      for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
         tmp_5344 += (Conj(CpconjUSDXFDXChiPL(gO2,gI1,gI2))*
            CpconjUSDXFDXChiPL(gO1,gI1,gI2) + Conj(CpconjUSDXFDXChiPR(gO2,gI1,gI2)
            )*CpconjUSDXFDXChiPR(gO1,gI1,gI2))*G0(p,MFDX(gI1),MChi(gI2));
      }
      tmp_5343 += tmp_5344;
   }
   result += tmp_5343;
   std::complex<double> tmp_5345;
   std::complex<double> tmp_5346;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_5347;
      std::complex<double> tmp_5348;
      for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
         tmp_5348 += B0(p,MFDX(gI1),MChi(gI2))*(Conj(CpconjUSDXFDXChiPR(
            gO2,gI1,gI2))*CpconjUSDXFDXChiPL(gO1,gI1,gI2) + Conj(
            CpconjUSDXFDXChiPL(gO2,gI1,gI2))*CpconjUSDXFDXChiPR(gO1,gI1,gI2))*MChi
            (gI2);
      }
      tmp_5347 += tmp_5348;
      tmp_5346 += (MFDX(gI1)) * tmp_5347;
   }
   tmp_5345 += tmp_5346;
   result += (-2) * tmp_5345;
   std::complex<double> tmp_5349;
   std::complex<double> tmp_5350;
   for (unsigned gI1 = 0; gI1 < 4; ++gI1) {
      tmp_5350 += A0(MSHI0(gI1))*CpUSDXconjUSDXconjSHI0SHI0(gO1,gO2,gI1,gI1)
         ;
   }
   tmp_5349 += tmp_5350;
   result += (-1) * tmp_5349;
   std::complex<double> tmp_5351;
   std::complex<double> tmp_5352;
   for (unsigned gI1 = 0; gI1 < 4; ++gI1) {
      tmp_5352 += A0(MSHIp(gI1))*CpUSDXconjUSDXconjSHIpSHIp(gO1,gO2,gI1,gI1)
         ;
   }
   tmp_5351 += tmp_5352;
   result += (-1) * tmp_5351;
   std::complex<double> tmp_5353;
   std::complex<double> tmp_5354;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_5354 += A0(MSd(gI1))*CpUSDXconjUSDXconjSdSd(gO1,gO2,gI1,gI1);
   }
   tmp_5353 += tmp_5354;
   result += (-1) * tmp_5353;
   std::complex<double> tmp_5355;
   std::complex<double> tmp_5356;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_5356 += A0(MSDX(gI1))*CpUSDXconjUSDXconjSDXSDX(gO1,gO2,gI1,gI1);
   }
   tmp_5355 += tmp_5356;
   result += (-1) * tmp_5355;
   std::complex<double> tmp_5357;
   std::complex<double> tmp_5358;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_5358 += A0(MSe(gI1))*CpUSDXconjUSDXconjSeSe(gO1,gO2,gI1,gI1);
   }
   tmp_5357 += tmp_5358;
   result += (-1) * tmp_5357;
   std::complex<double> tmp_5359;
   std::complex<double> tmp_5360;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_5360 += A0(MSu(gI1))*CpUSDXconjUSDXconjSuSu(gO1,gO2,gI1,gI1);
   }
   tmp_5359 += tmp_5360;
   result += (-1) * tmp_5359;
   std::complex<double> tmp_5361;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_5362;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_5362 += B0(p,MSDX(gI1),MAh(gI2))*Conj(CpconjUSDXSDXAh(gO2,
            gI1,gI2))*CpconjUSDXSDXAh(gO1,gI1,gI2);
      }
      tmp_5361 += tmp_5362;
   }
   result += tmp_5361;
   std::complex<double> tmp_5363;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_5364;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_5364 += B0(p,MSDX(gI1),Mhh(gI2))*Conj(CpconjUSDXSDXhh(gO2,
            gI1,gI2))*CpconjUSDXSDXhh(gO1,gI1,gI2);
      }
      tmp_5363 += tmp_5364;
   }
   result += tmp_5363;
   std::complex<double> tmp_5365;
   std::complex<double> tmp_5366;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_5366 += (Conj(CpconjUSDXGluFDXPL(gO2,0,gI2))*CpconjUSDXGluFDXPL(
         gO1,0,gI2) + Conj(CpconjUSDXGluFDXPR(gO2,0,gI2))*CpconjUSDXGluFDXPR(gO1,0
         ,gI2))*G0(p,MGlu,MFDX(gI2));
   }
   tmp_5365 += tmp_5366;
   result += (1.3333333333333333) * tmp_5365;
   std::complex<double> tmp_5367;
   std::complex<double> tmp_5368;
   for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
      tmp_5368 += Conj(CpconjUSDXVGSDX(gO2,gI2))*CpconjUSDXVGSDX(gO1,gI2)*F0
         (p,MSDX(gI2),0);
   }
   tmp_5367 += tmp_5368;
   result += (1.3333333333333333) * tmp_5367;
   std::complex<double> tmp_5369;
   for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
      tmp_5369 += Conj(CpconjUSDXVPSDX(gO2,gI2))*CpconjUSDXVPSDX(gO1,gI2)*F0
         (p,MSDX(gI2),0);
   }
   result += tmp_5369;
   std::complex<double> tmp_5370;
   for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
      tmp_5370 += Conj(CpconjUSDXVZSDX(gO2,gI2))*CpconjUSDXVZSDX(gO1,gI2)*F0
         (p,MSDX(gI2),MVZ);
   }
   result += tmp_5370;
   std::complex<double> tmp_5371;
   for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
      tmp_5371 += Conj(CpconjUSDXVZpSDX(gO2,gI2))*CpconjUSDXVZpSDX(gO1,gI2)*
         F0(p,MSDX(gI2),MVZp);
   }
   result += tmp_5371;
   std::complex<double> tmp_5372;
   std::complex<double> tmp_5373;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_5373 += B0(p,MGlu,MFDX(gI2))*(Conj(CpconjUSDXGluFDXPR(gO2,0,gI2))*
         CpconjUSDXGluFDXPL(gO1,0,gI2) + Conj(CpconjUSDXGluFDXPL(gO2,0,gI2))*
         CpconjUSDXGluFDXPR(gO1,0,gI2))*MFDX(gI2);
   }
   tmp_5372 += tmp_5373;
   result += (-2.6666666666666665*MGlu) * tmp_5372;

   return result * oneOver16PiSqr;

}

std::complex<double> CLASSNAME::self_energy_hh(double p , unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   result += -(B0(p,MVWm,MVWm)*CpUhhbargWmCgWmC(gO1)*CpUhhbargWmCgWmC(gO2));
   result += -(B0(p,MVWm,MVWm)*CpUhhbargWmgWm(gO1)*CpUhhbargWmgWm(gO2));
   result += -(B0(p,MVZ,MVZ)*CpUhhbargZgZ(gO1)*CpUhhbargZgZ(gO2));
   result += -2*B0(p,MVZ,MVZp)*CpUhhbargZpgZ(gO1)*CpUhhbargZpgZ(gO2);
   result += -(B0(p,MVZp,MVZp)*CpUhhbargZpgZp(gO1)*CpUhhbargZpgZp(gO2));
   result += 4*B0(p,MVWm,MVWm)*Conj(CpUhhconjVWmVWm(gO2))*CpUhhconjVWmVWm(gO1);
   result += 4*A0(MVWm)*CpUhhUhhconjVWmVWm(gO1,gO2);
   result += 2*A0(MVZp)*CpUhhUhhVZpVZp(gO1,gO2);
   result += 2*A0(MVZ)*CpUhhUhhVZVZ(gO1,gO2);
   result += 4*B0(p,MVZ,MVZp)*Conj(CpUhhVZpVZ(gO2))*CpUhhVZpVZ(gO1);
   result += 2*B0(p,MVZp,MVZp)*Conj(CpUhhVZpVZp(gO2))*CpUhhVZpVZp(gO1);
   result += 2*B0(p,MVZ,MVZ)*Conj(CpUhhVZVZ(gO2))*CpUhhVZVZ(gO1);
   std::complex<double> tmp_5374;
   std::complex<double> tmp_5375;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      tmp_5375 += A0(MHpm(gI1))*CpUhhUhhconjHpmHpm(gO1,gO2,gI1,gI1);
   }
   tmp_5374 += tmp_5375;
   result += (-1) * tmp_5374;
   std::complex<double> tmp_5376;
   std::complex<double> tmp_5377;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      tmp_5377 += A0(MSHp0(gI1))*CpUhhUhhconjSHp0SHp0(gO1,gO2,gI1,gI1);
   }
   tmp_5376 += tmp_5377;
   result += (-1) * tmp_5376;
   std::complex<double> tmp_5378;
   std::complex<double> tmp_5379;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      tmp_5379 += A0(MSHpp(gI1))*CpUhhUhhconjSHppSHpp(gO1,gO2,gI1,gI1);
   }
   tmp_5378 += tmp_5379;
   result += (-1) * tmp_5378;
   std::complex<double> tmp_5380;
   std::complex<double> tmp_5381;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      tmp_5381 += A0(MSSI0(gI1))*CpUhhUhhconjSSI0SSI0(gO1,gO2,gI1,gI1);
   }
   tmp_5380 += tmp_5381;
   result += (-1) * tmp_5380;
   std::complex<double> tmp_5382;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_5383;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_5383 += B0(p,MHpm(gI1),MHpm(gI2))*Conj(CpUhhconjHpmHpm(gO2,
            gI1,gI2))*CpUhhconjHpmHpm(gO1,gI1,gI2);
      }
      tmp_5382 += tmp_5383;
   }
   result += tmp_5382;
   std::complex<double> tmp_5384;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_5385;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_5385 += B0(p,MSHp0(gI1),MSHp0(gI2))*Conj(CpUhhconjSHp0SHp0(
            gO2,gI1,gI2))*CpUhhconjSHp0SHp0(gO1,gI1,gI2);
      }
      tmp_5384 += tmp_5385;
   }
   result += tmp_5384;
   std::complex<double> tmp_5386;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_5387;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_5387 += B0(p,MSHpp(gI1),MSHpp(gI2))*Conj(CpUhhconjSHppSHpp(
            gO2,gI1,gI2))*CpUhhconjSHppSHpp(gO1,gI1,gI2);
      }
      tmp_5386 += tmp_5387;
   }
   result += tmp_5386;
   std::complex<double> tmp_5388;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_5389;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_5389 += B0(p,MSSI0(gI1),MSSI0(gI2))*Conj(CpUhhconjSSI0SSI0(
            gO2,gI1,gI2))*CpUhhconjSSI0SSI0(gO1,gI1,gI2);
      }
      tmp_5388 += tmp_5389;
   }
   result += tmp_5388;
   std::complex<double> tmp_5390;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_5391;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_5391 += (Conj(CpUhhbarChaChaPL(gO2,gI1,gI2))*
            CpUhhbarChaChaPL(gO1,gI1,gI2) + Conj(CpUhhbarChaChaPR(gO2,gI1,gI2))*
            CpUhhbarChaChaPR(gO1,gI1,gI2))*G0(p,MCha(gI1),MCha(gI2));
      }
      tmp_5390 += tmp_5391;
   }
   result += tmp_5390;
   std::complex<double> tmp_5392;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_5393;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_5393 += (Conj(CpUhhbarChaIChaIPL(gO2,gI1,gI2))*
            CpUhhbarChaIChaIPL(gO1,gI1,gI2) + Conj(CpUhhbarChaIChaIPR(gO2,gI1,gI2)
            )*CpUhhbarChaIChaIPR(gO1,gI1,gI2))*G0(p,MChaI(gI1),MChaI(gI2));
      }
      tmp_5392 += tmp_5393;
   }
   result += tmp_5392;
   std::complex<double> tmp_5394;
   std::complex<double> tmp_5395;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_5396;
      std::complex<double> tmp_5397;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_5397 += B0(p,MCha(gI1),MCha(gI2))*(Conj(CpUhhbarChaChaPR(gO2
            ,gI1,gI2))*CpUhhbarChaChaPL(gO1,gI1,gI2) + Conj(CpUhhbarChaChaPL(gO2,
            gI1,gI2))*CpUhhbarChaChaPR(gO1,gI1,gI2))*MCha(gI2);
      }
      tmp_5396 += tmp_5397;
      tmp_5395 += (MCha(gI1)) * tmp_5396;
   }
   tmp_5394 += tmp_5395;
   result += (-2) * tmp_5394;
   std::complex<double> tmp_5398;
   std::complex<double> tmp_5399;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_5400;
      std::complex<double> tmp_5401;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_5401 += B0(p,MChaI(gI1),MChaI(gI2))*(Conj(CpUhhbarChaIChaIPR
            (gO2,gI1,gI2))*CpUhhbarChaIChaIPL(gO1,gI1,gI2) + Conj(
            CpUhhbarChaIChaIPL(gO2,gI1,gI2))*CpUhhbarChaIChaIPR(gO1,gI1,gI2))*
            MChaI(gI2);
      }
      tmp_5400 += tmp_5401;
      tmp_5399 += (MChaI(gI1)) * tmp_5400;
   }
   tmp_5398 += tmp_5399;
   result += (-2) * tmp_5398;
   std::complex<double> tmp_5402;
   std::complex<double> tmp_5403;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      tmp_5403 += A0(MAh(gI1))*CpUhhUhhAhAh(gO1,gO2,gI1,gI1);
   }
   tmp_5402 += tmp_5403;
   result += (-0.5) * tmp_5402;
   std::complex<double> tmp_5404;
   std::complex<double> tmp_5405;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      tmp_5405 += A0(MSv(gI1))*CpUhhUhhconjSvSv(gO1,gO2,gI1,gI1);
   }
   tmp_5404 += tmp_5405;
   result += (-1) * tmp_5404;
   std::complex<double> tmp_5406;
   std::complex<double> tmp_5407;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      tmp_5407 += A0(Mhh(gI1))*CpUhhUhhhhhh(gO1,gO2,gI1,gI1);
   }
   tmp_5406 += tmp_5407;
   result += (-0.5) * tmp_5406;
   std::complex<double> tmp_5408;
   std::complex<double> tmp_5409;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_5410;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_5410 += B0(p,MAh(gI1),MAh(gI2))*Conj(CpUhhAhAh(gO2,gI1,gI2))
            *CpUhhAhAh(gO1,gI1,gI2);
      }
      tmp_5409 += tmp_5410;
   }
   tmp_5408 += tmp_5409;
   result += (0.5) * tmp_5408;
   std::complex<double> tmp_5411;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_5412;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_5412 += B0(p,MSv(gI1),MSv(gI2))*Conj(CpUhhconjSvSv(gO2,gI1,
            gI2))*CpUhhconjSvSv(gO1,gI1,gI2);
      }
      tmp_5411 += tmp_5412;
   }
   result += tmp_5411;
   std::complex<double> tmp_5413;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_5414;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_5414 += B0(p,Mhh(gI1),MAh(gI2))*Conj(CpUhhhhAh(gO2,gI1,gI2))
            *CpUhhhhAh(gO1,gI1,gI2);
      }
      tmp_5413 += tmp_5414;
   }
   result += tmp_5413;
   std::complex<double> tmp_5415;
   std::complex<double> tmp_5416;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_5417;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_5417 += B0(p,Mhh(gI1),Mhh(gI2))*Conj(CpUhhhhhh(gO2,gI1,gI2))
            *CpUhhhhhh(gO1,gI1,gI2);
      }
      tmp_5416 += tmp_5417;
   }
   tmp_5415 += tmp_5416;
   result += (0.5) * tmp_5415;
   std::complex<double> tmp_5418;
   std::complex<double> tmp_5419;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_5420;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_5420 += (Conj(CpUhhbarFdFdPL(gO2,gI1,gI2))*CpUhhbarFdFdPL(
            gO1,gI1,gI2) + Conj(CpUhhbarFdFdPR(gO2,gI1,gI2))*CpUhhbarFdFdPR(gO1,
            gI1,gI2))*G0(p,MFd(gI1),MFd(gI2));
      }
      tmp_5419 += tmp_5420;
   }
   tmp_5418 += tmp_5419;
   result += (3) * tmp_5418;
   std::complex<double> tmp_5421;
   std::complex<double> tmp_5422;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_5423;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_5423 += (Conj(CpUhhbarFDXFDXPL(gO2,gI1,gI2))*
            CpUhhbarFDXFDXPL(gO1,gI1,gI2) + Conj(CpUhhbarFDXFDXPR(gO2,gI1,gI2))*
            CpUhhbarFDXFDXPR(gO1,gI1,gI2))*G0(p,MFDX(gI1),MFDX(gI2));
      }
      tmp_5422 += tmp_5423;
   }
   tmp_5421 += tmp_5422;
   result += (3) * tmp_5421;
   std::complex<double> tmp_5424;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_5425;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_5425 += (Conj(CpUhhbarFeFePL(gO2,gI1,gI2))*CpUhhbarFeFePL(
            gO1,gI1,gI2) + Conj(CpUhhbarFeFePR(gO2,gI1,gI2))*CpUhhbarFeFePR(gO1,
            gI1,gI2))*G0(p,MFe(gI1),MFe(gI2));
      }
      tmp_5424 += tmp_5425;
   }
   result += tmp_5424;
   std::complex<double> tmp_5426;
   std::complex<double> tmp_5427;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_5428;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_5428 += (Conj(CpUhhbarFuFuPL(gO2,gI1,gI2))*CpUhhbarFuFuPL(
            gO1,gI1,gI2) + Conj(CpUhhbarFuFuPR(gO2,gI1,gI2))*CpUhhbarFuFuPR(gO1,
            gI1,gI2))*G0(p,MFu(gI1),MFu(gI2));
      }
      tmp_5427 += tmp_5428;
   }
   tmp_5426 += tmp_5427;
   result += (3) * tmp_5426;
   std::complex<double> tmp_5429;
   std::complex<double> tmp_5430;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_5431;
      std::complex<double> tmp_5432;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_5432 += B0(p,MFd(gI1),MFd(gI2))*(Conj(CpUhhbarFdFdPR(gO2,gI1
            ,gI2))*CpUhhbarFdFdPL(gO1,gI1,gI2) + Conj(CpUhhbarFdFdPL(gO2,gI1,gI2))
            *CpUhhbarFdFdPR(gO1,gI1,gI2))*MFd(gI2);
      }
      tmp_5431 += tmp_5432;
      tmp_5430 += (MFd(gI1)) * tmp_5431;
   }
   tmp_5429 += tmp_5430;
   result += (-6) * tmp_5429;
   std::complex<double> tmp_5433;
   std::complex<double> tmp_5434;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_5435;
      std::complex<double> tmp_5436;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_5436 += B0(p,MFDX(gI1),MFDX(gI2))*(Conj(CpUhhbarFDXFDXPR(gO2
            ,gI1,gI2))*CpUhhbarFDXFDXPL(gO1,gI1,gI2) + Conj(CpUhhbarFDXFDXPL(gO2,
            gI1,gI2))*CpUhhbarFDXFDXPR(gO1,gI1,gI2))*MFDX(gI2);
      }
      tmp_5435 += tmp_5436;
      tmp_5434 += (MFDX(gI1)) * tmp_5435;
   }
   tmp_5433 += tmp_5434;
   result += (-6) * tmp_5433;
   std::complex<double> tmp_5437;
   std::complex<double> tmp_5438;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_5439;
      std::complex<double> tmp_5440;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_5440 += B0(p,MFe(gI1),MFe(gI2))*(Conj(CpUhhbarFeFePR(gO2,gI1
            ,gI2))*CpUhhbarFeFePL(gO1,gI1,gI2) + Conj(CpUhhbarFeFePL(gO2,gI1,gI2))
            *CpUhhbarFeFePR(gO1,gI1,gI2))*MFe(gI2);
      }
      tmp_5439 += tmp_5440;
      tmp_5438 += (MFe(gI1)) * tmp_5439;
   }
   tmp_5437 += tmp_5438;
   result += (-2) * tmp_5437;
   std::complex<double> tmp_5441;
   std::complex<double> tmp_5442;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_5443;
      std::complex<double> tmp_5444;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_5444 += B0(p,MFu(gI1),MFu(gI2))*(Conj(CpUhhbarFuFuPR(gO2,gI1
            ,gI2))*CpUhhbarFuFuPL(gO1,gI1,gI2) + Conj(CpUhhbarFuFuPL(gO2,gI1,gI2))
            *CpUhhbarFuFuPR(gO1,gI1,gI2))*MFu(gI2);
      }
      tmp_5443 += tmp_5444;
      tmp_5442 += (MFu(gI1)) * tmp_5443;
   }
   tmp_5441 += tmp_5442;
   result += (-6) * tmp_5441;
   std::complex<double> tmp_5445;
   std::complex<double> tmp_5446;
   for (unsigned gI1 = 0; gI1 < 4; ++gI1) {
      tmp_5446 += A0(MSHI0(gI1))*CpUhhUhhconjSHI0SHI0(gO1,gO2,gI1,gI1);
   }
   tmp_5445 += tmp_5446;
   result += (-1) * tmp_5445;
   std::complex<double> tmp_5447;
   std::complex<double> tmp_5448;
   for (unsigned gI1 = 0; gI1 < 4; ++gI1) {
      tmp_5448 += A0(MSHIp(gI1))*CpUhhUhhconjSHIpSHIp(gO1,gO2,gI1,gI1);
   }
   tmp_5447 += tmp_5448;
   result += (-1) * tmp_5447;
   std::complex<double> tmp_5449;
   for (unsigned gI1 = 0; gI1 < 4; ++gI1) {
      std::complex<double> tmp_5450;
      for (unsigned gI2 = 0; gI2 < 4; ++gI2) {
         tmp_5450 += B0(p,MSHI0(gI1),MSHI0(gI2))*Conj(CpUhhconjSHI0SHI0(
            gO2,gI1,gI2))*CpUhhconjSHI0SHI0(gO1,gI1,gI2);
      }
      tmp_5449 += tmp_5450;
   }
   result += tmp_5449;
   std::complex<double> tmp_5451;
   for (unsigned gI1 = 0; gI1 < 4; ++gI1) {
      std::complex<double> tmp_5452;
      for (unsigned gI2 = 0; gI2 < 4; ++gI2) {
         tmp_5452 += B0(p,MSHIp(gI1),MSHIp(gI2))*Conj(CpUhhconjSHIpSHIp(
            gO2,gI1,gI2))*CpUhhconjSHIpSHIp(gO1,gI1,gI2);
      }
      tmp_5451 += tmp_5452;
   }
   result += tmp_5451;
   std::complex<double> tmp_5453;
   std::complex<double> tmp_5454;
   for (unsigned gI1 = 0; gI1 < 4; ++gI1) {
      std::complex<double> tmp_5455;
      for (unsigned gI2 = 0; gI2 < 4; ++gI2) {
         tmp_5455 += (Conj(CpUhhChiIChiIPL(gO2,gI1,gI2))*CpUhhChiIChiIPL(
            gO1,gI1,gI2) + Conj(CpUhhChiIChiIPR(gO2,gI1,gI2))*CpUhhChiIChiIPR(gO1,
            gI1,gI2))*G0(p,MChiI(gI1),MChiI(gI2));
      }
      tmp_5454 += tmp_5455;
   }
   tmp_5453 += tmp_5454;
   result += (0.5) * tmp_5453;
   std::complex<double> tmp_5456;
   std::complex<double> tmp_5457;
   for (unsigned gI1 = 0; gI1 < 4; ++gI1) {
      std::complex<double> tmp_5458;
      std::complex<double> tmp_5459;
      for (unsigned gI2 = 0; gI2 < 4; ++gI2) {
         tmp_5459 += B0(p,MChiI(gI1),MChiI(gI2))*(Conj(CpUhhChiIChiIPR(
            gO2,gI1,gI2))*CpUhhChiIChiIPL(gO1,gI1,gI2) + Conj(CpUhhChiIChiIPL(gO2,
            gI1,gI2))*CpUhhChiIChiIPR(gO1,gI1,gI2))*MChiI(gI2);
      }
      tmp_5458 += tmp_5459;
      tmp_5457 += (MChiI(gI1)) * tmp_5458;
   }
   tmp_5456 += tmp_5457;
   result += (-1) * tmp_5456;
   std::complex<double> tmp_5460;
   std::complex<double> tmp_5461;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_5461 += A0(MSd(gI1))*CpUhhUhhconjSdSd(gO1,gO2,gI1,gI1);
   }
   tmp_5460 += tmp_5461;
   result += (-3) * tmp_5460;
   std::complex<double> tmp_5462;
   std::complex<double> tmp_5463;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_5463 += A0(MSDX(gI1))*CpUhhUhhconjSDXSDX(gO1,gO2,gI1,gI1);
   }
   tmp_5462 += tmp_5463;
   result += (-3) * tmp_5462;
   std::complex<double> tmp_5464;
   std::complex<double> tmp_5465;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_5465 += A0(MSe(gI1))*CpUhhUhhconjSeSe(gO1,gO2,gI1,gI1);
   }
   tmp_5464 += tmp_5465;
   result += (-1) * tmp_5464;
   std::complex<double> tmp_5466;
   std::complex<double> tmp_5467;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_5467 += A0(MSu(gI1))*CpUhhUhhconjSuSu(gO1,gO2,gI1,gI1);
   }
   tmp_5466 += tmp_5467;
   result += (-3) * tmp_5466;
   std::complex<double> tmp_5468;
   std::complex<double> tmp_5469;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_5470;
      for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
         tmp_5470 += B0(p,MSd(gI1),MSd(gI2))*Conj(CpUhhconjSdSd(gO2,gI1,
            gI2))*CpUhhconjSdSd(gO1,gI1,gI2);
      }
      tmp_5469 += tmp_5470;
   }
   tmp_5468 += tmp_5469;
   result += (3) * tmp_5468;
   std::complex<double> tmp_5471;
   std::complex<double> tmp_5472;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_5473;
      for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
         tmp_5473 += B0(p,MSDX(gI1),MSDX(gI2))*Conj(CpUhhconjSDXSDX(gO2,
            gI1,gI2))*CpUhhconjSDXSDX(gO1,gI1,gI2);
      }
      tmp_5472 += tmp_5473;
   }
   tmp_5471 += tmp_5472;
   result += (3) * tmp_5471;
   std::complex<double> tmp_5474;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_5475;
      for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
         tmp_5475 += B0(p,MSe(gI1),MSe(gI2))*Conj(CpUhhconjSeSe(gO2,gI1,
            gI2))*CpUhhconjSeSe(gO1,gI1,gI2);
      }
      tmp_5474 += tmp_5475;
   }
   result += tmp_5474;
   std::complex<double> tmp_5476;
   std::complex<double> tmp_5477;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_5478;
      for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
         tmp_5478 += B0(p,MSu(gI1),MSu(gI2))*Conj(CpUhhconjSuSu(gO2,gI1,
            gI2))*CpUhhconjSuSu(gO1,gI1,gI2);
      }
      tmp_5477 += tmp_5478;
   }
   tmp_5476 += tmp_5477;
   result += (3) * tmp_5476;
   std::complex<double> tmp_5479;
   std::complex<double> tmp_5480;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_5481;
      for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
         tmp_5481 += (Conj(CpUhhChiChiPL(gO2,gI1,gI2))*CpUhhChiChiPL(gO1,
            gI1,gI2) + Conj(CpUhhChiChiPR(gO2,gI1,gI2))*CpUhhChiChiPR(gO1,gI1,gI2)
            )*G0(p,MChi(gI1),MChi(gI2));
      }
      tmp_5480 += tmp_5481;
   }
   tmp_5479 += tmp_5480;
   result += (0.5) * tmp_5479;
   std::complex<double> tmp_5482;
   std::complex<double> tmp_5483;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_5484;
      std::complex<double> tmp_5485;
      for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
         tmp_5485 += B0(p,MChi(gI1),MChi(gI2))*(Conj(CpUhhChiChiPR(gO2,
            gI1,gI2))*CpUhhChiChiPL(gO1,gI1,gI2) + Conj(CpUhhChiChiPL(gO2,gI1,gI2)
            )*CpUhhChiChiPR(gO1,gI1,gI2))*MChi(gI2);
      }
      tmp_5484 += tmp_5485;
      tmp_5483 += (MChi(gI1)) * tmp_5484;
   }
   tmp_5482 += tmp_5483;
   result += (-1) * tmp_5482;
   std::complex<double> tmp_5486;
   std::complex<double> tmp_5487;
   for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
      tmp_5487 += Conj(CpUhhconjVWmHpm(gO2,gI2))*CpUhhconjVWmHpm(gO1,gI2)*F0
         (p,MHpm(gI2),MVWm);
   }
   tmp_5486 += tmp_5487;
   result += (2) * tmp_5486;
   std::complex<double> tmp_5488;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_5488 += Conj(CpUhhVZAh(gO2,gI2))*CpUhhVZAh(gO1,gI2)*F0(p,MAh(gI2),
         MVZ);
   }
   result += tmp_5488;
   std::complex<double> tmp_5489;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_5489 += Conj(CpUhhVZpAh(gO2,gI2))*CpUhhVZpAh(gO1,gI2)*F0(p,MAh(gI2
         ),MVZp);
   }
   result += tmp_5489;

   return result * oneOver16PiSqr;

}

std::complex<double> CLASSNAME::self_energy_Ah(double p , unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   result += -(B0(p,MVWm,MVWm)*CpUAhbargWmCgWmC(gO1)*CpUAhbargWmCgWmC(gO2));
   result += -(B0(p,MVWm,MVWm)*CpUAhbargWmgWm(gO1)*CpUAhbargWmgWm(gO2));
   result += 4*A0(MVWm)*CpUAhUAhconjVWmVWm(gO1,gO2);
   result += 2*A0(MVZp)*CpUAhUAhVZpVZp(gO1,gO2);
   result += 2*A0(MVZ)*CpUAhUAhVZVZ(gO1,gO2);
   std::complex<double> tmp_5490;
   std::complex<double> tmp_5491;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      tmp_5491 += A0(MHpm(gI1))*CpUAhUAhconjHpmHpm(gO1,gO2,gI1,gI1);
   }
   tmp_5490 += tmp_5491;
   result += (-1) * tmp_5490;
   std::complex<double> tmp_5492;
   std::complex<double> tmp_5493;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      tmp_5493 += A0(MSHp0(gI1))*CpUAhUAhconjSHp0SHp0(gO1,gO2,gI1,gI1);
   }
   tmp_5492 += tmp_5493;
   result += (-1) * tmp_5492;
   std::complex<double> tmp_5494;
   std::complex<double> tmp_5495;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      tmp_5495 += A0(MSHpp(gI1))*CpUAhUAhconjSHppSHpp(gO1,gO2,gI1,gI1);
   }
   tmp_5494 += tmp_5495;
   result += (-1) * tmp_5494;
   std::complex<double> tmp_5496;
   std::complex<double> tmp_5497;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      tmp_5497 += A0(MSSI0(gI1))*CpUAhUAhconjSSI0SSI0(gO1,gO2,gI1,gI1);
   }
   tmp_5496 += tmp_5497;
   result += (-1) * tmp_5496;
   std::complex<double> tmp_5498;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_5499;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_5499 += B0(p,MHpm(gI1),MHpm(gI2))*Conj(CpUAhconjHpmHpm(gO2,
            gI1,gI2))*CpUAhconjHpmHpm(gO1,gI1,gI2);
      }
      tmp_5498 += tmp_5499;
   }
   result += tmp_5498;
   std::complex<double> tmp_5500;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_5501;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_5501 += (Conj(CpUAhbarChaChaPL(gO2,gI1,gI2))*
            CpUAhbarChaChaPL(gO1,gI1,gI2) + Conj(CpUAhbarChaChaPR(gO2,gI1,gI2))*
            CpUAhbarChaChaPR(gO1,gI1,gI2))*G0(p,MCha(gI1),MCha(gI2));
      }
      tmp_5500 += tmp_5501;
   }
   result += tmp_5500;
   std::complex<double> tmp_5502;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_5503;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_5503 += (Conj(CpUAhbarChaIChaIPL(gO2,gI1,gI2))*
            CpUAhbarChaIChaIPL(gO1,gI1,gI2) + Conj(CpUAhbarChaIChaIPR(gO2,gI1,gI2)
            )*CpUAhbarChaIChaIPR(gO1,gI1,gI2))*G0(p,MChaI(gI1),MChaI(gI2));
      }
      tmp_5502 += tmp_5503;
   }
   result += tmp_5502;
   std::complex<double> tmp_5504;
   std::complex<double> tmp_5505;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_5506;
      std::complex<double> tmp_5507;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_5507 += B0(p,MCha(gI1),MCha(gI2))*(Conj(CpUAhbarChaChaPR(gO2
            ,gI1,gI2))*CpUAhbarChaChaPL(gO1,gI1,gI2) + Conj(CpUAhbarChaChaPL(gO2,
            gI1,gI2))*CpUAhbarChaChaPR(gO1,gI1,gI2))*MCha(gI2);
      }
      tmp_5506 += tmp_5507;
      tmp_5505 += (MCha(gI1)) * tmp_5506;
   }
   tmp_5504 += tmp_5505;
   result += (-2) * tmp_5504;
   std::complex<double> tmp_5508;
   std::complex<double> tmp_5509;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_5510;
      std::complex<double> tmp_5511;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_5511 += B0(p,MChaI(gI1),MChaI(gI2))*(Conj(CpUAhbarChaIChaIPR
            (gO2,gI1,gI2))*CpUAhbarChaIChaIPL(gO1,gI1,gI2) + Conj(
            CpUAhbarChaIChaIPL(gO2,gI1,gI2))*CpUAhbarChaIChaIPR(gO1,gI1,gI2))*
            MChaI(gI2);
      }
      tmp_5510 += tmp_5511;
      tmp_5509 += (MChaI(gI1)) * tmp_5510;
   }
   tmp_5508 += tmp_5509;
   result += (-2) * tmp_5508;
   std::complex<double> tmp_5512;
   std::complex<double> tmp_5513;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      tmp_5513 += A0(MAh(gI1))*CpUAhUAhAhAh(gO1,gO2,gI1,gI1);
   }
   tmp_5512 += tmp_5513;
   result += (-0.5) * tmp_5512;
   std::complex<double> tmp_5514;
   std::complex<double> tmp_5515;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      tmp_5515 += A0(MSv(gI1))*CpUAhUAhconjSvSv(gO1,gO2,gI1,gI1);
   }
   tmp_5514 += tmp_5515;
   result += (-1) * tmp_5514;
   std::complex<double> tmp_5516;
   std::complex<double> tmp_5517;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      tmp_5517 += A0(Mhh(gI1))*CpUAhUAhhhhh(gO1,gO2,gI1,gI1);
   }
   tmp_5516 += tmp_5517;
   result += (-0.5) * tmp_5516;
   std::complex<double> tmp_5518;
   std::complex<double> tmp_5519;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_5520;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_5520 += B0(p,MAh(gI1),MAh(gI2))*Conj(CpUAhAhAh(gO2,gI1,gI2))
            *CpUAhAhAh(gO1,gI1,gI2);
      }
      tmp_5519 += tmp_5520;
   }
   tmp_5518 += tmp_5519;
   result += (0.5) * tmp_5518;
   std::complex<double> tmp_5521;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_5522;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_5522 += B0(p,Mhh(gI1),MAh(gI2))*Conj(CpUAhhhAh(gO2,gI1,gI2))
            *CpUAhhhAh(gO1,gI1,gI2);
      }
      tmp_5521 += tmp_5522;
   }
   result += tmp_5521;
   std::complex<double> tmp_5523;
   std::complex<double> tmp_5524;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_5525;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_5525 += B0(p,Mhh(gI1),Mhh(gI2))*Conj(CpUAhhhhh(gO2,gI1,gI2))
            *CpUAhhhhh(gO1,gI1,gI2);
      }
      tmp_5524 += tmp_5525;
   }
   tmp_5523 += tmp_5524;
   result += (0.5) * tmp_5523;
   std::complex<double> tmp_5526;
   std::complex<double> tmp_5527;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_5528;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_5528 += (Conj(CpUAhbarFdFdPL(gO2,gI1,gI2))*CpUAhbarFdFdPL(
            gO1,gI1,gI2) + Conj(CpUAhbarFdFdPR(gO2,gI1,gI2))*CpUAhbarFdFdPR(gO1,
            gI1,gI2))*G0(p,MFd(gI1),MFd(gI2));
      }
      tmp_5527 += tmp_5528;
   }
   tmp_5526 += tmp_5527;
   result += (3) * tmp_5526;
   std::complex<double> tmp_5529;
   std::complex<double> tmp_5530;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_5531;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_5531 += (Conj(CpUAhbarFDXFDXPL(gO2,gI1,gI2))*
            CpUAhbarFDXFDXPL(gO1,gI1,gI2) + Conj(CpUAhbarFDXFDXPR(gO2,gI1,gI2))*
            CpUAhbarFDXFDXPR(gO1,gI1,gI2))*G0(p,MFDX(gI1),MFDX(gI2));
      }
      tmp_5530 += tmp_5531;
   }
   tmp_5529 += tmp_5530;
   result += (3) * tmp_5529;
   std::complex<double> tmp_5532;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_5533;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_5533 += (Conj(CpUAhbarFeFePL(gO2,gI1,gI2))*CpUAhbarFeFePL(
            gO1,gI1,gI2) + Conj(CpUAhbarFeFePR(gO2,gI1,gI2))*CpUAhbarFeFePR(gO1,
            gI1,gI2))*G0(p,MFe(gI1),MFe(gI2));
      }
      tmp_5532 += tmp_5533;
   }
   result += tmp_5532;
   std::complex<double> tmp_5534;
   std::complex<double> tmp_5535;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_5536;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_5536 += (Conj(CpUAhbarFuFuPL(gO2,gI1,gI2))*CpUAhbarFuFuPL(
            gO1,gI1,gI2) + Conj(CpUAhbarFuFuPR(gO2,gI1,gI2))*CpUAhbarFuFuPR(gO1,
            gI1,gI2))*G0(p,MFu(gI1),MFu(gI2));
      }
      tmp_5535 += tmp_5536;
   }
   tmp_5534 += tmp_5535;
   result += (3) * tmp_5534;
   std::complex<double> tmp_5537;
   std::complex<double> tmp_5538;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_5539;
      std::complex<double> tmp_5540;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_5540 += B0(p,MFd(gI1),MFd(gI2))*(Conj(CpUAhbarFdFdPR(gO2,gI1
            ,gI2))*CpUAhbarFdFdPL(gO1,gI1,gI2) + Conj(CpUAhbarFdFdPL(gO2,gI1,gI2))
            *CpUAhbarFdFdPR(gO1,gI1,gI2))*MFd(gI2);
      }
      tmp_5539 += tmp_5540;
      tmp_5538 += (MFd(gI1)) * tmp_5539;
   }
   tmp_5537 += tmp_5538;
   result += (-6) * tmp_5537;
   std::complex<double> tmp_5541;
   std::complex<double> tmp_5542;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_5543;
      std::complex<double> tmp_5544;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_5544 += B0(p,MFDX(gI1),MFDX(gI2))*(Conj(CpUAhbarFDXFDXPR(gO2
            ,gI1,gI2))*CpUAhbarFDXFDXPL(gO1,gI1,gI2) + Conj(CpUAhbarFDXFDXPL(gO2,
            gI1,gI2))*CpUAhbarFDXFDXPR(gO1,gI1,gI2))*MFDX(gI2);
      }
      tmp_5543 += tmp_5544;
      tmp_5542 += (MFDX(gI1)) * tmp_5543;
   }
   tmp_5541 += tmp_5542;
   result += (-6) * tmp_5541;
   std::complex<double> tmp_5545;
   std::complex<double> tmp_5546;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_5547;
      std::complex<double> tmp_5548;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_5548 += B0(p,MFe(gI1),MFe(gI2))*(Conj(CpUAhbarFeFePR(gO2,gI1
            ,gI2))*CpUAhbarFeFePL(gO1,gI1,gI2) + Conj(CpUAhbarFeFePL(gO2,gI1,gI2))
            *CpUAhbarFeFePR(gO1,gI1,gI2))*MFe(gI2);
      }
      tmp_5547 += tmp_5548;
      tmp_5546 += (MFe(gI1)) * tmp_5547;
   }
   tmp_5545 += tmp_5546;
   result += (-2) * tmp_5545;
   std::complex<double> tmp_5549;
   std::complex<double> tmp_5550;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_5551;
      std::complex<double> tmp_5552;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_5552 += B0(p,MFu(gI1),MFu(gI2))*(Conj(CpUAhbarFuFuPR(gO2,gI1
            ,gI2))*CpUAhbarFuFuPL(gO1,gI1,gI2) + Conj(CpUAhbarFuFuPL(gO2,gI1,gI2))
            *CpUAhbarFuFuPR(gO1,gI1,gI2))*MFu(gI2);
      }
      tmp_5551 += tmp_5552;
      tmp_5550 += (MFu(gI1)) * tmp_5551;
   }
   tmp_5549 += tmp_5550;
   result += (-6) * tmp_5549;
   std::complex<double> tmp_5553;
   std::complex<double> tmp_5554;
   for (unsigned gI1 = 0; gI1 < 4; ++gI1) {
      tmp_5554 += A0(MSHI0(gI1))*CpUAhUAhconjSHI0SHI0(gO1,gO2,gI1,gI1);
   }
   tmp_5553 += tmp_5554;
   result += (-1) * tmp_5553;
   std::complex<double> tmp_5555;
   std::complex<double> tmp_5556;
   for (unsigned gI1 = 0; gI1 < 4; ++gI1) {
      tmp_5556 += A0(MSHIp(gI1))*CpUAhUAhconjSHIpSHIp(gO1,gO2,gI1,gI1);
   }
   tmp_5555 += tmp_5556;
   result += (-1) * tmp_5555;
   std::complex<double> tmp_5557;
   for (unsigned gI1 = 0; gI1 < 4; ++gI1) {
      std::complex<double> tmp_5558;
      for (unsigned gI2 = 0; gI2 < 4; ++gI2) {
         tmp_5558 += B0(p,MSHI0(gI1),MSHI0(gI2))*Conj(CpUAhconjSHI0SHI0(
            gO2,gI1,gI2))*CpUAhconjSHI0SHI0(gO1,gI1,gI2);
      }
      tmp_5557 += tmp_5558;
   }
   result += tmp_5557;
   std::complex<double> tmp_5559;
   for (unsigned gI1 = 0; gI1 < 4; ++gI1) {
      std::complex<double> tmp_5560;
      for (unsigned gI2 = 0; gI2 < 4; ++gI2) {
         tmp_5560 += B0(p,MSHIp(gI1),MSHIp(gI2))*Conj(CpUAhconjSHIpSHIp(
            gO2,gI1,gI2))*CpUAhconjSHIpSHIp(gO1,gI1,gI2);
      }
      tmp_5559 += tmp_5560;
   }
   result += tmp_5559;
   std::complex<double> tmp_5561;
   std::complex<double> tmp_5562;
   for (unsigned gI1 = 0; gI1 < 4; ++gI1) {
      std::complex<double> tmp_5563;
      for (unsigned gI2 = 0; gI2 < 4; ++gI2) {
         tmp_5563 += (Conj(CpUAhChiIChiIPL(gO2,gI1,gI2))*CpUAhChiIChiIPL(
            gO1,gI1,gI2) + Conj(CpUAhChiIChiIPR(gO2,gI1,gI2))*CpUAhChiIChiIPR(gO1,
            gI1,gI2))*G0(p,MChiI(gI1),MChiI(gI2));
      }
      tmp_5562 += tmp_5563;
   }
   tmp_5561 += tmp_5562;
   result += (0.5) * tmp_5561;
   std::complex<double> tmp_5564;
   std::complex<double> tmp_5565;
   for (unsigned gI1 = 0; gI1 < 4; ++gI1) {
      std::complex<double> tmp_5566;
      std::complex<double> tmp_5567;
      for (unsigned gI2 = 0; gI2 < 4; ++gI2) {
         tmp_5567 += B0(p,MChiI(gI1),MChiI(gI2))*(Conj(CpUAhChiIChiIPR(
            gO2,gI1,gI2))*CpUAhChiIChiIPL(gO1,gI1,gI2) + Conj(CpUAhChiIChiIPL(gO2,
            gI1,gI2))*CpUAhChiIChiIPR(gO1,gI1,gI2))*MChiI(gI2);
      }
      tmp_5566 += tmp_5567;
      tmp_5565 += (MChiI(gI1)) * tmp_5566;
   }
   tmp_5564 += tmp_5565;
   result += (-1) * tmp_5564;
   std::complex<double> tmp_5568;
   std::complex<double> tmp_5569;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_5569 += A0(MSd(gI1))*CpUAhUAhconjSdSd(gO1,gO2,gI1,gI1);
   }
   tmp_5568 += tmp_5569;
   result += (-3) * tmp_5568;
   std::complex<double> tmp_5570;
   std::complex<double> tmp_5571;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_5571 += A0(MSDX(gI1))*CpUAhUAhconjSDXSDX(gO1,gO2,gI1,gI1);
   }
   tmp_5570 += tmp_5571;
   result += (-3) * tmp_5570;
   std::complex<double> tmp_5572;
   std::complex<double> tmp_5573;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_5573 += A0(MSe(gI1))*CpUAhUAhconjSeSe(gO1,gO2,gI1,gI1);
   }
   tmp_5572 += tmp_5573;
   result += (-1) * tmp_5572;
   std::complex<double> tmp_5574;
   std::complex<double> tmp_5575;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_5575 += A0(MSu(gI1))*CpUAhUAhconjSuSu(gO1,gO2,gI1,gI1);
   }
   tmp_5574 += tmp_5575;
   result += (-3) * tmp_5574;
   std::complex<double> tmp_5576;
   std::complex<double> tmp_5577;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_5578;
      for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
         tmp_5578 += B0(p,MSd(gI1),MSd(gI2))*Conj(CpUAhconjSdSd(gO2,gI1,
            gI2))*CpUAhconjSdSd(gO1,gI1,gI2);
      }
      tmp_5577 += tmp_5578;
   }
   tmp_5576 += tmp_5577;
   result += (3) * tmp_5576;
   std::complex<double> tmp_5579;
   std::complex<double> tmp_5580;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_5581;
      for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
         tmp_5581 += B0(p,MSDX(gI1),MSDX(gI2))*Conj(CpUAhconjSDXSDX(gO2,
            gI1,gI2))*CpUAhconjSDXSDX(gO1,gI1,gI2);
      }
      tmp_5580 += tmp_5581;
   }
   tmp_5579 += tmp_5580;
   result += (3) * tmp_5579;
   std::complex<double> tmp_5582;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_5583;
      for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
         tmp_5583 += B0(p,MSe(gI1),MSe(gI2))*Conj(CpUAhconjSeSe(gO2,gI1,
            gI2))*CpUAhconjSeSe(gO1,gI1,gI2);
      }
      tmp_5582 += tmp_5583;
   }
   result += tmp_5582;
   std::complex<double> tmp_5584;
   std::complex<double> tmp_5585;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_5586;
      for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
         tmp_5586 += B0(p,MSu(gI1),MSu(gI2))*Conj(CpUAhconjSuSu(gO2,gI1,
            gI2))*CpUAhconjSuSu(gO1,gI1,gI2);
      }
      tmp_5585 += tmp_5586;
   }
   tmp_5584 += tmp_5585;
   result += (3) * tmp_5584;
   std::complex<double> tmp_5587;
   std::complex<double> tmp_5588;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_5589;
      for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
         tmp_5589 += (Conj(CpUAhChiChiPL(gO2,gI1,gI2))*CpUAhChiChiPL(gO1,
            gI1,gI2) + Conj(CpUAhChiChiPR(gO2,gI1,gI2))*CpUAhChiChiPR(gO1,gI1,gI2)
            )*G0(p,MChi(gI1),MChi(gI2));
      }
      tmp_5588 += tmp_5589;
   }
   tmp_5587 += tmp_5588;
   result += (0.5) * tmp_5587;
   std::complex<double> tmp_5590;
   std::complex<double> tmp_5591;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_5592;
      std::complex<double> tmp_5593;
      for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
         tmp_5593 += B0(p,MChi(gI1),MChi(gI2))*(Conj(CpUAhChiChiPR(gO2,
            gI1,gI2))*CpUAhChiChiPL(gO1,gI1,gI2) + Conj(CpUAhChiChiPL(gO2,gI1,gI2)
            )*CpUAhChiChiPR(gO1,gI1,gI2))*MChi(gI2);
      }
      tmp_5592 += tmp_5593;
      tmp_5591 += (MChi(gI1)) * tmp_5592;
   }
   tmp_5590 += tmp_5591;
   result += (-1) * tmp_5590;
   std::complex<double> tmp_5594;
   std::complex<double> tmp_5595;
   for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
      tmp_5595 += Conj(CpUAhconjVWmHpm(gO2,gI2))*CpUAhconjVWmHpm(gO1,gI2)*F0
         (p,MHpm(gI2),MVWm);
   }
   tmp_5594 += tmp_5595;
   result += (2) * tmp_5594;
   std::complex<double> tmp_5596;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_5596 += Conj(CpUAhVZhh(gO2,gI2))*CpUAhVZhh(gO1,gI2)*F0(p,Mhh(gI2),
         MVZ);
   }
   result += tmp_5596;
   std::complex<double> tmp_5597;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_5597 += Conj(CpUAhVZphh(gO2,gI2))*CpUAhVZphh(gO1,gI2)*F0(p,Mhh(gI2
         ),MVZp);
   }
   result += tmp_5597;

   return result * oneOver16PiSqr;

}

std::complex<double> CLASSNAME::self_energy_Hpm(double p , unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   result += 4*B0(p,0,MVWm)*Conj(CpconjUHpmVWmVP(gO2))*CpconjUHpmVWmVP(gO1);
   result += 4*B0(p,MVWm,MVZp)*Conj(CpconjUHpmVZpVWm(gO2))*CpconjUHpmVZpVWm(gO1
      );
   result += 4*B0(p,MVWm,MVZ)*Conj(CpconjUHpmVZVWm(gO2))*CpconjUHpmVZVWm(gO1);
   result += 4*A0(MVWm)*CpUHpmconjUHpmconjVWmVWm(gO1,gO2);
   result += 2*A0(MVZp)*CpUHpmconjUHpmVZpVZp(gO1,gO2);
   result += 2*A0(MVZ)*CpUHpmconjUHpmVZVZ(gO1,gO2);
   result += -(B0(p,MVZ,MVWm)*CpconjUHpmbargWmCgZ(gO1)*CpUHpmgWmCbargZ(gO2));
   result += -(B0(p,MVZp,MVWm)*CpconjUHpmbargWmCgZp(gO1)*CpUHpmgWmCbargZp(gO2))
      ;
   result += -(B0(p,MVWm,MVZ)*CpconjUHpmbargZgWm(gO1)*CpUHpmgZbargWm(gO2));
   result += -(B0(p,MVWm,MVZp)*CpconjUHpmbargZpgWm(gO1)*CpUHpmgZpbargWm(gO2));
   std::complex<double> tmp_5598;
   std::complex<double> tmp_5599;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      tmp_5599 += A0(MHpm(gI1))*CpUHpmconjUHpmconjHpmHpm(gO1,gO2,gI1,gI1);
   }
   tmp_5598 += tmp_5599;
   result += (-1) * tmp_5598;
   std::complex<double> tmp_5600;
   std::complex<double> tmp_5601;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      tmp_5601 += A0(MSHp0(gI1))*CpUHpmconjUHpmconjSHp0SHp0(gO1,gO2,gI1,gI1)
         ;
   }
   tmp_5600 += tmp_5601;
   result += (-1) * tmp_5600;
   std::complex<double> tmp_5602;
   std::complex<double> tmp_5603;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      tmp_5603 += A0(MSHpp(gI1))*CpUHpmconjUHpmconjSHppSHpp(gO1,gO2,gI1,gI1)
         ;
   }
   tmp_5602 += tmp_5603;
   result += (-1) * tmp_5602;
   std::complex<double> tmp_5604;
   std::complex<double> tmp_5605;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      tmp_5605 += A0(MSSI0(gI1))*CpUHpmconjUHpmconjSSI0SSI0(gO1,gO2,gI1,gI1)
         ;
   }
   tmp_5604 += tmp_5605;
   result += (-1) * tmp_5604;
   std::complex<double> tmp_5606;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_5607;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_5607 += B0(p,MSHp0(gI1),MSHpp(gI2))*Conj(
            CpconjUHpmconjSHp0SHpp(gO2,gI1,gI2))*CpconjUHpmconjSHp0SHpp(gO1,gI1,
            gI2);
      }
      tmp_5606 += tmp_5607;
   }
   result += tmp_5606;
   std::complex<double> tmp_5608;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_5609;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_5609 += B0(p,MHpm(gI1),MAh(gI2))*Conj(CpconjUHpmHpmAh(gO2,
            gI1,gI2))*CpconjUHpmHpmAh(gO1,gI1,gI2);
      }
      tmp_5608 += tmp_5609;
   }
   result += tmp_5608;
   std::complex<double> tmp_5610;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_5611;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_5611 += B0(p,MHpm(gI1),Mhh(gI2))*Conj(CpconjUHpmHpmhh(gO2,
            gI1,gI2))*CpconjUHpmHpmhh(gO1,gI1,gI2);
      }
      tmp_5610 += tmp_5611;
   }
   result += tmp_5610;
   std::complex<double> tmp_5612;
   std::complex<double> tmp_5613;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      tmp_5613 += A0(MAh(gI1))*CpUHpmconjUHpmAhAh(gO1,gO2,gI1,gI1);
   }
   tmp_5612 += tmp_5613;
   result += (-0.5) * tmp_5612;
   std::complex<double> tmp_5614;
   std::complex<double> tmp_5615;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      tmp_5615 += A0(MSv(gI1))*CpUHpmconjUHpmconjSvSv(gO1,gO2,gI1,gI1);
   }
   tmp_5614 += tmp_5615;
   result += (-1) * tmp_5614;
   std::complex<double> tmp_5616;
   std::complex<double> tmp_5617;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      tmp_5617 += A0(Mhh(gI1))*CpUHpmconjUHpmhhhh(gO1,gO2,gI1,gI1);
   }
   tmp_5616 += tmp_5617;
   result += (-0.5) * tmp_5616;
   std::complex<double> tmp_5618;
   std::complex<double> tmp_5619;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_5620;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_5620 += (Conj(CpconjUHpmbarFuFdPL(gO2,gI1,gI2))*
            CpconjUHpmbarFuFdPL(gO1,gI1,gI2) + Conj(CpconjUHpmbarFuFdPR(gO2,gI1,
            gI2))*CpconjUHpmbarFuFdPR(gO1,gI1,gI2))*G0(p,MFu(gI1),MFd(gI2));
      }
      tmp_5619 += tmp_5620;
   }
   tmp_5618 += tmp_5619;
   result += (3) * tmp_5618;
   std::complex<double> tmp_5621;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_5622;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_5622 += (Conj(CpconjUHpmbarFvFePL(gO2,gI1,gI2))*
            CpconjUHpmbarFvFePL(gO1,gI1,gI2) + Conj(CpconjUHpmbarFvFePR(gO2,gI1,
            gI2))*CpconjUHpmbarFvFePR(gO1,gI1,gI2))*G0(p,MFv(gI1),MFe(gI2));
      }
      tmp_5621 += tmp_5622;
   }
   result += tmp_5621;
   std::complex<double> tmp_5623;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_5624;
      for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
         tmp_5624 += B0(p,MSv(gI1),MSe(gI2))*Conj(CpconjUHpmconjSvSe(gO2,
            gI1,gI2))*CpconjUHpmconjSvSe(gO1,gI1,gI2);
      }
      tmp_5623 += tmp_5624;
   }
   result += tmp_5623;
   std::complex<double> tmp_5625;
   std::complex<double> tmp_5626;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_5627;
      std::complex<double> tmp_5628;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_5628 += B0(p,MFu(gI1),MFd(gI2))*(Conj(CpconjUHpmbarFuFdPR(
            gO2,gI1,gI2))*CpconjUHpmbarFuFdPL(gO1,gI1,gI2) + Conj(
            CpconjUHpmbarFuFdPL(gO2,gI1,gI2))*CpconjUHpmbarFuFdPR(gO1,gI1,gI2))*
            MFd(gI2);
      }
      tmp_5627 += tmp_5628;
      tmp_5626 += (MFu(gI1)) * tmp_5627;
   }
   tmp_5625 += tmp_5626;
   result += (-6) * tmp_5625;
   std::complex<double> tmp_5629;
   std::complex<double> tmp_5630;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_5631;
      std::complex<double> tmp_5632;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_5632 += B0(p,MFv(gI1),MFe(gI2))*(Conj(CpconjUHpmbarFvFePR(
            gO2,gI1,gI2))*CpconjUHpmbarFvFePL(gO1,gI1,gI2) + Conj(
            CpconjUHpmbarFvFePL(gO2,gI1,gI2))*CpconjUHpmbarFvFePR(gO1,gI1,gI2))*
            MFe(gI2);
      }
      tmp_5631 += tmp_5632;
      tmp_5630 += (MFv(gI1)) * tmp_5631;
   }
   tmp_5629 += tmp_5630;
   result += (-2) * tmp_5629;
   std::complex<double> tmp_5633;
   std::complex<double> tmp_5634;
   for (unsigned gI1 = 0; gI1 < 4; ++gI1) {
      tmp_5634 += A0(MSHI0(gI1))*CpUHpmconjUHpmconjSHI0SHI0(gO1,gO2,gI1,gI1)
         ;
   }
   tmp_5633 += tmp_5634;
   result += (-1) * tmp_5633;
   std::complex<double> tmp_5635;
   std::complex<double> tmp_5636;
   for (unsigned gI1 = 0; gI1 < 4; ++gI1) {
      tmp_5636 += A0(MSHIp(gI1))*CpUHpmconjUHpmconjSHIpSHIp(gO1,gO2,gI1,gI1)
         ;
   }
   tmp_5635 += tmp_5636;
   result += (-1) * tmp_5635;
   std::complex<double> tmp_5637;
   for (unsigned gI1 = 0; gI1 < 4; ++gI1) {
      std::complex<double> tmp_5638;
      for (unsigned gI2 = 0; gI2 < 4; ++gI2) {
         tmp_5638 += B0(p,MSHI0(gI1),MSHIp(gI2))*Conj(
            CpconjUHpmconjSHI0SHIp(gO2,gI1,gI2))*CpconjUHpmconjSHI0SHIp(gO1,gI1,
            gI2);
      }
      tmp_5637 += tmp_5638;
   }
   result += tmp_5637;
   std::complex<double> tmp_5639;
   std::complex<double> tmp_5640;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_5640 += A0(MSd(gI1))*CpUHpmconjUHpmconjSdSd(gO1,gO2,gI1,gI1);
   }
   tmp_5639 += tmp_5640;
   result += (-3) * tmp_5639;
   std::complex<double> tmp_5641;
   std::complex<double> tmp_5642;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_5642 += A0(MSDX(gI1))*CpUHpmconjUHpmconjSDXSDX(gO1,gO2,gI1,gI1);
   }
   tmp_5641 += tmp_5642;
   result += (-3) * tmp_5641;
   std::complex<double> tmp_5643;
   std::complex<double> tmp_5644;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_5644 += A0(MSe(gI1))*CpUHpmconjUHpmconjSeSe(gO1,gO2,gI1,gI1);
   }
   tmp_5643 += tmp_5644;
   result += (-1) * tmp_5643;
   std::complex<double> tmp_5645;
   std::complex<double> tmp_5646;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_5646 += A0(MSu(gI1))*CpUHpmconjUHpmconjSuSu(gO1,gO2,gI1,gI1);
   }
   tmp_5645 += tmp_5646;
   result += (-3) * tmp_5645;
   std::complex<double> tmp_5647;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_5648;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_5648 += (Conj(CpconjUHpmChiChaPL(gO2,gI1,gI2))*
            CpconjUHpmChiChaPL(gO1,gI1,gI2) + Conj(CpconjUHpmChiChaPR(gO2,gI1,gI2)
            )*CpconjUHpmChiChaPR(gO1,gI1,gI2))*G0(p,MChi(gI1),MCha(gI2));
      }
      tmp_5647 += tmp_5648;
   }
   result += tmp_5647;
   std::complex<double> tmp_5649;
   std::complex<double> tmp_5650;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_5651;
      for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
         tmp_5651 += B0(p,MSu(gI1),MSd(gI2))*Conj(CpconjUHpmconjSuSd(gO2,
            gI1,gI2))*CpconjUHpmconjSuSd(gO1,gI1,gI2);
      }
      tmp_5650 += tmp_5651;
   }
   tmp_5649 += tmp_5650;
   result += (3) * tmp_5649;
   std::complex<double> tmp_5652;
   std::complex<double> tmp_5653;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_5654;
      std::complex<double> tmp_5655;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_5655 += B0(p,MChi(gI1),MCha(gI2))*(Conj(CpconjUHpmChiChaPR(
            gO2,gI1,gI2))*CpconjUHpmChiChaPL(gO1,gI1,gI2) + Conj(
            CpconjUHpmChiChaPL(gO2,gI1,gI2))*CpconjUHpmChiChaPR(gO1,gI1,gI2))*MCha
            (gI2);
      }
      tmp_5654 += tmp_5655;
      tmp_5653 += (MChi(gI1)) * tmp_5654;
   }
   tmp_5652 += tmp_5653;
   result += (-2) * tmp_5652;
   std::complex<double> tmp_5656;
   for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
      tmp_5656 += Conj(CpconjUHpmVPHpm(gO2,gI2))*CpconjUHpmVPHpm(gO1,gI2)*F0
         (p,MHpm(gI2),0);
   }
   result += tmp_5656;
   std::complex<double> tmp_5657;
   for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
      tmp_5657 += Conj(CpconjUHpmVZHpm(gO2,gI2))*CpconjUHpmVZHpm(gO1,gI2)*F0
         (p,MHpm(gI2),MVZ);
   }
   result += tmp_5657;
   std::complex<double> tmp_5658;
   for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
      tmp_5658 += Conj(CpconjUHpmVZpHpm(gO2,gI2))*CpconjUHpmVZpHpm(gO1,gI2)*
         F0(p,MHpm(gI2),MVZp);
   }
   result += tmp_5658;
   std::complex<double> tmp_5659;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_5659 += Conj(CpconjUHpmVWmAh(gO2,gI2))*CpconjUHpmVWmAh(gO1,gI2)*F0
         (p,MAh(gI2),MVWm);
   }
   result += tmp_5659;
   std::complex<double> tmp_5660;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_5660 += Conj(CpconjUHpmVWmhh(gO2,gI2))*CpconjUHpmVWmhh(gO1,gI2)*F0
         (p,Mhh(gI2),MVWm);
   }
   result += tmp_5660;

   return result * oneOver16PiSqr;

}

std::complex<double> CLASSNAME::self_energy_SHI0(double p , unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   result += 4*A0(MVWm)*CpUSHI0conjUSHI0conjVWmVWm(gO1,gO2);
   result += 2*A0(MVZp)*CpUSHI0conjUSHI0VZpVZp(gO1,gO2);
   result += 2*A0(MVZ)*CpUSHI0conjUSHI0VZVZ(gO1,gO2);
   std::complex<double> tmp_5661;
   std::complex<double> tmp_5662;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      tmp_5662 += A0(MHpm(gI1))*CpUSHI0conjUSHI0conjHpmHpm(gO1,gO2,gI1,gI1);
   }
   tmp_5661 += tmp_5662;
   result += (-1) * tmp_5661;
   std::complex<double> tmp_5663;
   std::complex<double> tmp_5664;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      tmp_5664 += A0(MSHp0(gI1))*CpUSHI0conjUSHI0conjSHp0SHp0(gO1,gO2,gI1,
         gI1);
   }
   tmp_5663 += tmp_5664;
   result += (-1) * tmp_5663;
   std::complex<double> tmp_5665;
   std::complex<double> tmp_5666;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      tmp_5666 += A0(MSHpp(gI1))*CpUSHI0conjUSHI0conjSHppSHpp(gO1,gO2,gI1,
         gI1);
   }
   tmp_5665 += tmp_5666;
   result += (-1) * tmp_5665;
   std::complex<double> tmp_5667;
   std::complex<double> tmp_5668;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      tmp_5668 += A0(MSSI0(gI1))*CpUSHI0conjUSHI0conjSSI0SSI0(gO1,gO2,gI1,
         gI1);
   }
   tmp_5667 += tmp_5668;
   result += (-1) * tmp_5667;
   std::complex<double> tmp_5669;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_5670;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_5670 += (Conj(CpconjUSHI0barChaChaIPL(gO2,gI1,gI2))*
            CpconjUSHI0barChaChaIPL(gO1,gI1,gI2) + Conj(CpconjUSHI0barChaChaIPR(
            gO2,gI1,gI2))*CpconjUSHI0barChaChaIPR(gO1,gI1,gI2))*G0(p,MCha(gI1),
            MChaI(gI2));
      }
      tmp_5669 += tmp_5670;
   }
   result += tmp_5669;
   std::complex<double> tmp_5671;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_5672;
      for (unsigned gI2 = 0; gI2 < 4; ++gI2) {
         tmp_5672 += B0(p,MHpm(gI1),MSHIp(gI2))*Conj(
            CpconjUSHI0conjHpmSHIp(gO2,gI1,gI2))*CpconjUSHI0conjHpmSHIp(gO1,gI1,
            gI2);
      }
      tmp_5671 += tmp_5672;
   }
   result += tmp_5671;
   std::complex<double> tmp_5673;
   std::complex<double> tmp_5674;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_5675;
      std::complex<double> tmp_5676;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_5676 += B0(p,MCha(gI1),MChaI(gI2))*(Conj(
            CpconjUSHI0barChaChaIPR(gO2,gI1,gI2))*CpconjUSHI0barChaChaIPL(gO1,gI1,
            gI2) + Conj(CpconjUSHI0barChaChaIPL(gO2,gI1,gI2))*
            CpconjUSHI0barChaChaIPR(gO1,gI1,gI2))*MChaI(gI2);
      }
      tmp_5675 += tmp_5676;
      tmp_5674 += (MCha(gI1)) * tmp_5675;
   }
   tmp_5673 += tmp_5674;
   result += (-2) * tmp_5673;
   std::complex<double> tmp_5677;
   std::complex<double> tmp_5678;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      tmp_5678 += A0(MAh(gI1))*CpUSHI0conjUSHI0AhAh(gO1,gO2,gI1,gI1);
   }
   tmp_5677 += tmp_5678;
   result += (-0.5) * tmp_5677;
   std::complex<double> tmp_5679;
   std::complex<double> tmp_5680;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      tmp_5680 += A0(MSv(gI1))*CpUSHI0conjUSHI0conjSvSv(gO1,gO2,gI1,gI1);
   }
   tmp_5679 += tmp_5680;
   result += (-1) * tmp_5679;
   std::complex<double> tmp_5681;
   std::complex<double> tmp_5682;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      tmp_5682 += A0(Mhh(gI1))*CpUSHI0conjUSHI0hhhh(gO1,gO2,gI1,gI1);
   }
   tmp_5681 += tmp_5682;
   result += (-0.5) * tmp_5681;
   std::complex<double> tmp_5683;
   std::complex<double> tmp_5684;
   for (unsigned gI1 = 0; gI1 < 4; ++gI1) {
      tmp_5684 += A0(MSHI0(gI1))*CpUSHI0conjUSHI0conjSHI0SHI0(gO1,gO2,gI1,
         gI1);
   }
   tmp_5683 += tmp_5684;
   result += (-1) * tmp_5683;
   std::complex<double> tmp_5685;
   std::complex<double> tmp_5686;
   for (unsigned gI1 = 0; gI1 < 4; ++gI1) {
      tmp_5686 += A0(MSHIp(gI1))*CpUSHI0conjUSHI0conjSHIpSHIp(gO1,gO2,gI1,
         gI1);
   }
   tmp_5685 += tmp_5686;
   result += (-1) * tmp_5685;
   std::complex<double> tmp_5687;
   for (unsigned gI1 = 0; gI1 < 4; ++gI1) {
      std::complex<double> tmp_5688;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_5688 += B0(p,MSHI0(gI1),MAh(gI2))*Conj(CpconjUSHI0SHI0Ah(gO2
            ,gI1,gI2))*CpconjUSHI0SHI0Ah(gO1,gI1,gI2);
      }
      tmp_5687 += tmp_5688;
   }
   result += tmp_5687;
   std::complex<double> tmp_5689;
   for (unsigned gI1 = 0; gI1 < 4; ++gI1) {
      std::complex<double> tmp_5690;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_5690 += B0(p,MSHI0(gI1),Mhh(gI2))*Conj(CpconjUSHI0SHI0hh(gO2
            ,gI1,gI2))*CpconjUSHI0SHI0hh(gO1,gI1,gI2);
      }
      tmp_5689 += tmp_5690;
   }
   result += tmp_5689;
   std::complex<double> tmp_5691;
   std::complex<double> tmp_5692;
   for (unsigned gI1 = 0; gI1 < 4; ++gI1) {
      std::complex<double> tmp_5693;
      for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
         tmp_5693 += (Conj(CpconjUSHI0ChiIChiPL(gO2,gI1,gI2))*
            CpconjUSHI0ChiIChiPL(gO1,gI1,gI2) + Conj(CpconjUSHI0ChiIChiPR(gO2,gI1,
            gI2))*CpconjUSHI0ChiIChiPR(gO1,gI1,gI2))*G0(p,MChiI(gI1),MChi(gI2));
      }
      tmp_5692 += tmp_5693;
   }
   tmp_5691 += tmp_5692;
   result += (0.5) * tmp_5691;
   std::complex<double> tmp_5694;
   std::complex<double> tmp_5695;
   for (unsigned gI1 = 0; gI1 < 4; ++gI1) {
      std::complex<double> tmp_5696;
      std::complex<double> tmp_5697;
      for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
         tmp_5697 += B0(p,MChiI(gI1),MChi(gI2))*(Conj(
            CpconjUSHI0ChiIChiPR(gO2,gI1,gI2))*CpconjUSHI0ChiIChiPL(gO1,gI1,gI2) +
            Conj(CpconjUSHI0ChiIChiPL(gO2,gI1,gI2))*CpconjUSHI0ChiIChiPR(gO1,gI1,
            gI2))*MChi(gI2);
      }
      tmp_5696 += tmp_5697;
      tmp_5695 += (MChiI(gI1)) * tmp_5696;
   }
   tmp_5694 += tmp_5695;
   result += (-1) * tmp_5694;
   std::complex<double> tmp_5698;
   std::complex<double> tmp_5699;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_5699 += A0(MSd(gI1))*CpUSHI0conjUSHI0conjSdSd(gO1,gO2,gI1,gI1);
   }
   tmp_5698 += tmp_5699;
   result += (-3) * tmp_5698;
   std::complex<double> tmp_5700;
   std::complex<double> tmp_5701;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_5701 += A0(MSDX(gI1))*CpUSHI0conjUSHI0conjSDXSDX(gO1,gO2,gI1,gI1);
   }
   tmp_5700 += tmp_5701;
   result += (-3) * tmp_5700;
   std::complex<double> tmp_5702;
   std::complex<double> tmp_5703;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_5703 += A0(MSe(gI1))*CpUSHI0conjUSHI0conjSeSe(gO1,gO2,gI1,gI1);
   }
   tmp_5702 += tmp_5703;
   result += (-1) * tmp_5702;
   std::complex<double> tmp_5704;
   std::complex<double> tmp_5705;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_5705 += A0(MSu(gI1))*CpUSHI0conjUSHI0conjSuSu(gO1,gO2,gI1,gI1);
   }
   tmp_5704 += tmp_5705;
   result += (-3) * tmp_5704;
   std::complex<double> tmp_5706;
   for (unsigned gI2 = 0; gI2 < 4; ++gI2) {
      tmp_5706 += Conj(CpconjUSHI0VZSHI0(gO2,gI2))*CpconjUSHI0VZSHI0(gO1,gI2
         )*F0(p,MSHI0(gI2),MVZ);
   }
   result += tmp_5706;
   std::complex<double> tmp_5707;
   for (unsigned gI2 = 0; gI2 < 4; ++gI2) {
      tmp_5707 += Conj(CpconjUSHI0VZpSHI0(gO2,gI2))*CpconjUSHI0VZpSHI0(gO1,
         gI2)*F0(p,MSHI0(gI2),MVZp);
   }
   result += tmp_5707;
   std::complex<double> tmp_5708;
   for (unsigned gI2 = 0; gI2 < 4; ++gI2) {
      tmp_5708 += Conj(CpconjUSHI0conjVWmSHIp(gO2,gI2))*
         CpconjUSHI0conjVWmSHIp(gO1,gI2)*F0(p,MSHIp(gI2),MVWm);
   }
   result += tmp_5708;

   return result * oneOver16PiSqr;

}

std::complex<double> CLASSNAME::self_energy_SHIp(double p , unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   result += 4*A0(MVWm)*CpUSHIpconjUSHIpconjVWmVWm(gO1,gO2);
   result += 2*A0(MVZp)*CpUSHIpconjUSHIpVZpVZp(gO1,gO2);
   result += 2*A0(MVZ)*CpUSHIpconjUSHIpVZVZ(gO1,gO2);
   std::complex<double> tmp_5709;
   std::complex<double> tmp_5710;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      tmp_5710 += A0(MHpm(gI1))*CpUSHIpconjUSHIpconjHpmHpm(gO1,gO2,gI1,gI1);
   }
   tmp_5709 += tmp_5710;
   result += (-1) * tmp_5709;
   std::complex<double> tmp_5711;
   std::complex<double> tmp_5712;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      tmp_5712 += A0(MSHp0(gI1))*CpUSHIpconjUSHIpconjSHp0SHp0(gO1,gO2,gI1,
         gI1);
   }
   tmp_5711 += tmp_5712;
   result += (-1) * tmp_5711;
   std::complex<double> tmp_5713;
   std::complex<double> tmp_5714;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      tmp_5714 += A0(MSHpp(gI1))*CpUSHIpconjUSHIpconjSHppSHpp(gO1,gO2,gI1,
         gI1);
   }
   tmp_5713 += tmp_5714;
   result += (-1) * tmp_5713;
   std::complex<double> tmp_5715;
   std::complex<double> tmp_5716;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      tmp_5716 += A0(MSSI0(gI1))*CpUSHIpconjUSHIpconjSSI0SSI0(gO1,gO2,gI1,
         gI1);
   }
   tmp_5715 += tmp_5716;
   result += (-1) * tmp_5715;
   std::complex<double> tmp_5717;
   std::complex<double> tmp_5718;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      tmp_5718 += A0(MAh(gI1))*CpUSHIpconjUSHIpAhAh(gO1,gO2,gI1,gI1);
   }
   tmp_5717 += tmp_5718;
   result += (-0.5) * tmp_5717;
   std::complex<double> tmp_5719;
   std::complex<double> tmp_5720;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      tmp_5720 += A0(MSv(gI1))*CpUSHIpconjUSHIpconjSvSv(gO1,gO2,gI1,gI1);
   }
   tmp_5719 += tmp_5720;
   result += (-1) * tmp_5719;
   std::complex<double> tmp_5721;
   std::complex<double> tmp_5722;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      tmp_5722 += A0(Mhh(gI1))*CpUSHIpconjUSHIphhhh(gO1,gO2,gI1,gI1);
   }
   tmp_5721 += tmp_5722;
   result += (-0.5) * tmp_5721;
   std::complex<double> tmp_5723;
   std::complex<double> tmp_5724;
   for (unsigned gI1 = 0; gI1 < 4; ++gI1) {
      tmp_5724 += A0(MSHI0(gI1))*CpUSHIpconjUSHIpconjSHI0SHI0(gO1,gO2,gI1,
         gI1);
   }
   tmp_5723 += tmp_5724;
   result += (-1) * tmp_5723;
   std::complex<double> tmp_5725;
   std::complex<double> tmp_5726;
   for (unsigned gI1 = 0; gI1 < 4; ++gI1) {
      tmp_5726 += A0(MSHIp(gI1))*CpUSHIpconjUSHIpconjSHIpSHIp(gO1,gO2,gI1,
         gI1);
   }
   tmp_5725 += tmp_5726;
   result += (-1) * tmp_5725;
   std::complex<double> tmp_5727;
   for (unsigned gI1 = 0; gI1 < 4; ++gI1) {
      std::complex<double> tmp_5728;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_5728 += B0(p,MSHI0(gI1),MHpm(gI2))*Conj(CpconjUSHIpSHI0Hpm(
            gO2,gI1,gI2))*CpconjUSHIpSHI0Hpm(gO1,gI1,gI2);
      }
      tmp_5727 += tmp_5728;
   }
   result += tmp_5727;
   std::complex<double> tmp_5729;
   for (unsigned gI1 = 0; gI1 < 4; ++gI1) {
      std::complex<double> tmp_5730;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_5730 += (Conj(CpconjUSHIpChiIChaPL(gO2,gI1,gI2))*
            CpconjUSHIpChiIChaPL(gO1,gI1,gI2) + Conj(CpconjUSHIpChiIChaPR(gO2,gI1,
            gI2))*CpconjUSHIpChiIChaPR(gO1,gI1,gI2))*G0(p,MChiI(gI1),MCha(gI2));
      }
      tmp_5729 += tmp_5730;
   }
   result += tmp_5729;
   std::complex<double> tmp_5731;
   for (unsigned gI1 = 0; gI1 < 4; ++gI1) {
      std::complex<double> tmp_5732;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_5732 += B0(p,MSHIp(gI1),MAh(gI2))*Conj(CpconjUSHIpSHIpAh(gO2
            ,gI1,gI2))*CpconjUSHIpSHIpAh(gO1,gI1,gI2);
      }
      tmp_5731 += tmp_5732;
   }
   result += tmp_5731;
   std::complex<double> tmp_5733;
   for (unsigned gI1 = 0; gI1 < 4; ++gI1) {
      std::complex<double> tmp_5734;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_5734 += B0(p,MSHIp(gI1),Mhh(gI2))*Conj(CpconjUSHIpSHIphh(gO2
            ,gI1,gI2))*CpconjUSHIpSHIphh(gO1,gI1,gI2);
      }
      tmp_5733 += tmp_5734;
   }
   result += tmp_5733;
   std::complex<double> tmp_5735;
   std::complex<double> tmp_5736;
   for (unsigned gI1 = 0; gI1 < 4; ++gI1) {
      std::complex<double> tmp_5737;
      std::complex<double> tmp_5738;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_5738 += B0(p,MChiI(gI1),MCha(gI2))*(Conj(
            CpconjUSHIpChiIChaPR(gO2,gI1,gI2))*CpconjUSHIpChiIChaPL(gO1,gI1,gI2) +
            Conj(CpconjUSHIpChiIChaPL(gO2,gI1,gI2))*CpconjUSHIpChiIChaPR(gO1,gI1,
            gI2))*MCha(gI2);
      }
      tmp_5737 += tmp_5738;
      tmp_5736 += (MChiI(gI1)) * tmp_5737;
   }
   tmp_5735 += tmp_5736;
   result += (-2) * tmp_5735;
   std::complex<double> tmp_5739;
   std::complex<double> tmp_5740;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_5740 += A0(MSd(gI1))*CpUSHIpconjUSHIpconjSdSd(gO1,gO2,gI1,gI1);
   }
   tmp_5739 += tmp_5740;
   result += (-3) * tmp_5739;
   std::complex<double> tmp_5741;
   std::complex<double> tmp_5742;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_5742 += A0(MSDX(gI1))*CpUSHIpconjUSHIpconjSDXSDX(gO1,gO2,gI1,gI1);
   }
   tmp_5741 += tmp_5742;
   result += (-3) * tmp_5741;
   std::complex<double> tmp_5743;
   std::complex<double> tmp_5744;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_5744 += A0(MSe(gI1))*CpUSHIpconjUSHIpconjSeSe(gO1,gO2,gI1,gI1);
   }
   tmp_5743 += tmp_5744;
   result += (-1) * tmp_5743;
   std::complex<double> tmp_5745;
   std::complex<double> tmp_5746;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_5746 += A0(MSu(gI1))*CpUSHIpconjUSHIpconjSuSu(gO1,gO2,gI1,gI1);
   }
   tmp_5745 += tmp_5746;
   result += (-3) * tmp_5745;
   std::complex<double> tmp_5747;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_5748;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_5748 += (Conj(CpconjUSHIpChiChaIPL(gO2,gI1,gI2))*
            CpconjUSHIpChiChaIPL(gO1,gI1,gI2) + Conj(CpconjUSHIpChiChaIPR(gO2,gI1,
            gI2))*CpconjUSHIpChiChaIPR(gO1,gI1,gI2))*G0(p,MChi(gI1),MChaI(gI2));
      }
      tmp_5747 += tmp_5748;
   }
   result += tmp_5747;
   std::complex<double> tmp_5749;
   std::complex<double> tmp_5750;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_5751;
      std::complex<double> tmp_5752;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_5752 += B0(p,MChi(gI1),MChaI(gI2))*(Conj(
            CpconjUSHIpChiChaIPR(gO2,gI1,gI2))*CpconjUSHIpChiChaIPL(gO1,gI1,gI2) +
            Conj(CpconjUSHIpChiChaIPL(gO2,gI1,gI2))*CpconjUSHIpChiChaIPR(gO1,gI1,
            gI2))*MChaI(gI2);
      }
      tmp_5751 += tmp_5752;
      tmp_5750 += (MChi(gI1)) * tmp_5751;
   }
   tmp_5749 += tmp_5750;
   result += (-2) * tmp_5749;
   std::complex<double> tmp_5753;
   for (unsigned gI2 = 0; gI2 < 4; ++gI2) {
      tmp_5753 += Conj(CpconjUSHIpVWmSHI0(gO2,gI2))*CpconjUSHIpVWmSHI0(gO1,
         gI2)*F0(p,MSHI0(gI2),MVWm);
   }
   result += tmp_5753;
   std::complex<double> tmp_5754;
   for (unsigned gI2 = 0; gI2 < 4; ++gI2) {
      tmp_5754 += Conj(CpconjUSHIpVPSHIp(gO2,gI2))*CpconjUSHIpVPSHIp(gO1,gI2
         )*F0(p,MSHIp(gI2),0);
   }
   result += tmp_5754;
   std::complex<double> tmp_5755;
   for (unsigned gI2 = 0; gI2 < 4; ++gI2) {
      tmp_5755 += Conj(CpconjUSHIpVZSHIp(gO2,gI2))*CpconjUSHIpVZSHIp(gO1,gI2
         )*F0(p,MSHIp(gI2),MVZ);
   }
   result += tmp_5755;
   std::complex<double> tmp_5756;
   for (unsigned gI2 = 0; gI2 < 4; ++gI2) {
      tmp_5756 += Conj(CpconjUSHIpVZpSHIp(gO2,gI2))*CpconjUSHIpVZpSHIp(gO1,
         gI2)*F0(p,MSHIp(gI2),MVZp);
   }
   result += tmp_5756;

   return result * oneOver16PiSqr;

}

std::complex<double> CLASSNAME::self_energy_SSI0(double p , unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   result += 2*A0(MVZp)*CpUSSI0conjUSSI0VZpVZp(gO1,gO2);
   result += 2*A0(MVZ)*CpUSSI0conjUSSI0VZVZ(gO1,gO2);
   std::complex<double> tmp_5757;
   std::complex<double> tmp_5758;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      tmp_5758 += A0(MHpm(gI1))*CpUSSI0conjUSSI0conjHpmHpm(gO1,gO2,gI1,gI1);
   }
   tmp_5757 += tmp_5758;
   result += (-1) * tmp_5757;
   std::complex<double> tmp_5759;
   std::complex<double> tmp_5760;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      tmp_5760 += A0(MSHp0(gI1))*CpUSSI0conjUSSI0conjSHp0SHp0(gO1,gO2,gI1,
         gI1);
   }
   tmp_5759 += tmp_5760;
   result += (-1) * tmp_5759;
   std::complex<double> tmp_5761;
   std::complex<double> tmp_5762;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      tmp_5762 += A0(MSHpp(gI1))*CpUSSI0conjUSSI0conjSHppSHpp(gO1,gO2,gI1,
         gI1);
   }
   tmp_5761 += tmp_5762;
   result += (-1) * tmp_5761;
   std::complex<double> tmp_5763;
   std::complex<double> tmp_5764;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      tmp_5764 += A0(MSSI0(gI1))*CpUSSI0conjUSSI0conjSSI0SSI0(gO1,gO2,gI1,
         gI1);
   }
   tmp_5763 += tmp_5764;
   result += (-1) * tmp_5763;
   std::complex<double> tmp_5765;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_5766;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_5766 += B0(p,MSSI0(gI1),Mhh(gI2))*Conj(CpconjUSSI0SSI0hh(gO2
            ,gI1,gI2))*CpconjUSSI0SSI0hh(gO1,gI1,gI2);
      }
      tmp_5765 += tmp_5766;
   }
   result += tmp_5765;
   std::complex<double> tmp_5767;
   std::complex<double> tmp_5768;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_5769;
      for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
         tmp_5769 += (Conj(CpconjUSSI0FSIChiPL(gO2,gI1,gI2))*
            CpconjUSSI0FSIChiPL(gO1,gI1,gI2) + Conj(CpconjUSSI0FSIChiPR(gO2,gI1,
            gI2))*CpconjUSSI0FSIChiPR(gO1,gI1,gI2))*G0(p,MFSI(gI1),MChi(gI2));
      }
      tmp_5768 += tmp_5769;
   }
   tmp_5767 += tmp_5768;
   result += (0.5) * tmp_5767;
   std::complex<double> tmp_5770;
   std::complex<double> tmp_5771;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_5772;
      std::complex<double> tmp_5773;
      for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
         tmp_5773 += B0(p,MFSI(gI1),MChi(gI2))*(Conj(CpconjUSSI0FSIChiPR(
            gO2,gI1,gI2))*CpconjUSSI0FSIChiPL(gO1,gI1,gI2) + Conj(
            CpconjUSSI0FSIChiPL(gO2,gI1,gI2))*CpconjUSSI0FSIChiPR(gO1,gI1,gI2))*
            MChi(gI2);
      }
      tmp_5772 += tmp_5773;
      tmp_5771 += (MFSI(gI1)) * tmp_5772;
   }
   tmp_5770 += tmp_5771;
   result += (-1) * tmp_5770;
   std::complex<double> tmp_5774;
   std::complex<double> tmp_5775;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      tmp_5775 += A0(MAh(gI1))*CpUSSI0conjUSSI0AhAh(gO1,gO2,gI1,gI1);
   }
   tmp_5774 += tmp_5775;
   result += (-0.5) * tmp_5774;
   std::complex<double> tmp_5776;
   std::complex<double> tmp_5777;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      tmp_5777 += A0(MSv(gI1))*CpUSSI0conjUSSI0conjSvSv(gO1,gO2,gI1,gI1);
   }
   tmp_5776 += tmp_5777;
   result += (-1) * tmp_5776;
   std::complex<double> tmp_5778;
   std::complex<double> tmp_5779;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      tmp_5779 += A0(Mhh(gI1))*CpUSSI0conjUSSI0hhhh(gO1,gO2,gI1,gI1);
   }
   tmp_5778 += tmp_5779;
   result += (-0.5) * tmp_5778;
   std::complex<double> tmp_5780;
   std::complex<double> tmp_5781;
   for (unsigned gI1 = 0; gI1 < 4; ++gI1) {
      tmp_5781 += A0(MSHI0(gI1))*CpUSSI0conjUSSI0conjSHI0SHI0(gO1,gO2,gI1,
         gI1);
   }
   tmp_5780 += tmp_5781;
   result += (-1) * tmp_5780;
   std::complex<double> tmp_5782;
   std::complex<double> tmp_5783;
   for (unsigned gI1 = 0; gI1 < 4; ++gI1) {
      tmp_5783 += A0(MSHIp(gI1))*CpUSSI0conjUSSI0conjSHIpSHIp(gO1,gO2,gI1,
         gI1);
   }
   tmp_5782 += tmp_5783;
   result += (-1) * tmp_5782;
   std::complex<double> tmp_5784;
   std::complex<double> tmp_5785;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_5785 += A0(MSd(gI1))*CpUSSI0conjUSSI0conjSdSd(gO1,gO2,gI1,gI1);
   }
   tmp_5784 += tmp_5785;
   result += (-3) * tmp_5784;
   std::complex<double> tmp_5786;
   std::complex<double> tmp_5787;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_5787 += A0(MSDX(gI1))*CpUSSI0conjUSSI0conjSDXSDX(gO1,gO2,gI1,gI1);
   }
   tmp_5786 += tmp_5787;
   result += (-3) * tmp_5786;
   std::complex<double> tmp_5788;
   std::complex<double> tmp_5789;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_5789 += A0(MSe(gI1))*CpUSSI0conjUSSI0conjSeSe(gO1,gO2,gI1,gI1);
   }
   tmp_5788 += tmp_5789;
   result += (-1) * tmp_5788;
   std::complex<double> tmp_5790;
   std::complex<double> tmp_5791;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_5791 += A0(MSu(gI1))*CpUSSI0conjUSSI0conjSuSu(gO1,gO2,gI1,gI1);
   }
   tmp_5790 += tmp_5791;
   result += (-3) * tmp_5790;
   std::complex<double> tmp_5792;
   for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
      tmp_5792 += Conj(CpconjUSSI0VZSSI0(gO2,gI2))*CpconjUSSI0VZSSI0(gO1,gI2
         )*F0(p,MSSI0(gI2),MVZ);
   }
   result += tmp_5792;
   std::complex<double> tmp_5793;
   for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
      tmp_5793 += Conj(CpconjUSSI0VZpSSI0(gO2,gI2))*CpconjUSSI0VZpSSI0(gO1,
         gI2)*F0(p,MSSI0(gI2),MVZp);
   }
   result += tmp_5793;

   return result * oneOver16PiSqr;

}

std::complex<double> CLASSNAME::self_energy_SHp0(double p , unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   result += 4*A0(MVWm)*CpUSHp0conjUSHp0conjVWmVWm(gO1,gO2);
   result += 2*A0(MVZp)*CpUSHp0conjUSHp0VZpVZp(gO1,gO2);
   result += 2*A0(MVZ)*CpUSHp0conjUSHp0VZVZ(gO1,gO2);
   std::complex<double> tmp_5794;
   std::complex<double> tmp_5795;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      tmp_5795 += A0(MHpm(gI1))*CpUSHp0conjUSHp0conjHpmHpm(gO1,gO2,gI1,gI1);
   }
   tmp_5794 += tmp_5795;
   result += (-1) * tmp_5794;
   std::complex<double> tmp_5796;
   std::complex<double> tmp_5797;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      tmp_5797 += A0(MSHp0(gI1))*CpUSHp0conjUSHp0conjSHp0SHp0(gO1,gO2,gI1,
         gI1);
   }
   tmp_5796 += tmp_5797;
   result += (-1) * tmp_5796;
   std::complex<double> tmp_5798;
   std::complex<double> tmp_5799;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      tmp_5799 += A0(MSHpp(gI1))*CpUSHp0conjUSHp0conjSHppSHpp(gO1,gO2,gI1,
         gI1);
   }
   tmp_5798 += tmp_5799;
   result += (-1) * tmp_5798;
   std::complex<double> tmp_5800;
   std::complex<double> tmp_5801;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      tmp_5801 += A0(MSSI0(gI1))*CpUSHp0conjUSHp0conjSSI0SSI0(gO1,gO2,gI1,
         gI1);
   }
   tmp_5800 += tmp_5801;
   result += (-1) * tmp_5800;
   std::complex<double> tmp_5802;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      tmp_5802 += (Conj(CpconjUSHp0barChaChaPPL(gO2,gI1))*
         CpconjUSHp0barChaChaPPL(gO1,gI1) + Conj(CpconjUSHp0barChaChaPPR(gO2,gI1))
         *CpconjUSHp0barChaChaPPR(gO1,gI1))*G0(p,MCha(gI1),MChaP);
   }
   result += tmp_5802;
   std::complex<double> tmp_5803;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_5804;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_5804 += B0(p,MHpm(gI1),MSHpp(gI2))*Conj(
            CpconjUSHp0conjHpmSHpp(gO2,gI1,gI2))*CpconjUSHp0conjHpmSHpp(gO1,gI1,
            gI2);
      }
      tmp_5803 += tmp_5804;
   }
   result += tmp_5803;
   std::complex<double> tmp_5805;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_5806;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_5806 += B0(p,MSHp0(gI1),Mhh(gI2))*Conj(CpconjUSHp0SHp0hh(gO2
            ,gI1,gI2))*CpconjUSHp0SHp0hh(gO1,gI1,gI2);
      }
      tmp_5805 += tmp_5806;
   }
   result += tmp_5805;
   std::complex<double> tmp_5807;
   std::complex<double> tmp_5808;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_5809;
      for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
         tmp_5809 += (Conj(CpconjUSHp0ChiPChiPL(gO2,gI1,gI2))*
            CpconjUSHp0ChiPChiPL(gO1,gI1,gI2) + Conj(CpconjUSHp0ChiPChiPR(gO2,gI1,
            gI2))*CpconjUSHp0ChiPChiPR(gO1,gI1,gI2))*G0(p,MChiP(gI1),MChi(gI2));
      }
      tmp_5808 += tmp_5809;
   }
   tmp_5807 += tmp_5808;
   result += (0.5) * tmp_5807;
   std::complex<double> tmp_5810;
   std::complex<double> tmp_5811;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_5812;
      std::complex<double> tmp_5813;
      for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
         tmp_5813 += B0(p,MChiP(gI1),MChi(gI2))*(Conj(
            CpconjUSHp0ChiPChiPR(gO2,gI1,gI2))*CpconjUSHp0ChiPChiPL(gO1,gI1,gI2) +
            Conj(CpconjUSHp0ChiPChiPL(gO2,gI1,gI2))*CpconjUSHp0ChiPChiPR(gO1,gI1,
            gI2))*MChi(gI2);
      }
      tmp_5812 += tmp_5813;
      tmp_5811 += (MChiP(gI1)) * tmp_5812;
   }
   tmp_5810 += tmp_5811;
   result += (-1) * tmp_5810;
   std::complex<double> tmp_5814;
   std::complex<double> tmp_5815;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      tmp_5815 += A0(MAh(gI1))*CpUSHp0conjUSHp0AhAh(gO1,gO2,gI1,gI1);
   }
   tmp_5814 += tmp_5815;
   result += (-0.5) * tmp_5814;
   std::complex<double> tmp_5816;
   std::complex<double> tmp_5817;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      tmp_5817 += A0(MSv(gI1))*CpUSHp0conjUSHp0conjSvSv(gO1,gO2,gI1,gI1);
   }
   tmp_5816 += tmp_5817;
   result += (-1) * tmp_5816;
   std::complex<double> tmp_5818;
   std::complex<double> tmp_5819;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      tmp_5819 += A0(Mhh(gI1))*CpUSHp0conjUSHp0hhhh(gO1,gO2,gI1,gI1);
   }
   tmp_5818 += tmp_5819;
   result += (-0.5) * tmp_5818;
   std::complex<double> tmp_5820;
   std::complex<double> tmp_5821;
   for (unsigned gI1 = 0; gI1 < 4; ++gI1) {
      tmp_5821 += A0(MSHI0(gI1))*CpUSHp0conjUSHp0conjSHI0SHI0(gO1,gO2,gI1,
         gI1);
   }
   tmp_5820 += tmp_5821;
   result += (-1) * tmp_5820;
   std::complex<double> tmp_5822;
   std::complex<double> tmp_5823;
   for (unsigned gI1 = 0; gI1 < 4; ++gI1) {
      tmp_5823 += A0(MSHIp(gI1))*CpUSHp0conjUSHp0conjSHIpSHIp(gO1,gO2,gI1,
         gI1);
   }
   tmp_5822 += tmp_5823;
   result += (-1) * tmp_5822;
   std::complex<double> tmp_5824;
   std::complex<double> tmp_5825;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_5825 += A0(MSd(gI1))*CpUSHp0conjUSHp0conjSdSd(gO1,gO2,gI1,gI1);
   }
   tmp_5824 += tmp_5825;
   result += (-3) * tmp_5824;
   std::complex<double> tmp_5826;
   std::complex<double> tmp_5827;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_5827 += A0(MSDX(gI1))*CpUSHp0conjUSHp0conjSDXSDX(gO1,gO2,gI1,gI1);
   }
   tmp_5826 += tmp_5827;
   result += (-3) * tmp_5826;
   std::complex<double> tmp_5828;
   std::complex<double> tmp_5829;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_5829 += A0(MSe(gI1))*CpUSHp0conjUSHp0conjSeSe(gO1,gO2,gI1,gI1);
   }
   tmp_5828 += tmp_5829;
   result += (-1) * tmp_5828;
   std::complex<double> tmp_5830;
   std::complex<double> tmp_5831;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_5831 += A0(MSu(gI1))*CpUSHp0conjUSHp0conjSuSu(gO1,gO2,gI1,gI1);
   }
   tmp_5830 += tmp_5831;
   result += (-3) * tmp_5830;
   std::complex<double> tmp_5832;
   for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
      tmp_5832 += Conj(CpconjUSHp0VZSHp0(gO2,gI2))*CpconjUSHp0VZSHp0(gO1,gI2
         )*F0(p,MSHp0(gI2),MVZ);
   }
   result += tmp_5832;
   std::complex<double> tmp_5833;
   for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
      tmp_5833 += Conj(CpconjUSHp0VZpSHp0(gO2,gI2))*CpconjUSHp0VZpSHp0(gO1,
         gI2)*F0(p,MSHp0(gI2),MVZp);
   }
   result += tmp_5833;
   std::complex<double> tmp_5834;
   for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
      tmp_5834 += Conj(CpconjUSHp0conjVWmSHpp(gO2,gI2))*
         CpconjUSHp0conjVWmSHpp(gO1,gI2)*F0(p,MSHpp(gI2),MVWm);
   }
   result += tmp_5834;
   std::complex<double> tmp_5835;
   std::complex<double> tmp_5836;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      tmp_5836 += B0(p,MCha(gI1),MChaP)*(Conj(CpconjUSHp0barChaChaPPR(gO2,
         gI1))*CpconjUSHp0barChaChaPPL(gO1,gI1) + Conj(CpconjUSHp0barChaChaPPL(gO2
         ,gI1))*CpconjUSHp0barChaChaPPR(gO1,gI1))*MCha(gI1);
   }
   tmp_5835 += tmp_5836;
   result += (-2*MChaP) * tmp_5835;

   return result * oneOver16PiSqr;

}

std::complex<double> CLASSNAME::self_energy_SHpp(double p , unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   result += 4*A0(MVWm)*CpUSHppconjUSHppconjVWmVWm(gO1,gO2);
   result += 2*A0(MVZp)*CpUSHppconjUSHppVZpVZp(gO1,gO2);
   result += 2*A0(MVZ)*CpUSHppconjUSHppVZVZ(gO1,gO2);
   std::complex<double> tmp_5837;
   std::complex<double> tmp_5838;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      tmp_5838 += A0(MHpm(gI1))*CpUSHppconjUSHppconjHpmHpm(gO1,gO2,gI1,gI1);
   }
   tmp_5837 += tmp_5838;
   result += (-1) * tmp_5837;
   std::complex<double> tmp_5839;
   std::complex<double> tmp_5840;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      tmp_5840 += A0(MSHp0(gI1))*CpUSHppconjUSHppconjSHp0SHp0(gO1,gO2,gI1,
         gI1);
   }
   tmp_5839 += tmp_5840;
   result += (-1) * tmp_5839;
   std::complex<double> tmp_5841;
   std::complex<double> tmp_5842;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      tmp_5842 += A0(MSHpp(gI1))*CpUSHppconjUSHppconjSHppSHpp(gO1,gO2,gI1,
         gI1);
   }
   tmp_5841 += tmp_5842;
   result += (-1) * tmp_5841;
   std::complex<double> tmp_5843;
   std::complex<double> tmp_5844;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      tmp_5844 += A0(MSSI0(gI1))*CpUSHppconjUSHppconjSSI0SSI0(gO1,gO2,gI1,
         gI1);
   }
   tmp_5843 += tmp_5844;
   result += (-1) * tmp_5843;
   std::complex<double> tmp_5845;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_5846;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_5846 += B0(p,MSHp0(gI1),MHpm(gI2))*Conj(CpconjUSHppSHp0Hpm(
            gO2,gI1,gI2))*CpconjUSHppSHp0Hpm(gO1,gI1,gI2);
      }
      tmp_5845 += tmp_5846;
   }
   result += tmp_5845;
   std::complex<double> tmp_5847;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_5848;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_5848 += (Conj(CpconjUSHppChiPChaPL(gO2,gI1,gI2))*
            CpconjUSHppChiPChaPL(gO1,gI1,gI2) + Conj(CpconjUSHppChiPChaPR(gO2,gI1,
            gI2))*CpconjUSHppChiPChaPR(gO1,gI1,gI2))*G0(p,MChiP(gI1),MCha(gI2));
      }
      tmp_5847 += tmp_5848;
   }
   result += tmp_5847;
   std::complex<double> tmp_5849;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_5850;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_5850 += B0(p,MSHpp(gI1),Mhh(gI2))*Conj(CpconjUSHppSHpphh(gO2
            ,gI1,gI2))*CpconjUSHppSHpphh(gO1,gI1,gI2);
      }
      tmp_5849 += tmp_5850;
   }
   result += tmp_5849;
   std::complex<double> tmp_5851;
   std::complex<double> tmp_5852;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_5853;
      std::complex<double> tmp_5854;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_5854 += B0(p,MChiP(gI1),MCha(gI2))*(Conj(
            CpconjUSHppChiPChaPR(gO2,gI1,gI2))*CpconjUSHppChiPChaPL(gO1,gI1,gI2) +
            Conj(CpconjUSHppChiPChaPL(gO2,gI1,gI2))*CpconjUSHppChiPChaPR(gO1,gI1,
            gI2))*MCha(gI2);
      }
      tmp_5853 += tmp_5854;
      tmp_5852 += (MChiP(gI1)) * tmp_5853;
   }
   tmp_5851 += tmp_5852;
   result += (-2) * tmp_5851;
   std::complex<double> tmp_5855;
   std::complex<double> tmp_5856;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      tmp_5856 += A0(MAh(gI1))*CpUSHppconjUSHppAhAh(gO1,gO2,gI1,gI1);
   }
   tmp_5855 += tmp_5856;
   result += (-0.5) * tmp_5855;
   std::complex<double> tmp_5857;
   std::complex<double> tmp_5858;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      tmp_5858 += A0(MSv(gI1))*CpUSHppconjUSHppconjSvSv(gO1,gO2,gI1,gI1);
   }
   tmp_5857 += tmp_5858;
   result += (-1) * tmp_5857;
   std::complex<double> tmp_5859;
   std::complex<double> tmp_5860;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      tmp_5860 += A0(Mhh(gI1))*CpUSHppconjUSHpphhhh(gO1,gO2,gI1,gI1);
   }
   tmp_5859 += tmp_5860;
   result += (-0.5) * tmp_5859;
   std::complex<double> tmp_5861;
   std::complex<double> tmp_5862;
   for (unsigned gI1 = 0; gI1 < 4; ++gI1) {
      tmp_5862 += A0(MSHI0(gI1))*CpUSHppconjUSHppconjSHI0SHI0(gO1,gO2,gI1,
         gI1);
   }
   tmp_5861 += tmp_5862;
   result += (-1) * tmp_5861;
   std::complex<double> tmp_5863;
   std::complex<double> tmp_5864;
   for (unsigned gI1 = 0; gI1 < 4; ++gI1) {
      tmp_5864 += A0(MSHIp(gI1))*CpUSHppconjUSHppconjSHIpSHIp(gO1,gO2,gI1,
         gI1);
   }
   tmp_5863 += tmp_5864;
   result += (-1) * tmp_5863;
   std::complex<double> tmp_5865;
   std::complex<double> tmp_5866;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_5866 += A0(MSd(gI1))*CpUSHppconjUSHppconjSdSd(gO1,gO2,gI1,gI1);
   }
   tmp_5865 += tmp_5866;
   result += (-3) * tmp_5865;
   std::complex<double> tmp_5867;
   std::complex<double> tmp_5868;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_5868 += A0(MSDX(gI1))*CpUSHppconjUSHppconjSDXSDX(gO1,gO2,gI1,gI1);
   }
   tmp_5867 += tmp_5868;
   result += (-3) * tmp_5867;
   std::complex<double> tmp_5869;
   std::complex<double> tmp_5870;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_5870 += A0(MSe(gI1))*CpUSHppconjUSHppconjSeSe(gO1,gO2,gI1,gI1);
   }
   tmp_5869 += tmp_5870;
   result += (-1) * tmp_5869;
   std::complex<double> tmp_5871;
   std::complex<double> tmp_5872;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_5872 += A0(MSu(gI1))*CpUSHppconjUSHppconjSuSu(gO1,gO2,gI1,gI1);
   }
   tmp_5871 += tmp_5872;
   result += (-3) * tmp_5871;
   std::complex<double> tmp_5873;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_5873 += (Conj(CpconjUSHppChiChaPPL(gO2,gI1))*CpconjUSHppChiChaPPL(
         gO1,gI1) + Conj(CpconjUSHppChiChaPPR(gO2,gI1))*CpconjUSHppChiChaPPR(gO1,
         gI1))*G0(p,MChi(gI1),MChaP);
   }
   result += tmp_5873;
   std::complex<double> tmp_5874;
   for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
      tmp_5874 += Conj(CpconjUSHppVWmSHp0(gO2,gI2))*CpconjUSHppVWmSHp0(gO1,
         gI2)*F0(p,MSHp0(gI2),MVWm);
   }
   result += tmp_5874;
   std::complex<double> tmp_5875;
   for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
      tmp_5875 += Conj(CpconjUSHppVPSHpp(gO2,gI2))*CpconjUSHppVPSHpp(gO1,gI2
         )*F0(p,MSHpp(gI2),0);
   }
   result += tmp_5875;
   std::complex<double> tmp_5876;
   for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
      tmp_5876 += Conj(CpconjUSHppVZSHpp(gO2,gI2))*CpconjUSHppVZSHpp(gO1,gI2
         )*F0(p,MSHpp(gI2),MVZ);
   }
   result += tmp_5876;
   std::complex<double> tmp_5877;
   for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
      tmp_5877 += Conj(CpconjUSHppVZpSHpp(gO2,gI2))*CpconjUSHppVZpSHpp(gO1,
         gI2)*F0(p,MSHpp(gI2),MVZp);
   }
   result += tmp_5877;
   std::complex<double> tmp_5878;
   std::complex<double> tmp_5879;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_5879 += B0(p,MChi(gI1),MChaP)*(Conj(CpconjUSHppChiChaPPR(gO2,gI1))
         *CpconjUSHppChiChaPPL(gO1,gI1) + Conj(CpconjUSHppChiChaPPL(gO2,gI1))*
         CpconjUSHppChiChaPPR(gO1,gI1))*MChi(gI1);
   }
   tmp_5878 += tmp_5879;
   result += (-2*MChaP) * tmp_5878;

   return result * oneOver16PiSqr;

}

std::complex<double> CLASSNAME::self_energy_VZ(double p ) const
{
   std::complex<double> result;

   result += AbsSqr(CpVZbargWmCgWmC())*B00(p,MVWm,MVWm);
   result += AbsSqr(CpVZbargWmgWm())*B00(p,MVWm,MVWm);
   result += -(A0(MVWm)*(4*CpVZVZconjVWmVWm1() + CpVZVZconjVWmVWm2() +
      CpVZVZconjVWmVWm3()));
   result += (AbsSqr(CpVZbarChaPChaPPL()) + AbsSqr(CpVZbarChaPChaPPR()))*H0(p,
      MChaP,MChaP);
   std::complex<double> tmp_5880;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      tmp_5880 += A0(MHpm(gI1))*CpVZVZconjHpmHpm(gI1,gI1);
   }
   result += tmp_5880;
   std::complex<double> tmp_5881;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      tmp_5881 += A0(MSHp0(gI1))*CpVZVZconjSHp0SHp0(gI1,gI1);
   }
   result += tmp_5881;
   std::complex<double> tmp_5882;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      tmp_5882 += A0(MSHpp(gI1))*CpVZVZconjSHppSHpp(gI1,gI1);
   }
   result += tmp_5882;
   std::complex<double> tmp_5883;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      tmp_5883 += A0(MSSI0(gI1))*CpVZVZconjSSI0SSI0(gI1,gI1);
   }
   result += tmp_5883;
   std::complex<double> tmp_5884;
   std::complex<double> tmp_5885;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_5886;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_5886 += AbsSqr(CpVZconjHpmHpm(gI1,gI2))*B00(p,MHpm(gI1),MHpm
            (gI2));
      }
      tmp_5885 += tmp_5886;
   }
   tmp_5884 += tmp_5885;
   result += (-4) * tmp_5884;
   std::complex<double> tmp_5887;
   std::complex<double> tmp_5888;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_5889;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_5889 += AbsSqr(CpVZconjSHp0SHp0(gI1,gI2))*B00(p,MSHp0(gI1),
            MSHp0(gI2));
      }
      tmp_5888 += tmp_5889;
   }
   tmp_5887 += tmp_5888;
   result += (-4) * tmp_5887;
   std::complex<double> tmp_5890;
   std::complex<double> tmp_5891;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_5892;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_5892 += AbsSqr(CpVZconjSHppSHpp(gI1,gI2))*B00(p,MSHpp(gI1),
            MSHpp(gI2));
      }
      tmp_5891 += tmp_5892;
   }
   tmp_5890 += tmp_5891;
   result += (-4) * tmp_5890;
   std::complex<double> tmp_5893;
   std::complex<double> tmp_5894;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_5895;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_5895 += AbsSqr(CpVZconjSSI0SSI0(gI1,gI2))*B00(p,MSSI0(gI1),
            MSSI0(gI2));
      }
      tmp_5894 += tmp_5895;
   }
   tmp_5893 += tmp_5894;
   result += (-4) * tmp_5893;
   std::complex<double> tmp_5896;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_5897;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_5897 += (AbsSqr(CpVZbarChaChaPL(gI1,gI2)) + AbsSqr(
            CpVZbarChaChaPR(gI1,gI2)))*H0(p,MCha(gI1),MCha(gI2));
         tmp_5897 += 4*B0(p,MCha(gI1),MCha(gI2))*MCha(gI1)*MCha(gI2)*Re(
            Conj(CpVZbarChaChaPL(gI1,gI2))*CpVZbarChaChaPR(gI1,gI2));
      }
      tmp_5896 += tmp_5897;
   }
   result += tmp_5896;
   std::complex<double> tmp_5898;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_5899;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_5899 += (AbsSqr(CpVZbarChaIChaIPL(gI1,gI2)) + AbsSqr(
            CpVZbarChaIChaIPR(gI1,gI2)))*H0(p,MChaI(gI1),MChaI(gI2));
         tmp_5899 += 4*B0(p,MChaI(gI1),MChaI(gI2))*MChaI(gI1)*MChaI(gI2)*
            Re(Conj(CpVZbarChaIChaIPL(gI1,gI2))*CpVZbarChaIChaIPR(gI1,gI2));
      }
      tmp_5898 += tmp_5899;
   }
   result += tmp_5898;
   std::complex<double> tmp_5900;
   std::complex<double> tmp_5901;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_5902;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_5902 += (AbsSqr(CpVZChiPChiPPL(gI1,gI2)) + AbsSqr(
            CpVZChiPChiPPR(gI1,gI2)))*H0(p,MChiP(gI1),MChiP(gI2));
         tmp_5902 += 4*B0(p,MChiP(gI1),MChiP(gI2))*MChiP(gI1)*MChiP(gI2)*
            Re(Conj(CpVZChiPChiPPL(gI1,gI2))*CpVZChiPChiPPR(gI1,gI2));
      }
      tmp_5901 += tmp_5902;
   }
   tmp_5900 += tmp_5901;
   result += (0.5) * tmp_5900;
   std::complex<double> tmp_5903;
   std::complex<double> tmp_5904;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_5905;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_5905 += (AbsSqr(CpVZFSIFSIPL(gI1,gI2)) + AbsSqr(CpVZFSIFSIPR
            (gI1,gI2)))*H0(p,MFSI(gI1),MFSI(gI2));
         tmp_5905 += 4*B0(p,MFSI(gI1),MFSI(gI2))*MFSI(gI1)*MFSI(gI2)*Re(
            Conj(CpVZFSIFSIPL(gI1,gI2))*CpVZFSIFSIPR(gI1,gI2));
      }
      tmp_5904 += tmp_5905;
   }
   tmp_5903 += tmp_5904;
   result += (0.5) * tmp_5903;
   std::complex<double> tmp_5906;
   std::complex<double> tmp_5907;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      tmp_5907 += A0(MAh(gI1))*CpVZVZAhAh(gI1,gI1);
   }
   tmp_5906 += tmp_5907;
   result += (0.5) * tmp_5906;
   std::complex<double> tmp_5908;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      tmp_5908 += A0(MSv(gI1))*CpVZVZconjSvSv(gI1,gI1);
   }
   result += tmp_5908;
   std::complex<double> tmp_5909;
   std::complex<double> tmp_5910;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      tmp_5910 += A0(Mhh(gI1))*CpVZVZhhhh(gI1,gI1);
   }
   tmp_5909 += tmp_5910;
   result += (0.5) * tmp_5909;
   std::complex<double> tmp_5911;
   std::complex<double> tmp_5912;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_5913;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_5913 += AbsSqr(CpVZconjSvSv(gI1,gI2))*B00(p,MSv(gI1),MSv(gI2
            ));
      }
      tmp_5912 += tmp_5913;
   }
   tmp_5911 += tmp_5912;
   result += (-4) * tmp_5911;
   std::complex<double> tmp_5914;
   std::complex<double> tmp_5915;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_5916;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_5916 += AbsSqr(CpVZhhAh(gI1,gI2))*B00(p,MAh(gI2),Mhh(gI1));
      }
      tmp_5915 += tmp_5916;
   }
   tmp_5914 += tmp_5915;
   result += (-4) * tmp_5914;
   std::complex<double> tmp_5917;
   std::complex<double> tmp_5918;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_5919;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_5919 += (AbsSqr(CpVZbarFdFdPL(gI1,gI2)) + AbsSqr(
            CpVZbarFdFdPR(gI1,gI2)))*H0(p,MFd(gI1),MFd(gI2));
         tmp_5919 += 4*B0(p,MFd(gI1),MFd(gI2))*MFd(gI1)*MFd(gI2)*Re(Conj(
            CpVZbarFdFdPL(gI1,gI2))*CpVZbarFdFdPR(gI1,gI2));
      }
      tmp_5918 += tmp_5919;
   }
   tmp_5917 += tmp_5918;
   result += (3) * tmp_5917;
   std::complex<double> tmp_5920;
   std::complex<double> tmp_5921;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_5922;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_5922 += (AbsSqr(CpVZbarFDXFDXPL(gI1,gI2)) + AbsSqr(
            CpVZbarFDXFDXPR(gI1,gI2)))*H0(p,MFDX(gI1),MFDX(gI2));
         tmp_5922 += 4*B0(p,MFDX(gI1),MFDX(gI2))*MFDX(gI1)*MFDX(gI2)*Re(
            Conj(CpVZbarFDXFDXPL(gI1,gI2))*CpVZbarFDXFDXPR(gI1,gI2));
      }
      tmp_5921 += tmp_5922;
   }
   tmp_5920 += tmp_5921;
   result += (3) * tmp_5920;
   std::complex<double> tmp_5923;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_5924;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_5924 += (AbsSqr(CpVZbarFeFePL(gI1,gI2)) + AbsSqr(
            CpVZbarFeFePR(gI1,gI2)))*H0(p,MFe(gI1),MFe(gI2));
         tmp_5924 += 4*B0(p,MFe(gI1),MFe(gI2))*MFe(gI1)*MFe(gI2)*Re(Conj(
            CpVZbarFeFePL(gI1,gI2))*CpVZbarFeFePR(gI1,gI2));
      }
      tmp_5923 += tmp_5924;
   }
   result += tmp_5923;
   std::complex<double> tmp_5925;
   std::complex<double> tmp_5926;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_5927;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_5927 += (AbsSqr(CpVZbarFuFuPL(gI1,gI2)) + AbsSqr(
            CpVZbarFuFuPR(gI1,gI2)))*H0(p,MFu(gI1),MFu(gI2));
         tmp_5927 += 4*B0(p,MFu(gI1),MFu(gI2))*MFu(gI1)*MFu(gI2)*Re(Conj(
            CpVZbarFuFuPL(gI1,gI2))*CpVZbarFuFuPR(gI1,gI2));
      }
      tmp_5926 += tmp_5927;
   }
   tmp_5925 += tmp_5926;
   result += (3) * tmp_5925;
   std::complex<double> tmp_5928;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_5929;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_5929 += (AbsSqr(CpVZbarFvFvPL(gI1,gI2)) + AbsSqr(
            CpVZbarFvFvPR(gI1,gI2)))*H0(p,MFv(gI1),MFv(gI2));
         tmp_5929 += 4*B0(p,MFv(gI1),MFv(gI2))*MFv(gI1)*MFv(gI2)*Re(Conj(
            CpVZbarFvFvPL(gI1,gI2))*CpVZbarFvFvPR(gI1,gI2));
      }
      tmp_5928 += tmp_5929;
   }
   result += tmp_5928;
   std::complex<double> tmp_5930;
   for (unsigned gI1 = 0; gI1 < 4; ++gI1) {
      tmp_5930 += A0(MSHI0(gI1))*CpVZVZconjSHI0SHI0(gI1,gI1);
   }
   result += tmp_5930;
   std::complex<double> tmp_5931;
   for (unsigned gI1 = 0; gI1 < 4; ++gI1) {
      tmp_5931 += A0(MSHIp(gI1))*CpVZVZconjSHIpSHIp(gI1,gI1);
   }
   result += tmp_5931;
   std::complex<double> tmp_5932;
   std::complex<double> tmp_5933;
   for (unsigned gI1 = 0; gI1 < 4; ++gI1) {
      std::complex<double> tmp_5934;
      for (unsigned gI2 = 0; gI2 < 4; ++gI2) {
         tmp_5934 += AbsSqr(CpVZconjSHI0SHI0(gI1,gI2))*B00(p,MSHI0(gI1),
            MSHI0(gI2));
      }
      tmp_5933 += tmp_5934;
   }
   tmp_5932 += tmp_5933;
   result += (-4) * tmp_5932;
   std::complex<double> tmp_5935;
   std::complex<double> tmp_5936;
   for (unsigned gI1 = 0; gI1 < 4; ++gI1) {
      std::complex<double> tmp_5937;
      for (unsigned gI2 = 0; gI2 < 4; ++gI2) {
         tmp_5937 += AbsSqr(CpVZconjSHIpSHIp(gI1,gI2))*B00(p,MSHIp(gI1),
            MSHIp(gI2));
      }
      tmp_5936 += tmp_5937;
   }
   tmp_5935 += tmp_5936;
   result += (-4) * tmp_5935;
   std::complex<double> tmp_5938;
   std::complex<double> tmp_5939;
   for (unsigned gI1 = 0; gI1 < 4; ++gI1) {
      std::complex<double> tmp_5940;
      for (unsigned gI2 = 0; gI2 < 4; ++gI2) {
         tmp_5940 += (AbsSqr(CpVZChiIChiIPL(gI1,gI2)) + AbsSqr(
            CpVZChiIChiIPR(gI1,gI2)))*H0(p,MChiI(gI1),MChiI(gI2));
         tmp_5940 += 4*B0(p,MChiI(gI1),MChiI(gI2))*MChiI(gI1)*MChiI(gI2)*
            Re(Conj(CpVZChiIChiIPL(gI1,gI2))*CpVZChiIChiIPR(gI1,gI2));
      }
      tmp_5939 += tmp_5940;
   }
   tmp_5938 += tmp_5939;
   result += (0.5) * tmp_5938;
   std::complex<double> tmp_5941;
   std::complex<double> tmp_5942;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_5942 += A0(MSd(gI1))*CpVZVZconjSdSd(gI1,gI1);
   }
   tmp_5941 += tmp_5942;
   result += (3) * tmp_5941;
   std::complex<double> tmp_5943;
   std::complex<double> tmp_5944;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_5944 += A0(MSDX(gI1))*CpVZVZconjSDXSDX(gI1,gI1);
   }
   tmp_5943 += tmp_5944;
   result += (3) * tmp_5943;
   std::complex<double> tmp_5945;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_5945 += A0(MSe(gI1))*CpVZVZconjSeSe(gI1,gI1);
   }
   result += tmp_5945;
   std::complex<double> tmp_5946;
   std::complex<double> tmp_5947;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_5947 += A0(MSu(gI1))*CpVZVZconjSuSu(gI1,gI1);
   }
   tmp_5946 += tmp_5947;
   result += (3) * tmp_5946;
   std::complex<double> tmp_5948;
   std::complex<double> tmp_5949;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_5950;
      for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
         tmp_5950 += AbsSqr(CpVZconjSdSd(gI1,gI2))*B00(p,MSd(gI1),MSd(gI2
            ));
      }
      tmp_5949 += tmp_5950;
   }
   tmp_5948 += tmp_5949;
   result += (-12) * tmp_5948;
   std::complex<double> tmp_5951;
   std::complex<double> tmp_5952;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_5953;
      for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
         tmp_5953 += AbsSqr(CpVZconjSDXSDX(gI1,gI2))*B00(p,MSDX(gI1),MSDX
            (gI2));
      }
      tmp_5952 += tmp_5953;
   }
   tmp_5951 += tmp_5952;
   result += (-12) * tmp_5951;
   std::complex<double> tmp_5954;
   std::complex<double> tmp_5955;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_5956;
      for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
         tmp_5956 += AbsSqr(CpVZconjSeSe(gI1,gI2))*B00(p,MSe(gI1),MSe(gI2
            ));
      }
      tmp_5955 += tmp_5956;
   }
   tmp_5954 += tmp_5955;
   result += (-4) * tmp_5954;
   std::complex<double> tmp_5957;
   std::complex<double> tmp_5958;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_5959;
      for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
         tmp_5959 += AbsSqr(CpVZconjSuSu(gI1,gI2))*B00(p,MSu(gI1),MSu(gI2
            ));
      }
      tmp_5958 += tmp_5959;
   }
   tmp_5957 += tmp_5958;
   result += (-12) * tmp_5957;
   std::complex<double> tmp_5960;
   std::complex<double> tmp_5961;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_5962;
      for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
         tmp_5962 += (AbsSqr(CpVZChiChiPL(gI1,gI2)) + AbsSqr(CpVZChiChiPR
            (gI1,gI2)))*H0(p,MChi(gI1),MChi(gI2));
         tmp_5962 += 4*B0(p,MChi(gI1),MChi(gI2))*MChi(gI1)*MChi(gI2)*Re(
            Conj(CpVZChiChiPL(gI1,gI2))*CpVZChiChiPR(gI1,gI2));
      }
      tmp_5961 += tmp_5962;
   }
   tmp_5960 += tmp_5961;
   result += (0.5) * tmp_5960;
   std::complex<double> tmp_5963;
   std::complex<double> tmp_5964;
   for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
      tmp_5964 += AbsSqr(CpVZconjVWmHpm(gI2))*B0(p,MVWm,MHpm(gI2));
   }
   tmp_5963 += tmp_5964;
   result += (2) * tmp_5963;
   std::complex<double> tmp_5965;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_5965 += AbsSqr(CpVZVZhh(gI2))*B0(p,MVZ,Mhh(gI2));
   }
   result += tmp_5965;
   std::complex<double> tmp_5966;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_5966 += AbsSqr(CpVZVZphh(gI2))*B0(p,MVZp,Mhh(gI2));
   }
   result += tmp_5966;
   result += -(AbsSqr(CpVZconjVWmVWm())*(2*A0(MVWm) + 10*B00(p,MVWm,MVWm) + B0(
      p,MVWm,MVWm)*(2*Sqr(MVWm) + 4*Sqr(p))));
   result += 4*B0(p,MChaP,MChaP)*Re(Conj(CpVZbarChaPChaPPL())*CpVZbarChaPChaPPR
      ())*Sqr(MChaP);

   return result * oneOver16PiSqr;

}

std::complex<double> CLASSNAME::self_energy_VZp(double p ) const
{
   std::complex<double> result;

   result += AbsSqr(CpVZpbargWmCgWmC())*B00(p,MVWm,MVWm);
   result += AbsSqr(CpVZpbargWmgWm())*B00(p,MVWm,MVWm);
   result += -(A0(MVWm)*(4*CpVZpVZpconjVWmVWm1() + CpVZpVZpconjVWmVWm2() +
      CpVZpVZpconjVWmVWm3()));
   result += (AbsSqr(CpVZpbarChaPChaPPL()) + AbsSqr(CpVZpbarChaPChaPPR()))*H0(p
      ,MChaP,MChaP);
   std::complex<double> tmp_5967;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      tmp_5967 += A0(MHpm(gI1))*CpVZpVZpconjHpmHpm(gI1,gI1);
   }
   result += tmp_5967;
   std::complex<double> tmp_5968;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      tmp_5968 += A0(MSHp0(gI1))*CpVZpVZpconjSHp0SHp0(gI1,gI1);
   }
   result += tmp_5968;
   std::complex<double> tmp_5969;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      tmp_5969 += A0(MSHpp(gI1))*CpVZpVZpconjSHppSHpp(gI1,gI1);
   }
   result += tmp_5969;
   std::complex<double> tmp_5970;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      tmp_5970 += A0(MSSI0(gI1))*CpVZpVZpconjSSI0SSI0(gI1,gI1);
   }
   result += tmp_5970;
   std::complex<double> tmp_5971;
   std::complex<double> tmp_5972;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_5973;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_5973 += AbsSqr(CpVZpconjHpmHpm(gI1,gI2))*B00(p,MHpm(gI1),
            MHpm(gI2));
      }
      tmp_5972 += tmp_5973;
   }
   tmp_5971 += tmp_5972;
   result += (-4) * tmp_5971;
   std::complex<double> tmp_5974;
   std::complex<double> tmp_5975;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_5976;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_5976 += AbsSqr(CpVZpconjSHp0SHp0(gI1,gI2))*B00(p,MSHp0(gI1),
            MSHp0(gI2));
      }
      tmp_5975 += tmp_5976;
   }
   tmp_5974 += tmp_5975;
   result += (-4) * tmp_5974;
   std::complex<double> tmp_5977;
   std::complex<double> tmp_5978;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_5979;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_5979 += AbsSqr(CpVZpconjSHppSHpp(gI1,gI2))*B00(p,MSHpp(gI1),
            MSHpp(gI2));
      }
      tmp_5978 += tmp_5979;
   }
   tmp_5977 += tmp_5978;
   result += (-4) * tmp_5977;
   std::complex<double> tmp_5980;
   std::complex<double> tmp_5981;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_5982;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_5982 += AbsSqr(CpVZpconjSSI0SSI0(gI1,gI2))*B00(p,MSSI0(gI1),
            MSSI0(gI2));
      }
      tmp_5981 += tmp_5982;
   }
   tmp_5980 += tmp_5981;
   result += (-4) * tmp_5980;
   std::complex<double> tmp_5983;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_5984;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_5984 += (AbsSqr(CpVZpbarChaChaPL(gI1,gI2)) + AbsSqr(
            CpVZpbarChaChaPR(gI1,gI2)))*H0(p,MCha(gI1),MCha(gI2));
         tmp_5984 += 4*B0(p,MCha(gI1),MCha(gI2))*MCha(gI1)*MCha(gI2)*Re(
            Conj(CpVZpbarChaChaPL(gI1,gI2))*CpVZpbarChaChaPR(gI1,gI2));
      }
      tmp_5983 += tmp_5984;
   }
   result += tmp_5983;
   std::complex<double> tmp_5985;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_5986;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_5986 += (AbsSqr(CpVZpbarChaIChaIPL(gI1,gI2)) + AbsSqr(
            CpVZpbarChaIChaIPR(gI1,gI2)))*H0(p,MChaI(gI1),MChaI(gI2));
         tmp_5986 += 4*B0(p,MChaI(gI1),MChaI(gI2))*MChaI(gI1)*MChaI(gI2)*
            Re(Conj(CpVZpbarChaIChaIPL(gI1,gI2))*CpVZpbarChaIChaIPR(gI1,gI2));
      }
      tmp_5985 += tmp_5986;
   }
   result += tmp_5985;
   std::complex<double> tmp_5987;
   std::complex<double> tmp_5988;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_5989;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_5989 += (AbsSqr(CpVZpChiPChiPPL(gI1,gI2)) + AbsSqr(
            CpVZpChiPChiPPR(gI1,gI2)))*H0(p,MChiP(gI1),MChiP(gI2));
         tmp_5989 += 4*B0(p,MChiP(gI1),MChiP(gI2))*MChiP(gI1)*MChiP(gI2)*
            Re(Conj(CpVZpChiPChiPPL(gI1,gI2))*CpVZpChiPChiPPR(gI1,gI2));
      }
      tmp_5988 += tmp_5989;
   }
   tmp_5987 += tmp_5988;
   result += (0.5) * tmp_5987;
   std::complex<double> tmp_5990;
   std::complex<double> tmp_5991;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_5992;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_5992 += (AbsSqr(CpVZpFSIFSIPL(gI1,gI2)) + AbsSqr(
            CpVZpFSIFSIPR(gI1,gI2)))*H0(p,MFSI(gI1),MFSI(gI2));
         tmp_5992 += 4*B0(p,MFSI(gI1),MFSI(gI2))*MFSI(gI1)*MFSI(gI2)*Re(
            Conj(CpVZpFSIFSIPL(gI1,gI2))*CpVZpFSIFSIPR(gI1,gI2));
      }
      tmp_5991 += tmp_5992;
   }
   tmp_5990 += tmp_5991;
   result += (0.5) * tmp_5990;
   std::complex<double> tmp_5993;
   std::complex<double> tmp_5994;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      tmp_5994 += A0(MAh(gI1))*CpVZpVZpAhAh(gI1,gI1);
   }
   tmp_5993 += tmp_5994;
   result += (0.5) * tmp_5993;
   std::complex<double> tmp_5995;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      tmp_5995 += A0(MSv(gI1))*CpVZpVZpconjSvSv(gI1,gI1);
   }
   result += tmp_5995;
   std::complex<double> tmp_5996;
   std::complex<double> tmp_5997;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      tmp_5997 += A0(Mhh(gI1))*CpVZpVZphhhh(gI1,gI1);
   }
   tmp_5996 += tmp_5997;
   result += (0.5) * tmp_5996;
   std::complex<double> tmp_5998;
   std::complex<double> tmp_5999;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_6000;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_6000 += AbsSqr(CpVZpconjSvSv(gI1,gI2))*B00(p,MSv(gI1),MSv(
            gI2));
      }
      tmp_5999 += tmp_6000;
   }
   tmp_5998 += tmp_5999;
   result += (-4) * tmp_5998;
   std::complex<double> tmp_6001;
   std::complex<double> tmp_6002;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_6003;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_6003 += AbsSqr(CpVZphhAh(gI1,gI2))*B00(p,MAh(gI2),Mhh(gI1));
      }
      tmp_6002 += tmp_6003;
   }
   tmp_6001 += tmp_6002;
   result += (-4) * tmp_6001;
   std::complex<double> tmp_6004;
   std::complex<double> tmp_6005;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_6006;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_6006 += (AbsSqr(CpVZpbarFdFdPL(gI1,gI2)) + AbsSqr(
            CpVZpbarFdFdPR(gI1,gI2)))*H0(p,MFd(gI1),MFd(gI2));
         tmp_6006 += 4*B0(p,MFd(gI1),MFd(gI2))*MFd(gI1)*MFd(gI2)*Re(Conj(
            CpVZpbarFdFdPL(gI1,gI2))*CpVZpbarFdFdPR(gI1,gI2));
      }
      tmp_6005 += tmp_6006;
   }
   tmp_6004 += tmp_6005;
   result += (3) * tmp_6004;
   std::complex<double> tmp_6007;
   std::complex<double> tmp_6008;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_6009;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_6009 += (AbsSqr(CpVZpbarFDXFDXPL(gI1,gI2)) + AbsSqr(
            CpVZpbarFDXFDXPR(gI1,gI2)))*H0(p,MFDX(gI1),MFDX(gI2));
         tmp_6009 += 4*B0(p,MFDX(gI1),MFDX(gI2))*MFDX(gI1)*MFDX(gI2)*Re(
            Conj(CpVZpbarFDXFDXPL(gI1,gI2))*CpVZpbarFDXFDXPR(gI1,gI2));
      }
      tmp_6008 += tmp_6009;
   }
   tmp_6007 += tmp_6008;
   result += (3) * tmp_6007;
   std::complex<double> tmp_6010;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_6011;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_6011 += (AbsSqr(CpVZpbarFeFePL(gI1,gI2)) + AbsSqr(
            CpVZpbarFeFePR(gI1,gI2)))*H0(p,MFe(gI1),MFe(gI2));
         tmp_6011 += 4*B0(p,MFe(gI1),MFe(gI2))*MFe(gI1)*MFe(gI2)*Re(Conj(
            CpVZpbarFeFePL(gI1,gI2))*CpVZpbarFeFePR(gI1,gI2));
      }
      tmp_6010 += tmp_6011;
   }
   result += tmp_6010;
   std::complex<double> tmp_6012;
   std::complex<double> tmp_6013;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_6014;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_6014 += (AbsSqr(CpVZpbarFuFuPL(gI1,gI2)) + AbsSqr(
            CpVZpbarFuFuPR(gI1,gI2)))*H0(p,MFu(gI1),MFu(gI2));
         tmp_6014 += 4*B0(p,MFu(gI1),MFu(gI2))*MFu(gI1)*MFu(gI2)*Re(Conj(
            CpVZpbarFuFuPL(gI1,gI2))*CpVZpbarFuFuPR(gI1,gI2));
      }
      tmp_6013 += tmp_6014;
   }
   tmp_6012 += tmp_6013;
   result += (3) * tmp_6012;
   std::complex<double> tmp_6015;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_6016;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_6016 += (AbsSqr(CpVZpbarFvFvPL(gI1,gI2)) + AbsSqr(
            CpVZpbarFvFvPR(gI1,gI2)))*H0(p,MFv(gI1),MFv(gI2));
         tmp_6016 += 4*B0(p,MFv(gI1),MFv(gI2))*MFv(gI1)*MFv(gI2)*Re(Conj(
            CpVZpbarFvFvPL(gI1,gI2))*CpVZpbarFvFvPR(gI1,gI2));
      }
      tmp_6015 += tmp_6016;
   }
   result += tmp_6015;
   std::complex<double> tmp_6017;
   for (unsigned gI1 = 0; gI1 < 4; ++gI1) {
      tmp_6017 += A0(MSHI0(gI1))*CpVZpVZpconjSHI0SHI0(gI1,gI1);
   }
   result += tmp_6017;
   std::complex<double> tmp_6018;
   for (unsigned gI1 = 0; gI1 < 4; ++gI1) {
      tmp_6018 += A0(MSHIp(gI1))*CpVZpVZpconjSHIpSHIp(gI1,gI1);
   }
   result += tmp_6018;
   std::complex<double> tmp_6019;
   std::complex<double> tmp_6020;
   for (unsigned gI1 = 0; gI1 < 4; ++gI1) {
      std::complex<double> tmp_6021;
      for (unsigned gI2 = 0; gI2 < 4; ++gI2) {
         tmp_6021 += AbsSqr(CpVZpconjSHI0SHI0(gI1,gI2))*B00(p,MSHI0(gI1),
            MSHI0(gI2));
      }
      tmp_6020 += tmp_6021;
   }
   tmp_6019 += tmp_6020;
   result += (-4) * tmp_6019;
   std::complex<double> tmp_6022;
   std::complex<double> tmp_6023;
   for (unsigned gI1 = 0; gI1 < 4; ++gI1) {
      std::complex<double> tmp_6024;
      for (unsigned gI2 = 0; gI2 < 4; ++gI2) {
         tmp_6024 += AbsSqr(CpVZpconjSHIpSHIp(gI1,gI2))*B00(p,MSHIp(gI1),
            MSHIp(gI2));
      }
      tmp_6023 += tmp_6024;
   }
   tmp_6022 += tmp_6023;
   result += (-4) * tmp_6022;
   std::complex<double> tmp_6025;
   std::complex<double> tmp_6026;
   for (unsigned gI1 = 0; gI1 < 4; ++gI1) {
      std::complex<double> tmp_6027;
      for (unsigned gI2 = 0; gI2 < 4; ++gI2) {
         tmp_6027 += (AbsSqr(CpVZpChiIChiIPL(gI1,gI2)) + AbsSqr(
            CpVZpChiIChiIPR(gI1,gI2)))*H0(p,MChiI(gI1),MChiI(gI2));
         tmp_6027 += 4*B0(p,MChiI(gI1),MChiI(gI2))*MChiI(gI1)*MChiI(gI2)*
            Re(Conj(CpVZpChiIChiIPL(gI1,gI2))*CpVZpChiIChiIPR(gI1,gI2));
      }
      tmp_6026 += tmp_6027;
   }
   tmp_6025 += tmp_6026;
   result += (0.5) * tmp_6025;
   std::complex<double> tmp_6028;
   std::complex<double> tmp_6029;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_6029 += A0(MSd(gI1))*CpVZpVZpconjSdSd(gI1,gI1);
   }
   tmp_6028 += tmp_6029;
   result += (3) * tmp_6028;
   std::complex<double> tmp_6030;
   std::complex<double> tmp_6031;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_6031 += A0(MSDX(gI1))*CpVZpVZpconjSDXSDX(gI1,gI1);
   }
   tmp_6030 += tmp_6031;
   result += (3) * tmp_6030;
   std::complex<double> tmp_6032;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_6032 += A0(MSe(gI1))*CpVZpVZpconjSeSe(gI1,gI1);
   }
   result += tmp_6032;
   std::complex<double> tmp_6033;
   std::complex<double> tmp_6034;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_6034 += A0(MSu(gI1))*CpVZpVZpconjSuSu(gI1,gI1);
   }
   tmp_6033 += tmp_6034;
   result += (3) * tmp_6033;
   std::complex<double> tmp_6035;
   std::complex<double> tmp_6036;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_6037;
      for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
         tmp_6037 += AbsSqr(CpVZpconjSdSd(gI1,gI2))*B00(p,MSd(gI1),MSd(
            gI2));
      }
      tmp_6036 += tmp_6037;
   }
   tmp_6035 += tmp_6036;
   result += (-12) * tmp_6035;
   std::complex<double> tmp_6038;
   std::complex<double> tmp_6039;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_6040;
      for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
         tmp_6040 += AbsSqr(CpVZpconjSDXSDX(gI1,gI2))*B00(p,MSDX(gI1),
            MSDX(gI2));
      }
      tmp_6039 += tmp_6040;
   }
   tmp_6038 += tmp_6039;
   result += (-12) * tmp_6038;
   std::complex<double> tmp_6041;
   std::complex<double> tmp_6042;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_6043;
      for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
         tmp_6043 += AbsSqr(CpVZpconjSeSe(gI1,gI2))*B00(p,MSe(gI1),MSe(
            gI2));
      }
      tmp_6042 += tmp_6043;
   }
   tmp_6041 += tmp_6042;
   result += (-4) * tmp_6041;
   std::complex<double> tmp_6044;
   std::complex<double> tmp_6045;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_6046;
      for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
         tmp_6046 += AbsSqr(CpVZpconjSuSu(gI1,gI2))*B00(p,MSu(gI1),MSu(
            gI2));
      }
      tmp_6045 += tmp_6046;
   }
   tmp_6044 += tmp_6045;
   result += (-12) * tmp_6044;
   std::complex<double> tmp_6047;
   std::complex<double> tmp_6048;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_6049;
      for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
         tmp_6049 += (AbsSqr(CpVZpChiChiPL(gI1,gI2)) + AbsSqr(
            CpVZpChiChiPR(gI1,gI2)))*H0(p,MChi(gI1),MChi(gI2));
         tmp_6049 += 4*B0(p,MChi(gI1),MChi(gI2))*MChi(gI1)*MChi(gI2)*Re(
            Conj(CpVZpChiChiPL(gI1,gI2))*CpVZpChiChiPR(gI1,gI2));
      }
      tmp_6048 += tmp_6049;
   }
   tmp_6047 += tmp_6048;
   result += (0.5) * tmp_6047;
   std::complex<double> tmp_6050;
   std::complex<double> tmp_6051;
   for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
      tmp_6051 += AbsSqr(CpVZpconjVWmHpm(gI2))*B0(p,MVWm,MHpm(gI2));
   }
   tmp_6050 += tmp_6051;
   result += (2) * tmp_6050;
   std::complex<double> tmp_6052;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_6052 += AbsSqr(CpVZpVZhh(gI2))*B0(p,MVZ,Mhh(gI2));
   }
   result += tmp_6052;
   std::complex<double> tmp_6053;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_6053 += AbsSqr(CpVZpVZphh(gI2))*B0(p,MVZp,Mhh(gI2));
   }
   result += tmp_6053;
   result += -(AbsSqr(CpVZpconjVWmVWm())*(2*A0(MVWm) + 10*B00(p,MVWm,MVWm) + B0
      (p,MVWm,MVWm)*(2*Sqr(MVWm) + 4*Sqr(p))));
   result += 4*B0(p,MChaP,MChaP)*Re(Conj(CpVZpbarChaPChaPPL())*
      CpVZpbarChaPChaPPR())*Sqr(MChaP);

   return result * oneOver16PiSqr;

}

std::complex<double> CLASSNAME::self_energy_VWm(double p ) const
{
   std::complex<double> result;

   result += AbsSqr(CpconjVWmbargPgWm())*B00(p,MVWm,MVP);
   result += AbsSqr(CpconjVWmbargWmCgP())*B00(p,MVP,MVWm);
   result += AbsSqr(CpconjVWmbargWmCgZ())*B00(p,MVZ,MVWm);
   result += AbsSqr(CpconjVWmbargWmCgZp())*B00(p,MVZp,MVWm);
   result += AbsSqr(CpconjVWmbargZgWm())*B00(p,MVWm,MVZ);
   result += AbsSqr(CpconjVWmbargZpgWm())*B00(p,MVWm,MVZp);
   result += -(A0(MVWm)*(4*CpVWmconjVWmconjVWmVWm1() + CpVWmconjVWmconjVWmVWm2(
      ) + CpVWmconjVWmconjVWmVWm3()));
   result += 0;
   result += -0.5*A0(MVZp)*(4*CpVWmconjVWmVZpVZp1() + CpVWmconjVWmVZpVZp2() +
      CpVWmconjVWmVZpVZp3());
   result += -0.5*A0(MVZ)*(4*CpVWmconjVWmVZVZ1() + CpVWmconjVWmVZVZ2() +
      CpVWmconjVWmVZVZ3());
   std::complex<double> tmp_6054;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      tmp_6054 += A0(MHpm(gI1))*CpVWmconjVWmconjHpmHpm(gI1,gI1);
   }
   result += tmp_6054;
   std::complex<double> tmp_6055;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      tmp_6055 += A0(MSHp0(gI1))*CpVWmconjVWmconjSHp0SHp0(gI1,gI1);
   }
   result += tmp_6055;
   std::complex<double> tmp_6056;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      tmp_6056 += A0(MSHpp(gI1))*CpVWmconjVWmconjSHppSHpp(gI1,gI1);
   }
   result += tmp_6056;
   std::complex<double> tmp_6057;
   std::complex<double> tmp_6058;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_6059;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_6059 += AbsSqr(CpconjVWmconjSHp0SHpp(gI1,gI2))*B00(p,MSHpp(
            gI2),MSHp0(gI1));
      }
      tmp_6058 += tmp_6059;
   }
   tmp_6057 += tmp_6058;
   result += (-4) * tmp_6057;
   std::complex<double> tmp_6060;
   std::complex<double> tmp_6061;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_6062;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_6062 += AbsSqr(CpconjVWmHpmAh(gI1,gI2))*B00(p,MAh(gI2),MHpm(
            gI1));
      }
      tmp_6061 += tmp_6062;
   }
   tmp_6060 += tmp_6061;
   result += (-4) * tmp_6060;
   std::complex<double> tmp_6063;
   std::complex<double> tmp_6064;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_6065;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_6065 += AbsSqr(CpconjVWmHpmhh(gI1,gI2))*B00(p,Mhh(gI2),MHpm(
            gI1));
      }
      tmp_6064 += tmp_6065;
   }
   tmp_6063 += tmp_6064;
   result += (-4) * tmp_6063;
   std::complex<double> tmp_6066;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      tmp_6066 += (AbsSqr(CpconjVWmChiPChaPPL(gI1)) + AbsSqr(
         CpconjVWmChiPChaPPR(gI1)))*H0(p,MChiP(gI1),MChaP);
      tmp_6066 += 4*MChaP*B0(p,MChiP(gI1),MChaP)*MChiP(gI1)*Re(Conj(
         CpconjVWmChiPChaPPL(gI1))*CpconjVWmChiPChaPPR(gI1));
   }
   result += tmp_6066;
   std::complex<double> tmp_6067;
   std::complex<double> tmp_6068;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      tmp_6068 += A0(MAh(gI1))*CpVWmconjVWmAhAh(gI1,gI1);
   }
   tmp_6067 += tmp_6068;
   result += (0.5) * tmp_6067;
   std::complex<double> tmp_6069;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      tmp_6069 += A0(MSv(gI1))*CpVWmconjVWmconjSvSv(gI1,gI1);
   }
   result += tmp_6069;
   std::complex<double> tmp_6070;
   std::complex<double> tmp_6071;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      tmp_6071 += A0(Mhh(gI1))*CpVWmconjVWmhhhh(gI1,gI1);
   }
   tmp_6070 += tmp_6071;
   result += (0.5) * tmp_6070;
   std::complex<double> tmp_6072;
   std::complex<double> tmp_6073;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_6074;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_6074 += (AbsSqr(CpconjVWmbarFuFdPL(gI1,gI2)) + AbsSqr(
            CpconjVWmbarFuFdPR(gI1,gI2)))*H0(p,MFu(gI1),MFd(gI2));
         tmp_6074 += 4*B0(p,MFu(gI1),MFd(gI2))*MFd(gI2)*MFu(gI1)*Re(Conj(
            CpconjVWmbarFuFdPL(gI1,gI2))*CpconjVWmbarFuFdPR(gI1,gI2));
      }
      tmp_6073 += tmp_6074;
   }
   tmp_6072 += tmp_6073;
   result += (3) * tmp_6072;
   std::complex<double> tmp_6075;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_6076;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_6076 += (AbsSqr(CpconjVWmbarFvFePL(gI1,gI2)) + AbsSqr(
            CpconjVWmbarFvFePR(gI1,gI2)))*H0(p,MFv(gI1),MFe(gI2));
         tmp_6076 += 4*B0(p,MFv(gI1),MFe(gI2))*MFe(gI2)*MFv(gI1)*Re(Conj(
            CpconjVWmbarFvFePL(gI1,gI2))*CpconjVWmbarFvFePR(gI1,gI2));
      }
      tmp_6075 += tmp_6076;
   }
   result += tmp_6075;
   std::complex<double> tmp_6077;
   std::complex<double> tmp_6078;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_6079;
      for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
         tmp_6079 += AbsSqr(CpconjVWmconjSvSe(gI1,gI2))*B00(p,MSe(gI2),
            MSv(gI1));
      }
      tmp_6078 += tmp_6079;
   }
   tmp_6077 += tmp_6078;
   result += (-4) * tmp_6077;
   std::complex<double> tmp_6080;
   for (unsigned gI1 = 0; gI1 < 4; ++gI1) {
      tmp_6080 += A0(MSHI0(gI1))*CpVWmconjVWmconjSHI0SHI0(gI1,gI1);
   }
   result += tmp_6080;
   std::complex<double> tmp_6081;
   for (unsigned gI1 = 0; gI1 < 4; ++gI1) {
      tmp_6081 += A0(MSHIp(gI1))*CpVWmconjVWmconjSHIpSHIp(gI1,gI1);
   }
   result += tmp_6081;
   std::complex<double> tmp_6082;
   for (unsigned gI1 = 0; gI1 < 4; ++gI1) {
      std::complex<double> tmp_6083;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_6083 += (AbsSqr(CpconjVWmChiIChaIPL(gI1,gI2)) + AbsSqr(
            CpconjVWmChiIChaIPR(gI1,gI2)))*H0(p,MChiI(gI1),MChaI(gI2));
         tmp_6083 += 4*B0(p,MChiI(gI1),MChaI(gI2))*MChaI(gI2)*MChiI(gI1)*
            Re(Conj(CpconjVWmChiIChaIPL(gI1,gI2))*CpconjVWmChiIChaIPR(gI1,gI2));
      }
      tmp_6082 += tmp_6083;
   }
   result += tmp_6082;
   std::complex<double> tmp_6084;
   std::complex<double> tmp_6085;
   for (unsigned gI1 = 0; gI1 < 4; ++gI1) {
      std::complex<double> tmp_6086;
      for (unsigned gI2 = 0; gI2 < 4; ++gI2) {
         tmp_6086 += AbsSqr(CpconjVWmconjSHI0SHIp(gI1,gI2))*B00(p,MSHIp(
            gI2),MSHI0(gI1));
      }
      tmp_6085 += tmp_6086;
   }
   tmp_6084 += tmp_6085;
   result += (-4) * tmp_6084;
   std::complex<double> tmp_6087;
   std::complex<double> tmp_6088;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_6088 += A0(MSd(gI1))*CpVWmconjVWmconjSdSd(gI1,gI1);
   }
   tmp_6087 += tmp_6088;
   result += (3) * tmp_6087;
   std::complex<double> tmp_6089;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_6089 += A0(MSe(gI1))*CpVWmconjVWmconjSeSe(gI1,gI1);
   }
   result += tmp_6089;
   std::complex<double> tmp_6090;
   std::complex<double> tmp_6091;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_6091 += A0(MSu(gI1))*CpVWmconjVWmconjSuSu(gI1,gI1);
   }
   tmp_6090 += tmp_6091;
   result += (3) * tmp_6090;
   std::complex<double> tmp_6092;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_6093;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_6093 += (AbsSqr(CpconjVWmChiChaPL(gI1,gI2)) + AbsSqr(
            CpconjVWmChiChaPR(gI1,gI2)))*H0(p,MChi(gI1),MCha(gI2));
         tmp_6093 += 4*B0(p,MChi(gI1),MCha(gI2))*MCha(gI2)*MChi(gI1)*Re(
            Conj(CpconjVWmChiChaPL(gI1,gI2))*CpconjVWmChiChaPR(gI1,gI2));
      }
      tmp_6092 += tmp_6093;
   }
   result += tmp_6092;
   std::complex<double> tmp_6094;
   std::complex<double> tmp_6095;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_6096;
      for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
         tmp_6096 += AbsSqr(CpconjVWmconjSuSd(gI1,gI2))*B00(p,MSd(gI2),
            MSu(gI1));
      }
      tmp_6095 += tmp_6096;
   }
   tmp_6094 += tmp_6095;
   result += (-12) * tmp_6094;
   std::complex<double> tmp_6097;
   for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
      tmp_6097 += AbsSqr(CpconjVWmVPHpm(gI2))*B0(p,0,MHpm(gI2));
   }
   result += tmp_6097;
   std::complex<double> tmp_6098;
   for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
      tmp_6098 += AbsSqr(CpconjVWmVZHpm(gI2))*B0(p,MVZ,MHpm(gI2));
   }
   result += tmp_6098;
   std::complex<double> tmp_6099;
   for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
      tmp_6099 += AbsSqr(CpconjVWmVZpHpm(gI2))*B0(p,MVZp,MHpm(gI2));
   }
   result += tmp_6099;
   std::complex<double> tmp_6100;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_6100 += AbsSqr(CpconjVWmVWmhh(gI2))*B0(p,MVWm,Mhh(gI2));
   }
   result += tmp_6100;
   result += -(AbsSqr(CpconjVWmVWmVP())*(A0(MVWm) + 10*B00(p,MVWm,0) + B0(p,
      MVWm,0)*(Sqr(MVWm) + 4*Sqr(p))));
   result += -(AbsSqr(CpconjVWmVZVWm())*(A0(MVWm) + A0(MVZ) + 10*B00(p,MVZ,MVWm
      ) + B0(p,MVZ,MVWm)*(Sqr(MVWm) + Sqr(MVZ) + 4*Sqr(p))));
   result += -(AbsSqr(CpconjVWmVZpVWm())*(A0(MVWm) + A0(MVZp) + 10*B00(p,MVZp,
      MVWm) + B0(p,MVZp,MVWm)*(Sqr(MVWm) + Sqr(MVZp) + 4*Sqr(p))));

   return result * oneOver16PiSqr;

}

std::complex<double> CLASSNAME::self_energy_Chi_1(double p , unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   std::complex<double> tmp_6101;
   std::complex<double> tmp_6102;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_6103;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_6103 += B0(p,MCha(gI2),MHpm(gI1))*Conj(CpUChiconjHpmChaPL(
            gO2,gI1,gI2))*CpUChiconjHpmChaPR(gO1,gI1,gI2)*MCha(gI2);
      }
      tmp_6102 += tmp_6103;
   }
   tmp_6101 += tmp_6102;
   result += (2) * tmp_6101;
   std::complex<double> tmp_6104;
   std::complex<double> tmp_6105;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_6106;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_6106 += B0(p,MChiP(gI2),MSHp0(gI1))*Conj(
            CpUChiconjSHp0ChiPPL(gO2,gI1,gI2))*CpUChiconjSHp0ChiPPR(gO1,gI1,gI2)*
            MChiP(gI2);
      }
      tmp_6105 += tmp_6106;
   }
   tmp_6104 += tmp_6105;
   result += (2) * tmp_6104;
   std::complex<double> tmp_6107;
   std::complex<double> tmp_6108;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_6109;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_6109 += B0(p,MFSI(gI2),MSSI0(gI1))*Conj(CpUChiconjSSI0FSIPL(
            gO2,gI1,gI2))*CpUChiconjSSI0FSIPR(gO1,gI1,gI2)*MFSI(gI2);
      }
      tmp_6108 += tmp_6109;
   }
   tmp_6107 += tmp_6108;
   result += (2) * tmp_6107;
   std::complex<double> tmp_6110;
   std::complex<double> tmp_6111;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_6112;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_6112 += B0(p,MFv(gI2),MSv(gI1))*Conj(CpUChiconjSvFvPL(gO2,
            gI1,gI2))*CpUChiconjSvFvPR(gO1,gI1,gI2)*MFv(gI2);
      }
      tmp_6111 += tmp_6112;
   }
   tmp_6110 += tmp_6111;
   result += (2) * tmp_6110;
   std::complex<double> tmp_6113;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_6114;
      for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
         tmp_6114 += B0(p,MChi(gI2),Mhh(gI1))*Conj(CpUChihhChiPL(gO2,gI1,
            gI2))*CpUChihhChiPR(gO1,gI1,gI2)*MChi(gI2);
      }
      tmp_6113 += tmp_6114;
   }
   result += tmp_6113;
   std::complex<double> tmp_6115;
   std::complex<double> tmp_6116;
   for (unsigned gI1 = 0; gI1 < 4; ++gI1) {
      std::complex<double> tmp_6117;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_6117 += B0(p,MChaI(gI2),MSHIp(gI1))*Conj(
            CpUChiconjSHIpChaIPL(gO2,gI1,gI2))*CpUChiconjSHIpChaIPR(gO1,gI1,gI2)*
            MChaI(gI2);
      }
      tmp_6116 += tmp_6117;
   }
   tmp_6115 += tmp_6116;
   result += (2) * tmp_6115;
   std::complex<double> tmp_6118;
   std::complex<double> tmp_6119;
   for (unsigned gI1 = 0; gI1 < 4; ++gI1) {
      std::complex<double> tmp_6120;
      for (unsigned gI2 = 0; gI2 < 4; ++gI2) {
         tmp_6120 += B0(p,MChiI(gI2),MSHI0(gI1))*Conj(
            CpUChiconjSHI0ChiIPL(gO2,gI1,gI2))*CpUChiconjSHI0ChiIPR(gO1,gI1,gI2)*
            MChiI(gI2);
      }
      tmp_6119 += tmp_6120;
   }
   tmp_6118 += tmp_6119;
   result += (2) * tmp_6118;
   std::complex<double> tmp_6121;
   std::complex<double> tmp_6122;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_6123;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_6123 += B0(p,MFd(gI2),MSd(gI1))*Conj(CpUChiconjSdFdPL(gO2,
            gI1,gI2))*CpUChiconjSdFdPR(gO1,gI1,gI2)*MFd(gI2);
      }
      tmp_6122 += tmp_6123;
   }
   tmp_6121 += tmp_6122;
   result += (6) * tmp_6121;
   std::complex<double> tmp_6124;
   std::complex<double> tmp_6125;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_6126;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_6126 += B0(p,MFDX(gI2),MSDX(gI1))*Conj(CpUChiconjSDXFDXPL(
            gO2,gI1,gI2))*CpUChiconjSDXFDXPR(gO1,gI1,gI2)*MFDX(gI2);
      }
      tmp_6125 += tmp_6126;
   }
   tmp_6124 += tmp_6125;
   result += (6) * tmp_6124;
   std::complex<double> tmp_6127;
   std::complex<double> tmp_6128;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_6129;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_6129 += B0(p,MFe(gI2),MSe(gI1))*Conj(CpUChiconjSeFePL(gO2,
            gI1,gI2))*CpUChiconjSeFePR(gO1,gI1,gI2)*MFe(gI2);
      }
      tmp_6128 += tmp_6129;
   }
   tmp_6127 += tmp_6128;
   result += (2) * tmp_6127;
   std::complex<double> tmp_6130;
   std::complex<double> tmp_6131;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_6132;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_6132 += B0(p,MFu(gI2),MSu(gI1))*Conj(CpUChiconjSuFuPL(gO2,
            gI1,gI2))*CpUChiconjSuFuPR(gO1,gI1,gI2)*MFu(gI2);
      }
      tmp_6131 += tmp_6132;
   }
   tmp_6130 += tmp_6131;
   result += (6) * tmp_6130;
   std::complex<double> tmp_6133;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_6134;
      std::complex<double> tmp_6135;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_6135 += B0(p,MChi(gI1),MAh(gI2))*Conj(CpUChiChiAhPL(gO2,gI1,
            gI2))*CpUChiChiAhPR(gO1,gI1,gI2);
      }
      tmp_6134 += tmp_6135;
      tmp_6133 += (MChi(gI1)) * tmp_6134;
   }
   result += tmp_6133;
   std::complex<double> tmp_6136;
   std::complex<double> tmp_6137;
   for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
      tmp_6137 += B0(p,MCha(gI2),MVWm)*Conj(CpUChiconjVWmChaPR(gO2,gI2))*
         CpUChiconjVWmChaPL(gO1,gI2)*MCha(gI2);
   }
   tmp_6136 += tmp_6137;
   result += (-8) * tmp_6136;
   std::complex<double> tmp_6138;
   std::complex<double> tmp_6139;
   for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
      tmp_6139 += B0(p,MChi(gI2),MVZ)*Conj(CpUChiVZChiPR(gO2,gI2))*
         CpUChiVZChiPL(gO1,gI2)*MChi(gI2);
   }
   tmp_6138 += tmp_6139;
   result += (-4) * tmp_6138;
   std::complex<double> tmp_6140;
   std::complex<double> tmp_6141;
   for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
      tmp_6141 += B0(p,MChi(gI2),MVZp)*Conj(CpUChiVZpChiPR(gO2,gI2))*
         CpUChiVZpChiPL(gO1,gI2)*MChi(gI2);
   }
   tmp_6140 += tmp_6141;
   result += (-4) * tmp_6140;
   std::complex<double> tmp_6142;
   std::complex<double> tmp_6143;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      tmp_6143 += B0(p,MChaP,MSHpp(gI1))*Conj(CpUChiconjSHppChaPPL(gO2,gI1))
         *CpUChiconjSHppChaPPR(gO1,gI1);
   }
   tmp_6142 += tmp_6143;
   result += (2*MChaP) * tmp_6142;

   return result * oneOver16PiSqr;

}

std::complex<double> CLASSNAME::self_energy_Chi_PR(double p , unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   std::complex<double> tmp_6144;
   std::complex<double> tmp_6145;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      tmp_6145 += B1(p,MChaP,MSHpp(gI1))*Conj(CpUChiconjSHppChaPPR(gO2,gI1))
         *CpUChiconjSHppChaPPR(gO1,gI1);
   }
   tmp_6144 += tmp_6145;
   result += (-1) * tmp_6144;
   std::complex<double> tmp_6146;
   std::complex<double> tmp_6147;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_6148;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_6148 += B1(p,MCha(gI2),MHpm(gI1))*Conj(CpUChiconjHpmChaPR(
            gO2,gI1,gI2))*CpUChiconjHpmChaPR(gO1,gI1,gI2);
      }
      tmp_6147 += tmp_6148;
   }
   tmp_6146 += tmp_6147;
   result += (-1) * tmp_6146;
   std::complex<double> tmp_6149;
   std::complex<double> tmp_6150;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_6151;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_6151 += B1(p,MChiP(gI2),MSHp0(gI1))*Conj(
            CpUChiconjSHp0ChiPPR(gO2,gI1,gI2))*CpUChiconjSHp0ChiPPR(gO1,gI1,gI2);
      }
      tmp_6150 += tmp_6151;
   }
   tmp_6149 += tmp_6150;
   result += (-1) * tmp_6149;
   std::complex<double> tmp_6152;
   std::complex<double> tmp_6153;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_6154;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_6154 += B1(p,MFSI(gI2),MSSI0(gI1))*Conj(CpUChiconjSSI0FSIPR(
            gO2,gI1,gI2))*CpUChiconjSSI0FSIPR(gO1,gI1,gI2);
      }
      tmp_6153 += tmp_6154;
   }
   tmp_6152 += tmp_6153;
   result += (-1) * tmp_6152;
   std::complex<double> tmp_6155;
   std::complex<double> tmp_6156;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_6157;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_6157 += B1(p,MFv(gI2),MSv(gI1))*Conj(CpUChiconjSvFvPR(gO2,
            gI1,gI2))*CpUChiconjSvFvPR(gO1,gI1,gI2);
      }
      tmp_6156 += tmp_6157;
   }
   tmp_6155 += tmp_6156;
   result += (-1) * tmp_6155;
   std::complex<double> tmp_6158;
   std::complex<double> tmp_6159;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_6160;
      for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
         tmp_6160 += B1(p,MChi(gI2),Mhh(gI1))*Conj(CpUChihhChiPR(gO2,gI1,
            gI2))*CpUChihhChiPR(gO1,gI1,gI2);
      }
      tmp_6159 += tmp_6160;
   }
   tmp_6158 += tmp_6159;
   result += (-0.5) * tmp_6158;
   std::complex<double> tmp_6161;
   std::complex<double> tmp_6162;
   for (unsigned gI1 = 0; gI1 < 4; ++gI1) {
      std::complex<double> tmp_6163;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_6163 += B1(p,MChaI(gI2),MSHIp(gI1))*Conj(
            CpUChiconjSHIpChaIPR(gO2,gI1,gI2))*CpUChiconjSHIpChaIPR(gO1,gI1,gI2);
      }
      tmp_6162 += tmp_6163;
   }
   tmp_6161 += tmp_6162;
   result += (-1) * tmp_6161;
   std::complex<double> tmp_6164;
   std::complex<double> tmp_6165;
   for (unsigned gI1 = 0; gI1 < 4; ++gI1) {
      std::complex<double> tmp_6166;
      for (unsigned gI2 = 0; gI2 < 4; ++gI2) {
         tmp_6166 += B1(p,MChiI(gI2),MSHI0(gI1))*Conj(
            CpUChiconjSHI0ChiIPR(gO2,gI1,gI2))*CpUChiconjSHI0ChiIPR(gO1,gI1,gI2);
      }
      tmp_6165 += tmp_6166;
   }
   tmp_6164 += tmp_6165;
   result += (-1) * tmp_6164;
   std::complex<double> tmp_6167;
   std::complex<double> tmp_6168;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_6169;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_6169 += B1(p,MChi(gI1),MAh(gI2))*Conj(CpUChiChiAhPR(gO2,gI1,
            gI2))*CpUChiChiAhPR(gO1,gI1,gI2);
      }
      tmp_6168 += tmp_6169;
   }
   tmp_6167 += tmp_6168;
   result += (-0.5) * tmp_6167;
   std::complex<double> tmp_6170;
   std::complex<double> tmp_6171;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_6172;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_6172 += B1(p,MFd(gI2),MSd(gI1))*Conj(CpUChiconjSdFdPR(gO2,
            gI1,gI2))*CpUChiconjSdFdPR(gO1,gI1,gI2);
      }
      tmp_6171 += tmp_6172;
   }
   tmp_6170 += tmp_6171;
   result += (-3) * tmp_6170;
   std::complex<double> tmp_6173;
   std::complex<double> tmp_6174;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_6175;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_6175 += B1(p,MFDX(gI2),MSDX(gI1))*Conj(CpUChiconjSDXFDXPR(
            gO2,gI1,gI2))*CpUChiconjSDXFDXPR(gO1,gI1,gI2);
      }
      tmp_6174 += tmp_6175;
   }
   tmp_6173 += tmp_6174;
   result += (-3) * tmp_6173;
   std::complex<double> tmp_6176;
   std::complex<double> tmp_6177;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_6178;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_6178 += B1(p,MFe(gI2),MSe(gI1))*Conj(CpUChiconjSeFePR(gO2,
            gI1,gI2))*CpUChiconjSeFePR(gO1,gI1,gI2);
      }
      tmp_6177 += tmp_6178;
   }
   tmp_6176 += tmp_6177;
   result += (-1) * tmp_6176;
   std::complex<double> tmp_6179;
   std::complex<double> tmp_6180;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_6181;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_6181 += B1(p,MFu(gI2),MSu(gI1))*Conj(CpUChiconjSuFuPR(gO2,
            gI1,gI2))*CpUChiconjSuFuPR(gO1,gI1,gI2);
      }
      tmp_6180 += tmp_6181;
   }
   tmp_6179 += tmp_6180;
   result += (-3) * tmp_6179;
   std::complex<double> tmp_6182;
   std::complex<double> tmp_6183;
   for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
      tmp_6183 += B1(p,MCha(gI2),MVWm)*Conj(CpUChiconjVWmChaPL(gO2,gI2))*
         CpUChiconjVWmChaPL(gO1,gI2);
   }
   tmp_6182 += tmp_6183;
   result += (-2) * tmp_6182;
   std::complex<double> tmp_6184;
   std::complex<double> tmp_6185;
   for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
      tmp_6185 += B1(p,MChi(gI2),MVZ)*Conj(CpUChiVZChiPL(gO2,gI2))*
         CpUChiVZChiPL(gO1,gI2);
   }
   tmp_6184 += tmp_6185;
   result += (-1) * tmp_6184;
   std::complex<double> tmp_6186;
   std::complex<double> tmp_6187;
   for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
      tmp_6187 += B1(p,MChi(gI2),MVZp)*Conj(CpUChiVZpChiPL(gO2,gI2))*
         CpUChiVZpChiPL(gO1,gI2);
   }
   tmp_6186 += tmp_6187;
   result += (-1) * tmp_6186;

   return result * oneOver16PiSqr;

}

std::complex<double> CLASSNAME::self_energy_Chi_PL(double p , unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   std::complex<double> tmp_6188;
   std::complex<double> tmp_6189;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      tmp_6189 += B1(p,MChaP,MSHpp(gI1))*Conj(CpUChiconjSHppChaPPL(gO2,gI1))
         *CpUChiconjSHppChaPPL(gO1,gI1);
   }
   tmp_6188 += tmp_6189;
   result += (-1) * tmp_6188;
   std::complex<double> tmp_6190;
   std::complex<double> tmp_6191;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_6192;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_6192 += B1(p,MCha(gI2),MHpm(gI1))*Conj(CpUChiconjHpmChaPL(
            gO2,gI1,gI2))*CpUChiconjHpmChaPL(gO1,gI1,gI2);
      }
      tmp_6191 += tmp_6192;
   }
   tmp_6190 += tmp_6191;
   result += (-1) * tmp_6190;
   std::complex<double> tmp_6193;
   std::complex<double> tmp_6194;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_6195;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_6195 += B1(p,MChiP(gI2),MSHp0(gI1))*Conj(
            CpUChiconjSHp0ChiPPL(gO2,gI1,gI2))*CpUChiconjSHp0ChiPPL(gO1,gI1,gI2);
      }
      tmp_6194 += tmp_6195;
   }
   tmp_6193 += tmp_6194;
   result += (-1) * tmp_6193;
   std::complex<double> tmp_6196;
   std::complex<double> tmp_6197;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_6198;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_6198 += B1(p,MFSI(gI2),MSSI0(gI1))*Conj(CpUChiconjSSI0FSIPL(
            gO2,gI1,gI2))*CpUChiconjSSI0FSIPL(gO1,gI1,gI2);
      }
      tmp_6197 += tmp_6198;
   }
   tmp_6196 += tmp_6197;
   result += (-1) * tmp_6196;
   std::complex<double> tmp_6199;
   std::complex<double> tmp_6200;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_6201;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_6201 += B1(p,MFv(gI2),MSv(gI1))*Conj(CpUChiconjSvFvPL(gO2,
            gI1,gI2))*CpUChiconjSvFvPL(gO1,gI1,gI2);
      }
      tmp_6200 += tmp_6201;
   }
   tmp_6199 += tmp_6200;
   result += (-1) * tmp_6199;
   std::complex<double> tmp_6202;
   std::complex<double> tmp_6203;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_6204;
      for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
         tmp_6204 += B1(p,MChi(gI2),Mhh(gI1))*Conj(CpUChihhChiPL(gO2,gI1,
            gI2))*CpUChihhChiPL(gO1,gI1,gI2);
      }
      tmp_6203 += tmp_6204;
   }
   tmp_6202 += tmp_6203;
   result += (-0.5) * tmp_6202;
   std::complex<double> tmp_6205;
   std::complex<double> tmp_6206;
   for (unsigned gI1 = 0; gI1 < 4; ++gI1) {
      std::complex<double> tmp_6207;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_6207 += B1(p,MChaI(gI2),MSHIp(gI1))*Conj(
            CpUChiconjSHIpChaIPL(gO2,gI1,gI2))*CpUChiconjSHIpChaIPL(gO1,gI1,gI2);
      }
      tmp_6206 += tmp_6207;
   }
   tmp_6205 += tmp_6206;
   result += (-1) * tmp_6205;
   std::complex<double> tmp_6208;
   std::complex<double> tmp_6209;
   for (unsigned gI1 = 0; gI1 < 4; ++gI1) {
      std::complex<double> tmp_6210;
      for (unsigned gI2 = 0; gI2 < 4; ++gI2) {
         tmp_6210 += B1(p,MChiI(gI2),MSHI0(gI1))*Conj(
            CpUChiconjSHI0ChiIPL(gO2,gI1,gI2))*CpUChiconjSHI0ChiIPL(gO1,gI1,gI2);
      }
      tmp_6209 += tmp_6210;
   }
   tmp_6208 += tmp_6209;
   result += (-1) * tmp_6208;
   std::complex<double> tmp_6211;
   std::complex<double> tmp_6212;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_6213;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_6213 += B1(p,MChi(gI1),MAh(gI2))*Conj(CpUChiChiAhPL(gO2,gI1,
            gI2))*CpUChiChiAhPL(gO1,gI1,gI2);
      }
      tmp_6212 += tmp_6213;
   }
   tmp_6211 += tmp_6212;
   result += (-0.5) * tmp_6211;
   std::complex<double> tmp_6214;
   std::complex<double> tmp_6215;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_6216;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_6216 += B1(p,MFd(gI2),MSd(gI1))*Conj(CpUChiconjSdFdPL(gO2,
            gI1,gI2))*CpUChiconjSdFdPL(gO1,gI1,gI2);
      }
      tmp_6215 += tmp_6216;
   }
   tmp_6214 += tmp_6215;
   result += (-3) * tmp_6214;
   std::complex<double> tmp_6217;
   std::complex<double> tmp_6218;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_6219;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_6219 += B1(p,MFDX(gI2),MSDX(gI1))*Conj(CpUChiconjSDXFDXPL(
            gO2,gI1,gI2))*CpUChiconjSDXFDXPL(gO1,gI1,gI2);
      }
      tmp_6218 += tmp_6219;
   }
   tmp_6217 += tmp_6218;
   result += (-3) * tmp_6217;
   std::complex<double> tmp_6220;
   std::complex<double> tmp_6221;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_6222;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_6222 += B1(p,MFe(gI2),MSe(gI1))*Conj(CpUChiconjSeFePL(gO2,
            gI1,gI2))*CpUChiconjSeFePL(gO1,gI1,gI2);
      }
      tmp_6221 += tmp_6222;
   }
   tmp_6220 += tmp_6221;
   result += (-1) * tmp_6220;
   std::complex<double> tmp_6223;
   std::complex<double> tmp_6224;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_6225;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_6225 += B1(p,MFu(gI2),MSu(gI1))*Conj(CpUChiconjSuFuPL(gO2,
            gI1,gI2))*CpUChiconjSuFuPL(gO1,gI1,gI2);
      }
      tmp_6224 += tmp_6225;
   }
   tmp_6223 += tmp_6224;
   result += (-3) * tmp_6223;
   std::complex<double> tmp_6226;
   std::complex<double> tmp_6227;
   for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
      tmp_6227 += B1(p,MCha(gI2),MVWm)*Conj(CpUChiconjVWmChaPR(gO2,gI2))*
         CpUChiconjVWmChaPR(gO1,gI2);
   }
   tmp_6226 += tmp_6227;
   result += (-2) * tmp_6226;
   std::complex<double> tmp_6228;
   std::complex<double> tmp_6229;
   for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
      tmp_6229 += B1(p,MChi(gI2),MVZ)*Conj(CpUChiVZChiPR(gO2,gI2))*
         CpUChiVZChiPR(gO1,gI2);
   }
   tmp_6228 += tmp_6229;
   result += (-1) * tmp_6228;
   std::complex<double> tmp_6230;
   std::complex<double> tmp_6231;
   for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
      tmp_6231 += B1(p,MChi(gI2),MVZp)*Conj(CpUChiVZpChiPR(gO2,gI2))*
         CpUChiVZpChiPR(gO1,gI2);
   }
   tmp_6230 += tmp_6231;
   result += (-1) * tmp_6230;

   return result * oneOver16PiSqr;

}

std::complex<double> CLASSNAME::self_energy_Cha_1(double p , unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   std::complex<double> tmp_6232;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_6233;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_6233 += B0(p,MChiP(gI2),MSHpp(gI1))*Conj(CpbarUChaSHppChiPPL
            (gO2,gI1,gI2))*CpbarUChaSHppChiPPR(gO1,gI1,gI2)*MChiP(gI2);
      }
      tmp_6232 += tmp_6233;
   }
   result += tmp_6232;
   std::complex<double> tmp_6234;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_6235;
      for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
         tmp_6235 += B0(p,MChi(gI2),MHpm(gI1))*Conj(CpbarUChaHpmChiPL(gO2
            ,gI1,gI2))*CpbarUChaHpmChiPR(gO1,gI1,gI2)*MChi(gI2);
      }
      tmp_6234 += tmp_6235;
   }
   result += tmp_6234;
   std::complex<double> tmp_6236;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_6237;
      std::complex<double> tmp_6238;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_6238 += B0(p,MCha(gI1),MAh(gI2))*Conj(CpbarUChaChaAhPL(gO2,
            gI1,gI2))*CpbarUChaChaAhPR(gO1,gI1,gI2);
      }
      tmp_6237 += tmp_6238;
      tmp_6236 += (MCha(gI1)) * tmp_6237;
   }
   result += tmp_6236;
   std::complex<double> tmp_6239;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_6240;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_6240 += B0(p,MCha(gI2),Mhh(gI1))*Conj(CpbarUChahhChaPL(gO2,
            gI1,gI2))*CpbarUChahhChaPR(gO1,gI1,gI2)*MCha(gI2);
      }
      tmp_6239 += tmp_6240;
   }
   result += tmp_6239;
   std::complex<double> tmp_6241;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_6242;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_6242 += B0(p,MFe(gI2),MSv(gI1))*Conj(CpbarUChaconjSvFePL(gO2
            ,gI1,gI2))*CpbarUChaconjSvFePR(gO1,gI1,gI2)*MFe(gI2);
      }
      tmp_6241 += tmp_6242;
   }
   result += tmp_6241;
   std::complex<double> tmp_6243;
   std::complex<double> tmp_6244;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_6245;
      std::complex<double> tmp_6246;
      for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
         tmp_6246 += B0(p,MFu(gI1),MSd(gI2))*Conj(CpbarUChabarFuSdPL(gO2,
            gI1,gI2))*CpbarUChabarFuSdPR(gO1,gI1,gI2);
      }
      tmp_6245 += tmp_6246;
      tmp_6244 += (MFu(gI1)) * tmp_6245;
   }
   tmp_6243 += tmp_6244;
   result += (3) * tmp_6243;
   std::complex<double> tmp_6247;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_6248;
      std::complex<double> tmp_6249;
      for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
         tmp_6249 += B0(p,MFv(gI1),MSe(gI2))*Conj(CpbarUChabarFvSePL(gO2,
            gI1,gI2))*CpbarUChabarFvSePR(gO1,gI1,gI2);
      }
      tmp_6248 += tmp_6249;
      tmp_6247 += (MFv(gI1)) * tmp_6248;
   }
   result += tmp_6247;
   std::complex<double> tmp_6250;
   for (unsigned gI1 = 0; gI1 < 4; ++gI1) {
      std::complex<double> tmp_6251;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_6251 += B0(p,MChaI(gI2),MSHI0(gI1))*Conj(
            CpbarUChaconjSHI0ChaIPL(gO2,gI1,gI2))*CpbarUChaconjSHI0ChaIPR(gO1,gI1,
            gI2)*MChaI(gI2);
      }
      tmp_6250 += tmp_6251;
   }
   result += tmp_6250;
   std::complex<double> tmp_6252;
   for (unsigned gI1 = 0; gI1 < 4; ++gI1) {
      std::complex<double> tmp_6253;
      for (unsigned gI2 = 0; gI2 < 4; ++gI2) {
         tmp_6253 += B0(p,MChiI(gI2),MSHIp(gI1))*Conj(CpbarUChaSHIpChiIPL
            (gO2,gI1,gI2))*CpbarUChaSHIpChiIPR(gO1,gI1,gI2)*MChiI(gI2);
      }
      tmp_6252 += tmp_6253;
   }
   result += tmp_6252;
   std::complex<double> tmp_6254;
   std::complex<double> tmp_6255;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_6256;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_6256 += B0(p,MFd(gI2),MSu(gI1))*Conj(CpbarUChaconjSuFdPL(gO2
            ,gI1,gI2))*CpbarUChaconjSuFdPR(gO1,gI1,gI2)*MFd(gI2);
      }
      tmp_6255 += tmp_6256;
   }
   tmp_6254 += tmp_6255;
   result += (3) * tmp_6254;
   std::complex<double> tmp_6257;
   std::complex<double> tmp_6258;
   for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
      tmp_6258 += B0(p,MCha(gI2),0)*Conj(CpbarUChaVPChaPR(gO2,gI2))*
         CpbarUChaVPChaPL(gO1,gI2)*MCha(gI2);
   }
   tmp_6257 += tmp_6258;
   result += (-4) * tmp_6257;
   std::complex<double> tmp_6259;
   std::complex<double> tmp_6260;
   for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
      tmp_6260 += B0(p,MCha(gI2),MVZ)*Conj(CpbarUChaVZChaPR(gO2,gI2))*
         CpbarUChaVZChaPL(gO1,gI2)*MCha(gI2);
   }
   tmp_6259 += tmp_6260;
   result += (-4) * tmp_6259;
   std::complex<double> tmp_6261;
   std::complex<double> tmp_6262;
   for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
      tmp_6262 += B0(p,MCha(gI2),MVZp)*Conj(CpbarUChaVZpChaPR(gO2,gI2))*
         CpbarUChaVZpChaPL(gO1,gI2)*MCha(gI2);
   }
   tmp_6261 += tmp_6262;
   result += (-4) * tmp_6261;
   std::complex<double> tmp_6263;
   std::complex<double> tmp_6264;
   for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
      tmp_6264 += B0(p,MChi(gI2),MVWm)*Conj(CpbarUChaVWmChiPR(gO2,gI2))*
         CpbarUChaVWmChiPL(gO1,gI2)*MChi(gI2);
   }
   tmp_6263 += tmp_6264;
   result += (-4) * tmp_6263;
   std::complex<double> tmp_6265;
   std::complex<double> tmp_6266;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      tmp_6266 += B0(p,MChaP,MSHp0(gI1))*Conj(CpbarUChaconjSHp0ChaPPL(gO2,
         gI1))*CpbarUChaconjSHp0ChaPPR(gO1,gI1);
   }
   tmp_6265 += tmp_6266;
   result += (MChaP) * tmp_6265;

   return result * oneOver16PiSqr;

}

std::complex<double> CLASSNAME::self_energy_Cha_PR(double p , unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   std::complex<double> tmp_6267;
   std::complex<double> tmp_6268;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      tmp_6268 += B1(p,MChaP,MSHp0(gI1))*Conj(CpbarUChaconjSHp0ChaPPR(gO2,
         gI1))*CpbarUChaconjSHp0ChaPPR(gO1,gI1);
   }
   tmp_6267 += tmp_6268;
   result += (-0.5) * tmp_6267;
   std::complex<double> tmp_6269;
   std::complex<double> tmp_6270;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_6271;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_6271 += B1(p,MChiP(gI2),MSHpp(gI1))*Conj(CpbarUChaSHppChiPPR
            (gO2,gI1,gI2))*CpbarUChaSHppChiPPR(gO1,gI1,gI2);
      }
      tmp_6270 += tmp_6271;
   }
   tmp_6269 += tmp_6270;
   result += (-0.5) * tmp_6269;
   std::complex<double> tmp_6272;
   std::complex<double> tmp_6273;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_6274;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_6274 += B1(p,MCha(gI1),MAh(gI2))*Conj(CpbarUChaChaAhPR(gO2,
            gI1,gI2))*CpbarUChaChaAhPR(gO1,gI1,gI2);
      }
      tmp_6273 += tmp_6274;
   }
   tmp_6272 += tmp_6273;
   result += (-0.5) * tmp_6272;
   std::complex<double> tmp_6275;
   std::complex<double> tmp_6276;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_6277;
      for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
         tmp_6277 += B1(p,MChi(gI2),MHpm(gI1))*Conj(CpbarUChaHpmChiPR(gO2
            ,gI1,gI2))*CpbarUChaHpmChiPR(gO1,gI1,gI2);
      }
      tmp_6276 += tmp_6277;
   }
   tmp_6275 += tmp_6276;
   result += (-0.5) * tmp_6275;
   std::complex<double> tmp_6278;
   std::complex<double> tmp_6279;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_6280;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_6280 += B1(p,MCha(gI2),Mhh(gI1))*Conj(CpbarUChahhChaPR(gO2,
            gI1,gI2))*CpbarUChahhChaPR(gO1,gI1,gI2);
      }
      tmp_6279 += tmp_6280;
   }
   tmp_6278 += tmp_6279;
   result += (-0.5) * tmp_6278;
   std::complex<double> tmp_6281;
   std::complex<double> tmp_6282;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_6283;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_6283 += B1(p,MFe(gI2),MSv(gI1))*Conj(CpbarUChaconjSvFePR(gO2
            ,gI1,gI2))*CpbarUChaconjSvFePR(gO1,gI1,gI2);
      }
      tmp_6282 += tmp_6283;
   }
   tmp_6281 += tmp_6282;
   result += (-0.5) * tmp_6281;
   std::complex<double> tmp_6284;
   std::complex<double> tmp_6285;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_6286;
      for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
         tmp_6286 += B1(p,MFu(gI1),MSd(gI2))*Conj(CpbarUChabarFuSdPR(gO2,
            gI1,gI2))*CpbarUChabarFuSdPR(gO1,gI1,gI2);
      }
      tmp_6285 += tmp_6286;
   }
   tmp_6284 += tmp_6285;
   result += (-1.5) * tmp_6284;
   std::complex<double> tmp_6287;
   std::complex<double> tmp_6288;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_6289;
      for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
         tmp_6289 += B1(p,MFv(gI1),MSe(gI2))*Conj(CpbarUChabarFvSePR(gO2,
            gI1,gI2))*CpbarUChabarFvSePR(gO1,gI1,gI2);
      }
      tmp_6288 += tmp_6289;
   }
   tmp_6287 += tmp_6288;
   result += (-0.5) * tmp_6287;
   std::complex<double> tmp_6290;
   std::complex<double> tmp_6291;
   for (unsigned gI1 = 0; gI1 < 4; ++gI1) {
      std::complex<double> tmp_6292;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_6292 += B1(p,MChaI(gI2),MSHI0(gI1))*Conj(
            CpbarUChaconjSHI0ChaIPR(gO2,gI1,gI2))*CpbarUChaconjSHI0ChaIPR(gO1,gI1,
            gI2);
      }
      tmp_6291 += tmp_6292;
   }
   tmp_6290 += tmp_6291;
   result += (-0.5) * tmp_6290;
   std::complex<double> tmp_6293;
   std::complex<double> tmp_6294;
   for (unsigned gI1 = 0; gI1 < 4; ++gI1) {
      std::complex<double> tmp_6295;
      for (unsigned gI2 = 0; gI2 < 4; ++gI2) {
         tmp_6295 += B1(p,MChiI(gI2),MSHIp(gI1))*Conj(CpbarUChaSHIpChiIPR
            (gO2,gI1,gI2))*CpbarUChaSHIpChiIPR(gO1,gI1,gI2);
      }
      tmp_6294 += tmp_6295;
   }
   tmp_6293 += tmp_6294;
   result += (-0.5) * tmp_6293;
   std::complex<double> tmp_6296;
   std::complex<double> tmp_6297;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_6298;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_6298 += B1(p,MFd(gI2),MSu(gI1))*Conj(CpbarUChaconjSuFdPR(gO2
            ,gI1,gI2))*CpbarUChaconjSuFdPR(gO1,gI1,gI2);
      }
      tmp_6297 += tmp_6298;
   }
   tmp_6296 += tmp_6297;
   result += (-1.5) * tmp_6296;
   std::complex<double> tmp_6299;
   std::complex<double> tmp_6300;
   for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
      tmp_6300 += B1(p,MCha(gI2),0)*Conj(CpbarUChaVPChaPL(gO2,gI2))*
         CpbarUChaVPChaPL(gO1,gI2);
   }
   tmp_6299 += tmp_6300;
   result += (-1) * tmp_6299;
   std::complex<double> tmp_6301;
   std::complex<double> tmp_6302;
   for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
      tmp_6302 += B1(p,MCha(gI2),MVZ)*Conj(CpbarUChaVZChaPL(gO2,gI2))*
         CpbarUChaVZChaPL(gO1,gI2);
   }
   tmp_6301 += tmp_6302;
   result += (-1) * tmp_6301;
   std::complex<double> tmp_6303;
   std::complex<double> tmp_6304;
   for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
      tmp_6304 += B1(p,MCha(gI2),MVZp)*Conj(CpbarUChaVZpChaPL(gO2,gI2))*
         CpbarUChaVZpChaPL(gO1,gI2);
   }
   tmp_6303 += tmp_6304;
   result += (-1) * tmp_6303;
   std::complex<double> tmp_6305;
   std::complex<double> tmp_6306;
   for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
      tmp_6306 += B1(p,MChi(gI2),MVWm)*Conj(CpbarUChaVWmChiPL(gO2,gI2))*
         CpbarUChaVWmChiPL(gO1,gI2);
   }
   tmp_6305 += tmp_6306;
   result += (-1) * tmp_6305;

   return result * oneOver16PiSqr;

}

std::complex<double> CLASSNAME::self_energy_Cha_PL(double p , unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   std::complex<double> tmp_6307;
   std::complex<double> tmp_6308;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      tmp_6308 += B1(p,MChaP,MSHp0(gI1))*Conj(CpbarUChaconjSHp0ChaPPL(gO2,
         gI1))*CpbarUChaconjSHp0ChaPPL(gO1,gI1);
   }
   tmp_6307 += tmp_6308;
   result += (-0.5) * tmp_6307;
   std::complex<double> tmp_6309;
   std::complex<double> tmp_6310;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_6311;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_6311 += B1(p,MChiP(gI2),MSHpp(gI1))*Conj(CpbarUChaSHppChiPPL
            (gO2,gI1,gI2))*CpbarUChaSHppChiPPL(gO1,gI1,gI2);
      }
      tmp_6310 += tmp_6311;
   }
   tmp_6309 += tmp_6310;
   result += (-0.5) * tmp_6309;
   std::complex<double> tmp_6312;
   std::complex<double> tmp_6313;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_6314;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_6314 += B1(p,MCha(gI1),MAh(gI2))*Conj(CpbarUChaChaAhPL(gO2,
            gI1,gI2))*CpbarUChaChaAhPL(gO1,gI1,gI2);
      }
      tmp_6313 += tmp_6314;
   }
   tmp_6312 += tmp_6313;
   result += (-0.5) * tmp_6312;
   std::complex<double> tmp_6315;
   std::complex<double> tmp_6316;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_6317;
      for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
         tmp_6317 += B1(p,MChi(gI2),MHpm(gI1))*Conj(CpbarUChaHpmChiPL(gO2
            ,gI1,gI2))*CpbarUChaHpmChiPL(gO1,gI1,gI2);
      }
      tmp_6316 += tmp_6317;
   }
   tmp_6315 += tmp_6316;
   result += (-0.5) * tmp_6315;
   std::complex<double> tmp_6318;
   std::complex<double> tmp_6319;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_6320;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_6320 += B1(p,MCha(gI2),Mhh(gI1))*Conj(CpbarUChahhChaPL(gO2,
            gI1,gI2))*CpbarUChahhChaPL(gO1,gI1,gI2);
      }
      tmp_6319 += tmp_6320;
   }
   tmp_6318 += tmp_6319;
   result += (-0.5) * tmp_6318;
   std::complex<double> tmp_6321;
   std::complex<double> tmp_6322;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_6323;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_6323 += B1(p,MFe(gI2),MSv(gI1))*Conj(CpbarUChaconjSvFePL(gO2
            ,gI1,gI2))*CpbarUChaconjSvFePL(gO1,gI1,gI2);
      }
      tmp_6322 += tmp_6323;
   }
   tmp_6321 += tmp_6322;
   result += (-0.5) * tmp_6321;
   std::complex<double> tmp_6324;
   std::complex<double> tmp_6325;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_6326;
      for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
         tmp_6326 += B1(p,MFu(gI1),MSd(gI2))*Conj(CpbarUChabarFuSdPL(gO2,
            gI1,gI2))*CpbarUChabarFuSdPL(gO1,gI1,gI2);
      }
      tmp_6325 += tmp_6326;
   }
   tmp_6324 += tmp_6325;
   result += (-1.5) * tmp_6324;
   std::complex<double> tmp_6327;
   std::complex<double> tmp_6328;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_6329;
      for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
         tmp_6329 += B1(p,MFv(gI1),MSe(gI2))*Conj(CpbarUChabarFvSePL(gO2,
            gI1,gI2))*CpbarUChabarFvSePL(gO1,gI1,gI2);
      }
      tmp_6328 += tmp_6329;
   }
   tmp_6327 += tmp_6328;
   result += (-0.5) * tmp_6327;
   std::complex<double> tmp_6330;
   std::complex<double> tmp_6331;
   for (unsigned gI1 = 0; gI1 < 4; ++gI1) {
      std::complex<double> tmp_6332;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_6332 += B1(p,MChaI(gI2),MSHI0(gI1))*Conj(
            CpbarUChaconjSHI0ChaIPL(gO2,gI1,gI2))*CpbarUChaconjSHI0ChaIPL(gO1,gI1,
            gI2);
      }
      tmp_6331 += tmp_6332;
   }
   tmp_6330 += tmp_6331;
   result += (-0.5) * tmp_6330;
   std::complex<double> tmp_6333;
   std::complex<double> tmp_6334;
   for (unsigned gI1 = 0; gI1 < 4; ++gI1) {
      std::complex<double> tmp_6335;
      for (unsigned gI2 = 0; gI2 < 4; ++gI2) {
         tmp_6335 += B1(p,MChiI(gI2),MSHIp(gI1))*Conj(CpbarUChaSHIpChiIPL
            (gO2,gI1,gI2))*CpbarUChaSHIpChiIPL(gO1,gI1,gI2);
      }
      tmp_6334 += tmp_6335;
   }
   tmp_6333 += tmp_6334;
   result += (-0.5) * tmp_6333;
   std::complex<double> tmp_6336;
   std::complex<double> tmp_6337;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_6338;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_6338 += B1(p,MFd(gI2),MSu(gI1))*Conj(CpbarUChaconjSuFdPL(gO2
            ,gI1,gI2))*CpbarUChaconjSuFdPL(gO1,gI1,gI2);
      }
      tmp_6337 += tmp_6338;
   }
   tmp_6336 += tmp_6337;
   result += (-1.5) * tmp_6336;
   std::complex<double> tmp_6339;
   std::complex<double> tmp_6340;
   for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
      tmp_6340 += B1(p,MCha(gI2),0)*Conj(CpbarUChaVPChaPR(gO2,gI2))*
         CpbarUChaVPChaPR(gO1,gI2);
   }
   tmp_6339 += tmp_6340;
   result += (-1) * tmp_6339;
   std::complex<double> tmp_6341;
   std::complex<double> tmp_6342;
   for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
      tmp_6342 += B1(p,MCha(gI2),MVZ)*Conj(CpbarUChaVZChaPR(gO2,gI2))*
         CpbarUChaVZChaPR(gO1,gI2);
   }
   tmp_6341 += tmp_6342;
   result += (-1) * tmp_6341;
   std::complex<double> tmp_6343;
   std::complex<double> tmp_6344;
   for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
      tmp_6344 += B1(p,MCha(gI2),MVZp)*Conj(CpbarUChaVZpChaPR(gO2,gI2))*
         CpbarUChaVZpChaPR(gO1,gI2);
   }
   tmp_6343 += tmp_6344;
   result += (-1) * tmp_6343;
   std::complex<double> tmp_6345;
   std::complex<double> tmp_6346;
   for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
      tmp_6346 += B1(p,MChi(gI2),MVWm)*Conj(CpbarUChaVWmChiPR(gO2,gI2))*
         CpbarUChaVWmChiPR(gO1,gI2);
   }
   tmp_6345 += tmp_6346;
   result += (-1) * tmp_6345;

   return result * oneOver16PiSqr;

}

std::complex<double> CLASSNAME::self_energy_Fe_1(double p , unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   std::complex<double> tmp_6347;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_6348;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_6348 += B0(p,MFv(gI2),MHpm(gI1))*Conj(CpbarUFeHpmFvPL(gO2,
            gI1,gI2))*CpbarUFeHpmFvPR(gO1,gI1,gI2)*MFv(gI2);
      }
      tmp_6347 += tmp_6348;
   }
   result += tmp_6347;
   std::complex<double> tmp_6349;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_6350;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_6350 += B0(p,MCha(gI2),MSv(gI1))*Conj(CpbarUFeSvChaPL(gO2,
            gI1,gI2))*CpbarUFeSvChaPR(gO1,gI1,gI2)*MCha(gI2);
      }
      tmp_6349 += tmp_6350;
   }
   result += tmp_6349;
   std::complex<double> tmp_6351;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_6352;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_6352 += B0(p,MFe(gI2),Mhh(gI1))*Conj(CpbarUFehhFePL(gO2,gI1,
            gI2))*CpbarUFehhFePR(gO1,gI1,gI2)*MFe(gI2);
      }
      tmp_6351 += tmp_6352;
   }
   result += tmp_6351;
   std::complex<double> tmp_6353;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_6354;
      std::complex<double> tmp_6355;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_6355 += B0(p,MFe(gI1),MAh(gI2))*Conj(CpbarUFeFeAhPL(gO2,gI1,
            gI2))*CpbarUFeFeAhPR(gO1,gI1,gI2);
      }
      tmp_6354 += tmp_6355;
      tmp_6353 += (MFe(gI1)) * tmp_6354;
   }
   result += tmp_6353;
   std::complex<double> tmp_6356;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_6357;
      for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
         tmp_6357 += B0(p,MChi(gI2),MSe(gI1))*Conj(CpbarUFeSeChiPL(gO2,
            gI1,gI2))*CpbarUFeSeChiPR(gO1,gI1,gI2)*MChi(gI2);
      }
      tmp_6356 += tmp_6357;
   }
   result += tmp_6356;
   std::complex<double> tmp_6358;
   std::complex<double> tmp_6359;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_6359 += B0(p,MFe(gI2),0)*Conj(CpbarUFeVPFePR(gO2,gI2))*
         CpbarUFeVPFePL(gO1,gI2)*MFe(gI2);
   }
   tmp_6358 += tmp_6359;
   result += (-4) * tmp_6358;
   std::complex<double> tmp_6360;
   std::complex<double> tmp_6361;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_6361 += B0(p,MFe(gI2),MVZ)*Conj(CpbarUFeVZFePR(gO2,gI2))*
         CpbarUFeVZFePL(gO1,gI2)*MFe(gI2);
   }
   tmp_6360 += tmp_6361;
   result += (-4) * tmp_6360;
   std::complex<double> tmp_6362;
   std::complex<double> tmp_6363;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_6363 += B0(p,MFe(gI2),MVZp)*Conj(CpbarUFeVZpFePR(gO2,gI2))*
         CpbarUFeVZpFePL(gO1,gI2)*MFe(gI2);
   }
   tmp_6362 += tmp_6363;
   result += (-4) * tmp_6362;
   std::complex<double> tmp_6364;
   std::complex<double> tmp_6365;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_6365 += B0(p,MFv(gI2),MVWm)*Conj(CpbarUFeVWmFvPR(gO2,gI2))*
         CpbarUFeVWmFvPL(gO1,gI2)*MFv(gI2);
   }
   tmp_6364 += tmp_6365;
   result += (-4) * tmp_6364;

   return result * oneOver16PiSqr;

}

std::complex<double> CLASSNAME::self_energy_Fe_PR(double p , unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   std::complex<double> tmp_6366;
   std::complex<double> tmp_6367;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_6368;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_6368 += B1(p,MFv(gI2),MHpm(gI1))*Conj(CpbarUFeHpmFvPR(gO2,
            gI1,gI2))*CpbarUFeHpmFvPR(gO1,gI1,gI2);
      }
      tmp_6367 += tmp_6368;
   }
   tmp_6366 += tmp_6367;
   result += (-0.5) * tmp_6366;
   std::complex<double> tmp_6369;
   std::complex<double> tmp_6370;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_6371;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_6371 += B1(p,MCha(gI2),MSv(gI1))*Conj(CpbarUFeSvChaPR(gO2,
            gI1,gI2))*CpbarUFeSvChaPR(gO1,gI1,gI2);
      }
      tmp_6370 += tmp_6371;
   }
   tmp_6369 += tmp_6370;
   result += (-0.5) * tmp_6369;
   std::complex<double> tmp_6372;
   std::complex<double> tmp_6373;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_6374;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_6374 += B1(p,MFe(gI1),MAh(gI2))*Conj(CpbarUFeFeAhPR(gO2,gI1,
            gI2))*CpbarUFeFeAhPR(gO1,gI1,gI2);
      }
      tmp_6373 += tmp_6374;
   }
   tmp_6372 += tmp_6373;
   result += (-0.5) * tmp_6372;
   std::complex<double> tmp_6375;
   std::complex<double> tmp_6376;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_6377;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_6377 += B1(p,MFe(gI2),Mhh(gI1))*Conj(CpbarUFehhFePR(gO2,gI1,
            gI2))*CpbarUFehhFePR(gO1,gI1,gI2);
      }
      tmp_6376 += tmp_6377;
   }
   tmp_6375 += tmp_6376;
   result += (-0.5) * tmp_6375;
   std::complex<double> tmp_6378;
   std::complex<double> tmp_6379;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_6380;
      for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
         tmp_6380 += B1(p,MChi(gI2),MSe(gI1))*Conj(CpbarUFeSeChiPR(gO2,
            gI1,gI2))*CpbarUFeSeChiPR(gO1,gI1,gI2);
      }
      tmp_6379 += tmp_6380;
   }
   tmp_6378 += tmp_6379;
   result += (-0.5) * tmp_6378;
   std::complex<double> tmp_6381;
   std::complex<double> tmp_6382;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_6382 += B1(p,MFe(gI2),0)*Conj(CpbarUFeVPFePL(gO2,gI2))*
         CpbarUFeVPFePL(gO1,gI2);
   }
   tmp_6381 += tmp_6382;
   result += (-1) * tmp_6381;
   std::complex<double> tmp_6383;
   std::complex<double> tmp_6384;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_6384 += B1(p,MFv(gI2),MVWm)*Conj(CpbarUFeVWmFvPL(gO2,gI2))*
         CpbarUFeVWmFvPL(gO1,gI2);
   }
   tmp_6383 += tmp_6384;
   result += (-1) * tmp_6383;
   std::complex<double> tmp_6385;
   std::complex<double> tmp_6386;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_6386 += B1(p,MFe(gI2),MVZ)*Conj(CpbarUFeVZFePL(gO2,gI2))*
         CpbarUFeVZFePL(gO1,gI2);
   }
   tmp_6385 += tmp_6386;
   result += (-1) * tmp_6385;
   std::complex<double> tmp_6387;
   std::complex<double> tmp_6388;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_6388 += B1(p,MFe(gI2),MVZp)*Conj(CpbarUFeVZpFePL(gO2,gI2))*
         CpbarUFeVZpFePL(gO1,gI2);
   }
   tmp_6387 += tmp_6388;
   result += (-1) * tmp_6387;

   return result * oneOver16PiSqr;

}

std::complex<double> CLASSNAME::self_energy_Fe_PL(double p , unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   std::complex<double> tmp_6389;
   std::complex<double> tmp_6390;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_6391;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_6391 += B1(p,MFv(gI2),MHpm(gI1))*Conj(CpbarUFeHpmFvPL(gO2,
            gI1,gI2))*CpbarUFeHpmFvPL(gO1,gI1,gI2);
      }
      tmp_6390 += tmp_6391;
   }
   tmp_6389 += tmp_6390;
   result += (-0.5) * tmp_6389;
   std::complex<double> tmp_6392;
   std::complex<double> tmp_6393;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_6394;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_6394 += B1(p,MCha(gI2),MSv(gI1))*Conj(CpbarUFeSvChaPL(gO2,
            gI1,gI2))*CpbarUFeSvChaPL(gO1,gI1,gI2);
      }
      tmp_6393 += tmp_6394;
   }
   tmp_6392 += tmp_6393;
   result += (-0.5) * tmp_6392;
   std::complex<double> tmp_6395;
   std::complex<double> tmp_6396;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_6397;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_6397 += B1(p,MFe(gI1),MAh(gI2))*Conj(CpbarUFeFeAhPL(gO2,gI1,
            gI2))*CpbarUFeFeAhPL(gO1,gI1,gI2);
      }
      tmp_6396 += tmp_6397;
   }
   tmp_6395 += tmp_6396;
   result += (-0.5) * tmp_6395;
   std::complex<double> tmp_6398;
   std::complex<double> tmp_6399;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_6400;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_6400 += B1(p,MFe(gI2),Mhh(gI1))*Conj(CpbarUFehhFePL(gO2,gI1,
            gI2))*CpbarUFehhFePL(gO1,gI1,gI2);
      }
      tmp_6399 += tmp_6400;
   }
   tmp_6398 += tmp_6399;
   result += (-0.5) * tmp_6398;
   std::complex<double> tmp_6401;
   std::complex<double> tmp_6402;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_6403;
      for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
         tmp_6403 += B1(p,MChi(gI2),MSe(gI1))*Conj(CpbarUFeSeChiPL(gO2,
            gI1,gI2))*CpbarUFeSeChiPL(gO1,gI1,gI2);
      }
      tmp_6402 += tmp_6403;
   }
   tmp_6401 += tmp_6402;
   result += (-0.5) * tmp_6401;
   std::complex<double> tmp_6404;
   std::complex<double> tmp_6405;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_6405 += B1(p,MFe(gI2),0)*Conj(CpbarUFeVPFePR(gO2,gI2))*
         CpbarUFeVPFePR(gO1,gI2);
   }
   tmp_6404 += tmp_6405;
   result += (-1) * tmp_6404;
   std::complex<double> tmp_6406;
   std::complex<double> tmp_6407;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_6407 += B1(p,MFv(gI2),MVWm)*Conj(CpbarUFeVWmFvPR(gO2,gI2))*
         CpbarUFeVWmFvPR(gO1,gI2);
   }
   tmp_6406 += tmp_6407;
   result += (-1) * tmp_6406;
   std::complex<double> tmp_6408;
   std::complex<double> tmp_6409;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_6409 += B1(p,MFe(gI2),MVZ)*Conj(CpbarUFeVZFePR(gO2,gI2))*
         CpbarUFeVZFePR(gO1,gI2);
   }
   tmp_6408 += tmp_6409;
   result += (-1) * tmp_6408;
   std::complex<double> tmp_6410;
   std::complex<double> tmp_6411;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_6411 += B1(p,MFe(gI2),MVZp)*Conj(CpbarUFeVZpFePR(gO2,gI2))*
         CpbarUFeVZpFePR(gO1,gI2);
   }
   tmp_6410 += tmp_6411;
   result += (-1) * tmp_6410;

   return result * oneOver16PiSqr;

}

std::complex<double> CLASSNAME::self_energy_Fd_1(double p , unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   std::complex<double> tmp_6412;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_6413;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_6413 += B0(p,MFu(gI2),MHpm(gI1))*Conj(CpbarUFdHpmFuPL(gO2,
            gI1,gI2))*CpbarUFdHpmFuPR(gO1,gI1,gI2)*MFu(gI2);
      }
      tmp_6412 += tmp_6413;
   }
   result += tmp_6412;
   std::complex<double> tmp_6414;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_6415;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_6415 += B0(p,MFd(gI2),Mhh(gI1))*Conj(CpbarUFdhhFdPL(gO2,gI1,
            gI2))*CpbarUFdhhFdPR(gO1,gI1,gI2)*MFd(gI2);
      }
      tmp_6414 += tmp_6415;
   }
   result += tmp_6414;
   std::complex<double> tmp_6416;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_6417;
      std::complex<double> tmp_6418;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_6418 += B0(p,MFd(gI1),MAh(gI2))*Conj(CpbarUFdFdAhPL(gO2,gI1,
            gI2))*CpbarUFdFdAhPR(gO1,gI1,gI2);
      }
      tmp_6417 += tmp_6418;
      tmp_6416 += (MFd(gI1)) * tmp_6417;
   }
   result += tmp_6416;
   std::complex<double> tmp_6419;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_6420;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_6420 += B0(p,MCha(gI2),MSu(gI1))*Conj(CpbarUFdSuChaPL(gO2,
            gI1,gI2))*CpbarUFdSuChaPR(gO1,gI1,gI2)*MCha(gI2);
      }
      tmp_6419 += tmp_6420;
   }
   result += tmp_6419;
   std::complex<double> tmp_6421;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_6422;
      for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
         tmp_6422 += B0(p,MChi(gI2),MSd(gI1))*Conj(CpbarUFdSdChiPL(gO2,
            gI1,gI2))*CpbarUFdSdChiPR(gO1,gI1,gI2)*MChi(gI2);
      }
      tmp_6421 += tmp_6422;
   }
   result += tmp_6421;
   std::complex<double> tmp_6423;
   std::complex<double> tmp_6424;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_6424 += B0(p,MFd(gI2),0)*Conj(CpbarUFdVGFdPR(gO2,gI2))*
         CpbarUFdVGFdPL(gO1,gI2)*MFd(gI2);
   }
   tmp_6423 += tmp_6424;
   result += (-5.333333333333333) * tmp_6423;
   std::complex<double> tmp_6425;
   std::complex<double> tmp_6426;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_6426 += B0(p,MFd(gI2),0)*Conj(CpbarUFdVPFdPR(gO2,gI2))*
         CpbarUFdVPFdPL(gO1,gI2)*MFd(gI2);
   }
   tmp_6425 += tmp_6426;
   result += (-4) * tmp_6425;
   std::complex<double> tmp_6427;
   std::complex<double> tmp_6428;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_6428 += B0(p,MFd(gI2),MVZ)*Conj(CpbarUFdVZFdPR(gO2,gI2))*
         CpbarUFdVZFdPL(gO1,gI2)*MFd(gI2);
   }
   tmp_6427 += tmp_6428;
   result += (-4) * tmp_6427;
   std::complex<double> tmp_6429;
   std::complex<double> tmp_6430;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_6430 += B0(p,MFd(gI2),MVZp)*Conj(CpbarUFdVZpFdPR(gO2,gI2))*
         CpbarUFdVZpFdPL(gO1,gI2)*MFd(gI2);
   }
   tmp_6429 += tmp_6430;
   result += (-4) * tmp_6429;
   std::complex<double> tmp_6431;
   std::complex<double> tmp_6432;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_6432 += B0(p,MFu(gI2),MVWm)*Conj(CpbarUFdVWmFuPR(gO2,gI2))*
         CpbarUFdVWmFuPL(gO1,gI2)*MFu(gI2);
   }
   tmp_6431 += tmp_6432;
   result += (-4) * tmp_6431;
   std::complex<double> tmp_6433;
   std::complex<double> tmp_6434;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_6434 += B0(p,MGlu,MSd(gI1))*Conj(CpbarUFdSdGluPL(gO2,gI1,0))*
         CpbarUFdSdGluPR(gO1,gI1,0);
   }
   tmp_6433 += tmp_6434;
   result += (1.3333333333333333*MGlu) * tmp_6433;

   return result * oneOver16PiSqr;

}

std::complex<double> CLASSNAME::self_energy_Fd_PR(double p , unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   std::complex<double> tmp_6435;
   std::complex<double> tmp_6436;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_6437;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_6437 += B1(p,MFu(gI2),MHpm(gI1))*Conj(CpbarUFdHpmFuPR(gO2,
            gI1,gI2))*CpbarUFdHpmFuPR(gO1,gI1,gI2);
      }
      tmp_6436 += tmp_6437;
   }
   tmp_6435 += tmp_6436;
   result += (-0.5) * tmp_6435;
   std::complex<double> tmp_6438;
   std::complex<double> tmp_6439;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_6440;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_6440 += B1(p,MFd(gI1),MAh(gI2))*Conj(CpbarUFdFdAhPR(gO2,gI1,
            gI2))*CpbarUFdFdAhPR(gO1,gI1,gI2);
      }
      tmp_6439 += tmp_6440;
   }
   tmp_6438 += tmp_6439;
   result += (-0.5) * tmp_6438;
   std::complex<double> tmp_6441;
   std::complex<double> tmp_6442;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_6443;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_6443 += B1(p,MFd(gI2),Mhh(gI1))*Conj(CpbarUFdhhFdPR(gO2,gI1,
            gI2))*CpbarUFdhhFdPR(gO1,gI1,gI2);
      }
      tmp_6442 += tmp_6443;
   }
   tmp_6441 += tmp_6442;
   result += (-0.5) * tmp_6441;
   std::complex<double> tmp_6444;
   std::complex<double> tmp_6445;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_6445 += B1(p,MGlu,MSd(gI1))*Conj(CpbarUFdSdGluPR(gO2,gI1,0))*
         CpbarUFdSdGluPR(gO1,gI1,0);
   }
   tmp_6444 += tmp_6445;
   result += (-0.6666666666666666) * tmp_6444;
   std::complex<double> tmp_6446;
   std::complex<double> tmp_6447;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_6448;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_6448 += B1(p,MCha(gI2),MSu(gI1))*Conj(CpbarUFdSuChaPR(gO2,
            gI1,gI2))*CpbarUFdSuChaPR(gO1,gI1,gI2);
      }
      tmp_6447 += tmp_6448;
   }
   tmp_6446 += tmp_6447;
   result += (-0.5) * tmp_6446;
   std::complex<double> tmp_6449;
   std::complex<double> tmp_6450;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_6451;
      for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
         tmp_6451 += B1(p,MChi(gI2),MSd(gI1))*Conj(CpbarUFdSdChiPR(gO2,
            gI1,gI2))*CpbarUFdSdChiPR(gO1,gI1,gI2);
      }
      tmp_6450 += tmp_6451;
   }
   tmp_6449 += tmp_6450;
   result += (-0.5) * tmp_6449;
   std::complex<double> tmp_6452;
   std::complex<double> tmp_6453;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_6453 += B1(p,MFd(gI2),0)*Conj(CpbarUFdVGFdPL(gO2,gI2))*
         CpbarUFdVGFdPL(gO1,gI2);
   }
   tmp_6452 += tmp_6453;
   result += (-1.3333333333333333) * tmp_6452;
   std::complex<double> tmp_6454;
   std::complex<double> tmp_6455;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_6455 += B1(p,MFd(gI2),0)*Conj(CpbarUFdVPFdPL(gO2,gI2))*
         CpbarUFdVPFdPL(gO1,gI2);
   }
   tmp_6454 += tmp_6455;
   result += (-1) * tmp_6454;
   std::complex<double> tmp_6456;
   std::complex<double> tmp_6457;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_6457 += B1(p,MFu(gI2),MVWm)*Conj(CpbarUFdVWmFuPL(gO2,gI2))*
         CpbarUFdVWmFuPL(gO1,gI2);
   }
   tmp_6456 += tmp_6457;
   result += (-1) * tmp_6456;
   std::complex<double> tmp_6458;
   std::complex<double> tmp_6459;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_6459 += B1(p,MFd(gI2),MVZ)*Conj(CpbarUFdVZFdPL(gO2,gI2))*
         CpbarUFdVZFdPL(gO1,gI2);
   }
   tmp_6458 += tmp_6459;
   result += (-1) * tmp_6458;
   std::complex<double> tmp_6460;
   std::complex<double> tmp_6461;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_6461 += B1(p,MFd(gI2),MVZp)*Conj(CpbarUFdVZpFdPL(gO2,gI2))*
         CpbarUFdVZpFdPL(gO1,gI2);
   }
   tmp_6460 += tmp_6461;
   result += (-1) * tmp_6460;

   return result * oneOver16PiSqr;

}

std::complex<double> CLASSNAME::self_energy_Fd_PL(double p , unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   std::complex<double> tmp_6462;
   std::complex<double> tmp_6463;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_6464;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_6464 += B1(p,MFu(gI2),MHpm(gI1))*Conj(CpbarUFdHpmFuPL(gO2,
            gI1,gI2))*CpbarUFdHpmFuPL(gO1,gI1,gI2);
      }
      tmp_6463 += tmp_6464;
   }
   tmp_6462 += tmp_6463;
   result += (-0.5) * tmp_6462;
   std::complex<double> tmp_6465;
   std::complex<double> tmp_6466;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_6467;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_6467 += B1(p,MFd(gI1),MAh(gI2))*Conj(CpbarUFdFdAhPL(gO2,gI1,
            gI2))*CpbarUFdFdAhPL(gO1,gI1,gI2);
      }
      tmp_6466 += tmp_6467;
   }
   tmp_6465 += tmp_6466;
   result += (-0.5) * tmp_6465;
   std::complex<double> tmp_6468;
   std::complex<double> tmp_6469;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_6470;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_6470 += B1(p,MFd(gI2),Mhh(gI1))*Conj(CpbarUFdhhFdPL(gO2,gI1,
            gI2))*CpbarUFdhhFdPL(gO1,gI1,gI2);
      }
      tmp_6469 += tmp_6470;
   }
   tmp_6468 += tmp_6469;
   result += (-0.5) * tmp_6468;
   std::complex<double> tmp_6471;
   std::complex<double> tmp_6472;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_6472 += B1(p,MGlu,MSd(gI1))*Conj(CpbarUFdSdGluPL(gO2,gI1,0))*
         CpbarUFdSdGluPL(gO1,gI1,0);
   }
   tmp_6471 += tmp_6472;
   result += (-0.6666666666666666) * tmp_6471;
   std::complex<double> tmp_6473;
   std::complex<double> tmp_6474;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_6475;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_6475 += B1(p,MCha(gI2),MSu(gI1))*Conj(CpbarUFdSuChaPL(gO2,
            gI1,gI2))*CpbarUFdSuChaPL(gO1,gI1,gI2);
      }
      tmp_6474 += tmp_6475;
   }
   tmp_6473 += tmp_6474;
   result += (-0.5) * tmp_6473;
   std::complex<double> tmp_6476;
   std::complex<double> tmp_6477;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_6478;
      for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
         tmp_6478 += B1(p,MChi(gI2),MSd(gI1))*Conj(CpbarUFdSdChiPL(gO2,
            gI1,gI2))*CpbarUFdSdChiPL(gO1,gI1,gI2);
      }
      tmp_6477 += tmp_6478;
   }
   tmp_6476 += tmp_6477;
   result += (-0.5) * tmp_6476;
   std::complex<double> tmp_6479;
   std::complex<double> tmp_6480;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_6480 += B1(p,MFd(gI2),0)*Conj(CpbarUFdVGFdPR(gO2,gI2))*
         CpbarUFdVGFdPR(gO1,gI2);
   }
   tmp_6479 += tmp_6480;
   result += (-1.3333333333333333) * tmp_6479;
   std::complex<double> tmp_6481;
   std::complex<double> tmp_6482;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_6482 += B1(p,MFd(gI2),0)*Conj(CpbarUFdVPFdPR(gO2,gI2))*
         CpbarUFdVPFdPR(gO1,gI2);
   }
   tmp_6481 += tmp_6482;
   result += (-1) * tmp_6481;
   std::complex<double> tmp_6483;
   std::complex<double> tmp_6484;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_6484 += B1(p,MFu(gI2),MVWm)*Conj(CpbarUFdVWmFuPR(gO2,gI2))*
         CpbarUFdVWmFuPR(gO1,gI2);
   }
   tmp_6483 += tmp_6484;
   result += (-1) * tmp_6483;
   std::complex<double> tmp_6485;
   std::complex<double> tmp_6486;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_6486 += B1(p,MFd(gI2),MVZ)*Conj(CpbarUFdVZFdPR(gO2,gI2))*
         CpbarUFdVZFdPR(gO1,gI2);
   }
   tmp_6485 += tmp_6486;
   result += (-1) * tmp_6485;
   std::complex<double> tmp_6487;
   std::complex<double> tmp_6488;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_6488 += B1(p,MFd(gI2),MVZp)*Conj(CpbarUFdVZpFdPR(gO2,gI2))*
         CpbarUFdVZpFdPR(gO1,gI2);
   }
   tmp_6487 += tmp_6488;
   result += (-1) * tmp_6487;

   return result * oneOver16PiSqr;

}

std::complex<double> CLASSNAME::self_energy_Fu_1(double p , unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   std::complex<double> tmp_6489;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_6490;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_6490 += B0(p,MFd(gI2),MHpm(gI1))*Conj(CpbarUFuconjHpmFdPL(
            gO2,gI1,gI2))*CpbarUFuconjHpmFdPR(gO1,gI1,gI2)*MFd(gI2);
      }
      tmp_6489 += tmp_6490;
   }
   result += tmp_6489;
   std::complex<double> tmp_6491;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_6492;
      std::complex<double> tmp_6493;
      for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
         tmp_6493 += B0(p,MCha(gI1),MSd(gI2))*Conj(CpbarUFubarChaSdPL(gO2
            ,gI1,gI2))*CpbarUFubarChaSdPR(gO1,gI1,gI2);
      }
      tmp_6492 += tmp_6493;
      tmp_6491 += (MCha(gI1)) * tmp_6492;
   }
   result += tmp_6491;
   std::complex<double> tmp_6494;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_6495;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_6495 += B0(p,MFu(gI2),Mhh(gI1))*Conj(CpbarUFuhhFuPL(gO2,gI1,
            gI2))*CpbarUFuhhFuPR(gO1,gI1,gI2)*MFu(gI2);
      }
      tmp_6494 += tmp_6495;
   }
   result += tmp_6494;
   std::complex<double> tmp_6496;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_6497;
      std::complex<double> tmp_6498;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_6498 += B0(p,MFu(gI1),MAh(gI2))*Conj(CpbarUFuFuAhPL(gO2,gI1,
            gI2))*CpbarUFuFuAhPR(gO1,gI1,gI2);
      }
      tmp_6497 += tmp_6498;
      tmp_6496 += (MFu(gI1)) * tmp_6497;
   }
   result += tmp_6496;
   std::complex<double> tmp_6499;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_6500;
      for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
         tmp_6500 += B0(p,MChi(gI2),MSu(gI1))*Conj(CpbarUFuSuChiPL(gO2,
            gI1,gI2))*CpbarUFuSuChiPR(gO1,gI1,gI2)*MChi(gI2);
      }
      tmp_6499 += tmp_6500;
   }
   result += tmp_6499;
   std::complex<double> tmp_6501;
   std::complex<double> tmp_6502;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_6502 += B0(p,MFd(gI2),MVWm)*Conj(CpbarUFuconjVWmFdPR(gO2,gI2))*
         CpbarUFuconjVWmFdPL(gO1,gI2)*MFd(gI2);
   }
   tmp_6501 += tmp_6502;
   result += (-4) * tmp_6501;
   std::complex<double> tmp_6503;
   std::complex<double> tmp_6504;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_6504 += B0(p,MFu(gI2),0)*Conj(CpbarUFuVGFuPR(gO2,gI2))*
         CpbarUFuVGFuPL(gO1,gI2)*MFu(gI2);
   }
   tmp_6503 += tmp_6504;
   result += (-5.333333333333333) * tmp_6503;
   std::complex<double> tmp_6505;
   std::complex<double> tmp_6506;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_6506 += B0(p,MFu(gI2),0)*Conj(CpbarUFuVPFuPR(gO2,gI2))*
         CpbarUFuVPFuPL(gO1,gI2)*MFu(gI2);
   }
   tmp_6505 += tmp_6506;
   result += (-4) * tmp_6505;
   std::complex<double> tmp_6507;
   std::complex<double> tmp_6508;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_6508 += B0(p,MFu(gI2),MVZ)*Conj(CpbarUFuVZFuPR(gO2,gI2))*
         CpbarUFuVZFuPL(gO1,gI2)*MFu(gI2);
   }
   tmp_6507 += tmp_6508;
   result += (-4) * tmp_6507;
   std::complex<double> tmp_6509;
   std::complex<double> tmp_6510;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_6510 += B0(p,MFu(gI2),MVZp)*Conj(CpbarUFuVZpFuPR(gO2,gI2))*
         CpbarUFuVZpFuPL(gO1,gI2)*MFu(gI2);
   }
   tmp_6509 += tmp_6510;
   result += (-4) * tmp_6509;
   std::complex<double> tmp_6511;
   std::complex<double> tmp_6512;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_6512 += B0(p,MGlu,MSu(gI1))*Conj(CpbarUFuSuGluPL(gO2,gI1,0))*
         CpbarUFuSuGluPR(gO1,gI1,0);
   }
   tmp_6511 += tmp_6512;
   result += (1.3333333333333333*MGlu) * tmp_6511;

   return result * oneOver16PiSqr;

}

std::complex<double> CLASSNAME::self_energy_Fu_PR(double p , unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   std::complex<double> tmp_6513;
   std::complex<double> tmp_6514;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_6515;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_6515 += B1(p,MFd(gI2),MHpm(gI1))*Conj(CpbarUFuconjHpmFdPR(
            gO2,gI1,gI2))*CpbarUFuconjHpmFdPR(gO1,gI1,gI2);
      }
      tmp_6514 += tmp_6515;
   }
   tmp_6513 += tmp_6514;
   result += (-0.5) * tmp_6513;
   std::complex<double> tmp_6516;
   std::complex<double> tmp_6517;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_6518;
      for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
         tmp_6518 += B1(p,MCha(gI1),MSd(gI2))*Conj(CpbarUFubarChaSdPR(gO2
            ,gI1,gI2))*CpbarUFubarChaSdPR(gO1,gI1,gI2);
      }
      tmp_6517 += tmp_6518;
   }
   tmp_6516 += tmp_6517;
   result += (-0.5) * tmp_6516;
   std::complex<double> tmp_6519;
   std::complex<double> tmp_6520;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_6521;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_6521 += B1(p,MFu(gI1),MAh(gI2))*Conj(CpbarUFuFuAhPR(gO2,gI1,
            gI2))*CpbarUFuFuAhPR(gO1,gI1,gI2);
      }
      tmp_6520 += tmp_6521;
   }
   tmp_6519 += tmp_6520;
   result += (-0.5) * tmp_6519;
   std::complex<double> tmp_6522;
   std::complex<double> tmp_6523;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_6524;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_6524 += B1(p,MFu(gI2),Mhh(gI1))*Conj(CpbarUFuhhFuPR(gO2,gI1,
            gI2))*CpbarUFuhhFuPR(gO1,gI1,gI2);
      }
      tmp_6523 += tmp_6524;
   }
   tmp_6522 += tmp_6523;
   result += (-0.5) * tmp_6522;
   std::complex<double> tmp_6525;
   std::complex<double> tmp_6526;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_6526 += B1(p,MGlu,MSu(gI1))*Conj(CpbarUFuSuGluPR(gO2,gI1,0))*
         CpbarUFuSuGluPR(gO1,gI1,0);
   }
   tmp_6525 += tmp_6526;
   result += (-0.6666666666666666) * tmp_6525;
   std::complex<double> tmp_6527;
   std::complex<double> tmp_6528;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_6529;
      for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
         tmp_6529 += B1(p,MChi(gI2),MSu(gI1))*Conj(CpbarUFuSuChiPR(gO2,
            gI1,gI2))*CpbarUFuSuChiPR(gO1,gI1,gI2);
      }
      tmp_6528 += tmp_6529;
   }
   tmp_6527 += tmp_6528;
   result += (-0.5) * tmp_6527;
   std::complex<double> tmp_6530;
   std::complex<double> tmp_6531;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_6531 += B1(p,MFd(gI2),MVWm)*Conj(CpbarUFuconjVWmFdPL(gO2,gI2))*
         CpbarUFuconjVWmFdPL(gO1,gI2);
   }
   tmp_6530 += tmp_6531;
   result += (-1) * tmp_6530;
   std::complex<double> tmp_6532;
   std::complex<double> tmp_6533;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_6533 += B1(p,MFu(gI2),0)*Conj(CpbarUFuVGFuPL(gO2,gI2))*
         CpbarUFuVGFuPL(gO1,gI2);
   }
   tmp_6532 += tmp_6533;
   result += (-1.3333333333333333) * tmp_6532;
   std::complex<double> tmp_6534;
   std::complex<double> tmp_6535;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_6535 += B1(p,MFu(gI2),0)*Conj(CpbarUFuVPFuPL(gO2,gI2))*
         CpbarUFuVPFuPL(gO1,gI2);
   }
   tmp_6534 += tmp_6535;
   result += (-1) * tmp_6534;
   std::complex<double> tmp_6536;
   std::complex<double> tmp_6537;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_6537 += B1(p,MFu(gI2),MVZ)*Conj(CpbarUFuVZFuPL(gO2,gI2))*
         CpbarUFuVZFuPL(gO1,gI2);
   }
   tmp_6536 += tmp_6537;
   result += (-1) * tmp_6536;
   std::complex<double> tmp_6538;
   std::complex<double> tmp_6539;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_6539 += B1(p,MFu(gI2),MVZp)*Conj(CpbarUFuVZpFuPL(gO2,gI2))*
         CpbarUFuVZpFuPL(gO1,gI2);
   }
   tmp_6538 += tmp_6539;
   result += (-1) * tmp_6538;

   return result * oneOver16PiSqr;

}

std::complex<double> CLASSNAME::self_energy_Fu_PL(double p , unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   std::complex<double> tmp_6540;
   std::complex<double> tmp_6541;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_6542;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_6542 += B1(p,MFd(gI2),MHpm(gI1))*Conj(CpbarUFuconjHpmFdPL(
            gO2,gI1,gI2))*CpbarUFuconjHpmFdPL(gO1,gI1,gI2);
      }
      tmp_6541 += tmp_6542;
   }
   tmp_6540 += tmp_6541;
   result += (-0.5) * tmp_6540;
   std::complex<double> tmp_6543;
   std::complex<double> tmp_6544;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_6545;
      for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
         tmp_6545 += B1(p,MCha(gI1),MSd(gI2))*Conj(CpbarUFubarChaSdPL(gO2
            ,gI1,gI2))*CpbarUFubarChaSdPL(gO1,gI1,gI2);
      }
      tmp_6544 += tmp_6545;
   }
   tmp_6543 += tmp_6544;
   result += (-0.5) * tmp_6543;
   std::complex<double> tmp_6546;
   std::complex<double> tmp_6547;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_6548;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_6548 += B1(p,MFu(gI1),MAh(gI2))*Conj(CpbarUFuFuAhPL(gO2,gI1,
            gI2))*CpbarUFuFuAhPL(gO1,gI1,gI2);
      }
      tmp_6547 += tmp_6548;
   }
   tmp_6546 += tmp_6547;
   result += (-0.5) * tmp_6546;
   std::complex<double> tmp_6549;
   std::complex<double> tmp_6550;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_6551;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_6551 += B1(p,MFu(gI2),Mhh(gI1))*Conj(CpbarUFuhhFuPL(gO2,gI1,
            gI2))*CpbarUFuhhFuPL(gO1,gI1,gI2);
      }
      tmp_6550 += tmp_6551;
   }
   tmp_6549 += tmp_6550;
   result += (-0.5) * tmp_6549;
   std::complex<double> tmp_6552;
   std::complex<double> tmp_6553;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_6553 += B1(p,MGlu,MSu(gI1))*Conj(CpbarUFuSuGluPL(gO2,gI1,0))*
         CpbarUFuSuGluPL(gO1,gI1,0);
   }
   tmp_6552 += tmp_6553;
   result += (-0.6666666666666666) * tmp_6552;
   std::complex<double> tmp_6554;
   std::complex<double> tmp_6555;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_6556;
      for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
         tmp_6556 += B1(p,MChi(gI2),MSu(gI1))*Conj(CpbarUFuSuChiPL(gO2,
            gI1,gI2))*CpbarUFuSuChiPL(gO1,gI1,gI2);
      }
      tmp_6555 += tmp_6556;
   }
   tmp_6554 += tmp_6555;
   result += (-0.5) * tmp_6554;
   std::complex<double> tmp_6557;
   std::complex<double> tmp_6558;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_6558 += B1(p,MFd(gI2),MVWm)*Conj(CpbarUFuconjVWmFdPR(gO2,gI2))*
         CpbarUFuconjVWmFdPR(gO1,gI2);
   }
   tmp_6557 += tmp_6558;
   result += (-1) * tmp_6557;
   std::complex<double> tmp_6559;
   std::complex<double> tmp_6560;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_6560 += B1(p,MFu(gI2),0)*Conj(CpbarUFuVGFuPR(gO2,gI2))*
         CpbarUFuVGFuPR(gO1,gI2);
   }
   tmp_6559 += tmp_6560;
   result += (-1.3333333333333333) * tmp_6559;
   std::complex<double> tmp_6561;
   std::complex<double> tmp_6562;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_6562 += B1(p,MFu(gI2),0)*Conj(CpbarUFuVPFuPR(gO2,gI2))*
         CpbarUFuVPFuPR(gO1,gI2);
   }
   tmp_6561 += tmp_6562;
   result += (-1) * tmp_6561;
   std::complex<double> tmp_6563;
   std::complex<double> tmp_6564;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_6564 += B1(p,MFu(gI2),MVZ)*Conj(CpbarUFuVZFuPR(gO2,gI2))*
         CpbarUFuVZFuPR(gO1,gI2);
   }
   tmp_6563 += tmp_6564;
   result += (-1) * tmp_6563;
   std::complex<double> tmp_6565;
   std::complex<double> tmp_6566;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_6566 += B1(p,MFu(gI2),MVZp)*Conj(CpbarUFuVZpFuPR(gO2,gI2))*
         CpbarUFuVZpFuPR(gO1,gI2);
   }
   tmp_6565 += tmp_6566;
   result += (-1) * tmp_6565;

   return result * oneOver16PiSqr;

}

std::complex<double> CLASSNAME::self_energy_FDX_1(double p , unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   std::complex<double> tmp_6567;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_6568;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_6568 += B0(p,MFDX(gI2),Mhh(gI1))*Conj(CpbarUFDXhhFDXPL(gO2,
            gI1,gI2))*CpbarUFDXhhFDXPR(gO1,gI1,gI2)*MFDX(gI2);
      }
      tmp_6567 += tmp_6568;
   }
   result += tmp_6567;
   std::complex<double> tmp_6569;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_6570;
      std::complex<double> tmp_6571;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_6571 += B0(p,MFDX(gI1),MAh(gI2))*Conj(CpbarUFDXFDXAhPL(gO2,
            gI1,gI2))*CpbarUFDXFDXAhPR(gO1,gI1,gI2);
      }
      tmp_6570 += tmp_6571;
      tmp_6569 += (MFDX(gI1)) * tmp_6570;
   }
   result += tmp_6569;
   std::complex<double> tmp_6572;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_6573;
      for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
         tmp_6573 += B0(p,MChi(gI2),MSDX(gI1))*Conj(CpbarUFDXSDXChiPL(gO2
            ,gI1,gI2))*CpbarUFDXSDXChiPR(gO1,gI1,gI2)*MChi(gI2);
      }
      tmp_6572 += tmp_6573;
   }
   result += tmp_6572;
   std::complex<double> tmp_6574;
   std::complex<double> tmp_6575;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_6575 += B0(p,MFDX(gI2),0)*Conj(CpbarUFDXVGFDXPR(gO2,gI2))*
         CpbarUFDXVGFDXPL(gO1,gI2)*MFDX(gI2);
   }
   tmp_6574 += tmp_6575;
   result += (-5.333333333333333) * tmp_6574;
   std::complex<double> tmp_6576;
   std::complex<double> tmp_6577;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_6577 += B0(p,MFDX(gI2),0)*Conj(CpbarUFDXVPFDXPR(gO2,gI2))*
         CpbarUFDXVPFDXPL(gO1,gI2)*MFDX(gI2);
   }
   tmp_6576 += tmp_6577;
   result += (-4) * tmp_6576;
   std::complex<double> tmp_6578;
   std::complex<double> tmp_6579;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_6579 += B0(p,MFDX(gI2),MVZ)*Conj(CpbarUFDXVZFDXPR(gO2,gI2))*
         CpbarUFDXVZFDXPL(gO1,gI2)*MFDX(gI2);
   }
   tmp_6578 += tmp_6579;
   result += (-4) * tmp_6578;
   std::complex<double> tmp_6580;
   std::complex<double> tmp_6581;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_6581 += B0(p,MFDX(gI2),MVZp)*Conj(CpbarUFDXVZpFDXPR(gO2,gI2))*
         CpbarUFDXVZpFDXPL(gO1,gI2)*MFDX(gI2);
   }
   tmp_6580 += tmp_6581;
   result += (-4) * tmp_6580;
   std::complex<double> tmp_6582;
   std::complex<double> tmp_6583;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_6583 += B0(p,MGlu,MSDX(gI1))*Conj(CpbarUFDXSDXGluPL(gO2,gI1,0))*
         CpbarUFDXSDXGluPR(gO1,gI1,0);
   }
   tmp_6582 += tmp_6583;
   result += (1.3333333333333333*MGlu) * tmp_6582;

   return result * oneOver16PiSqr;

}

std::complex<double> CLASSNAME::self_energy_FDX_PR(double p , unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   std::complex<double> tmp_6584;
   std::complex<double> tmp_6585;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_6586;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_6586 += B1(p,MFDX(gI1),MAh(gI2))*Conj(CpbarUFDXFDXAhPR(gO2,
            gI1,gI2))*CpbarUFDXFDXAhPR(gO1,gI1,gI2);
      }
      tmp_6585 += tmp_6586;
   }
   tmp_6584 += tmp_6585;
   result += (-0.5) * tmp_6584;
   std::complex<double> tmp_6587;
   std::complex<double> tmp_6588;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_6589;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_6589 += B1(p,MFDX(gI2),Mhh(gI1))*Conj(CpbarUFDXhhFDXPR(gO2,
            gI1,gI2))*CpbarUFDXhhFDXPR(gO1,gI1,gI2);
      }
      tmp_6588 += tmp_6589;
   }
   tmp_6587 += tmp_6588;
   result += (-0.5) * tmp_6587;
   std::complex<double> tmp_6590;
   std::complex<double> tmp_6591;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_6591 += B1(p,MGlu,MSDX(gI1))*Conj(CpbarUFDXSDXGluPR(gO2,gI1,0))*
         CpbarUFDXSDXGluPR(gO1,gI1,0);
   }
   tmp_6590 += tmp_6591;
   result += (-0.6666666666666666) * tmp_6590;
   std::complex<double> tmp_6592;
   std::complex<double> tmp_6593;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_6594;
      for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
         tmp_6594 += B1(p,MChi(gI2),MSDX(gI1))*Conj(CpbarUFDXSDXChiPR(gO2
            ,gI1,gI2))*CpbarUFDXSDXChiPR(gO1,gI1,gI2);
      }
      tmp_6593 += tmp_6594;
   }
   tmp_6592 += tmp_6593;
   result += (-0.5) * tmp_6592;
   std::complex<double> tmp_6595;
   std::complex<double> tmp_6596;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_6596 += B1(p,MFDX(gI2),0)*Conj(CpbarUFDXVGFDXPL(gO2,gI2))*
         CpbarUFDXVGFDXPL(gO1,gI2);
   }
   tmp_6595 += tmp_6596;
   result += (-1.3333333333333333) * tmp_6595;
   std::complex<double> tmp_6597;
   std::complex<double> tmp_6598;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_6598 += B1(p,MFDX(gI2),0)*Conj(CpbarUFDXVPFDXPL(gO2,gI2))*
         CpbarUFDXVPFDXPL(gO1,gI2);
   }
   tmp_6597 += tmp_6598;
   result += (-1) * tmp_6597;
   std::complex<double> tmp_6599;
   std::complex<double> tmp_6600;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_6600 += B1(p,MFDX(gI2),MVZ)*Conj(CpbarUFDXVZFDXPL(gO2,gI2))*
         CpbarUFDXVZFDXPL(gO1,gI2);
   }
   tmp_6599 += tmp_6600;
   result += (-1) * tmp_6599;
   std::complex<double> tmp_6601;
   std::complex<double> tmp_6602;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_6602 += B1(p,MFDX(gI2),MVZp)*Conj(CpbarUFDXVZpFDXPL(gO2,gI2))*
         CpbarUFDXVZpFDXPL(gO1,gI2);
   }
   tmp_6601 += tmp_6602;
   result += (-1) * tmp_6601;

   return result * oneOver16PiSqr;

}

std::complex<double> CLASSNAME::self_energy_FDX_PL(double p , unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   std::complex<double> tmp_6603;
   std::complex<double> tmp_6604;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_6605;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_6605 += B1(p,MFDX(gI1),MAh(gI2))*Conj(CpbarUFDXFDXAhPL(gO2,
            gI1,gI2))*CpbarUFDXFDXAhPL(gO1,gI1,gI2);
      }
      tmp_6604 += tmp_6605;
   }
   tmp_6603 += tmp_6604;
   result += (-0.5) * tmp_6603;
   std::complex<double> tmp_6606;
   std::complex<double> tmp_6607;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_6608;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_6608 += B1(p,MFDX(gI2),Mhh(gI1))*Conj(CpbarUFDXhhFDXPL(gO2,
            gI1,gI2))*CpbarUFDXhhFDXPL(gO1,gI1,gI2);
      }
      tmp_6607 += tmp_6608;
   }
   tmp_6606 += tmp_6607;
   result += (-0.5) * tmp_6606;
   std::complex<double> tmp_6609;
   std::complex<double> tmp_6610;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_6610 += B1(p,MGlu,MSDX(gI1))*Conj(CpbarUFDXSDXGluPL(gO2,gI1,0))*
         CpbarUFDXSDXGluPL(gO1,gI1,0);
   }
   tmp_6609 += tmp_6610;
   result += (-0.6666666666666666) * tmp_6609;
   std::complex<double> tmp_6611;
   std::complex<double> tmp_6612;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_6613;
      for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
         tmp_6613 += B1(p,MChi(gI2),MSDX(gI1))*Conj(CpbarUFDXSDXChiPL(gO2
            ,gI1,gI2))*CpbarUFDXSDXChiPL(gO1,gI1,gI2);
      }
      tmp_6612 += tmp_6613;
   }
   tmp_6611 += tmp_6612;
   result += (-0.5) * tmp_6611;
   std::complex<double> tmp_6614;
   std::complex<double> tmp_6615;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_6615 += B1(p,MFDX(gI2),0)*Conj(CpbarUFDXVGFDXPR(gO2,gI2))*
         CpbarUFDXVGFDXPR(gO1,gI2);
   }
   tmp_6614 += tmp_6615;
   result += (-1.3333333333333333) * tmp_6614;
   std::complex<double> tmp_6616;
   std::complex<double> tmp_6617;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_6617 += B1(p,MFDX(gI2),0)*Conj(CpbarUFDXVPFDXPR(gO2,gI2))*
         CpbarUFDXVPFDXPR(gO1,gI2);
   }
   tmp_6616 += tmp_6617;
   result += (-1) * tmp_6616;
   std::complex<double> tmp_6618;
   std::complex<double> tmp_6619;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_6619 += B1(p,MFDX(gI2),MVZ)*Conj(CpbarUFDXVZFDXPR(gO2,gI2))*
         CpbarUFDXVZFDXPR(gO1,gI2);
   }
   tmp_6618 += tmp_6619;
   result += (-1) * tmp_6618;
   std::complex<double> tmp_6620;
   std::complex<double> tmp_6621;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_6621 += B1(p,MFDX(gI2),MVZp)*Conj(CpbarUFDXVZpFDXPR(gO2,gI2))*
         CpbarUFDXVZpFDXPR(gO1,gI2);
   }
   tmp_6620 += tmp_6621;
   result += (-1) * tmp_6620;

   return result * oneOver16PiSqr;

}

std::complex<double> CLASSNAME::self_energy_ChaI_1(double p , unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   std::complex<double> tmp_6622;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_6623;
      std::complex<double> tmp_6624;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_6624 += B0(p,MChaI(gI1),MAh(gI2))*Conj(CpbarUChaIChaIAhPL(
            gO2,gI1,gI2))*CpbarUChaIChaIAhPR(gO1,gI1,gI2);
      }
      tmp_6623 += tmp_6624;
      tmp_6622 += (MChaI(gI1)) * tmp_6623;
   }
   result += tmp_6622;
   std::complex<double> tmp_6625;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_6626;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_6626 += B0(p,MChaI(gI2),Mhh(gI1))*Conj(CpbarUChaIhhChaIPL(
            gO2,gI1,gI2))*CpbarUChaIhhChaIPR(gO1,gI1,gI2)*MChaI(gI2);
      }
      tmp_6625 += tmp_6626;
   }
   result += tmp_6625;
   std::complex<double> tmp_6627;
   for (unsigned gI1 = 0; gI1 < 4; ++gI1) {
      std::complex<double> tmp_6628;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_6628 += B0(p,MCha(gI2),MSHI0(gI1))*Conj(CpbarUChaISHI0ChaPL(
            gO2,gI1,gI2))*CpbarUChaISHI0ChaPR(gO1,gI1,gI2)*MCha(gI2);
      }
      tmp_6627 += tmp_6628;
   }
   result += tmp_6627;
   std::complex<double> tmp_6629;
   for (unsigned gI1 = 0; gI1 < 4; ++gI1) {
      std::complex<double> tmp_6630;
      for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
         tmp_6630 += B0(p,MChi(gI2),MSHIp(gI1))*Conj(CpbarUChaISHIpChiPL(
            gO2,gI1,gI2))*CpbarUChaISHIpChiPR(gO1,gI1,gI2)*MChi(gI2);
      }
      tmp_6629 += tmp_6630;
   }
   result += tmp_6629;
   std::complex<double> tmp_6631;
   std::complex<double> tmp_6632;
   for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
      tmp_6632 += B0(p,MChaI(gI2),0)*Conj(CpbarUChaIVPChaIPR(gO2,gI2))*
         CpbarUChaIVPChaIPL(gO1,gI2)*MChaI(gI2);
   }
   tmp_6631 += tmp_6632;
   result += (-4) * tmp_6631;
   std::complex<double> tmp_6633;
   std::complex<double> tmp_6634;
   for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
      tmp_6634 += B0(p,MChaI(gI2),MVZ)*Conj(CpbarUChaIVZChaIPR(gO2,gI2))*
         CpbarUChaIVZChaIPL(gO1,gI2)*MChaI(gI2);
   }
   tmp_6633 += tmp_6634;
   result += (-4) * tmp_6633;
   std::complex<double> tmp_6635;
   std::complex<double> tmp_6636;
   for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
      tmp_6636 += B0(p,MChaI(gI2),MVZp)*Conj(CpbarUChaIVZpChaIPR(gO2,gI2))*
         CpbarUChaIVZpChaIPL(gO1,gI2)*MChaI(gI2);
   }
   tmp_6635 += tmp_6636;
   result += (-4) * tmp_6635;
   std::complex<double> tmp_6637;
   std::complex<double> tmp_6638;
   for (unsigned gI2 = 0; gI2 < 4; ++gI2) {
      tmp_6638 += B0(p,MChiI(gI2),MVWm)*Conj(CpbarUChaIVWmChiIPR(gO2,gI2))*
         CpbarUChaIVWmChiIPL(gO1,gI2)*MChiI(gI2);
   }
   tmp_6637 += tmp_6638;
   result += (-4) * tmp_6637;

   return result * oneOver16PiSqr;

}

std::complex<double> CLASSNAME::self_energy_ChaI_PR(double p , unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   std::complex<double> tmp_6639;
   std::complex<double> tmp_6640;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_6641;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_6641 += B1(p,MChaI(gI1),MAh(gI2))*Conj(CpbarUChaIChaIAhPR(
            gO2,gI1,gI2))*CpbarUChaIChaIAhPR(gO1,gI1,gI2);
      }
      tmp_6640 += tmp_6641;
   }
   tmp_6639 += tmp_6640;
   result += (-0.5) * tmp_6639;
   std::complex<double> tmp_6642;
   std::complex<double> tmp_6643;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_6644;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_6644 += B1(p,MChaI(gI2),Mhh(gI1))*Conj(CpbarUChaIhhChaIPR(
            gO2,gI1,gI2))*CpbarUChaIhhChaIPR(gO1,gI1,gI2);
      }
      tmp_6643 += tmp_6644;
   }
   tmp_6642 += tmp_6643;
   result += (-0.5) * tmp_6642;
   std::complex<double> tmp_6645;
   std::complex<double> tmp_6646;
   for (unsigned gI1 = 0; gI1 < 4; ++gI1) {
      std::complex<double> tmp_6647;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_6647 += B1(p,MCha(gI2),MSHI0(gI1))*Conj(CpbarUChaISHI0ChaPR(
            gO2,gI1,gI2))*CpbarUChaISHI0ChaPR(gO1,gI1,gI2);
      }
      tmp_6646 += tmp_6647;
   }
   tmp_6645 += tmp_6646;
   result += (-0.5) * tmp_6645;
   std::complex<double> tmp_6648;
   std::complex<double> tmp_6649;
   for (unsigned gI1 = 0; gI1 < 4; ++gI1) {
      std::complex<double> tmp_6650;
      for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
         tmp_6650 += B1(p,MChi(gI2),MSHIp(gI1))*Conj(CpbarUChaISHIpChiPR(
            gO2,gI1,gI2))*CpbarUChaISHIpChiPR(gO1,gI1,gI2);
      }
      tmp_6649 += tmp_6650;
   }
   tmp_6648 += tmp_6649;
   result += (-0.5) * tmp_6648;
   std::complex<double> tmp_6651;
   std::complex<double> tmp_6652;
   for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
      tmp_6652 += B1(p,MChaI(gI2),0)*Conj(CpbarUChaIVPChaIPL(gO2,gI2))*
         CpbarUChaIVPChaIPL(gO1,gI2);
   }
   tmp_6651 += tmp_6652;
   result += (-1) * tmp_6651;
   std::complex<double> tmp_6653;
   std::complex<double> tmp_6654;
   for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
      tmp_6654 += B1(p,MChaI(gI2),MVZ)*Conj(CpbarUChaIVZChaIPL(gO2,gI2))*
         CpbarUChaIVZChaIPL(gO1,gI2);
   }
   tmp_6653 += tmp_6654;
   result += (-1) * tmp_6653;
   std::complex<double> tmp_6655;
   std::complex<double> tmp_6656;
   for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
      tmp_6656 += B1(p,MChaI(gI2),MVZp)*Conj(CpbarUChaIVZpChaIPL(gO2,gI2))*
         CpbarUChaIVZpChaIPL(gO1,gI2);
   }
   tmp_6655 += tmp_6656;
   result += (-1) * tmp_6655;
   std::complex<double> tmp_6657;
   std::complex<double> tmp_6658;
   for (unsigned gI2 = 0; gI2 < 4; ++gI2) {
      tmp_6658 += B1(p,MChiI(gI2),MVWm)*Conj(CpbarUChaIVWmChiIPL(gO2,gI2))*
         CpbarUChaIVWmChiIPL(gO1,gI2);
   }
   tmp_6657 += tmp_6658;
   result += (-1) * tmp_6657;

   return result * oneOver16PiSqr;

}

std::complex<double> CLASSNAME::self_energy_ChaI_PL(double p , unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   std::complex<double> tmp_6659;
   std::complex<double> tmp_6660;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_6661;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_6661 += B1(p,MChaI(gI1),MAh(gI2))*Conj(CpbarUChaIChaIAhPL(
            gO2,gI1,gI2))*CpbarUChaIChaIAhPL(gO1,gI1,gI2);
      }
      tmp_6660 += tmp_6661;
   }
   tmp_6659 += tmp_6660;
   result += (-0.5) * tmp_6659;
   std::complex<double> tmp_6662;
   std::complex<double> tmp_6663;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_6664;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_6664 += B1(p,MChaI(gI2),Mhh(gI1))*Conj(CpbarUChaIhhChaIPL(
            gO2,gI1,gI2))*CpbarUChaIhhChaIPL(gO1,gI1,gI2);
      }
      tmp_6663 += tmp_6664;
   }
   tmp_6662 += tmp_6663;
   result += (-0.5) * tmp_6662;
   std::complex<double> tmp_6665;
   std::complex<double> tmp_6666;
   for (unsigned gI1 = 0; gI1 < 4; ++gI1) {
      std::complex<double> tmp_6667;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_6667 += B1(p,MCha(gI2),MSHI0(gI1))*Conj(CpbarUChaISHI0ChaPL(
            gO2,gI1,gI2))*CpbarUChaISHI0ChaPL(gO1,gI1,gI2);
      }
      tmp_6666 += tmp_6667;
   }
   tmp_6665 += tmp_6666;
   result += (-0.5) * tmp_6665;
   std::complex<double> tmp_6668;
   std::complex<double> tmp_6669;
   for (unsigned gI1 = 0; gI1 < 4; ++gI1) {
      std::complex<double> tmp_6670;
      for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
         tmp_6670 += B1(p,MChi(gI2),MSHIp(gI1))*Conj(CpbarUChaISHIpChiPL(
            gO2,gI1,gI2))*CpbarUChaISHIpChiPL(gO1,gI1,gI2);
      }
      tmp_6669 += tmp_6670;
   }
   tmp_6668 += tmp_6669;
   result += (-0.5) * tmp_6668;
   std::complex<double> tmp_6671;
   std::complex<double> tmp_6672;
   for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
      tmp_6672 += B1(p,MChaI(gI2),0)*Conj(CpbarUChaIVPChaIPR(gO2,gI2))*
         CpbarUChaIVPChaIPR(gO1,gI2);
   }
   tmp_6671 += tmp_6672;
   result += (-1) * tmp_6671;
   std::complex<double> tmp_6673;
   std::complex<double> tmp_6674;
   for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
      tmp_6674 += B1(p,MChaI(gI2),MVZ)*Conj(CpbarUChaIVZChaIPR(gO2,gI2))*
         CpbarUChaIVZChaIPR(gO1,gI2);
   }
   tmp_6673 += tmp_6674;
   result += (-1) * tmp_6673;
   std::complex<double> tmp_6675;
   std::complex<double> tmp_6676;
   for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
      tmp_6676 += B1(p,MChaI(gI2),MVZp)*Conj(CpbarUChaIVZpChaIPR(gO2,gI2))*
         CpbarUChaIVZpChaIPR(gO1,gI2);
   }
   tmp_6675 += tmp_6676;
   result += (-1) * tmp_6675;
   std::complex<double> tmp_6677;
   std::complex<double> tmp_6678;
   for (unsigned gI2 = 0; gI2 < 4; ++gI2) {
      tmp_6678 += B1(p,MChiI(gI2),MVWm)*Conj(CpbarUChaIVWmChiIPR(gO2,gI2))*
         CpbarUChaIVWmChiIPR(gO1,gI2);
   }
   tmp_6677 += tmp_6678;
   result += (-1) * tmp_6677;

   return result * oneOver16PiSqr;

}

std::complex<double> CLASSNAME::self_energy_ChiI_1(double p , unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   std::complex<double> tmp_6679;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_6680;
      for (unsigned gI2 = 0; gI2 < 4; ++gI2) {
         tmp_6680 += B0(p,MChiI(gI2),Mhh(gI1))*Conj(CpUChiIhhChiIPL(gO2,
            gI1,gI2))*CpUChiIhhChiIPR(gO1,gI1,gI2)*MChiI(gI2);
      }
      tmp_6679 += tmp_6680;
   }
   result += tmp_6679;
   std::complex<double> tmp_6681;
   std::complex<double> tmp_6682;
   for (unsigned gI1 = 0; gI1 < 4; ++gI1) {
      std::complex<double> tmp_6683;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_6683 += B0(p,MCha(gI2),MSHIp(gI1))*Conj(CpUChiIconjSHIpChaPL
            (gO2,gI1,gI2))*CpUChiIconjSHIpChaPR(gO1,gI1,gI2)*MCha(gI2);
      }
      tmp_6682 += tmp_6683;
   }
   tmp_6681 += tmp_6682;
   result += (2) * tmp_6681;
   std::complex<double> tmp_6684;
   std::complex<double> tmp_6685;
   for (unsigned gI1 = 0; gI1 < 4; ++gI1) {
      std::complex<double> tmp_6686;
      for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
         tmp_6686 += B0(p,MChi(gI2),MSHI0(gI1))*Conj(CpUChiIconjSHI0ChiPL
            (gO2,gI1,gI2))*CpUChiIconjSHI0ChiPR(gO1,gI1,gI2)*MChi(gI2);
      }
      tmp_6685 += tmp_6686;
   }
   tmp_6684 += tmp_6685;
   result += (2) * tmp_6684;
   std::complex<double> tmp_6687;
   for (unsigned gI1 = 0; gI1 < 4; ++gI1) {
      std::complex<double> tmp_6688;
      std::complex<double> tmp_6689;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_6689 += B0(p,MChiI(gI1),MAh(gI2))*Conj(CpUChiIChiIAhPL(gO2,
            gI1,gI2))*CpUChiIChiIAhPR(gO1,gI1,gI2);
      }
      tmp_6688 += tmp_6689;
      tmp_6687 += (MChiI(gI1)) * tmp_6688;
   }
   result += tmp_6687;
   std::complex<double> tmp_6690;
   std::complex<double> tmp_6691;
   for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
      tmp_6691 += B0(p,MChaI(gI2),MVWm)*Conj(CpUChiIconjVWmChaIPR(gO2,gI2))*
         CpUChiIconjVWmChaIPL(gO1,gI2)*MChaI(gI2);
   }
   tmp_6690 += tmp_6691;
   result += (-8) * tmp_6690;
   std::complex<double> tmp_6692;
   std::complex<double> tmp_6693;
   for (unsigned gI2 = 0; gI2 < 4; ++gI2) {
      tmp_6693 += B0(p,MChiI(gI2),MVZ)*Conj(CpUChiIVZChiIPR(gO2,gI2))*
         CpUChiIVZChiIPL(gO1,gI2)*MChiI(gI2);
   }
   tmp_6692 += tmp_6693;
   result += (-4) * tmp_6692;
   std::complex<double> tmp_6694;
   std::complex<double> tmp_6695;
   for (unsigned gI2 = 0; gI2 < 4; ++gI2) {
      tmp_6695 += B0(p,MChiI(gI2),MVZp)*Conj(CpUChiIVZpChiIPR(gO2,gI2))*
         CpUChiIVZpChiIPL(gO1,gI2)*MChiI(gI2);
   }
   tmp_6694 += tmp_6695;
   result += (-4) * tmp_6694;

   return result * oneOver16PiSqr;

}

std::complex<double> CLASSNAME::self_energy_ChiI_PR(double p , unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   std::complex<double> tmp_6696;
   std::complex<double> tmp_6697;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_6698;
      for (unsigned gI2 = 0; gI2 < 4; ++gI2) {
         tmp_6698 += B1(p,MChiI(gI2),Mhh(gI1))*Conj(CpUChiIhhChiIPR(gO2,
            gI1,gI2))*CpUChiIhhChiIPR(gO1,gI1,gI2);
      }
      tmp_6697 += tmp_6698;
   }
   tmp_6696 += tmp_6697;
   result += (-0.5) * tmp_6696;
   std::complex<double> tmp_6699;
   std::complex<double> tmp_6700;
   for (unsigned gI1 = 0; gI1 < 4; ++gI1) {
      std::complex<double> tmp_6701;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_6701 += B1(p,MCha(gI2),MSHIp(gI1))*Conj(CpUChiIconjSHIpChaPR
            (gO2,gI1,gI2))*CpUChiIconjSHIpChaPR(gO1,gI1,gI2);
      }
      tmp_6700 += tmp_6701;
   }
   tmp_6699 += tmp_6700;
   result += (-1) * tmp_6699;
   std::complex<double> tmp_6702;
   std::complex<double> tmp_6703;
   for (unsigned gI1 = 0; gI1 < 4; ++gI1) {
      std::complex<double> tmp_6704;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_6704 += B1(p,MChiI(gI1),MAh(gI2))*Conj(CpUChiIChiIAhPR(gO2,
            gI1,gI2))*CpUChiIChiIAhPR(gO1,gI1,gI2);
      }
      tmp_6703 += tmp_6704;
   }
   tmp_6702 += tmp_6703;
   result += (-0.5) * tmp_6702;
   std::complex<double> tmp_6705;
   std::complex<double> tmp_6706;
   for (unsigned gI1 = 0; gI1 < 4; ++gI1) {
      std::complex<double> tmp_6707;
      for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
         tmp_6707 += B1(p,MChi(gI2),MSHI0(gI1))*Conj(CpUChiIconjSHI0ChiPR
            (gO2,gI1,gI2))*CpUChiIconjSHI0ChiPR(gO1,gI1,gI2);
      }
      tmp_6706 += tmp_6707;
   }
   tmp_6705 += tmp_6706;
   result += (-1) * tmp_6705;
   std::complex<double> tmp_6708;
   std::complex<double> tmp_6709;
   for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
      tmp_6709 += B1(p,MChaI(gI2),MVWm)*Conj(CpUChiIconjVWmChaIPL(gO2,gI2))*
         CpUChiIconjVWmChaIPL(gO1,gI2);
   }
   tmp_6708 += tmp_6709;
   result += (-2) * tmp_6708;
   std::complex<double> tmp_6710;
   std::complex<double> tmp_6711;
   for (unsigned gI2 = 0; gI2 < 4; ++gI2) {
      tmp_6711 += B1(p,MChiI(gI2),MVZ)*Conj(CpUChiIVZChiIPL(gO2,gI2))*
         CpUChiIVZChiIPL(gO1,gI2);
   }
   tmp_6710 += tmp_6711;
   result += (-1) * tmp_6710;
   std::complex<double> tmp_6712;
   std::complex<double> tmp_6713;
   for (unsigned gI2 = 0; gI2 < 4; ++gI2) {
      tmp_6713 += B1(p,MChiI(gI2),MVZp)*Conj(CpUChiIVZpChiIPL(gO2,gI2))*
         CpUChiIVZpChiIPL(gO1,gI2);
   }
   tmp_6712 += tmp_6713;
   result += (-1) * tmp_6712;

   return result * oneOver16PiSqr;

}

std::complex<double> CLASSNAME::self_energy_ChiI_PL(double p , unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   std::complex<double> tmp_6714;
   std::complex<double> tmp_6715;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_6716;
      for (unsigned gI2 = 0; gI2 < 4; ++gI2) {
         tmp_6716 += B1(p,MChiI(gI2),Mhh(gI1))*Conj(CpUChiIhhChiIPL(gO2,
            gI1,gI2))*CpUChiIhhChiIPL(gO1,gI1,gI2);
      }
      tmp_6715 += tmp_6716;
   }
   tmp_6714 += tmp_6715;
   result += (-0.5) * tmp_6714;
   std::complex<double> tmp_6717;
   std::complex<double> tmp_6718;
   for (unsigned gI1 = 0; gI1 < 4; ++gI1) {
      std::complex<double> tmp_6719;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_6719 += B1(p,MCha(gI2),MSHIp(gI1))*Conj(CpUChiIconjSHIpChaPL
            (gO2,gI1,gI2))*CpUChiIconjSHIpChaPL(gO1,gI1,gI2);
      }
      tmp_6718 += tmp_6719;
   }
   tmp_6717 += tmp_6718;
   result += (-1) * tmp_6717;
   std::complex<double> tmp_6720;
   std::complex<double> tmp_6721;
   for (unsigned gI1 = 0; gI1 < 4; ++gI1) {
      std::complex<double> tmp_6722;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_6722 += B1(p,MChiI(gI1),MAh(gI2))*Conj(CpUChiIChiIAhPL(gO2,
            gI1,gI2))*CpUChiIChiIAhPL(gO1,gI1,gI2);
      }
      tmp_6721 += tmp_6722;
   }
   tmp_6720 += tmp_6721;
   result += (-0.5) * tmp_6720;
   std::complex<double> tmp_6723;
   std::complex<double> tmp_6724;
   for (unsigned gI1 = 0; gI1 < 4; ++gI1) {
      std::complex<double> tmp_6725;
      for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
         tmp_6725 += B1(p,MChi(gI2),MSHI0(gI1))*Conj(CpUChiIconjSHI0ChiPL
            (gO2,gI1,gI2))*CpUChiIconjSHI0ChiPL(gO1,gI1,gI2);
      }
      tmp_6724 += tmp_6725;
   }
   tmp_6723 += tmp_6724;
   result += (-1) * tmp_6723;
   std::complex<double> tmp_6726;
   std::complex<double> tmp_6727;
   for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
      tmp_6727 += B1(p,MChaI(gI2),MVWm)*Conj(CpUChiIconjVWmChaIPR(gO2,gI2))*
         CpUChiIconjVWmChaIPR(gO1,gI2);
   }
   tmp_6726 += tmp_6727;
   result += (-2) * tmp_6726;
   std::complex<double> tmp_6728;
   std::complex<double> tmp_6729;
   for (unsigned gI2 = 0; gI2 < 4; ++gI2) {
      tmp_6729 += B1(p,MChiI(gI2),MVZ)*Conj(CpUChiIVZChiIPR(gO2,gI2))*
         CpUChiIVZChiIPR(gO1,gI2);
   }
   tmp_6728 += tmp_6729;
   result += (-1) * tmp_6728;
   std::complex<double> tmp_6730;
   std::complex<double> tmp_6731;
   for (unsigned gI2 = 0; gI2 < 4; ++gI2) {
      tmp_6731 += B1(p,MChiI(gI2),MVZp)*Conj(CpUChiIVZpChiIPR(gO2,gI2))*
         CpUChiIVZpChiIPR(gO1,gI2);
   }
   tmp_6730 += tmp_6731;
   result += (-1) * tmp_6730;

   return result * oneOver16PiSqr;

}

std::complex<double> CLASSNAME::self_energy_FSI_1(double p , unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   std::complex<double> tmp_6732;
   std::complex<double> tmp_6733;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_6734;
      for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
         tmp_6734 += B0(p,MChi(gI2),MSSI0(gI1))*Conj(CpUFSIconjSSI0ChiPL(
            gO2,gI1,gI2))*CpUFSIconjSSI0ChiPR(gO1,gI1,gI2)*MChi(gI2);
      }
      tmp_6733 += tmp_6734;
   }
   tmp_6732 += tmp_6733;
   result += (2) * tmp_6732;
   std::complex<double> tmp_6735;
   std::complex<double> tmp_6736;
   for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
      tmp_6736 += B0(p,MFSI(gI2),MVZ)*Conj(CpUFSIVZFSIPR(gO2,gI2))*
         CpUFSIVZFSIPL(gO1,gI2)*MFSI(gI2);
   }
   tmp_6735 += tmp_6736;
   result += (-4) * tmp_6735;
   std::complex<double> tmp_6737;
   std::complex<double> tmp_6738;
   for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
      tmp_6738 += B0(p,MFSI(gI2),MVZp)*Conj(CpUFSIVZpFSIPR(gO2,gI2))*
         CpUFSIVZpFSIPL(gO1,gI2)*MFSI(gI2);
   }
   tmp_6737 += tmp_6738;
   result += (-4) * tmp_6737;

   return result * oneOver16PiSqr;

}

std::complex<double> CLASSNAME::self_energy_FSI_PR(double p , unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   std::complex<double> tmp_6739;
   std::complex<double> tmp_6740;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_6741;
      for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
         tmp_6741 += B1(p,MChi(gI2),MSSI0(gI1))*Conj(CpUFSIconjSSI0ChiPR(
            gO2,gI1,gI2))*CpUFSIconjSSI0ChiPR(gO1,gI1,gI2);
      }
      tmp_6740 += tmp_6741;
   }
   tmp_6739 += tmp_6740;
   result += (-1) * tmp_6739;
   std::complex<double> tmp_6742;
   std::complex<double> tmp_6743;
   for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
      tmp_6743 += B1(p,MFSI(gI2),MVZ)*Conj(CpUFSIVZFSIPL(gO2,gI2))*
         CpUFSIVZFSIPL(gO1,gI2);
   }
   tmp_6742 += tmp_6743;
   result += (-1) * tmp_6742;
   std::complex<double> tmp_6744;
   std::complex<double> tmp_6745;
   for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
      tmp_6745 += B1(p,MFSI(gI2),MVZp)*Conj(CpUFSIVZpFSIPL(gO2,gI2))*
         CpUFSIVZpFSIPL(gO1,gI2);
   }
   tmp_6744 += tmp_6745;
   result += (-1) * tmp_6744;

   return result * oneOver16PiSqr;

}

std::complex<double> CLASSNAME::self_energy_FSI_PL(double p , unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   std::complex<double> tmp_6746;
   std::complex<double> tmp_6747;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_6748;
      for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
         tmp_6748 += B1(p,MChi(gI2),MSSI0(gI1))*Conj(CpUFSIconjSSI0ChiPL(
            gO2,gI1,gI2))*CpUFSIconjSSI0ChiPL(gO1,gI1,gI2);
      }
      tmp_6747 += tmp_6748;
   }
   tmp_6746 += tmp_6747;
   result += (-1) * tmp_6746;
   std::complex<double> tmp_6749;
   std::complex<double> tmp_6750;
   for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
      tmp_6750 += B1(p,MFSI(gI2),MVZ)*Conj(CpUFSIVZFSIPR(gO2,gI2))*
         CpUFSIVZFSIPR(gO1,gI2);
   }
   tmp_6749 += tmp_6750;
   result += (-1) * tmp_6749;
   std::complex<double> tmp_6751;
   std::complex<double> tmp_6752;
   for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
      tmp_6752 += B1(p,MFSI(gI2),MVZp)*Conj(CpUFSIVZpFSIPR(gO2,gI2))*
         CpUFSIVZpFSIPR(gO1,gI2);
   }
   tmp_6751 += tmp_6752;
   result += (-1) * tmp_6751;

   return result * oneOver16PiSqr;

}

std::complex<double> CLASSNAME::self_energy_ChiP_1(double p , unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   std::complex<double> tmp_6753;
   std::complex<double> tmp_6754;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_6755;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_6755 += B0(p,MCha(gI2),MSHpp(gI1))*Conj(CpUChiPconjSHppChaPL
            (gO2,gI1,gI2))*CpUChiPconjSHppChaPR(gO1,gI1,gI2)*MCha(gI2);
      }
      tmp_6754 += tmp_6755;
   }
   tmp_6753 += tmp_6754;
   result += (2) * tmp_6753;
   std::complex<double> tmp_6756;
   std::complex<double> tmp_6757;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_6758;
      for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
         tmp_6758 += B0(p,MChi(gI2),MSHp0(gI1))*Conj(CpUChiPconjSHp0ChiPL
            (gO2,gI1,gI2))*CpUChiPconjSHp0ChiPR(gO1,gI1,gI2)*MChi(gI2);
      }
      tmp_6757 += tmp_6758;
   }
   tmp_6756 += tmp_6757;
   result += (2) * tmp_6756;
   std::complex<double> tmp_6759;
   std::complex<double> tmp_6760;
   for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
      tmp_6760 += B0(p,MChiP(gI2),MVZ)*Conj(CpUChiPVZChiPPR(gO2,gI2))*
         CpUChiPVZChiPPL(gO1,gI2)*MChiP(gI2);
   }
   tmp_6759 += tmp_6760;
   result += (-4) * tmp_6759;
   std::complex<double> tmp_6761;
   std::complex<double> tmp_6762;
   for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
      tmp_6762 += B0(p,MChiP(gI2),MVZp)*Conj(CpUChiPVZpChiPPR(gO2,gI2))*
         CpUChiPVZpChiPPL(gO1,gI2)*MChiP(gI2);
   }
   tmp_6761 += tmp_6762;
   result += (-4) * tmp_6761;
   result += -8*MChaP*B0(p,MChaP,MVWm)*Conj(CpUChiPconjVWmChaPPR(gO2))*
      CpUChiPconjVWmChaPPL(gO1);

   return result * oneOver16PiSqr;

}

std::complex<double> CLASSNAME::self_energy_ChiP_PR(double p , unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   result += -2*B1(p,MChaP,MVWm)*Conj(CpUChiPconjVWmChaPPL(gO2))*
      CpUChiPconjVWmChaPPL(gO1);
   std::complex<double> tmp_6763;
   std::complex<double> tmp_6764;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_6765;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_6765 += B1(p,MCha(gI2),MSHpp(gI1))*Conj(CpUChiPconjSHppChaPR
            (gO2,gI1,gI2))*CpUChiPconjSHppChaPR(gO1,gI1,gI2);
      }
      tmp_6764 += tmp_6765;
   }
   tmp_6763 += tmp_6764;
   result += (-1) * tmp_6763;
   std::complex<double> tmp_6766;
   std::complex<double> tmp_6767;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_6768;
      for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
         tmp_6768 += B1(p,MChi(gI2),MSHp0(gI1))*Conj(CpUChiPconjSHp0ChiPR
            (gO2,gI1,gI2))*CpUChiPconjSHp0ChiPR(gO1,gI1,gI2);
      }
      tmp_6767 += tmp_6768;
   }
   tmp_6766 += tmp_6767;
   result += (-1) * tmp_6766;
   std::complex<double> tmp_6769;
   std::complex<double> tmp_6770;
   for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
      tmp_6770 += B1(p,MChiP(gI2),MVZ)*Conj(CpUChiPVZChiPPL(gO2,gI2))*
         CpUChiPVZChiPPL(gO1,gI2);
   }
   tmp_6769 += tmp_6770;
   result += (-1) * tmp_6769;
   std::complex<double> tmp_6771;
   std::complex<double> tmp_6772;
   for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
      tmp_6772 += B1(p,MChiP(gI2),MVZp)*Conj(CpUChiPVZpChiPPL(gO2,gI2))*
         CpUChiPVZpChiPPL(gO1,gI2);
   }
   tmp_6771 += tmp_6772;
   result += (-1) * tmp_6771;

   return result * oneOver16PiSqr;

}

std::complex<double> CLASSNAME::self_energy_ChiP_PL(double p , unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   result += -2*B1(p,MChaP,MVWm)*Conj(CpUChiPconjVWmChaPPR(gO2))*
      CpUChiPconjVWmChaPPR(gO1);
   std::complex<double> tmp_6773;
   std::complex<double> tmp_6774;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_6775;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_6775 += B1(p,MCha(gI2),MSHpp(gI1))*Conj(CpUChiPconjSHppChaPL
            (gO2,gI1,gI2))*CpUChiPconjSHppChaPL(gO1,gI1,gI2);
      }
      tmp_6774 += tmp_6775;
   }
   tmp_6773 += tmp_6774;
   result += (-1) * tmp_6773;
   std::complex<double> tmp_6776;
   std::complex<double> tmp_6777;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_6778;
      for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
         tmp_6778 += B1(p,MChi(gI2),MSHp0(gI1))*Conj(CpUChiPconjSHp0ChiPL
            (gO2,gI1,gI2))*CpUChiPconjSHp0ChiPL(gO1,gI1,gI2);
      }
      tmp_6777 += tmp_6778;
   }
   tmp_6776 += tmp_6777;
   result += (-1) * tmp_6776;
   std::complex<double> tmp_6779;
   std::complex<double> tmp_6780;
   for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
      tmp_6780 += B1(p,MChiP(gI2),MVZ)*Conj(CpUChiPVZChiPPR(gO2,gI2))*
         CpUChiPVZChiPPR(gO1,gI2);
   }
   tmp_6779 += tmp_6780;
   result += (-1) * tmp_6779;
   std::complex<double> tmp_6781;
   std::complex<double> tmp_6782;
   for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
      tmp_6782 += B1(p,MChiP(gI2),MVZp)*Conj(CpUChiPVZpChiPPR(gO2,gI2))*
         CpUChiPVZpChiPPR(gO1,gI2);
   }
   tmp_6781 += tmp_6782;
   result += (-1) * tmp_6781;

   return result * oneOver16PiSqr;

}

std::complex<double> CLASSNAME::self_energy_Glu_1(double p ) const
{
   std::complex<double> result;

   std::complex<double> tmp_6783;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_6784;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_6784 += B0(p,MFd(gI2),MSd(gI1))*Conj(CpGluconjSdFdPL(gI1,gI2
            ))*CpGluconjSdFdPR(gI1,gI2)*MFd(gI2);
      }
      tmp_6783 += tmp_6784;
   }
   result += tmp_6783;
   std::complex<double> tmp_6785;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_6786;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_6786 += B0(p,MFDX(gI2),MSDX(gI1))*Conj(CpGluconjSDXFDXPL(gI1
            ,gI2))*CpGluconjSDXFDXPR(gI1,gI2)*MFDX(gI2);
      }
      tmp_6785 += tmp_6786;
   }
   result += tmp_6785;
   std::complex<double> tmp_6787;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_6788;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_6788 += B0(p,MFu(gI2),MSu(gI1))*Conj(CpGluconjSuFuPL(gI1,gI2
            ))*CpGluconjSuFuPR(gI1,gI2)*MFu(gI2);
      }
      tmp_6787 += tmp_6788;
   }
   result += tmp_6787;
   result += -12*MGlu*B0(p,MGlu,0)*Conj(CpGluVGGluPR())*CpGluVGGluPL();

   return result * oneOver16PiSqr;

}

std::complex<double> CLASSNAME::self_energy_Glu_PR(double p ) const
{
   std::complex<double> result;

   result += -3*AbsSqr(CpGluVGGluPL())*B1(p,MGlu,0);
   std::complex<double> tmp_6789;
   std::complex<double> tmp_6790;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_6791;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_6791 += AbsSqr(CpGluconjSdFdPR(gI1,gI2))*B1(p,MFd(gI2),MSd(
            gI1));
      }
      tmp_6790 += tmp_6791;
   }
   tmp_6789 += tmp_6790;
   result += (-0.5) * tmp_6789;
   std::complex<double> tmp_6792;
   std::complex<double> tmp_6793;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_6794;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_6794 += AbsSqr(CpGluconjSDXFDXPR(gI1,gI2))*B1(p,MFDX(gI2),
            MSDX(gI1));
      }
      tmp_6793 += tmp_6794;
   }
   tmp_6792 += tmp_6793;
   result += (-0.5) * tmp_6792;
   std::complex<double> tmp_6795;
   std::complex<double> tmp_6796;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_6797;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_6797 += AbsSqr(CpGluconjSuFuPR(gI1,gI2))*B1(p,MFu(gI2),MSu(
            gI1));
      }
      tmp_6796 += tmp_6797;
   }
   tmp_6795 += tmp_6796;
   result += (-0.5) * tmp_6795;

   return result * oneOver16PiSqr;

}

std::complex<double> CLASSNAME::self_energy_Glu_PL(double p ) const
{
   std::complex<double> result;

   result += -3*AbsSqr(CpGluVGGluPR())*B1(p,MGlu,0);
   std::complex<double> tmp_6798;
   std::complex<double> tmp_6799;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_6800;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_6800 += AbsSqr(CpGluconjSdFdPL(gI1,gI2))*B1(p,MFd(gI2),MSd(
            gI1));
      }
      tmp_6799 += tmp_6800;
   }
   tmp_6798 += tmp_6799;
   result += (-0.5) * tmp_6798;
   std::complex<double> tmp_6801;
   std::complex<double> tmp_6802;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_6803;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_6803 += AbsSqr(CpGluconjSDXFDXPL(gI1,gI2))*B1(p,MFDX(gI2),
            MSDX(gI1));
      }
      tmp_6802 += tmp_6803;
   }
   tmp_6801 += tmp_6802;
   result += (-0.5) * tmp_6801;
   std::complex<double> tmp_6804;
   std::complex<double> tmp_6805;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_6806;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_6806 += AbsSqr(CpGluconjSuFuPL(gI1,gI2))*B1(p,MFu(gI2),MSu(
            gI1));
      }
      tmp_6805 += tmp_6806;
   }
   tmp_6804 += tmp_6805;
   result += (-0.5) * tmp_6804;

   return result * oneOver16PiSqr;

}

std::complex<double> CLASSNAME::self_energy_ChaP_1(double p ) const
{
   std::complex<double> result;

   std::complex<double> tmp_6807;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_6808;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_6808 += B0(p,MCha(gI2),MSHp0(gI1))*Conj(CpbarChaPSHp0ChaPL(
            gI1,gI2))*CpbarChaPSHp0ChaPR(gI1,gI2)*MCha(gI2);
      }
      tmp_6807 += tmp_6808;
   }
   result += tmp_6807;
   std::complex<double> tmp_6809;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_6810;
      for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
         tmp_6810 += B0(p,MChi(gI2),MSHpp(gI1))*Conj(CpbarChaPSHppChiPL(
            gI1,gI2))*CpbarChaPSHppChiPR(gI1,gI2)*MChi(gI2);
      }
      tmp_6809 += tmp_6810;
   }
   result += tmp_6809;
   std::complex<double> tmp_6811;
   std::complex<double> tmp_6812;
   for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
      tmp_6812 += B0(p,MChiP(gI2),MVWm)*Conj(CpbarChaPVWmChiPPR(gI2))*
         CpbarChaPVWmChiPPL(gI2)*MChiP(gI2);
   }
   tmp_6811 += tmp_6812;
   result += (-4) * tmp_6811;
   result += -4*MChaP*B0(p,MChaP,0)*Conj(CpbarChaPVPChaPPR())*CpbarChaPVPChaPPL
      ();
   result += -4*MChaP*B0(p,MChaP,MVZ)*Conj(CpbarChaPVZChaPPR())*
      CpbarChaPVZChaPPL();
   result += -4*MChaP*B0(p,MChaP,MVZp)*Conj(CpbarChaPVZpChaPPR())*
      CpbarChaPVZpChaPPL();

   return result * oneOver16PiSqr;

}

std::complex<double> CLASSNAME::self_energy_ChaP_PR(double p ) const
{
   std::complex<double> result;

   result += -(AbsSqr(CpbarChaPVPChaPPL())*B1(p,MChaP,0));
   result += -(AbsSqr(CpbarChaPVZChaPPL())*B1(p,MChaP,MVZ));
   result += -(AbsSqr(CpbarChaPVZpChaPPL())*B1(p,MChaP,MVZp));
   std::complex<double> tmp_6813;
   std::complex<double> tmp_6814;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_6815;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_6815 += AbsSqr(CpbarChaPSHp0ChaPR(gI1,gI2))*B1(p,MCha(gI2),
            MSHp0(gI1));
      }
      tmp_6814 += tmp_6815;
   }
   tmp_6813 += tmp_6814;
   result += (-0.5) * tmp_6813;
   std::complex<double> tmp_6816;
   std::complex<double> tmp_6817;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_6818;
      for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
         tmp_6818 += AbsSqr(CpbarChaPSHppChiPR(gI1,gI2))*B1(p,MChi(gI2),
            MSHpp(gI1));
      }
      tmp_6817 += tmp_6818;
   }
   tmp_6816 += tmp_6817;
   result += (-0.5) * tmp_6816;
   std::complex<double> tmp_6819;
   std::complex<double> tmp_6820;
   for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
      tmp_6820 += AbsSqr(CpbarChaPVWmChiPPL(gI2))*B1(p,MChiP(gI2),MVWm);
   }
   tmp_6819 += tmp_6820;
   result += (-1) * tmp_6819;

   return result * oneOver16PiSqr;

}

std::complex<double> CLASSNAME::self_energy_ChaP_PL(double p ) const
{
   std::complex<double> result;

   result += -(AbsSqr(CpbarChaPVPChaPPR())*B1(p,MChaP,0));
   result += -(AbsSqr(CpbarChaPVZChaPPR())*B1(p,MChaP,MVZ));
   result += -(AbsSqr(CpbarChaPVZpChaPPR())*B1(p,MChaP,MVZp));
   std::complex<double> tmp_6821;
   std::complex<double> tmp_6822;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_6823;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_6823 += AbsSqr(CpbarChaPSHp0ChaPL(gI1,gI2))*B1(p,MCha(gI2),
            MSHp0(gI1));
      }
      tmp_6822 += tmp_6823;
   }
   tmp_6821 += tmp_6822;
   result += (-0.5) * tmp_6821;
   std::complex<double> tmp_6824;
   std::complex<double> tmp_6825;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_6826;
      for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
         tmp_6826 += AbsSqr(CpbarChaPSHppChiPL(gI1,gI2))*B1(p,MChi(gI2),
            MSHpp(gI1));
      }
      tmp_6825 += tmp_6826;
   }
   tmp_6824 += tmp_6825;
   result += (-0.5) * tmp_6824;
   std::complex<double> tmp_6827;
   std::complex<double> tmp_6828;
   for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
      tmp_6828 += AbsSqr(CpbarChaPVWmChiPPR(gI2))*B1(p,MChiP(gI2),MVWm);
   }
   tmp_6827 += tmp_6828;
   result += (-1) * tmp_6827;

   return result * oneOver16PiSqr;

}

std::complex<double> CLASSNAME::self_energy_VZ_heavy(double p ) const
{
   std::complex<double> result;

   result += (AbsSqr(CpVZbarChaPChaPPL()) + AbsSqr(CpVZbarChaPChaPPR()))*H0(p,
      MChaP,MChaP);
   std::complex<double> tmp_6829;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      tmp_6829 += A0(MSHp0(gI1))*CpVZVZconjSHp0SHp0(gI1,gI1);
   }
   result += tmp_6829;
   std::complex<double> tmp_6830;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      tmp_6830 += A0(MSHpp(gI1))*CpVZVZconjSHppSHpp(gI1,gI1);
   }
   result += tmp_6830;
   std::complex<double> tmp_6831;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      tmp_6831 += A0(MSSI0(gI1))*CpVZVZconjSSI0SSI0(gI1,gI1);
   }
   result += tmp_6831;
   std::complex<double> tmp_6832;
   std::complex<double> tmp_6833;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_6834;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_6834 += AbsSqr(CpVZconjSHp0SHp0(gI1,gI2))*B00(p,MSHp0(gI1),
            MSHp0(gI2));
      }
      tmp_6833 += tmp_6834;
   }
   tmp_6832 += tmp_6833;
   result += (-4) * tmp_6832;
   std::complex<double> tmp_6835;
   std::complex<double> tmp_6836;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_6837;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_6837 += AbsSqr(CpVZconjSHppSHpp(gI1,gI2))*B00(p,MSHpp(gI1),
            MSHpp(gI2));
      }
      tmp_6836 += tmp_6837;
   }
   tmp_6835 += tmp_6836;
   result += (-4) * tmp_6835;
   std::complex<double> tmp_6838;
   std::complex<double> tmp_6839;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_6840;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_6840 += AbsSqr(CpVZconjSSI0SSI0(gI1,gI2))*B00(p,MSSI0(gI1),
            MSSI0(gI2));
      }
      tmp_6839 += tmp_6840;
   }
   tmp_6838 += tmp_6839;
   result += (-4) * tmp_6838;
   std::complex<double> tmp_6841;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_6842;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_6842 += (AbsSqr(CpVZbarChaChaPL(gI1,gI2)) + AbsSqr(
            CpVZbarChaChaPR(gI1,gI2)))*H0(p,MCha(gI1),MCha(gI2));
         tmp_6842 += 4*B0(p,MCha(gI1),MCha(gI2))*MCha(gI1)*MCha(gI2)*Re(
            Conj(CpVZbarChaChaPL(gI1,gI2))*CpVZbarChaChaPR(gI1,gI2));
      }
      tmp_6841 += tmp_6842;
   }
   result += tmp_6841;
   std::complex<double> tmp_6843;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_6844;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_6844 += (AbsSqr(CpVZbarChaIChaIPL(gI1,gI2)) + AbsSqr(
            CpVZbarChaIChaIPR(gI1,gI2)))*H0(p,MChaI(gI1),MChaI(gI2));
         tmp_6844 += 4*B0(p,MChaI(gI1),MChaI(gI2))*MChaI(gI1)*MChaI(gI2)*
            Re(Conj(CpVZbarChaIChaIPL(gI1,gI2))*CpVZbarChaIChaIPR(gI1,gI2));
      }
      tmp_6843 += tmp_6844;
   }
   result += tmp_6843;
   std::complex<double> tmp_6845;
   std::complex<double> tmp_6846;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_6847;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_6847 += (AbsSqr(CpVZChiPChiPPL(gI1,gI2)) + AbsSqr(
            CpVZChiPChiPPR(gI1,gI2)))*H0(p,MChiP(gI1),MChiP(gI2));
         tmp_6847 += 4*B0(p,MChiP(gI1),MChiP(gI2))*MChiP(gI1)*MChiP(gI2)*
            Re(Conj(CpVZChiPChiPPL(gI1,gI2))*CpVZChiPChiPPR(gI1,gI2));
      }
      tmp_6846 += tmp_6847;
   }
   tmp_6845 += tmp_6846;
   result += (0.5) * tmp_6845;
   std::complex<double> tmp_6848;
   std::complex<double> tmp_6849;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_6850;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_6850 += (AbsSqr(CpVZFSIFSIPL(gI1,gI2)) + AbsSqr(CpVZFSIFSIPR
            (gI1,gI2)))*H0(p,MFSI(gI1),MFSI(gI2));
         tmp_6850 += 4*B0(p,MFSI(gI1),MFSI(gI2))*MFSI(gI1)*MFSI(gI2)*Re(
            Conj(CpVZFSIFSIPL(gI1,gI2))*CpVZFSIFSIPR(gI1,gI2));
      }
      tmp_6849 += tmp_6850;
   }
   tmp_6848 += tmp_6849;
   result += (0.5) * tmp_6848;
   std::complex<double> tmp_6851;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      tmp_6851 += A0(MSv(gI1))*CpVZVZconjSvSv(gI1,gI1);
   }
   result += tmp_6851;
   std::complex<double> tmp_6852;
   std::complex<double> tmp_6853;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      tmp_6853 += A0(Mhh(gI1))*CpVZVZhhhh(gI1,gI1);
   }
   tmp_6852 += tmp_6853;
   result += (0.5) * tmp_6852;
   std::complex<double> tmp_6854;
   std::complex<double> tmp_6855;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_6856;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_6856 += AbsSqr(CpVZhhAh(gI1,1 + gI2))*B00(p,MAh(1 + gI2),Mhh
            (gI1));
      }
      tmp_6855 += tmp_6856;
   }
   tmp_6854 += tmp_6855;
   result += (-4) * tmp_6854;
   std::complex<double> tmp_6857;
   std::complex<double> tmp_6858;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_6859;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_6859 += AbsSqr(CpVZconjSvSv(gI1,gI2))*B00(p,MSv(gI1),MSv(gI2
            ));
      }
      tmp_6858 += tmp_6859;
   }
   tmp_6857 += tmp_6858;
   result += (-4) * tmp_6857;
   std::complex<double> tmp_6860;
   std::complex<double> tmp_6861;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_6862;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_6862 += (AbsSqr(CpVZbarFDXFDXPL(gI1,gI2)) + AbsSqr(
            CpVZbarFDXFDXPR(gI1,gI2)))*H0(p,MFDX(gI1),MFDX(gI2));
         tmp_6862 += 4*B0(p,MFDX(gI1),MFDX(gI2))*MFDX(gI1)*MFDX(gI2)*Re(
            Conj(CpVZbarFDXFDXPL(gI1,gI2))*CpVZbarFDXFDXPR(gI1,gI2));
      }
      tmp_6861 += tmp_6862;
   }
   tmp_6860 += tmp_6861;
   result += (3) * tmp_6860;
   std::complex<double> tmp_6863;
   for (unsigned gI1 = 0; gI1 < 4; ++gI1) {
      tmp_6863 += A0(MSHI0(gI1))*CpVZVZconjSHI0SHI0(gI1,gI1);
   }
   result += tmp_6863;
   std::complex<double> tmp_6864;
   for (unsigned gI1 = 0; gI1 < 4; ++gI1) {
      tmp_6864 += A0(MSHIp(gI1))*CpVZVZconjSHIpSHIp(gI1,gI1);
   }
   result += tmp_6864;
   std::complex<double> tmp_6865;
   std::complex<double> tmp_6866;
   for (unsigned gI1 = 0; gI1 < 4; ++gI1) {
      std::complex<double> tmp_6867;
      for (unsigned gI2 = 0; gI2 < 4; ++gI2) {
         tmp_6867 += AbsSqr(CpVZconjSHI0SHI0(gI1,gI2))*B00(p,MSHI0(gI1),
            MSHI0(gI2));
      }
      tmp_6866 += tmp_6867;
   }
   tmp_6865 += tmp_6866;
   result += (-4) * tmp_6865;
   std::complex<double> tmp_6868;
   std::complex<double> tmp_6869;
   for (unsigned gI1 = 0; gI1 < 4; ++gI1) {
      std::complex<double> tmp_6870;
      for (unsigned gI2 = 0; gI2 < 4; ++gI2) {
         tmp_6870 += AbsSqr(CpVZconjSHIpSHIp(gI1,gI2))*B00(p,MSHIp(gI1),
            MSHIp(gI2));
      }
      tmp_6869 += tmp_6870;
   }
   tmp_6868 += tmp_6869;
   result += (-4) * tmp_6868;
   std::complex<double> tmp_6871;
   std::complex<double> tmp_6872;
   for (unsigned gI1 = 0; gI1 < 4; ++gI1) {
      std::complex<double> tmp_6873;
      for (unsigned gI2 = 0; gI2 < 4; ++gI2) {
         tmp_6873 += (AbsSqr(CpVZChiIChiIPL(gI1,gI2)) + AbsSqr(
            CpVZChiIChiIPR(gI1,gI2)))*H0(p,MChiI(gI1),MChiI(gI2));
         tmp_6873 += 4*B0(p,MChiI(gI1),MChiI(gI2))*MChiI(gI1)*MChiI(gI2)*
            Re(Conj(CpVZChiIChiIPL(gI1,gI2))*CpVZChiIChiIPR(gI1,gI2));
      }
      tmp_6872 += tmp_6873;
   }
   tmp_6871 += tmp_6872;
   result += (0.5) * tmp_6871;
   std::complex<double> tmp_6874;
   std::complex<double> tmp_6875;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_6875 += A0(MSd(gI1))*CpVZVZconjSdSd(gI1,gI1);
   }
   tmp_6874 += tmp_6875;
   result += (3) * tmp_6874;
   std::complex<double> tmp_6876;
   std::complex<double> tmp_6877;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_6877 += A0(MSDX(gI1))*CpVZVZconjSDXSDX(gI1,gI1);
   }
   tmp_6876 += tmp_6877;
   result += (3) * tmp_6876;
   std::complex<double> tmp_6878;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_6878 += A0(MSe(gI1))*CpVZVZconjSeSe(gI1,gI1);
   }
   result += tmp_6878;
   std::complex<double> tmp_6879;
   std::complex<double> tmp_6880;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_6880 += A0(MSu(gI1))*CpVZVZconjSuSu(gI1,gI1);
   }
   tmp_6879 += tmp_6880;
   result += (3) * tmp_6879;
   std::complex<double> tmp_6881;
   std::complex<double> tmp_6882;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_6883;
      for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
         tmp_6883 += AbsSqr(CpVZconjSdSd(gI1,gI2))*B00(p,MSd(gI1),MSd(gI2
            ));
      }
      tmp_6882 += tmp_6883;
   }
   tmp_6881 += tmp_6882;
   result += (-12) * tmp_6881;
   std::complex<double> tmp_6884;
   std::complex<double> tmp_6885;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_6886;
      for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
         tmp_6886 += AbsSqr(CpVZconjSDXSDX(gI1,gI2))*B00(p,MSDX(gI1),MSDX
            (gI2));
      }
      tmp_6885 += tmp_6886;
   }
   tmp_6884 += tmp_6885;
   result += (-12) * tmp_6884;
   std::complex<double> tmp_6887;
   std::complex<double> tmp_6888;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_6889;
      for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
         tmp_6889 += AbsSqr(CpVZconjSeSe(gI1,gI2))*B00(p,MSe(gI1),MSe(gI2
            ));
      }
      tmp_6888 += tmp_6889;
   }
   tmp_6887 += tmp_6888;
   result += (-4) * tmp_6887;
   std::complex<double> tmp_6890;
   std::complex<double> tmp_6891;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_6892;
      for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
         tmp_6892 += AbsSqr(CpVZconjSuSu(gI1,gI2))*B00(p,MSu(gI1),MSu(gI2
            ));
      }
      tmp_6891 += tmp_6892;
   }
   tmp_6890 += tmp_6891;
   result += (-12) * tmp_6890;
   std::complex<double> tmp_6893;
   std::complex<double> tmp_6894;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_6895;
      for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
         tmp_6895 += (AbsSqr(CpVZChiChiPL(gI1,gI2)) + AbsSqr(CpVZChiChiPR
            (gI1,gI2)))*H0(p,MChi(gI1),MChi(gI2));
         tmp_6895 += 4*B0(p,MChi(gI1),MChi(gI2))*MChi(gI1)*MChi(gI2)*Re(
            Conj(CpVZChiChiPL(gI1,gI2))*CpVZChiChiPR(gI1,gI2));
      }
      tmp_6894 += tmp_6895;
   }
   tmp_6893 += tmp_6894;
   result += (0.5) * tmp_6893;
   std::complex<double> tmp_6896;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_6896 += AbsSqr(CpVZVZhh(gI2))*B0(p,MVZ,Mhh(gI2));
   }
   result += tmp_6896;
   std::complex<double> tmp_6897;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_6897 += AbsSqr(CpVZVZphh(gI2))*B0(p,MVZp,Mhh(gI2));
   }
   result += tmp_6897;
   result += 4*B0(p,MChaP,MChaP)*Re(Conj(CpVZbarChaPChaPPL())*CpVZbarChaPChaPPR
      ())*Sqr(MChaP);

   return result * oneOver16PiSqr;

}

std::complex<double> CLASSNAME::self_energy_VWm_heavy(double p ) const
{
   std::complex<double> result;

   result += AbsSqr(CpconjVWmbarVWmVZp())*B00(p,MVZp,MVWm);
   result += AbsSqr(CpconjVWmbarVZpVWm())*B00(p,MVWm,MVZp);
   result += AbsSqr(CpconjVWmVZpHpm(1))*B0(p,MVZp,MHpm(1));
   result += -0.5*A0(MVZp)*(4*CpVWmconjVWmVZpVZp1() + CpVWmconjVWmVZpVZp2() +
      CpVWmconjVWmVZpVZp3());
   std::complex<double> tmp_6898;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      tmp_6898 += A0(MSHp0(gI1))*CpVWmconjVWmconjSHp0SHp0(gI1,gI1);
   }
   result += tmp_6898;
   std::complex<double> tmp_6899;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      tmp_6899 += A0(MSHpp(gI1))*CpVWmconjVWmconjSHppSHpp(gI1,gI1);
   }
   result += tmp_6899;
   std::complex<double> tmp_6900;
   std::complex<double> tmp_6901;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_6902;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_6902 += AbsSqr(CpconjVWmconjSHp0SHpp(gI1,gI2))*B00(p,MSHpp(
            gI2),MSHp0(gI1));
      }
      tmp_6901 += tmp_6902;
   }
   tmp_6900 += tmp_6901;
   result += (-4) * tmp_6900;
   std::complex<double> tmp_6903;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      tmp_6903 += (AbsSqr(CpconjVWmChiPChaPPL(gI1)) + AbsSqr(
         CpconjVWmChiPChaPPR(gI1)))*H0(p,MChiP(gI1),MChaP);
      tmp_6903 += 4*MChaP*B0(p,MChiP(gI1),MChaP)*MChiP(gI1)*Re(Conj(
         CpconjVWmChiPChaPPL(gI1))*CpconjVWmChiPChaPPR(gI1));
   }
   result += tmp_6903;
   std::complex<double> tmp_6904;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      tmp_6904 += A0(MSv(gI1))*CpVWmconjVWmconjSvSv(gI1,gI1);
   }
   result += tmp_6904;
   std::complex<double> tmp_6905;
   std::complex<double> tmp_6906;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      tmp_6906 += A0(Mhh(gI1))*CpVWmconjVWmhhhh(gI1,gI1);
   }
   tmp_6905 += tmp_6906;
   result += (0.5) * tmp_6905;
   std::complex<double> tmp_6907;
   std::complex<double> tmp_6908;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_6909;
      for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
         tmp_6909 += AbsSqr(CpconjVWmconjSvSe(gI1,gI2))*B00(p,MSe(gI2),
            MSv(gI1));
      }
      tmp_6908 += tmp_6909;
   }
   tmp_6907 += tmp_6908;
   result += (-4) * tmp_6907;
   std::complex<double> tmp_6910;
   for (unsigned gI1 = 0; gI1 < 4; ++gI1) {
      tmp_6910 += A0(MSHI0(gI1))*CpVWmconjVWmconjSHI0SHI0(gI1,gI1);
   }
   result += tmp_6910;
   std::complex<double> tmp_6911;
   for (unsigned gI1 = 0; gI1 < 4; ++gI1) {
      tmp_6911 += A0(MSHIp(gI1))*CpVWmconjVWmconjSHIpSHIp(gI1,gI1);
   }
   result += tmp_6911;
   std::complex<double> tmp_6912;
   for (unsigned gI1 = 0; gI1 < 4; ++gI1) {
      std::complex<double> tmp_6913;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_6913 += (AbsSqr(CpconjVWmChiIChaIPL(gI1,gI2)) + AbsSqr(
            CpconjVWmChiIChaIPR(gI1,gI2)))*H0(p,MChiI(gI1),MChaI(gI2));
         tmp_6913 += 4*B0(p,MChiI(gI1),MChaI(gI2))*MChaI(gI2)*MChiI(gI1)*
            Re(Conj(CpconjVWmChiIChaIPL(gI1,gI2))*CpconjVWmChiIChaIPR(gI1,gI2));
      }
      tmp_6912 += tmp_6913;
   }
   result += tmp_6912;
   std::complex<double> tmp_6914;
   std::complex<double> tmp_6915;
   for (unsigned gI1 = 0; gI1 < 4; ++gI1) {
      std::complex<double> tmp_6916;
      for (unsigned gI2 = 0; gI2 < 4; ++gI2) {
         tmp_6916 += AbsSqr(CpconjVWmconjSHI0SHIp(gI1,gI2))*B00(p,MSHIp(
            gI2),MSHI0(gI1));
      }
      tmp_6915 += tmp_6916;
   }
   tmp_6914 += tmp_6915;
   result += (-4) * tmp_6914;
   std::complex<double> tmp_6917;
   std::complex<double> tmp_6918;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_6918 += A0(MSd(gI1))*CpVWmconjVWmconjSdSd(gI1,gI1);
   }
   tmp_6917 += tmp_6918;
   result += (3) * tmp_6917;
   std::complex<double> tmp_6919;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_6919 += A0(MSe(gI1))*CpVWmconjVWmconjSeSe(gI1,gI1);
   }
   result += tmp_6919;
   std::complex<double> tmp_6920;
   std::complex<double> tmp_6921;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_6921 += A0(MSu(gI1))*CpVWmconjVWmconjSuSu(gI1,gI1);
   }
   tmp_6920 += tmp_6921;
   result += (3) * tmp_6920;
   std::complex<double> tmp_6922;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_6923;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_6923 += (AbsSqr(CpconjVWmChiChaPL(gI1,gI2)) + AbsSqr(
            CpconjVWmChiChaPR(gI1,gI2)))*H0(p,MChi(gI1),MCha(gI2));
         tmp_6923 += 4*B0(p,MChi(gI1),MCha(gI2))*MCha(gI2)*MChi(gI1)*Re(
            Conj(CpconjVWmChiChaPL(gI1,gI2))*CpconjVWmChiChaPR(gI1,gI2));
      }
      tmp_6922 += tmp_6923;
   }
   result += tmp_6922;
   std::complex<double> tmp_6924;
   std::complex<double> tmp_6925;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_6926;
      for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
         tmp_6926 += AbsSqr(CpconjVWmconjSuSd(gI1,gI2))*B00(p,MSd(gI2),
            MSu(gI1));
      }
      tmp_6925 += tmp_6926;
   }
   tmp_6924 += tmp_6925;
   result += (-12) * tmp_6924;
   std::complex<double> tmp_6927;
   std::complex<double> tmp_6928;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_6928 += AbsSqr(CpconjVWmHpmhh(1,gI2))*B00(p,Mhh(gI2),MHpm(1));
   }
   tmp_6927 += tmp_6928;
   result += (-4) * tmp_6927;
   std::complex<double> tmp_6929;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_6929 += AbsSqr(CpconjVWmVWmhh(gI2))*B0(p,MVWm,Mhh(gI2));
   }
   result += tmp_6929;
   result += -(AbsSqr(CpconjVWmVZpVWm())*(A0(MVWm) + A0(MVZp) + 10*B00(p,MVZp,
      MVWm) + B0(p,MVZp,MVWm)*(Sqr(MVWm) + Sqr(MVZp) + 4*Sqr(p))));

   return result * oneOver16PiSqr;

}

std::complex<double> CLASSNAME::self_energy_Fe_1_heavy_rotated(double p , unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   std::complex<double> tmp_6930;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_6931;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_6931 += B0(p,MFv(gI2),MHpm(gI1))*Conj(CpbarFeHpmFvPL(gO2,gI1
            ,gI2))*CpbarFeHpmFvPR(gO1,gI1,gI2)*MFv(gI2);
      }
      tmp_6930 += tmp_6931;
   }
   result += tmp_6930;
   std::complex<double> tmp_6932;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_6933;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_6933 += B0(p,MCha(gI2),MSv(gI1))*Conj(CpbarFeSvChaPL(gO2,gI1
            ,gI2))*CpbarFeSvChaPR(gO1,gI1,gI2)*MCha(gI2);
      }
      tmp_6932 += tmp_6933;
   }
   result += tmp_6932;
   std::complex<double> tmp_6934;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_6935;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_6935 += B0(p,MFe(gI2),Mhh(gI1))*Conj(CpbarFehhFePL(gO2,gI1,
            gI2))*CpbarFehhFePR(gO1,gI1,gI2)*MFe(gI2);
      }
      tmp_6934 += tmp_6935;
   }
   result += tmp_6934;
   std::complex<double> tmp_6936;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_6937;
      std::complex<double> tmp_6938;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_6938 += B0(p,MFe(gI1),MAh(gI2))*Conj(CpbarFeFeAhPL(gO2,gI1,
            gI2))*CpbarFeFeAhPR(gO1,gI1,gI2);
      }
      tmp_6937 += tmp_6938;
      tmp_6936 += (MFe(gI1)) * tmp_6937;
   }
   result += tmp_6936;
   std::complex<double> tmp_6939;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_6940;
      for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
         tmp_6940 += B0(p,MChi(gI2),MSe(gI1))*Conj(CpbarFeSeChiPL(gO2,gI1
            ,gI2))*CpbarFeSeChiPR(gO1,gI1,gI2)*MChi(gI2);
      }
      tmp_6939 += tmp_6940;
   }
   result += tmp_6939;
   std::complex<double> tmp_6941;
   std::complex<double> tmp_6942;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_6942 += B0(p,MFe(gI2),MVZ)*Conj(CpbarFeVZFePR(gO2,gI2))*
         CpbarFeVZFePL(gO1,gI2)*MFe(gI2);
   }
   tmp_6941 += tmp_6942;
   result += (-4) * tmp_6941;
   std::complex<double> tmp_6943;
   std::complex<double> tmp_6944;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_6944 += B0(p,MFe(gI2),MVZp)*Conj(CpbarFeVZpFePR(gO2,gI2))*
         CpbarFeVZpFePL(gO1,gI2)*MFe(gI2);
   }
   tmp_6943 += tmp_6944;
   result += (-4) * tmp_6943;
   std::complex<double> tmp_6945;
   std::complex<double> tmp_6946;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_6946 += B0(p,MFv(gI2),MVWm)*Conj(CpbarFeVWmFvPR(gO2,gI2))*
         CpbarFeVWmFvPL(gO1,gI2)*MFv(gI2);
   }
   tmp_6945 += tmp_6946;
   result += (-4) * tmp_6945;

   return result * oneOver16PiSqr;

}

std::complex<double> CLASSNAME::self_energy_Fe_PR_heavy_rotated(double p , unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   std::complex<double> tmp_6947;
   std::complex<double> tmp_6948;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_6949;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_6949 += B1(p,MFv(gI2),MHpm(gI1))*Conj(CpbarFeHpmFvPR(gO2,gI1
            ,gI2))*CpbarFeHpmFvPR(gO1,gI1,gI2);
      }
      tmp_6948 += tmp_6949;
   }
   tmp_6947 += tmp_6948;
   result += (-0.5) * tmp_6947;
   std::complex<double> tmp_6950;
   std::complex<double> tmp_6951;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_6952;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_6952 += B1(p,MCha(gI2),MSv(gI1))*Conj(CpbarFeSvChaPR(gO2,gI1
            ,gI2))*CpbarFeSvChaPR(gO1,gI1,gI2);
      }
      tmp_6951 += tmp_6952;
   }
   tmp_6950 += tmp_6951;
   result += (-0.5) * tmp_6950;
   std::complex<double> tmp_6953;
   std::complex<double> tmp_6954;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_6955;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_6955 += B1(p,MFe(gI1),MAh(gI2))*Conj(CpbarFeFeAhPR(gO2,gI1,
            gI2))*CpbarFeFeAhPR(gO1,gI1,gI2);
      }
      tmp_6954 += tmp_6955;
   }
   tmp_6953 += tmp_6954;
   result += (-0.5) * tmp_6953;
   std::complex<double> tmp_6956;
   std::complex<double> tmp_6957;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_6958;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_6958 += B1(p,MFe(gI2),Mhh(gI1))*Conj(CpbarFehhFePR(gO2,gI1,
            gI2))*CpbarFehhFePR(gO1,gI1,gI2);
      }
      tmp_6957 += tmp_6958;
   }
   tmp_6956 += tmp_6957;
   result += (-0.5) * tmp_6956;
   std::complex<double> tmp_6959;
   std::complex<double> tmp_6960;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_6961;
      for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
         tmp_6961 += B1(p,MChi(gI2),MSe(gI1))*Conj(CpbarFeSeChiPR(gO2,gI1
            ,gI2))*CpbarFeSeChiPR(gO1,gI1,gI2);
      }
      tmp_6960 += tmp_6961;
   }
   tmp_6959 += tmp_6960;
   result += (-0.5) * tmp_6959;
   std::complex<double> tmp_6962;
   std::complex<double> tmp_6963;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_6963 += B1(p,MFv(gI2),MVWm)*Conj(CpbarFeVWmFvPL(gO2,gI2))*
         CpbarFeVWmFvPL(gO1,gI2);
   }
   tmp_6962 += tmp_6963;
   result += (-1) * tmp_6962;
   std::complex<double> tmp_6964;
   std::complex<double> tmp_6965;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_6965 += B1(p,MFe(gI2),MVZ)*Conj(CpbarFeVZFePL(gO2,gI2))*
         CpbarFeVZFePL(gO1,gI2);
   }
   tmp_6964 += tmp_6965;
   result += (-1) * tmp_6964;
   std::complex<double> tmp_6966;
   std::complex<double> tmp_6967;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_6967 += B1(p,MFe(gI2),MVZp)*Conj(CpbarFeVZpFePL(gO2,gI2))*
         CpbarFeVZpFePL(gO1,gI2);
   }
   tmp_6966 += tmp_6967;
   result += (-1) * tmp_6966;

   return result * oneOver16PiSqr;

}

std::complex<double> CLASSNAME::self_energy_Fe_PL_heavy_rotated(double p , unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   std::complex<double> tmp_6968;
   std::complex<double> tmp_6969;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_6970;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_6970 += B1(p,MFv(gI2),MHpm(gI1))*Conj(CpbarFeHpmFvPL(gO2,gI1
            ,gI2))*CpbarFeHpmFvPL(gO1,gI1,gI2);
      }
      tmp_6969 += tmp_6970;
   }
   tmp_6968 += tmp_6969;
   result += (-0.5) * tmp_6968;
   std::complex<double> tmp_6971;
   std::complex<double> tmp_6972;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_6973;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_6973 += B1(p,MCha(gI2),MSv(gI1))*Conj(CpbarFeSvChaPL(gO2,gI1
            ,gI2))*CpbarFeSvChaPL(gO1,gI1,gI2);
      }
      tmp_6972 += tmp_6973;
   }
   tmp_6971 += tmp_6972;
   result += (-0.5) * tmp_6971;
   std::complex<double> tmp_6974;
   std::complex<double> tmp_6975;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_6976;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_6976 += B1(p,MFe(gI1),MAh(gI2))*Conj(CpbarFeFeAhPL(gO2,gI1,
            gI2))*CpbarFeFeAhPL(gO1,gI1,gI2);
      }
      tmp_6975 += tmp_6976;
   }
   tmp_6974 += tmp_6975;
   result += (-0.5) * tmp_6974;
   std::complex<double> tmp_6977;
   std::complex<double> tmp_6978;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_6979;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_6979 += B1(p,MFe(gI2),Mhh(gI1))*Conj(CpbarFehhFePL(gO2,gI1,
            gI2))*CpbarFehhFePL(gO1,gI1,gI2);
      }
      tmp_6978 += tmp_6979;
   }
   tmp_6977 += tmp_6978;
   result += (-0.5) * tmp_6977;
   std::complex<double> tmp_6980;
   std::complex<double> tmp_6981;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_6982;
      for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
         tmp_6982 += B1(p,MChi(gI2),MSe(gI1))*Conj(CpbarFeSeChiPL(gO2,gI1
            ,gI2))*CpbarFeSeChiPL(gO1,gI1,gI2);
      }
      tmp_6981 += tmp_6982;
   }
   tmp_6980 += tmp_6981;
   result += (-0.5) * tmp_6980;
   std::complex<double> tmp_6983;
   std::complex<double> tmp_6984;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_6984 += B1(p,MFv(gI2),MVWm)*Conj(CpbarFeVWmFvPR(gO2,gI2))*
         CpbarFeVWmFvPR(gO1,gI2);
   }
   tmp_6983 += tmp_6984;
   result += (-1) * tmp_6983;
   std::complex<double> tmp_6985;
   std::complex<double> tmp_6986;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_6986 += B1(p,MFe(gI2),MVZ)*Conj(CpbarFeVZFePR(gO2,gI2))*
         CpbarFeVZFePR(gO1,gI2);
   }
   tmp_6985 += tmp_6986;
   result += (-1) * tmp_6985;
   std::complex<double> tmp_6987;
   std::complex<double> tmp_6988;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_6988 += B1(p,MFe(gI2),MVZp)*Conj(CpbarFeVZpFePR(gO2,gI2))*
         CpbarFeVZpFePR(gO1,gI2);
   }
   tmp_6987 += tmp_6988;
   result += (-1) * tmp_6987;

   return result * oneOver16PiSqr;

}

std::complex<double> CLASSNAME::self_energy_Fd_1_heavy_rotated(double p , unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   std::complex<double> tmp_6989;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_6990;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_6990 += B0(p,MFu(gI2),MHpm(gI1))*Conj(CpbarFdHpmFuPL(gO2,gI1
            ,gI2))*CpbarFdHpmFuPR(gO1,gI1,gI2)*MFu(gI2);
      }
      tmp_6989 += tmp_6990;
   }
   result += tmp_6989;
   std::complex<double> tmp_6991;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_6992;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_6992 += B0(p,MFd(gI2),Mhh(gI1))*Conj(CpbarFdhhFdPL(gO2,gI1,
            gI2))*CpbarFdhhFdPR(gO1,gI1,gI2)*MFd(gI2);
      }
      tmp_6991 += tmp_6992;
   }
   result += tmp_6991;
   std::complex<double> tmp_6993;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_6994;
      std::complex<double> tmp_6995;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_6995 += B0(p,MFd(gI1),MAh(gI2))*Conj(CpbarFdFdAhPL(gO2,gI1,
            gI2))*CpbarFdFdAhPR(gO1,gI1,gI2);
      }
      tmp_6994 += tmp_6995;
      tmp_6993 += (MFd(gI1)) * tmp_6994;
   }
   result += tmp_6993;
   std::complex<double> tmp_6996;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_6997;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_6997 += B0(p,MCha(gI2),MSu(gI1))*Conj(CpbarFdSuChaPL(gO2,gI1
            ,gI2))*CpbarFdSuChaPR(gO1,gI1,gI2)*MCha(gI2);
      }
      tmp_6996 += tmp_6997;
   }
   result += tmp_6996;
   std::complex<double> tmp_6998;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_6999;
      for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
         tmp_6999 += B0(p,MChi(gI2),MSd(gI1))*Conj(CpbarFdSdChiPL(gO2,gI1
            ,gI2))*CpbarFdSdChiPR(gO1,gI1,gI2)*MChi(gI2);
      }
      tmp_6998 += tmp_6999;
   }
   result += tmp_6998;
   std::complex<double> tmp_7000;
   std::complex<double> tmp_7001;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_7001 += B0(p,MFd(gI2),MVZ)*Conj(CpbarFdVZFdPR(gO2,gI2))*
         CpbarFdVZFdPL(gO1,gI2)*MFd(gI2);
   }
   tmp_7000 += tmp_7001;
   result += (-4) * tmp_7000;
   std::complex<double> tmp_7002;
   std::complex<double> tmp_7003;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_7003 += B0(p,MFd(gI2),MVZp)*Conj(CpbarFdVZpFdPR(gO2,gI2))*
         CpbarFdVZpFdPL(gO1,gI2)*MFd(gI2);
   }
   tmp_7002 += tmp_7003;
   result += (-4) * tmp_7002;
   std::complex<double> tmp_7004;
   std::complex<double> tmp_7005;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_7005 += B0(p,MFu(gI2),MVWm)*Conj(CpbarFdVWmFuPR(gO2,gI2))*
         CpbarFdVWmFuPL(gO1,gI2)*MFu(gI2);
   }
   tmp_7004 += tmp_7005;
   result += (-4) * tmp_7004;
   std::complex<double> tmp_7006;
   std::complex<double> tmp_7007;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_7007 += B0(p,MGlu,MSd(gI1))*Conj(CpbarFdSdGluPL(gO2,gI1,0))*
         CpbarFdSdGluPR(gO1,gI1,0);
   }
   tmp_7006 += tmp_7007;
   result += (1.3333333333333333*MGlu) * tmp_7006;

   return result * oneOver16PiSqr;

}

std::complex<double> CLASSNAME::self_energy_Fd_PR_heavy_rotated(double p , unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   std::complex<double> tmp_7008;
   std::complex<double> tmp_7009;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_7010;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_7010 += B1(p,MFu(gI2),MHpm(gI1))*Conj(CpbarFdHpmFuPR(gO2,gI1
            ,gI2))*CpbarFdHpmFuPR(gO1,gI1,gI2);
      }
      tmp_7009 += tmp_7010;
   }
   tmp_7008 += tmp_7009;
   result += (-0.5) * tmp_7008;
   std::complex<double> tmp_7011;
   std::complex<double> tmp_7012;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_7013;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_7013 += B1(p,MFd(gI1),MAh(gI2))*Conj(CpbarFdFdAhPR(gO2,gI1,
            gI2))*CpbarFdFdAhPR(gO1,gI1,gI2);
      }
      tmp_7012 += tmp_7013;
   }
   tmp_7011 += tmp_7012;
   result += (-0.5) * tmp_7011;
   std::complex<double> tmp_7014;
   std::complex<double> tmp_7015;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_7016;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_7016 += B1(p,MFd(gI2),Mhh(gI1))*Conj(CpbarFdhhFdPR(gO2,gI1,
            gI2))*CpbarFdhhFdPR(gO1,gI1,gI2);
      }
      tmp_7015 += tmp_7016;
   }
   tmp_7014 += tmp_7015;
   result += (-0.5) * tmp_7014;
   std::complex<double> tmp_7017;
   std::complex<double> tmp_7018;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_7018 += B1(p,MGlu,MSd(gI1))*Conj(CpbarFdSdGluPR(gO2,gI1,0))*
         CpbarFdSdGluPR(gO1,gI1,0);
   }
   tmp_7017 += tmp_7018;
   result += (-0.6666666666666666) * tmp_7017;
   std::complex<double> tmp_7019;
   std::complex<double> tmp_7020;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_7021;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_7021 += B1(p,MCha(gI2),MSu(gI1))*Conj(CpbarFdSuChaPR(gO2,gI1
            ,gI2))*CpbarFdSuChaPR(gO1,gI1,gI2);
      }
      tmp_7020 += tmp_7021;
   }
   tmp_7019 += tmp_7020;
   result += (-0.5) * tmp_7019;
   std::complex<double> tmp_7022;
   std::complex<double> tmp_7023;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_7024;
      for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
         tmp_7024 += B1(p,MChi(gI2),MSd(gI1))*Conj(CpbarFdSdChiPR(gO2,gI1
            ,gI2))*CpbarFdSdChiPR(gO1,gI1,gI2);
      }
      tmp_7023 += tmp_7024;
   }
   tmp_7022 += tmp_7023;
   result += (-0.5) * tmp_7022;
   std::complex<double> tmp_7025;
   std::complex<double> tmp_7026;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_7026 += B1(p,MFu(gI2),MVWm)*Conj(CpbarFdVWmFuPL(gO2,gI2))*
         CpbarFdVWmFuPL(gO1,gI2);
   }
   tmp_7025 += tmp_7026;
   result += (-1) * tmp_7025;
   std::complex<double> tmp_7027;
   std::complex<double> tmp_7028;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_7028 += B1(p,MFd(gI2),MVZ)*Conj(CpbarFdVZFdPL(gO2,gI2))*
         CpbarFdVZFdPL(gO1,gI2);
   }
   tmp_7027 += tmp_7028;
   result += (-1) * tmp_7027;
   std::complex<double> tmp_7029;
   std::complex<double> tmp_7030;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_7030 += B1(p,MFd(gI2),MVZp)*Conj(CpbarFdVZpFdPL(gO2,gI2))*
         CpbarFdVZpFdPL(gO1,gI2);
   }
   tmp_7029 += tmp_7030;
   result += (-1) * tmp_7029;

   return result * oneOver16PiSqr;

}

std::complex<double> CLASSNAME::self_energy_Fd_PL_heavy_rotated(double p , unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   std::complex<double> tmp_7031;
   std::complex<double> tmp_7032;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_7033;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_7033 += B1(p,MFu(gI2),MHpm(gI1))*Conj(CpbarFdHpmFuPL(gO2,gI1
            ,gI2))*CpbarFdHpmFuPL(gO1,gI1,gI2);
      }
      tmp_7032 += tmp_7033;
   }
   tmp_7031 += tmp_7032;
   result += (-0.5) * tmp_7031;
   std::complex<double> tmp_7034;
   std::complex<double> tmp_7035;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_7036;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_7036 += B1(p,MFd(gI1),MAh(gI2))*Conj(CpbarFdFdAhPL(gO2,gI1,
            gI2))*CpbarFdFdAhPL(gO1,gI1,gI2);
      }
      tmp_7035 += tmp_7036;
   }
   tmp_7034 += tmp_7035;
   result += (-0.5) * tmp_7034;
   std::complex<double> tmp_7037;
   std::complex<double> tmp_7038;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_7039;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_7039 += B1(p,MFd(gI2),Mhh(gI1))*Conj(CpbarFdhhFdPL(gO2,gI1,
            gI2))*CpbarFdhhFdPL(gO1,gI1,gI2);
      }
      tmp_7038 += tmp_7039;
   }
   tmp_7037 += tmp_7038;
   result += (-0.5) * tmp_7037;
   std::complex<double> tmp_7040;
   std::complex<double> tmp_7041;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_7041 += B1(p,MGlu,MSd(gI1))*Conj(CpbarFdSdGluPL(gO2,gI1,0))*
         CpbarFdSdGluPL(gO1,gI1,0);
   }
   tmp_7040 += tmp_7041;
   result += (-0.6666666666666666) * tmp_7040;
   std::complex<double> tmp_7042;
   std::complex<double> tmp_7043;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_7044;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_7044 += B1(p,MCha(gI2),MSu(gI1))*Conj(CpbarFdSuChaPL(gO2,gI1
            ,gI2))*CpbarFdSuChaPL(gO1,gI1,gI2);
      }
      tmp_7043 += tmp_7044;
   }
   tmp_7042 += tmp_7043;
   result += (-0.5) * tmp_7042;
   std::complex<double> tmp_7045;
   std::complex<double> tmp_7046;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_7047;
      for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
         tmp_7047 += B1(p,MChi(gI2),MSd(gI1))*Conj(CpbarFdSdChiPL(gO2,gI1
            ,gI2))*CpbarFdSdChiPL(gO1,gI1,gI2);
      }
      tmp_7046 += tmp_7047;
   }
   tmp_7045 += tmp_7046;
   result += (-0.5) * tmp_7045;
   std::complex<double> tmp_7048;
   std::complex<double> tmp_7049;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_7049 += B1(p,MFu(gI2),MVWm)*Conj(CpbarFdVWmFuPR(gO2,gI2))*
         CpbarFdVWmFuPR(gO1,gI2);
   }
   tmp_7048 += tmp_7049;
   result += (-1) * tmp_7048;
   std::complex<double> tmp_7050;
   std::complex<double> tmp_7051;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_7051 += B1(p,MFd(gI2),MVZ)*Conj(CpbarFdVZFdPR(gO2,gI2))*
         CpbarFdVZFdPR(gO1,gI2);
   }
   tmp_7050 += tmp_7051;
   result += (-1) * tmp_7050;
   std::complex<double> tmp_7052;
   std::complex<double> tmp_7053;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_7053 += B1(p,MFd(gI2),MVZp)*Conj(CpbarFdVZpFdPR(gO2,gI2))*
         CpbarFdVZpFdPR(gO1,gI2);
   }
   tmp_7052 += tmp_7053;
   result += (-1) * tmp_7052;

   return result * oneOver16PiSqr;

}

std::complex<double> CLASSNAME::self_energy_Fu_1_heavy_rotated(double p , unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   std::complex<double> tmp_7054;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_7055;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_7055 += B0(p,MFd(gI2),MHpm(gI1))*Conj(CpbarFuconjHpmFdPL(gO2
            ,gI1,gI2))*CpbarFuconjHpmFdPR(gO1,gI1,gI2)*MFd(gI2);
      }
      tmp_7054 += tmp_7055;
   }
   result += tmp_7054;
   std::complex<double> tmp_7056;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_7057;
      std::complex<double> tmp_7058;
      for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
         tmp_7058 += B0(p,MCha(gI1),MSd(gI2))*Conj(CpbarFubarChaSdPL(gO2,
            gI1,gI2))*CpbarFubarChaSdPR(gO1,gI1,gI2);
      }
      tmp_7057 += tmp_7058;
      tmp_7056 += (MCha(gI1)) * tmp_7057;
   }
   result += tmp_7056;
   std::complex<double> tmp_7059;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_7060;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_7060 += B0(p,MFu(gI2),Mhh(gI1))*Conj(CpbarFuhhFuPL(gO2,gI1,
            gI2))*CpbarFuhhFuPR(gO1,gI1,gI2)*MFu(gI2);
      }
      tmp_7059 += tmp_7060;
   }
   result += tmp_7059;
   std::complex<double> tmp_7061;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_7062;
      std::complex<double> tmp_7063;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_7063 += B0(p,MFu(gI1),MAh(gI2))*Conj(CpbarFuFuAhPL(gO2,gI1,
            gI2))*CpbarFuFuAhPR(gO1,gI1,gI2);
      }
      tmp_7062 += tmp_7063;
      tmp_7061 += (MFu(gI1)) * tmp_7062;
   }
   result += tmp_7061;
   std::complex<double> tmp_7064;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_7065;
      for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
         tmp_7065 += B0(p,MChi(gI2),MSu(gI1))*Conj(CpbarFuSuChiPL(gO2,gI1
            ,gI2))*CpbarFuSuChiPR(gO1,gI1,gI2)*MChi(gI2);
      }
      tmp_7064 += tmp_7065;
   }
   result += tmp_7064;
   std::complex<double> tmp_7066;
   std::complex<double> tmp_7067;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_7067 += B0(p,MFd(gI2),MVWm)*Conj(CpbarFuconjVWmFdPR(gO2,gI2))*
         CpbarFuconjVWmFdPL(gO1,gI2)*MFd(gI2);
   }
   tmp_7066 += tmp_7067;
   result += (-4) * tmp_7066;
   std::complex<double> tmp_7068;
   std::complex<double> tmp_7069;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_7069 += B0(p,MFu(gI2),0)*Conj(CpbarFuVPFuPR(gO2,gI2))*
         CpbarFuVPFuPL(gO1,gI2)*MFu(gI2);
   }
   tmp_7068 += tmp_7069;
   result += (-4) * tmp_7068;
   std::complex<double> tmp_7070;
   std::complex<double> tmp_7071;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_7071 += B0(p,MFu(gI2),MVZ)*Conj(CpbarFuVZFuPR(gO2,gI2))*
         CpbarFuVZFuPL(gO1,gI2)*MFu(gI2);
   }
   tmp_7070 += tmp_7071;
   result += (-4) * tmp_7070;
   std::complex<double> tmp_7072;
   std::complex<double> tmp_7073;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_7073 += B0(p,MFu(gI2),MVZp)*Conj(CpbarFuVZpFuPR(gO2,gI2))*
         CpbarFuVZpFuPL(gO1,gI2)*MFu(gI2);
   }
   tmp_7072 += tmp_7073;
   result += (-4) * tmp_7072;
   std::complex<double> tmp_7074;
   std::complex<double> tmp_7075;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_7075 += B0(p,MGlu,MSu(gI1))*Conj(CpbarFuSuGluPL(gO2,gI1,0))*
         CpbarFuSuGluPR(gO1,gI1,0);
   }
   tmp_7074 += tmp_7075;
   result += (1.3333333333333333*MGlu) * tmp_7074;

   return result * oneOver16PiSqr;

}

std::complex<double> CLASSNAME::self_energy_Fu_PR_heavy_rotated(double p , unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   std::complex<double> tmp_7076;
   std::complex<double> tmp_7077;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_7078;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_7078 += B1(p,MFd(gI2),MHpm(gI1))*Conj(CpbarFuconjHpmFdPR(gO2
            ,gI1,gI2))*CpbarFuconjHpmFdPR(gO1,gI1,gI2);
      }
      tmp_7077 += tmp_7078;
   }
   tmp_7076 += tmp_7077;
   result += (-0.5) * tmp_7076;
   std::complex<double> tmp_7079;
   std::complex<double> tmp_7080;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_7081;
      for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
         tmp_7081 += B1(p,MCha(gI1),MSd(gI2))*Conj(CpbarFubarChaSdPR(gO2,
            gI1,gI2))*CpbarFubarChaSdPR(gO1,gI1,gI2);
      }
      tmp_7080 += tmp_7081;
   }
   tmp_7079 += tmp_7080;
   result += (-0.5) * tmp_7079;
   std::complex<double> tmp_7082;
   std::complex<double> tmp_7083;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_7084;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_7084 += B1(p,MFu(gI1),MAh(gI2))*Conj(CpbarFuFuAhPR(gO2,gI1,
            gI2))*CpbarFuFuAhPR(gO1,gI1,gI2);
      }
      tmp_7083 += tmp_7084;
   }
   tmp_7082 += tmp_7083;
   result += (-0.5) * tmp_7082;
   std::complex<double> tmp_7085;
   std::complex<double> tmp_7086;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_7087;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_7087 += B1(p,MFu(gI2),Mhh(gI1))*Conj(CpbarFuhhFuPR(gO2,gI1,
            gI2))*CpbarFuhhFuPR(gO1,gI1,gI2);
      }
      tmp_7086 += tmp_7087;
   }
   tmp_7085 += tmp_7086;
   result += (-0.5) * tmp_7085;
   std::complex<double> tmp_7088;
   std::complex<double> tmp_7089;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_7089 += B1(p,MGlu,MSu(gI1))*Conj(CpbarFuSuGluPR(gO2,gI1,0))*
         CpbarFuSuGluPR(gO1,gI1,0);
   }
   tmp_7088 += tmp_7089;
   result += (-0.6666666666666666) * tmp_7088;
   std::complex<double> tmp_7090;
   std::complex<double> tmp_7091;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_7092;
      for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
         tmp_7092 += B1(p,MChi(gI2),MSu(gI1))*Conj(CpbarFuSuChiPR(gO2,gI1
            ,gI2))*CpbarFuSuChiPR(gO1,gI1,gI2);
      }
      tmp_7091 += tmp_7092;
   }
   tmp_7090 += tmp_7091;
   result += (-0.5) * tmp_7090;
   std::complex<double> tmp_7093;
   std::complex<double> tmp_7094;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_7094 += B1(p,MFd(gI2),MVWm)*Conj(CpbarFuconjVWmFdPL(gO2,gI2))*
         CpbarFuconjVWmFdPL(gO1,gI2);
   }
   tmp_7093 += tmp_7094;
   result += (-1) * tmp_7093;
   std::complex<double> tmp_7095;
   std::complex<double> tmp_7096;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_7096 += B1(p,MFu(gI2),0)*Conj(CpbarFuVPFuPL(gO2,gI2))*
         CpbarFuVPFuPL(gO1,gI2);
   }
   tmp_7095 += tmp_7096;
   result += (-1) * tmp_7095;
   std::complex<double> tmp_7097;
   std::complex<double> tmp_7098;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_7098 += B1(p,MFu(gI2),MVZ)*Conj(CpbarFuVZFuPL(gO2,gI2))*
         CpbarFuVZFuPL(gO1,gI2);
   }
   tmp_7097 += tmp_7098;
   result += (-1) * tmp_7097;
   std::complex<double> tmp_7099;
   std::complex<double> tmp_7100;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_7100 += B1(p,MFu(gI2),MVZp)*Conj(CpbarFuVZpFuPL(gO2,gI2))*
         CpbarFuVZpFuPL(gO1,gI2);
   }
   tmp_7099 += tmp_7100;
   result += (-1) * tmp_7099;

   return result * oneOver16PiSqr;

}

std::complex<double> CLASSNAME::self_energy_Fu_PL_heavy_rotated(double p , unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   std::complex<double> tmp_7101;
   std::complex<double> tmp_7102;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_7103;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_7103 += B1(p,MFd(gI2),MHpm(gI1))*Conj(CpbarFuconjHpmFdPL(gO2
            ,gI1,gI2))*CpbarFuconjHpmFdPL(gO1,gI1,gI2);
      }
      tmp_7102 += tmp_7103;
   }
   tmp_7101 += tmp_7102;
   result += (-0.5) * tmp_7101;
   std::complex<double> tmp_7104;
   std::complex<double> tmp_7105;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_7106;
      for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
         tmp_7106 += B1(p,MCha(gI1),MSd(gI2))*Conj(CpbarFubarChaSdPL(gO2,
            gI1,gI2))*CpbarFubarChaSdPL(gO1,gI1,gI2);
      }
      tmp_7105 += tmp_7106;
   }
   tmp_7104 += tmp_7105;
   result += (-0.5) * tmp_7104;
   std::complex<double> tmp_7107;
   std::complex<double> tmp_7108;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_7109;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_7109 += B1(p,MFu(gI1),MAh(gI2))*Conj(CpbarFuFuAhPL(gO2,gI1,
            gI2))*CpbarFuFuAhPL(gO1,gI1,gI2);
      }
      tmp_7108 += tmp_7109;
   }
   tmp_7107 += tmp_7108;
   result += (-0.5) * tmp_7107;
   std::complex<double> tmp_7110;
   std::complex<double> tmp_7111;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_7112;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_7112 += B1(p,MFu(gI2),Mhh(gI1))*Conj(CpbarFuhhFuPL(gO2,gI1,
            gI2))*CpbarFuhhFuPL(gO1,gI1,gI2);
      }
      tmp_7111 += tmp_7112;
   }
   tmp_7110 += tmp_7111;
   result += (-0.5) * tmp_7110;
   std::complex<double> tmp_7113;
   std::complex<double> tmp_7114;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_7114 += B1(p,MGlu,MSu(gI1))*Conj(CpbarFuSuGluPL(gO2,gI1,0))*
         CpbarFuSuGluPL(gO1,gI1,0);
   }
   tmp_7113 += tmp_7114;
   result += (-0.6666666666666666) * tmp_7113;
   std::complex<double> tmp_7115;
   std::complex<double> tmp_7116;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_7117;
      for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
         tmp_7117 += B1(p,MChi(gI2),MSu(gI1))*Conj(CpbarFuSuChiPL(gO2,gI1
            ,gI2))*CpbarFuSuChiPL(gO1,gI1,gI2);
      }
      tmp_7116 += tmp_7117;
   }
   tmp_7115 += tmp_7116;
   result += (-0.5) * tmp_7115;
   std::complex<double> tmp_7118;
   std::complex<double> tmp_7119;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_7119 += B1(p,MFd(gI2),MVWm)*Conj(CpbarFuconjVWmFdPR(gO2,gI2))*
         CpbarFuconjVWmFdPR(gO1,gI2);
   }
   tmp_7118 += tmp_7119;
   result += (-1) * tmp_7118;
   std::complex<double> tmp_7120;
   std::complex<double> tmp_7121;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_7121 += B1(p,MFu(gI2),0)*Conj(CpbarFuVPFuPR(gO2,gI2))*
         CpbarFuVPFuPR(gO1,gI2);
   }
   tmp_7120 += tmp_7121;
   result += (-1) * tmp_7120;
   std::complex<double> tmp_7122;
   std::complex<double> tmp_7123;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_7123 += B1(p,MFu(gI2),MVZ)*Conj(CpbarFuVZFuPR(gO2,gI2))*
         CpbarFuVZFuPR(gO1,gI2);
   }
   tmp_7122 += tmp_7123;
   result += (-1) * tmp_7122;
   std::complex<double> tmp_7124;
   std::complex<double> tmp_7125;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_7125 += B1(p,MFu(gI2),MVZp)*Conj(CpbarFuVZpFuPR(gO2,gI2))*
         CpbarFuVZpFuPR(gO1,gI2);
   }
   tmp_7124 += tmp_7125;
   result += (-1) * tmp_7124;

   return result * oneOver16PiSqr;

}

std::complex<double> CLASSNAME::self_energy_Fu_1_heavy(double p , unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   std::complex<double> tmp_7126;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_7127;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_7127 += B0(p,MFd(gI2),MHpm(gI1))*Conj(CpbarUFuconjHpmFdPL(
            gO2,gI1,gI2))*CpbarUFuconjHpmFdPR(gO1,gI1,gI2)*MFd(gI2);
      }
      tmp_7126 += tmp_7127;
   }
   result += tmp_7126;
   std::complex<double> tmp_7128;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_7129;
      std::complex<double> tmp_7130;
      for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
         tmp_7130 += B0(p,MCha(gI1),MSd(gI2))*Conj(CpbarUFubarChaSdPL(gO2
            ,gI1,gI2))*CpbarUFubarChaSdPR(gO1,gI1,gI2);
      }
      tmp_7129 += tmp_7130;
      tmp_7128 += (MCha(gI1)) * tmp_7129;
   }
   result += tmp_7128;
   std::complex<double> tmp_7131;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_7132;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_7132 += B0(p,MFu(gI2),Mhh(gI1))*Conj(CpbarUFuhhFuPL(gO2,gI1,
            gI2))*CpbarUFuhhFuPR(gO1,gI1,gI2)*MFu(gI2);
      }
      tmp_7131 += tmp_7132;
   }
   result += tmp_7131;
   std::complex<double> tmp_7133;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_7134;
      std::complex<double> tmp_7135;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_7135 += B0(p,MFu(gI1),MAh(gI2))*Conj(CpbarUFuFuAhPL(gO2,gI1,
            gI2))*CpbarUFuFuAhPR(gO1,gI1,gI2);
      }
      tmp_7134 += tmp_7135;
      tmp_7133 += (MFu(gI1)) * tmp_7134;
   }
   result += tmp_7133;
   std::complex<double> tmp_7136;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_7137;
      for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
         tmp_7137 += B0(p,MChi(gI2),MSu(gI1))*Conj(CpbarUFuSuChiPL(gO2,
            gI1,gI2))*CpbarUFuSuChiPR(gO1,gI1,gI2)*MChi(gI2);
      }
      tmp_7136 += tmp_7137;
   }
   result += tmp_7136;
   std::complex<double> tmp_7138;
   std::complex<double> tmp_7139;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_7139 += B0(p,MFd(gI2),MVWm)*Conj(CpbarUFuconjVWmFdPR(gO2,gI2))*
         CpbarUFuconjVWmFdPL(gO1,gI2)*MFd(gI2);
   }
   tmp_7138 += tmp_7139;
   result += (-4) * tmp_7138;
   std::complex<double> tmp_7140;
   std::complex<double> tmp_7141;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_7141 += B0(p,MFu(gI2),0)*Conj(CpbarUFuVPFuPR(gO2,gI2))*
         CpbarUFuVPFuPL(gO1,gI2)*MFu(gI2);
   }
   tmp_7140 += tmp_7141;
   result += (-4) * tmp_7140;
   std::complex<double> tmp_7142;
   std::complex<double> tmp_7143;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_7143 += B0(p,MFu(gI2),MVZ)*Conj(CpbarUFuVZFuPR(gO2,gI2))*
         CpbarUFuVZFuPL(gO1,gI2)*MFu(gI2);
   }
   tmp_7142 += tmp_7143;
   result += (-4) * tmp_7142;
   std::complex<double> tmp_7144;
   std::complex<double> tmp_7145;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_7145 += B0(p,MFu(gI2),MVZp)*Conj(CpbarUFuVZpFuPR(gO2,gI2))*
         CpbarUFuVZpFuPL(gO1,gI2)*MFu(gI2);
   }
   tmp_7144 += tmp_7145;
   result += (-4) * tmp_7144;
   std::complex<double> tmp_7146;
   std::complex<double> tmp_7147;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_7147 += B0(p,MGlu,MSu(gI1))*Conj(CpbarUFuSuGluPL(gO2,gI1,0))*
         CpbarUFuSuGluPR(gO1,gI1,0);
   }
   tmp_7146 += tmp_7147;
   result += (1.3333333333333333*MGlu) * tmp_7146;

   return result * oneOver16PiSqr;

}

std::complex<double> CLASSNAME::self_energy_Fu_PR_heavy(double p , unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   std::complex<double> tmp_7148;
   std::complex<double> tmp_7149;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_7150;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_7150 += B1(p,MFd(gI2),MHpm(gI1))*Conj(CpbarUFuconjHpmFdPR(
            gO2,gI1,gI2))*CpbarUFuconjHpmFdPR(gO1,gI1,gI2);
      }
      tmp_7149 += tmp_7150;
   }
   tmp_7148 += tmp_7149;
   result += (-0.5) * tmp_7148;
   std::complex<double> tmp_7151;
   std::complex<double> tmp_7152;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_7153;
      for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
         tmp_7153 += B1(p,MCha(gI1),MSd(gI2))*Conj(CpbarUFubarChaSdPR(gO2
            ,gI1,gI2))*CpbarUFubarChaSdPR(gO1,gI1,gI2);
      }
      tmp_7152 += tmp_7153;
   }
   tmp_7151 += tmp_7152;
   result += (-0.5) * tmp_7151;
   std::complex<double> tmp_7154;
   std::complex<double> tmp_7155;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_7156;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_7156 += B1(p,MFu(gI1),MAh(gI2))*Conj(CpbarUFuFuAhPR(gO2,gI1,
            gI2))*CpbarUFuFuAhPR(gO1,gI1,gI2);
      }
      tmp_7155 += tmp_7156;
   }
   tmp_7154 += tmp_7155;
   result += (-0.5) * tmp_7154;
   std::complex<double> tmp_7157;
   std::complex<double> tmp_7158;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_7159;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_7159 += B1(p,MFu(gI2),Mhh(gI1))*Conj(CpbarUFuhhFuPR(gO2,gI1,
            gI2))*CpbarUFuhhFuPR(gO1,gI1,gI2);
      }
      tmp_7158 += tmp_7159;
   }
   tmp_7157 += tmp_7158;
   result += (-0.5) * tmp_7157;
   std::complex<double> tmp_7160;
   std::complex<double> tmp_7161;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_7161 += B1(p,MGlu,MSu(gI1))*Conj(CpbarUFuSuGluPR(gO2,gI1,0))*
         CpbarUFuSuGluPR(gO1,gI1,0);
   }
   tmp_7160 += tmp_7161;
   result += (-0.6666666666666666) * tmp_7160;
   std::complex<double> tmp_7162;
   std::complex<double> tmp_7163;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_7164;
      for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
         tmp_7164 += B1(p,MChi(gI2),MSu(gI1))*Conj(CpbarUFuSuChiPR(gO2,
            gI1,gI2))*CpbarUFuSuChiPR(gO1,gI1,gI2);
      }
      tmp_7163 += tmp_7164;
   }
   tmp_7162 += tmp_7163;
   result += (-0.5) * tmp_7162;
   std::complex<double> tmp_7165;
   std::complex<double> tmp_7166;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_7166 += B1(p,MFd(gI2),MVWm)*Conj(CpbarUFuconjVWmFdPL(gO2,gI2))*
         CpbarUFuconjVWmFdPL(gO1,gI2);
   }
   tmp_7165 += tmp_7166;
   result += (-1) * tmp_7165;
   std::complex<double> tmp_7167;
   std::complex<double> tmp_7168;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_7168 += B1(p,MFu(gI2),0)*Conj(CpbarUFuVPFuPL(gO2,gI2))*
         CpbarUFuVPFuPL(gO1,gI2);
   }
   tmp_7167 += tmp_7168;
   result += (-1) * tmp_7167;
   std::complex<double> tmp_7169;
   std::complex<double> tmp_7170;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_7170 += B1(p,MFu(gI2),MVZ)*Conj(CpbarUFuVZFuPL(gO2,gI2))*
         CpbarUFuVZFuPL(gO1,gI2);
   }
   tmp_7169 += tmp_7170;
   result += (-1) * tmp_7169;
   std::complex<double> tmp_7171;
   std::complex<double> tmp_7172;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_7172 += B1(p,MFu(gI2),MVZp)*Conj(CpbarUFuVZpFuPL(gO2,gI2))*
         CpbarUFuVZpFuPL(gO1,gI2);
   }
   tmp_7171 += tmp_7172;
   result += (-1) * tmp_7171;

   return result * oneOver16PiSqr;

}

std::complex<double> CLASSNAME::self_energy_Fu_PL_heavy(double p , unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   std::complex<double> tmp_7173;
   std::complex<double> tmp_7174;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_7175;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_7175 += B1(p,MFd(gI2),MHpm(gI1))*Conj(CpbarUFuconjHpmFdPL(
            gO2,gI1,gI2))*CpbarUFuconjHpmFdPL(gO1,gI1,gI2);
      }
      tmp_7174 += tmp_7175;
   }
   tmp_7173 += tmp_7174;
   result += (-0.5) * tmp_7173;
   std::complex<double> tmp_7176;
   std::complex<double> tmp_7177;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_7178;
      for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
         tmp_7178 += B1(p,MCha(gI1),MSd(gI2))*Conj(CpbarUFubarChaSdPL(gO2
            ,gI1,gI2))*CpbarUFubarChaSdPL(gO1,gI1,gI2);
      }
      tmp_7177 += tmp_7178;
   }
   tmp_7176 += tmp_7177;
   result += (-0.5) * tmp_7176;
   std::complex<double> tmp_7179;
   std::complex<double> tmp_7180;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_7181;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_7181 += B1(p,MFu(gI1),MAh(gI2))*Conj(CpbarUFuFuAhPL(gO2,gI1,
            gI2))*CpbarUFuFuAhPL(gO1,gI1,gI2);
      }
      tmp_7180 += tmp_7181;
   }
   tmp_7179 += tmp_7180;
   result += (-0.5) * tmp_7179;
   std::complex<double> tmp_7182;
   std::complex<double> tmp_7183;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_7184;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_7184 += B1(p,MFu(gI2),Mhh(gI1))*Conj(CpbarUFuhhFuPL(gO2,gI1,
            gI2))*CpbarUFuhhFuPL(gO1,gI1,gI2);
      }
      tmp_7183 += tmp_7184;
   }
   tmp_7182 += tmp_7183;
   result += (-0.5) * tmp_7182;
   std::complex<double> tmp_7185;
   std::complex<double> tmp_7186;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_7186 += B1(p,MGlu,MSu(gI1))*Conj(CpbarUFuSuGluPL(gO2,gI1,0))*
         CpbarUFuSuGluPL(gO1,gI1,0);
   }
   tmp_7185 += tmp_7186;
   result += (-0.6666666666666666) * tmp_7185;
   std::complex<double> tmp_7187;
   std::complex<double> tmp_7188;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_7189;
      for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
         tmp_7189 += B1(p,MChi(gI2),MSu(gI1))*Conj(CpbarUFuSuChiPL(gO2,
            gI1,gI2))*CpbarUFuSuChiPL(gO1,gI1,gI2);
      }
      tmp_7188 += tmp_7189;
   }
   tmp_7187 += tmp_7188;
   result += (-0.5) * tmp_7187;
   std::complex<double> tmp_7190;
   std::complex<double> tmp_7191;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_7191 += B1(p,MFd(gI2),MVWm)*Conj(CpbarUFuconjVWmFdPR(gO2,gI2))*
         CpbarUFuconjVWmFdPR(gO1,gI2);
   }
   tmp_7190 += tmp_7191;
   result += (-1) * tmp_7190;
   std::complex<double> tmp_7192;
   std::complex<double> tmp_7193;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_7193 += B1(p,MFu(gI2),0)*Conj(CpbarUFuVPFuPR(gO2,gI2))*
         CpbarUFuVPFuPR(gO1,gI2);
   }
   tmp_7192 += tmp_7193;
   result += (-1) * tmp_7192;
   std::complex<double> tmp_7194;
   std::complex<double> tmp_7195;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_7195 += B1(p,MFu(gI2),MVZ)*Conj(CpbarUFuVZFuPR(gO2,gI2))*
         CpbarUFuVZFuPR(gO1,gI2);
   }
   tmp_7194 += tmp_7195;
   result += (-1) * tmp_7194;
   std::complex<double> tmp_7196;
   std::complex<double> tmp_7197;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_7197 += B1(p,MFu(gI2),MVZp)*Conj(CpbarUFuVZpFuPR(gO2,gI2))*
         CpbarUFuVZpFuPR(gO1,gI2);
   }
   tmp_7196 += tmp_7197;
   result += (-1) * tmp_7196;

   return result * oneOver16PiSqr;

}

std::complex<double> CLASSNAME::tadpole_hh(unsigned gO1) const
{
   std::complex<double> result;

   result += A0(MVWm)*CpUhhbargWmCgWmC(gO1);
   result += A0(MVWm)*CpUhhbargWmgWm(gO1);
   result += A0(MVZ)*CpUhhbargZgZ(gO1);
   result += A0(MVZp)*CpUhhbargZpgZp(gO1);
   result += 4*A0(MVWm)*CpUhhconjVWmVWm(gO1);
   result += 2*A0(MVZp)*CpUhhVZpVZp(gO1);
   result += 2*A0(MVZ)*CpUhhVZVZ(gO1);
   std::complex<double> tmp_7198;
   std::complex<double> tmp_7199;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      tmp_7199 += A0(MHpm(gI1))*CpUhhconjHpmHpm(gO1,gI1,gI1);
   }
   tmp_7198 += tmp_7199;
   result += (-1) * tmp_7198;
   std::complex<double> tmp_7200;
   std::complex<double> tmp_7201;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      tmp_7201 += A0(MSHp0(gI1))*CpUhhconjSHp0SHp0(gO1,gI1,gI1);
   }
   tmp_7200 += tmp_7201;
   result += (-1) * tmp_7200;
   std::complex<double> tmp_7202;
   std::complex<double> tmp_7203;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      tmp_7203 += A0(MSHpp(gI1))*CpUhhconjSHppSHpp(gO1,gI1,gI1);
   }
   tmp_7202 += tmp_7203;
   result += (-1) * tmp_7202;
   std::complex<double> tmp_7204;
   std::complex<double> tmp_7205;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      tmp_7205 += A0(MSSI0(gI1))*CpUhhconjSSI0SSI0(gO1,gI1,gI1);
   }
   tmp_7204 += tmp_7205;
   result += (-1) * tmp_7204;
   std::complex<double> tmp_7206;
   std::complex<double> tmp_7207;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      tmp_7207 += A0(MCha(gI1))*(CpUhhbarChaChaPL(gO1,gI1,gI1) +
         CpUhhbarChaChaPR(gO1,gI1,gI1))*MCha(gI1);
   }
   tmp_7206 += tmp_7207;
   result += (2) * tmp_7206;
   std::complex<double> tmp_7208;
   std::complex<double> tmp_7209;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      tmp_7209 += A0(MChaI(gI1))*(CpUhhbarChaIChaIPL(gO1,gI1,gI1) +
         CpUhhbarChaIChaIPR(gO1,gI1,gI1))*MChaI(gI1);
   }
   tmp_7208 += tmp_7209;
   result += (2) * tmp_7208;
   std::complex<double> tmp_7210;
   std::complex<double> tmp_7211;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      tmp_7211 += A0(MAh(gI1))*CpUhhAhAh(gO1,gI1,gI1);
   }
   tmp_7210 += tmp_7211;
   result += (-0.5) * tmp_7210;
   std::complex<double> tmp_7212;
   std::complex<double> tmp_7213;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      tmp_7213 += A0(MSv(gI1))*CpUhhconjSvSv(gO1,gI1,gI1);
   }
   tmp_7212 += tmp_7213;
   result += (-1) * tmp_7212;
   std::complex<double> tmp_7214;
   std::complex<double> tmp_7215;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      tmp_7215 += A0(Mhh(gI1))*CpUhhhhhh(gO1,gI1,gI1);
   }
   tmp_7214 += tmp_7215;
   result += (-0.5) * tmp_7214;
   std::complex<double> tmp_7216;
   std::complex<double> tmp_7217;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      tmp_7217 += A0(MFd(gI1))*(CpUhhbarFdFdPL(gO1,gI1,gI1) + CpUhhbarFdFdPR
         (gO1,gI1,gI1))*MFd(gI1);
   }
   tmp_7216 += tmp_7217;
   result += (6) * tmp_7216;
   std::complex<double> tmp_7218;
   std::complex<double> tmp_7219;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      tmp_7219 += A0(MFDX(gI1))*(CpUhhbarFDXFDXPL(gO1,gI1,gI1) +
         CpUhhbarFDXFDXPR(gO1,gI1,gI1))*MFDX(gI1);
   }
   tmp_7218 += tmp_7219;
   result += (6) * tmp_7218;
   std::complex<double> tmp_7220;
   std::complex<double> tmp_7221;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      tmp_7221 += A0(MFe(gI1))*(CpUhhbarFeFePL(gO1,gI1,gI1) + CpUhhbarFeFePR
         (gO1,gI1,gI1))*MFe(gI1);
   }
   tmp_7220 += tmp_7221;
   result += (2) * tmp_7220;
   std::complex<double> tmp_7222;
   std::complex<double> tmp_7223;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      tmp_7223 += A0(MFu(gI1))*(CpUhhbarFuFuPL(gO1,gI1,gI1) + CpUhhbarFuFuPR
         (gO1,gI1,gI1))*MFu(gI1);
   }
   tmp_7222 += tmp_7223;
   result += (6) * tmp_7222;
   std::complex<double> tmp_7224;
   std::complex<double> tmp_7225;
   for (unsigned gI1 = 0; gI1 < 4; ++gI1) {
      tmp_7225 += A0(MSHI0(gI1))*CpUhhconjSHI0SHI0(gO1,gI1,gI1);
   }
   tmp_7224 += tmp_7225;
   result += (-1) * tmp_7224;
   std::complex<double> tmp_7226;
   std::complex<double> tmp_7227;
   for (unsigned gI1 = 0; gI1 < 4; ++gI1) {
      tmp_7227 += A0(MSHIp(gI1))*CpUhhconjSHIpSHIp(gO1,gI1,gI1);
   }
   tmp_7226 += tmp_7227;
   result += (-1) * tmp_7226;
   std::complex<double> tmp_7228;
   for (unsigned gI1 = 0; gI1 < 4; ++gI1) {
      tmp_7228 += A0(MChiI(gI1))*(CpUhhChiIChiIPL(gO1,gI1,gI1) +
         CpUhhChiIChiIPR(gO1,gI1,gI1))*MChiI(gI1);
   }
   result += tmp_7228;
   std::complex<double> tmp_7229;
   std::complex<double> tmp_7230;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_7230 += A0(MSd(gI1))*CpUhhconjSdSd(gO1,gI1,gI1);
   }
   tmp_7229 += tmp_7230;
   result += (-3) * tmp_7229;
   std::complex<double> tmp_7231;
   std::complex<double> tmp_7232;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_7232 += A0(MSDX(gI1))*CpUhhconjSDXSDX(gO1,gI1,gI1);
   }
   tmp_7231 += tmp_7232;
   result += (-3) * tmp_7231;
   std::complex<double> tmp_7233;
   std::complex<double> tmp_7234;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_7234 += A0(MSe(gI1))*CpUhhconjSeSe(gO1,gI1,gI1);
   }
   tmp_7233 += tmp_7234;
   result += (-1) * tmp_7233;
   std::complex<double> tmp_7235;
   std::complex<double> tmp_7236;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_7236 += A0(MSu(gI1))*CpUhhconjSuSu(gO1,gI1,gI1);
   }
   tmp_7235 += tmp_7236;
   result += (-3) * tmp_7235;
   std::complex<double> tmp_7237;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_7237 += A0(MChi(gI1))*(CpUhhChiChiPL(gO1,gI1,gI1) + CpUhhChiChiPR(
         gO1,gI1,gI1))*MChi(gI1);
   }
   result += tmp_7237;

   return result * oneOver16PiSqr;

}


void CLASSNAME::calculate_MSu_3rd_generation(double& msf1, double& msf2, double& theta) const {
   sfermions::Mass_data sf_data;
   sf_data.ml2 = Re(mq2(2,2));
   sf_data.mr2 = Re(mu2(2,2));
   sf_data.yf  = Re(Yu(2,2));
   sf_data.vd  = Re(vd);
   sf_data.vu  = Re(vu);
   sf_data.gY  = 0.7745966692414834*g1;
   sf_data.g2  = g2;
   sf_data.Tyf = Re(TYu(2,2));
   sf_data.mu  = Re(0.7071067811865475*vs*Lambdax);
   sf_data.T3  = sfermions::Isospin[sfermions::up];
   sf_data.Yl  = sfermions::Hypercharge_left[sfermions::up];
   sf_data.Yr  = sfermions::Hypercharge_right[sfermions::up];

   Eigen::Array<double,2,1> msf;

   theta = sfermions::diagonalize_sfermions_2x2(sf_data, msf);
   msf1  = msf(0);
   msf2  = msf(1);
}

void CLASSNAME::calculate_MSd_3rd_generation(double& msf1, double& msf2, double& theta) const {
   sfermions::Mass_data sf_data;
   sf_data.ml2 = Re(mq2(2,2));
   sf_data.mr2 = Re(md2(2,2));
   sf_data.yf  = Re(Yd(2,2));
   sf_data.vd  = Re(vd);
   sf_data.vu  = Re(vu);
   sf_data.gY  = 0.7745966692414834*g1;
   sf_data.g2  = g2;
   sf_data.Tyf = Re(TYd(2,2));
   sf_data.mu  = Re(0.7071067811865475*vs*Lambdax);
   sf_data.T3  = sfermions::Isospin[sfermions::down];
   sf_data.Yl  = sfermions::Hypercharge_left[sfermions::down];
   sf_data.Yr  = sfermions::Hypercharge_right[sfermions::down];

   Eigen::Array<double,2,1> msf;

   theta = sfermions::diagonalize_sfermions_2x2(sf_data, msf);
   msf1  = msf(0);
   msf2  = msf(1);
}

void CLASSNAME::calculate_MSv_3rd_generation(double& msf1, double& msf2, double& theta) const {
   sfermions::Mass_data sf_data;
   sf_data.ml2 = Re(ml2(2,2));
   sf_data.mr2 = 0.;
   sf_data.yf  = 0.;
   sf_data.vd  = Re(vd);
   sf_data.vu  = Re(vu);
   sf_data.gY  = 0.7745966692414834*g1;
   sf_data.g2  = g2;
   sf_data.Tyf = 0.;
   sf_data.mu  = Re(0.7071067811865475*vs*Lambdax);
   sf_data.T3  = sfermions::Isospin[sfermions::neutrino];
   sf_data.Yl  = sfermions::Hypercharge_left[sfermions::neutrino];
   sf_data.Yr  = sfermions::Hypercharge_right[sfermions::neutrino];

   Eigen::Array<double,2,1> msf;

   theta = sfermions::diagonalize_sfermions_2x2(sf_data, msf);
   msf1  = msf(0);
   msf2  = msf(1);
}

void CLASSNAME::calculate_MSe_3rd_generation(double& msf1, double& msf2, double& theta) const {
   sfermions::Mass_data sf_data;
   sf_data.ml2 = Re(ml2(2,2));
   sf_data.mr2 = Re(me2(2,2));
   sf_data.yf  = Re(Ye(2,2));
   sf_data.vd  = Re(vd);
   sf_data.vu  = Re(vu);
   sf_data.gY  = 0.7745966692414834*g1;
   sf_data.g2  = g2;
   sf_data.Tyf = Re(TYe(2,2));
   sf_data.mu  = Re(0.7071067811865475*vs*Lambdax);
   sf_data.T3  = sfermions::Isospin[sfermions::electron];
   sf_data.Yl  = sfermions::Hypercharge_left[sfermions::electron];
   sf_data.Yr  = sfermions::Hypercharge_right[sfermions::electron];

   Eigen::Array<double,2,1> msf;

   theta = sfermions::diagonalize_sfermions_2x2(sf_data, msf);
   msf1  = msf(0);
   msf2  = msf(1);
}


Eigen::Matrix<double,3,3> CLASSNAME::self_energy_hh_2loop() const
{
   using namespace flexiblesusy::mssm_twoloophiggs;
   using namespace flexiblesusy::nmssm_twoloophiggs;

   // calculate 3rd generation sfermion masses and mixing angles
   double mst_1, mst_2, theta_t;
   double msb_1, msb_2, theta_b;
   double mstau_1, mstau_2, theta_tau;
   double msnu_1, msnu_2, theta_nu;

   calculate_MSu_3rd_generation(mst_1, mst_2, theta_t);
   calculate_MSd_3rd_generation(msb_1, msb_2, theta_b);
   calculate_MSe_3rd_generation(mstau_1, mstau_2, theta_tau);
   calculate_MSv_3rd_generation(msnu_1, msnu_2, theta_nu);

   const double mst1sq = Sqr(mst_1), mst2sq = Sqr(mst_2);
   const double msb1sq = Sqr(msb_1), msb2sq = Sqr(msb_2);
   const double mstau1sq = Sqr(mstau_1), mstau2sq = Sqr(mstau_2);
   const double msnusq = Sqr(msnu_2);
   const double sxt = Sin(theta_t), cxt = Cos(theta_t);
   const double sxb = Sin(theta_b), cxb = Cos(theta_b);
   const double sintau = Sin(theta_tau), costau = Cos(theta_tau);
   const double gs = g3;
   const double as = Sqr(gs) / (4.0 * Pi);
   const double rmt = MFu(2);
   const double rmtsq = Sqr(rmt);
   const double scalesq = Sqr(get_scale());
   const double vev2 = Sqr(vd) + Sqr(vu);
   const double tanb = vu/vd;
   const double amu = Re(-0.7071067811865475*vs*Lambdax);
   const double mg = MGlu;
   const double mAsq = (0.7071067811865475*vs*(Sqr(vd) + Sqr(vu))*TLambdax)/(vd*vu);
   const double cotb = 1.0 / tanb;
   const double rmb = MFd(2);
   const double rmbsq = Sqr(rmb);
   const double rmtausq = Sqr(MFe(2));
   const double lam = Re(Lambdax);
   const double svev = Abs(amu / lam);

   Eigen::Matrix<double,3,3> self_energy_2l(Eigen::Matrix<double,3,3>::Zero());

   if (HIGGS_2LOOP_CORRECTION_AT_AS) {
      self_energy_2l += self_energy_higgs_2loop_at_as_nmssm(
         rmt, mg, mst1sq, mst2sq, sxt, cxt,
         scalesq, tanb, vev2, lam, svev, as, amu);
   }

   if (HIGGS_2LOOP_CORRECTION_AB_AS) {
      self_energy_2l += self_energy_higgs_2loop_ab_as_nmssm(
         rmb, mg, msb1sq, msb2sq, sxb, cxb,
         scalesq, cotb, vev2, lam, svev, as, amu);
   }

   // Corrections as in MSSM, not corrected for NMSSM,
   // should be OK for MSSM states when S state is close to decoupled

   if (HIGGS_2LOOP_CORRECTION_AT_AT) {
      self_energy_2l.topLeftCorner<2,2>() += self_energy_higgs_2loop_at_at_mssm(
         rmtsq, rmbsq, mAsq, mst1sq, mst2sq, msb1sq,
         msb2sq, sxt, cxt, sxb, cxb, scalesq, amu, tanb, vev2);
   }

   if (HIGGS_2LOOP_CORRECTION_ATAU_ATAU) {
      self_energy_2l.topLeftCorner<2,2>() += self_energy_higgs_2loop_atau_atau_mssm(
         rmtausq, mAsq, msnusq, mstau1sq, mstau2sq, sintau,
         costau, scalesq, amu, tanb, vev2);
   }

   return self_energy_2l;
}

Eigen::Matrix<double,3,3> CLASSNAME::self_energy_Ah_2loop() const
{
   using namespace flexiblesusy::mssm_twoloophiggs;
   using namespace flexiblesusy::nmssm_twoloophiggs;

   // calculate 3rd generation sfermion masses and mixing angles
   double mst_1, mst_2, theta_t;
   double msb_1, msb_2, theta_b;
   double mstau_1, mstau_2, theta_tau;
   double msnu_1, msnu_2, theta_nu;

   calculate_MSu_3rd_generation(mst_1, mst_2, theta_t);
   calculate_MSd_3rd_generation(msb_1, msb_2, theta_b);
   calculate_MSe_3rd_generation(mstau_1, mstau_2, theta_tau);
   calculate_MSv_3rd_generation(msnu_1, msnu_2, theta_nu);

   const double mst1sq = Sqr(mst_1), mst2sq = Sqr(mst_2);
   const double msb1sq = Sqr(msb_1), msb2sq = Sqr(msb_2);
   const double mstau1sq = Sqr(mstau_1), mstau2sq = Sqr(mstau_2);
   const double msnusq = Sqr(msnu_2);
   const double sxt = Sin(theta_t), cxt = Cos(theta_t);
   const double sxb = Sin(theta_b), cxb = Cos(theta_b);
   const double sintau = Sin(theta_tau), costau = Cos(theta_tau);
   const double gs = g3;
   const double as = Sqr(gs) / (4.0 * Pi);
   const double rmt = MFu(2);
   const double rmtsq = Sqr(rmt);
   const double scalesq = Sqr(get_scale());
   const double vev2 = Sqr(vd) + Sqr(vu);
   const double tanb = vu/vd;
   const double amu = Re(-0.7071067811865475*vs*Lambdax);
   const double mg = MGlu;
   const double mAsq = (0.7071067811865475*vs*(Sqr(vd) + Sqr(vu))*TLambdax)/(vd*vu);
   const double cotb = 1.0 / tanb;
   const double rmb = MFd(2);
   const double rmbsq = Sqr(rmb);
   const double rmtausq = Sqr(MFe(2));
   const double lam = Re(Lambdax);
   const double svev = Abs(amu / lam);

   Eigen::Matrix<double,3,3> self_energy_2l(Eigen::Matrix<double,3,3>::Zero());

   if (HIGGS_2LOOP_CORRECTION_AT_AS) {
      self_energy_2l += self_energy_pseudoscalar_2loop_at_as_nmssm(
         rmt, mg, mst1sq, mst2sq, sxt, cxt,
         scalesq, tanb, vev2, lam, svev, as, amu);
   }

   if (HIGGS_2LOOP_CORRECTION_AB_AS) {
      self_energy_2l += self_energy_pseudoscalar_2loop_ab_as_nmssm(
         rmb, mg, msb1sq, msb2sq, sxb, cxb,
         scalesq, cotb, vev2, lam, svev, as, amu);
   }

   // Corrections as in MSSM, not corrected for NMSSM,
   // should be OK for MSSM states when S state is close to decoupled

   if (HIGGS_2LOOP_CORRECTION_AT_AT) {
      self_energy_2l.topLeftCorner<2,2>() += self_energy_pseudoscalar_2loop_at_at_mssm(
         rmtsq, rmbsq, mAsq, mst1sq, mst2sq, msb1sq, msb2sq,
         sxt, cxt, sxb, cxb, scalesq, amu, tanb, vev2);
   }

   if (HIGGS_2LOOP_CORRECTION_ATAU_ATAU) {
      self_energy_2l.topLeftCorner<2,2>() += self_energy_pseudoscalar_2loop_atau_atau_mssm(
         rmtausq, mAsq, msnusq, mstau1sq, mstau2sq, sintau,
         costau, scalesq, amu, tanb, vev2);
   }

   return self_energy_2l;
}



Eigen::Matrix<double,3,1> CLASSNAME::tadpole_hh_2loop() const
{
   using namespace flexiblesusy::mssm_twoloophiggs;
   using namespace flexiblesusy::nmssm_twoloophiggs;

   // calculate 3rd generation sfermion masses and mixing angles
   double mst_1, mst_2, theta_t;
   double msb_1, msb_2, theta_b;
   double mstau_1, mstau_2, theta_tau;
   double msnu_1, msnu_2, theta_nu;

   calculate_MSu_3rd_generation(mst_1, mst_2, theta_t);
   calculate_MSd_3rd_generation(msb_1, msb_2, theta_b);
   calculate_MSe_3rd_generation(mstau_1, mstau_2, theta_tau);
   calculate_MSv_3rd_generation(msnu_1, msnu_2, theta_nu);

   const double mst1sq = Sqr(mst_1), mst2sq = Sqr(mst_2);
   const double msb1sq = Sqr(msb_1), msb2sq = Sqr(msb_2);
   const double mstau1sq = Sqr(mstau_1), mstau2sq = Sqr(mstau_2);
   const double msnusq = Sqr(msnu_2);
   const double sxt = Sin(theta_t), cxt = Cos(theta_t);
   const double sxb = Sin(theta_b), cxb = Cos(theta_b);
   const double sintau = Sin(theta_tau), costau = Cos(theta_tau);
   const double gs = g3;
   const double rmtsq = Sqr(MFu(2));
   const double scalesq = Sqr(get_scale());
   const double vev2 = Sqr(vd) + Sqr(vu);
   const double tanb = vu/vd;
   const double amu = Re(-0.7071067811865475*vs*Lambdax);
   const double mg = MGlu;
   const double mAsq = (0.7071067811865475*vs*(Sqr(vd) + Sqr(vu))*TLambdax)/(vd*vu);
   const double cotbeta = 1.0 / tanb;
   const double rmbsq = Sqr(MFd(2));
   const double rmtausq = Sqr(MFe(2));
   const double lam = Re(Lambdax);
   const double svev = Abs(amu / lam);

   Eigen::Matrix<double,3,1> tadpole_2l(Eigen::Matrix<double,3,1>::Zero());

   if (HIGGS_2LOOP_CORRECTION_AT_AS) {
      tadpole_2l += tadpole_higgs_2loop_at_as_nmssm(
         rmtsq, mg, mst1sq, mst2sq, sxt, cxt, scalesq,
         amu, tanb, vev2, gs, svev);
   }

   if (HIGGS_2LOOP_CORRECTION_AT_AT) {
      tadpole_2l.head<2>() += tadpole_higgs_2loop_at_at_mssm(
         rmtsq, rmbsq, mAsq, mst1sq, mst2sq, msb1sq, msb2sq,
         sxt, cxt, sxb, cxb, scalesq, amu, tanb, vev2);
   }

   if (HIGGS_2LOOP_CORRECTION_AB_AS) {
      tadpole_2l += tadpole_higgs_2loop_ab_as_nmssm(
         rmbsq, mg, msb1sq, msb2sq, sxb, cxb, scalesq,
         amu, cotbeta, vev2, gs, svev);
   }

   if (HIGGS_2LOOP_CORRECTION_ATAU_ATAU) {
      tadpole_2l.head<2>() += tadpole_higgs_2loop_atau_atau_mssm(
         rmtausq, mAsq, msnusq, mstau1sq, mstau2sq, sintau,
         costau, scalesq, amu, tanb, vev2);
   }

   tadpole_2l(0) *= vd;
   tadpole_2l(1) *= vu;
   tadpole_2l(2) *= vs;

   return tadpole_2l;
}




void CLASSNAME::calculate_MVG_pole()
{
   // diagonalization with high precision
   unsigned iteration = 0;
   double diff = 0.0;
   decltype(MVG) old_MVG(MVG), new_MVG(MVG);

   do {
      PHYSICAL(MVG) = 0.;

      new_MVG = PHYSICAL(MVG);
      diff = MaxRelDiff(new_MVG, old_MVG);
      old_MVG = new_MVG;
      iteration++;
   } while (diff > precision
            && iteration < number_of_mass_iterations);

   if (diff > precision)
      problems.flag_no_pole_mass_convergence(E6SSMtower_info::VG);
   else
      problems.unflag_no_pole_mass_convergence(E6SSMtower_info::VG);
}

void CLASSNAME::calculate_MGlu_pole()
{
   // diagonalization with high precision
   unsigned iteration = 0;
   double diff = 0.0;
   decltype(MGlu) old_MGlu(MGlu), new_MGlu(MGlu);

   do {
      const double M_tree(MGlu);
      const double p = old_MGlu;
      const double self_energy_1  = Re(self_energy_Glu_1(p));
      const double self_energy_PL = Re(self_energy_Glu_PL(p));
      const double self_energy_PR = Re(self_energy_Glu_PR(p));
      const auto M_loop = M_tree - self_energy_1 - M_tree * (
         self_energy_PL + self_energy_PR);
      PHYSICAL(MGlu) = calculate_singlet_mass(M_loop);

      new_MGlu = PHYSICAL(MGlu);
      diff = MaxRelDiff(new_MGlu, old_MGlu);
      old_MGlu = new_MGlu;
      iteration++;
   } while (diff > precision
            && iteration < number_of_mass_iterations);

   if (diff > precision)
      problems.flag_no_pole_mass_convergence(E6SSMtower_info::Glu);
   else
      problems.unflag_no_pole_mass_convergence(E6SSMtower_info::Glu);
}

void CLASSNAME::calculate_MFv_pole()
{
   // diagonalization with high precision
   unsigned iteration = 0;
   double diff = 0.0;
   decltype(MFv) old_MFv(MFv), new_MFv(MFv);

   do {
      PHYSICAL(MFv).setConstant(0.);

      new_MFv = PHYSICAL(MFv);
      diff = MaxRelDiff(new_MFv, old_MFv);
      old_MFv = new_MFv;
      iteration++;
   } while (diff > precision
            && iteration < number_of_mass_iterations);

   if (diff > precision)
      problems.flag_no_pole_mass_convergence(E6SSMtower_info::Fv);
   else
      problems.unflag_no_pole_mass_convergence(E6SSMtower_info::Fv);
}

void CLASSNAME::calculate_MChaP_pole()
{
   // diagonalization with high precision
   unsigned iteration = 0;
   double diff = 0.0;
   decltype(MChaP) old_MChaP(MChaP), new_MChaP(MChaP);

   do {
      const double M_tree(MChaP);
      const double p = old_MChaP;
      const double self_energy_1  = Re(self_energy_ChaP_1(p));
      const double self_energy_PL = Re(self_energy_ChaP_PL(p));
      const double self_energy_PR = Re(self_energy_ChaP_PR(p));
      const auto M_loop = M_tree - self_energy_1 - M_tree * (
         self_energy_PL + self_energy_PR);
      PHYSICAL(MChaP) = calculate_singlet_mass(M_loop);

      new_MChaP = PHYSICAL(MChaP);
      diff = MaxRelDiff(new_MChaP, old_MChaP);
      old_MChaP = new_MChaP;
      iteration++;
   } while (diff > precision
            && iteration < number_of_mass_iterations);

   if (diff > precision)
      problems.flag_no_pole_mass_convergence(E6SSMtower_info::ChaP);
   else
      problems.unflag_no_pole_mass_convergence(E6SSMtower_info::ChaP);
}

void CLASSNAME::calculate_MVP_pole()
{
   // diagonalization with high precision
   unsigned iteration = 0;
   double diff = 0.0;
   decltype(MVP) old_MVP(MVP), new_MVP(MVP);

   do {
      PHYSICAL(MVP) = 0.;

      new_MVP = PHYSICAL(MVP);
      diff = MaxRelDiff(new_MVP, old_MVP);
      old_MVP = new_MVP;
      iteration++;
   } while (diff > precision
            && iteration < number_of_mass_iterations);

   if (diff > precision)
      problems.flag_no_pole_mass_convergence(E6SSMtower_info::VP);
   else
      problems.unflag_no_pole_mass_convergence(E6SSMtower_info::VP);
}

void CLASSNAME::calculate_MVZ_pole()
{
   if (!force_output && problems.is_tachyon(E6SSMtower_info::VZ))
      return;

   // diagonalization with high precision
   unsigned iteration = 0;
   double diff = 0.0;
   decltype(MVZ) old_MVZ(MVZ), new_MVZ(MVZ);

   do {
      const double M_tree(Sqr(MVZ));
      const double p = old_MVZ;
      const double self_energy = Re(self_energy_VZ(p));
      const double mass_sqr = M_tree - self_energy;

      if (mass_sqr < 0.)
         problems.flag_tachyon(E6SSMtower_info::VZ);

      PHYSICAL(MVZ) = AbsSqrt(mass_sqr);

      new_MVZ = PHYSICAL(MVZ);
      diff = MaxRelDiff(new_MVZ, old_MVZ);
      old_MVZ = new_MVZ;
      iteration++;
   } while (diff > precision
            && iteration < number_of_mass_iterations);

   if (diff > precision)
      problems.flag_no_pole_mass_convergence(E6SSMtower_info::VZ);
   else
      problems.unflag_no_pole_mass_convergence(E6SSMtower_info::VZ);
}

void CLASSNAME::calculate_MVZp_pole()
{
   if (!force_output && problems.is_tachyon(E6SSMtower_info::VZp))
      return;

   // diagonalization with high precision
   unsigned iteration = 0;
   double diff = 0.0;
   decltype(MVZp) old_MVZp(MVZp), new_MVZp(MVZp);

   do {
      const double M_tree(Sqr(MVZp));
      const double p = old_MVZp;
      const double self_energy = Re(self_energy_VZp(p));
      const double mass_sqr = M_tree - self_energy;

      if (mass_sqr < 0.)
         problems.flag_tachyon(E6SSMtower_info::VZp);

      PHYSICAL(MVZp) = AbsSqrt(mass_sqr);

      new_MVZp = PHYSICAL(MVZp);
      diff = MaxRelDiff(new_MVZp, old_MVZp);
      old_MVZp = new_MVZp;
      iteration++;
   } while (diff > precision
            && iteration < number_of_mass_iterations);

   if (diff > precision)
      problems.flag_no_pole_mass_convergence(E6SSMtower_info::VZp);
   else
      problems.unflag_no_pole_mass_convergence(E6SSMtower_info::VZp);
}

void CLASSNAME::calculate_MSd_pole()
{
   if (!force_output && problems.is_tachyon(E6SSMtower_info::Sd))
      return;

   // diagonalization with high precision
   unsigned iteration = 0;
   double diff = 0.0;
   decltype(MSd) old_MSd(MSd), new_MSd(MSd);

   do {
      Eigen::Matrix<double,6,6> self_energy;
      const Eigen::Matrix<double,6,6> M_tree(get_mass_matrix_Sd());

      for (unsigned es = 0; es < 6; ++es) {
         const double p = Abs(old_MSd(es));
         for (unsigned i1 = 0; i1 < 6; ++i1) {
            for (unsigned i2 = i1; i2 < 6; ++i2) {
               self_energy(i1,i2) = Re(self_energy_Sd(p,i1,i2
                  ));
            }
         }

         Symmetrize(self_energy);
         const Eigen::Matrix<double,6,6> M_loop(M_tree -
            self_energy);
         Eigen::Array<double,6,1> eigen_values;
         Eigen::Matrix<double,6,6> mix_ZD;
         #ifdef CHECK_EIGENVALUE_ERROR
            double eigenvalue_error;
            fs_diagonalize_hermitian(M_loop, eigen_values,
               mix_ZD, eigenvalue_error);
            problems.flag_bad_mass(E6SSMtower_info::Sd,
               eigenvalue_error > precision * Abs(eigen_values(0)));
         #else
            fs_diagonalize_hermitian(M_loop, eigen_values,
               mix_ZD);
         #endif

         PHYSICAL(MSd(es)) = SignedAbsSqrt(eigen_values(es));
         if (es == 0)
            PHYSICAL(ZD) = mix_ZD;
      }

      new_MSd = PHYSICAL(MSd);
      diff = MaxRelDiff(new_MSd, old_MSd);
      old_MSd = new_MSd;
      iteration++;
   } while (diff > precision
            && iteration < number_of_mass_iterations);

   if (diff > precision)
      problems.flag_no_pole_mass_convergence(E6SSMtower_info::Sd);
   else
      problems.unflag_no_pole_mass_convergence(E6SSMtower_info::Sd);
}

void CLASSNAME::calculate_MSv_pole()
{
   if (!force_output && problems.is_tachyon(E6SSMtower_info::Sv))
      return;

   // diagonalization with high precision
   unsigned iteration = 0;
   double diff = 0.0;
   decltype(MSv) old_MSv(MSv), new_MSv(MSv);

   do {
      Eigen::Matrix<double,3,3> self_energy;
      const Eigen::Matrix<double,3,3> M_tree(get_mass_matrix_Sv());

      for (unsigned es = 0; es < 3; ++es) {
         const double p = Abs(old_MSv(es));
         for (unsigned i1 = 0; i1 < 3; ++i1) {
            for (unsigned i2 = i1; i2 < 3; ++i2) {
               self_energy(i1,i2) = Re(self_energy_Sv(p,i1,i2
                  ));
            }
         }

         Symmetrize(self_energy);
         const Eigen::Matrix<double,3,3> M_loop(M_tree -
            self_energy);
         Eigen::Array<double,3,1> eigen_values;
         Eigen::Matrix<double,3,3> mix_ZV;
         #ifdef CHECK_EIGENVALUE_ERROR
            double eigenvalue_error;
            fs_diagonalize_hermitian(M_loop, eigen_values,
               mix_ZV, eigenvalue_error);
            problems.flag_bad_mass(E6SSMtower_info::Sv,
               eigenvalue_error > precision * Abs(eigen_values(0)));
         #else
            fs_diagonalize_hermitian(M_loop, eigen_values,
               mix_ZV);
         #endif

         PHYSICAL(MSv(es)) = SignedAbsSqrt(eigen_values(es));
         if (es == 0)
            PHYSICAL(ZV) = mix_ZV;
      }

      new_MSv = PHYSICAL(MSv);
      diff = MaxRelDiff(new_MSv, old_MSv);
      old_MSv = new_MSv;
      iteration++;
   } while (diff > precision
            && iteration < number_of_mass_iterations);

   if (diff > precision)
      problems.flag_no_pole_mass_convergence(E6SSMtower_info::Sv);
   else
      problems.unflag_no_pole_mass_convergence(E6SSMtower_info::Sv);
}

void CLASSNAME::calculate_MSu_pole()
{
   if (!force_output && problems.is_tachyon(E6SSMtower_info::Su))
      return;

   // diagonalization with high precision
   unsigned iteration = 0;
   double diff = 0.0;
   decltype(MSu) old_MSu(MSu), new_MSu(MSu);

   do {
      Eigen::Matrix<double,6,6> self_energy;
      const Eigen::Matrix<double,6,6> M_tree(get_mass_matrix_Su());

      for (unsigned es = 0; es < 6; ++es) {
         const double p = Abs(old_MSu(es));
         for (unsigned i1 = 0; i1 < 6; ++i1) {
            for (unsigned i2 = i1; i2 < 6; ++i2) {
               self_energy(i1,i2) = Re(self_energy_Su(p,i1,i2
                  ));
            }
         }

         Symmetrize(self_energy);
         const Eigen::Matrix<double,6,6> M_loop(M_tree -
            self_energy);
         Eigen::Array<double,6,1> eigen_values;
         Eigen::Matrix<double,6,6> mix_ZU;
         #ifdef CHECK_EIGENVALUE_ERROR
            double eigenvalue_error;
            fs_diagonalize_hermitian(M_loop, eigen_values,
               mix_ZU, eigenvalue_error);
            problems.flag_bad_mass(E6SSMtower_info::Su,
               eigenvalue_error > precision * Abs(eigen_values(0)));
         #else
            fs_diagonalize_hermitian(M_loop, eigen_values,
               mix_ZU);
         #endif

         PHYSICAL(MSu(es)) = SignedAbsSqrt(eigen_values(es));
         if (es == 0)
            PHYSICAL(ZU) = mix_ZU;
      }

      new_MSu = PHYSICAL(MSu);
      diff = MaxRelDiff(new_MSu, old_MSu);
      old_MSu = new_MSu;
      iteration++;
   } while (diff > precision
            && iteration < number_of_mass_iterations);

   if (diff > precision)
      problems.flag_no_pole_mass_convergence(E6SSMtower_info::Su);
   else
      problems.unflag_no_pole_mass_convergence(E6SSMtower_info::Su);
}

void CLASSNAME::calculate_MSe_pole()
{
   if (!force_output && problems.is_tachyon(E6SSMtower_info::Se))
      return;

   // diagonalization with high precision
   unsigned iteration = 0;
   double diff = 0.0;
   decltype(MSe) old_MSe(MSe), new_MSe(MSe);

   do {
      Eigen::Matrix<double,6,6> self_energy;
      const Eigen::Matrix<double,6,6> M_tree(get_mass_matrix_Se());

      for (unsigned es = 0; es < 6; ++es) {
         const double p = Abs(old_MSe(es));
         for (unsigned i1 = 0; i1 < 6; ++i1) {
            for (unsigned i2 = i1; i2 < 6; ++i2) {
               self_energy(i1,i2) = Re(self_energy_Se(p,i1,i2
                  ));
            }
         }

         Symmetrize(self_energy);
         const Eigen::Matrix<double,6,6> M_loop(M_tree -
            self_energy);
         Eigen::Array<double,6,1> eigen_values;
         Eigen::Matrix<double,6,6> mix_ZE;
         #ifdef CHECK_EIGENVALUE_ERROR
            double eigenvalue_error;
            fs_diagonalize_hermitian(M_loop, eigen_values,
               mix_ZE, eigenvalue_error);
            problems.flag_bad_mass(E6SSMtower_info::Se,
               eigenvalue_error > precision * Abs(eigen_values(0)));
         #else
            fs_diagonalize_hermitian(M_loop, eigen_values,
               mix_ZE);
         #endif

         PHYSICAL(MSe(es)) = SignedAbsSqrt(eigen_values(es));
         if (es == 0)
            PHYSICAL(ZE) = mix_ZE;
      }

      new_MSe = PHYSICAL(MSe);
      diff = MaxRelDiff(new_MSe, old_MSe);
      old_MSe = new_MSe;
      iteration++;
   } while (diff > precision
            && iteration < number_of_mass_iterations);

   if (diff > precision)
      problems.flag_no_pole_mass_convergence(E6SSMtower_info::Se);
   else
      problems.unflag_no_pole_mass_convergence(E6SSMtower_info::Se);
}

void CLASSNAME::calculate_MSDX_pole()
{
   if (!force_output && problems.is_tachyon(E6SSMtower_info::SDX))
      return;

   // diagonalization with high precision
   unsigned iteration = 0;
   double diff = 0.0;
   decltype(MSDX) old_MSDX(MSDX), new_MSDX(MSDX);

   do {
      Eigen::Matrix<double,6,6> self_energy;
      const Eigen::Matrix<double,6,6> M_tree(get_mass_matrix_SDX());

      for (unsigned es = 0; es < 6; ++es) {
         const double p = Abs(old_MSDX(es));
         for (unsigned i1 = 0; i1 < 6; ++i1) {
            for (unsigned i2 = i1; i2 < 6; ++i2) {
               self_energy(i1,i2) = Re(self_energy_SDX(p,i1,
                  i2));
            }
         }

         Symmetrize(self_energy);
         const Eigen::Matrix<double,6,6> M_loop(M_tree -
            self_energy);
         Eigen::Array<double,6,1> eigen_values;
         Eigen::Matrix<double,6,6> mix_ZDX;
         #ifdef CHECK_EIGENVALUE_ERROR
            double eigenvalue_error;
            fs_diagonalize_hermitian(M_loop, eigen_values,
               mix_ZDX, eigenvalue_error);
            problems.flag_bad_mass(E6SSMtower_info::SDX,
               eigenvalue_error > precision * Abs(eigen_values(0)));
         #else
            fs_diagonalize_hermitian(M_loop, eigen_values,
               mix_ZDX);
         #endif

         PHYSICAL(MSDX(es)) = SignedAbsSqrt(eigen_values(es));
         if (es == 0)
            PHYSICAL(ZDX) = mix_ZDX;
      }

      new_MSDX = PHYSICAL(MSDX);
      diff = MaxRelDiff(new_MSDX, old_MSDX);
      old_MSDX = new_MSDX;
      iteration++;
   } while (diff > precision
            && iteration < number_of_mass_iterations);

   if (diff > precision)
      problems.flag_no_pole_mass_convergence(E6SSMtower_info::SDX);
   else
      problems.unflag_no_pole_mass_convergence(E6SSMtower_info::SDX);
}

void CLASSNAME::calculate_Mhh_pole()
{
   if (!force_output && problems.is_tachyon(E6SSMtower_info::hh))
      return;

   // diagonalization with high precision
   unsigned iteration = 0;
   double diff = 0.0;
   decltype(Mhh) old_Mhh(Mhh), new_Mhh(Mhh);

   do {
      Eigen::Matrix<double,3,3> self_energy;
      const Eigen::Matrix<double,3,3> M_tree(get_mass_matrix_hh());

      // two-loop Higgs self-energy contributions
      Eigen::Matrix<double,3,3> self_energy_2l(Eigen::Matrix<double,3,
         3>::Zero());
      if (pole_mass_loop_order > 1) {
         self_energy_2l = self_energy_hh_2loop();
         for (unsigned i = 0; i < 3; i++) {
            for (unsigned k = 0; k < 3; k++) {
               if (!std::isfinite(self_energy_2l(i,k))) {
                  self_energy_2l(i,k) = 0.;
                  problems.flag_bad_mass(
                     E6SSMtower_info::hh);
               }
            }
         }
      }

      for (unsigned es = 0; es < 3; ++es) {
         const double p = Abs(old_Mhh(es));
         for (unsigned i1 = 0; i1 < 3; ++i1) {
            for (unsigned i2 = i1; i2 < 3; ++i2) {
               self_energy(i1,i2) = Re(self_energy_hh(p,i1,i2
                  ));
            }
         }

         self_energy += self_energy_2l;

         Symmetrize(self_energy);
         const Eigen::Matrix<double,3,3> M_loop(M_tree -
            self_energy);
         Eigen::Array<double,3,1> eigen_values;
         Eigen::Matrix<double,3,3> mix_ZH;
         #ifdef CHECK_EIGENVALUE_ERROR
            double eigenvalue_error;
            fs_diagonalize_hermitian(M_loop, eigen_values,
               mix_ZH, eigenvalue_error);
            problems.flag_bad_mass(E6SSMtower_info::hh,
               eigenvalue_error > precision * Abs(eigen_values(0)));
         #else
            fs_diagonalize_hermitian(M_loop, eigen_values,
               mix_ZH);
         #endif

         PHYSICAL(Mhh(es)) = SignedAbsSqrt(eigen_values(es));
         if (es == 0)
            PHYSICAL(ZH) = mix_ZH;
      }

      new_Mhh = PHYSICAL(Mhh);
      diff = MaxRelDiff(new_Mhh, old_Mhh);
      old_Mhh = new_Mhh;
      iteration++;
   } while (diff > precision
            && iteration < number_of_mass_iterations);

   if (diff > precision)
      problems.flag_no_pole_mass_convergence(E6SSMtower_info::hh);
   else
      problems.unflag_no_pole_mass_convergence(E6SSMtower_info::hh);
}

void CLASSNAME::calculate_MAh_pole()
{
   if (!force_output && problems.is_tachyon(E6SSMtower_info::Ah))
      return;

   // diagonalization with high precision
   unsigned iteration = 0;
   double diff = 0.0;
   decltype(MAh) old_MAh(MAh), new_MAh(MAh);

   do {
      Eigen::Matrix<double,3,3> self_energy;
      const Eigen::Matrix<double,3,3> M_tree(get_mass_matrix_Ah());

      // two-loop Higgs self-energy contributions
      Eigen::Matrix<double,3,3> self_energy_2l(Eigen::Matrix<double,3,
         3>::Zero());
      if (pole_mass_loop_order > 1) {
         self_energy_2l = self_energy_Ah_2loop();
         for (unsigned i = 0; i < 3; i++) {
            for (unsigned k = 0; k < 3; k++) {
               if (!std::isfinite(self_energy_2l(i,k))) {
                  self_energy_2l(i,k) = 0.;
                  problems.flag_bad_mass(
                     E6SSMtower_info::Ah);
               }
            }
         }
      }

      for (unsigned es = 0; es < 3; ++es) {
         const double p = Abs(old_MAh(es));
         for (unsigned i1 = 0; i1 < 3; ++i1) {
            for (unsigned i2 = i1; i2 < 3; ++i2) {
               self_energy(i1,i2) = Re(self_energy_Ah(p,i1,i2
                  ));
            }
         }

         self_energy += self_energy_2l;

         Symmetrize(self_energy);
         const Eigen::Matrix<double,3,3> M_loop(M_tree -
            self_energy);
         Eigen::Array<double,3,1> eigen_values;
         Eigen::Matrix<double,3,3> mix_ZA;
         #ifdef CHECK_EIGENVALUE_ERROR
            double eigenvalue_error;
            fs_diagonalize_hermitian(M_loop, eigen_values,
               mix_ZA, eigenvalue_error);
            problems.flag_bad_mass(E6SSMtower_info::Ah,
               eigenvalue_error > precision * Abs(eigen_values(0)));
         #else
            fs_diagonalize_hermitian(M_loop, eigen_values,
               mix_ZA);
         #endif

         PHYSICAL(MAh(es)) = SignedAbsSqrt(eigen_values(es));
         if (es == 2)
            PHYSICAL(ZA) = mix_ZA;
      }

      new_MAh = PHYSICAL(MAh);
      diff = MaxRelDiff(new_MAh, old_MAh);
      old_MAh = new_MAh;
      iteration++;
   } while (diff > precision
            && iteration < number_of_mass_iterations);

   if (diff > precision)
      problems.flag_no_pole_mass_convergence(E6SSMtower_info::Ah);
   else
      problems.unflag_no_pole_mass_convergence(E6SSMtower_info::Ah);
}

void CLASSNAME::calculate_MHpm_pole()
{
   if (!force_output && problems.is_tachyon(E6SSMtower_info::Hpm))
      return;

   // diagonalization with high precision
   unsigned iteration = 0;
   double diff = 0.0;
   decltype(MHpm) old_MHpm(MHpm), new_MHpm(MHpm);

   do {
      Eigen::Matrix<double,2,2> self_energy;
      const Eigen::Matrix<double,2,2> M_tree(get_mass_matrix_Hpm());

      for (unsigned es = 0; es < 2; ++es) {
         const double p = Abs(old_MHpm(es));
         for (unsigned i1 = 0; i1 < 2; ++i1) {
            for (unsigned i2 = i1; i2 < 2; ++i2) {
               self_energy(i1,i2) = Re(self_energy_Hpm(p,i1,
                  i2));
            }
         }

         Symmetrize(self_energy);
         const Eigen::Matrix<double,2,2> M_loop(M_tree -
            self_energy);
         Eigen::Array<double,2,1> eigen_values;
         Eigen::Matrix<double,2,2> mix_ZP;
         #ifdef CHECK_EIGENVALUE_ERROR
            double eigenvalue_error;
            fs_diagonalize_hermitian(M_loop, eigen_values,
               mix_ZP, eigenvalue_error);
            problems.flag_bad_mass(E6SSMtower_info::Hpm,
               eigenvalue_error > precision * Abs(eigen_values(0)));
         #else
            fs_diagonalize_hermitian(M_loop, eigen_values,
               mix_ZP);
         #endif

         PHYSICAL(MHpm(es)) = SignedAbsSqrt(eigen_values(es));
         if (es == 1)
            PHYSICAL(ZP) = mix_ZP;
      }

      new_MHpm = PHYSICAL(MHpm);
      diff = MaxRelDiff(new_MHpm, old_MHpm);
      old_MHpm = new_MHpm;
      iteration++;
   } while (diff > precision
            && iteration < number_of_mass_iterations);

   if (diff > precision)
      problems.flag_no_pole_mass_convergence(E6SSMtower_info::Hpm);
   else
      problems.unflag_no_pole_mass_convergence(E6SSMtower_info::Hpm);
}

void CLASSNAME::calculate_MChi_pole()
{
   // diagonalization with high precision
   unsigned iteration = 0;
   double diff = 0.0;
   decltype(MChi) old_MChi(MChi), new_MChi(MChi);

   do {
      Eigen::Matrix<double,6,6> self_energy_1;
      Eigen::Matrix<double,6,6> self_energy_PL;
      Eigen::Matrix<double,6,6> self_energy_PR;
      const Eigen::Matrix<double,6,6> M_tree(get_mass_matrix_Chi());
      for (unsigned es = 0; es < 6; ++es) {
         const double p = Abs(old_MChi(es));
         for (unsigned i1 = 0; i1 < 6; ++i1) {
            for (unsigned i2 = 0; i2 < 6; ++i2) {
               self_energy_1(i1,i2)  = Re(self_energy_Chi_1(p
                  ,i1,i2));
               self_energy_PL(i1,i2) = Re(self_energy_Chi_PL(
                  p,i1,i2));
               self_energy_PR(i1,i2) = Re(self_energy_Chi_PR(
                  p,i1,i2));
            }
         }
         const Eigen::Matrix<double,6,6> delta_M(- self_energy_PR *
            M_tree - M_tree * self_energy_PL - self_energy_1);
         const Eigen::Matrix<double,6,6> M_loop(M_tree + 0.5 * (
            delta_M + delta_M.transpose()));
         Eigen::Array<double,6,1> eigen_values;
         decltype(ZN) mix_ZN;
         #ifdef CHECK_EIGENVALUE_ERROR
            double eigenvalue_error;
            fs_diagonalize_symmetric(M_loop, eigen_values,
               mix_ZN, eigenvalue_error);
            problems.flag_bad_mass(E6SSMtower_info::Chi,
               eigenvalue_error > precision * Abs(eigen_values(0)));
         #else
            fs_diagonalize_symmetric(M_loop, eigen_values,
               mix_ZN);
         #endif
         if (es == 0)
            PHYSICAL(ZN) = mix_ZN;
         PHYSICAL(MChi(es)) = Abs(eigen_values(es));
      }

      new_MChi = PHYSICAL(MChi);
      diff = MaxRelDiff(new_MChi, old_MChi);
      old_MChi = new_MChi;
      iteration++;
   } while (diff > precision
            && iteration < number_of_mass_iterations);

   if (diff > precision)
      problems.flag_no_pole_mass_convergence(E6SSMtower_info::Chi);
   else
      problems.unflag_no_pole_mass_convergence(E6SSMtower_info::Chi);
}

void CLASSNAME::calculate_MCha_pole()
{
   // diagonalization with high precision
   unsigned iteration = 0;
   double diff = 0.0;
   decltype(MCha) old_MCha(MCha), new_MCha(MCha);

   do {
      Eigen::Matrix<double,2,2> self_energy_1;
      Eigen::Matrix<double,2,2> self_energy_PL;
      Eigen::Matrix<double,2,2> self_energy_PR;
      const Eigen::Matrix<double,2,2> M_tree(get_mass_matrix_Cha());
      for (unsigned es = 0; es < 2; ++es) {
         const double p = Abs(old_MCha(es));
         for (unsigned i1 = 0; i1 < 2; ++i1) {
            for (unsigned i2 = 0; i2 < 2; ++i2) {
               self_energy_1(i1,i2)  = Re(self_energy_Cha_1(p
                  ,i1,i2));
               self_energy_PL(i1,i2) = Re(self_energy_Cha_PL(
                  p,i1,i2));
               self_energy_PR(i1,i2) = Re(self_energy_Cha_PR(
                  p,i1,i2));
            }
         }
         const Eigen::Matrix<double,2,2> delta_M(- self_energy_PR *
            M_tree - M_tree * self_energy_PL - self_energy_1);
         const Eigen::Matrix<double,2,2> M_loop(M_tree + delta_M);
         Eigen::Array<double,2,1> eigen_values;
         decltype(UM) mix_UM;
         decltype(UP) mix_UP;
      #ifdef CHECK_EIGENVALUE_ERROR
         double eigenvalue_error;
         fs_svd(M_loop, eigen_values, mix_UM, mix_UP,
            eigenvalue_error);
         problems.flag_bad_mass(E6SSMtower_info::Cha,
            eigenvalue_error > precision * Abs(eigen_values(0)));
      #else
         fs_svd(M_loop, eigen_values, mix_UM, mix_UP);
      #endif
         if (es == 0) {
            PHYSICAL(UM) = mix_UM;
            PHYSICAL(UP) = mix_UP;
         }
         PHYSICAL(MCha(es)) = Abs(eigen_values(es));
      }

      new_MCha = PHYSICAL(MCha);
      diff = MaxRelDiff(new_MCha, old_MCha);
      old_MCha = new_MCha;
      iteration++;
   } while (diff > precision
            && iteration < number_of_mass_iterations);

   if (diff > precision)
      problems.flag_no_pole_mass_convergence(E6SSMtower_info::Cha);
   else
      problems.unflag_no_pole_mass_convergence(E6SSMtower_info::Cha);
}

void CLASSNAME::calculate_MFe_pole()
{
   // diagonalization with high precision
   unsigned iteration = 0;
   double diff = 0.0;
   decltype(MFe) old_MFe(MFe), new_MFe(MFe);

   do {
      Eigen::Matrix<double,3,3> self_energy_1;
      Eigen::Matrix<double,3,3> self_energy_PL;
      Eigen::Matrix<double,3,3> self_energy_PR;
      const Eigen::Matrix<double,3,3> M_tree(get_mass_matrix_Fe());
      for (unsigned es = 0; es < 3; ++es) {
         const double p = Abs(old_MFe(es));
         for (unsigned i1 = 0; i1 < 3; ++i1) {
            for (unsigned i2 = 0; i2 < 3; ++i2) {
               self_energy_1(i1,i2)  = Re(self_energy_Fe_1(p,
                  i1,i2));
               self_energy_PL(i1,i2) = Re(self_energy_Fe_PL(p
                  ,i1,i2));
               self_energy_PR(i1,i2) = Re(self_energy_Fe_PR(p
                  ,i1,i2));
            }
         }
         const Eigen::Matrix<double,3,3> delta_M(- self_energy_PR *
            M_tree - M_tree * self_energy_PL - self_energy_1);
         const Eigen::Matrix<double,3,3> M_loop(M_tree + delta_M);
         Eigen::Array<double,3,1> eigen_values;
         decltype(ZEL) mix_ZEL;
         decltype(ZER) mix_ZER;
      #ifdef CHECK_EIGENVALUE_ERROR
         double eigenvalue_error;
         fs_svd(M_loop, eigen_values, mix_ZEL, mix_ZER,
            eigenvalue_error);
         problems.flag_bad_mass(E6SSMtower_info::Fe,
            eigenvalue_error > precision * Abs(eigen_values(0)));
      #else
         fs_svd(M_loop, eigen_values, mix_ZEL, mix_ZER);
      #endif
         if (es == 0) {
            PHYSICAL(ZEL) = mix_ZEL;
            PHYSICAL(ZER) = mix_ZER;
         }
         PHYSICAL(MFe(es)) = Abs(eigen_values(es));
      }

      new_MFe = PHYSICAL(MFe);
      diff = MaxRelDiff(new_MFe, old_MFe);
      old_MFe = new_MFe;
      iteration++;
   } while (diff > precision
            && iteration < number_of_mass_iterations);

   if (diff > precision)
      problems.flag_no_pole_mass_convergence(E6SSMtower_info::Fe);
   else
      problems.unflag_no_pole_mass_convergence(E6SSMtower_info::Fe);
}

void CLASSNAME::calculate_MFd_pole()
{
   // diagonalization with high precision
   unsigned iteration = 0;
   double diff = 0.0;
   decltype(MFd) old_MFd(MFd), new_MFd(MFd);

   do {
      Eigen::Matrix<double,3,3> self_energy_1;
      Eigen::Matrix<double,3,3> self_energy_PL;
      Eigen::Matrix<double,3,3> self_energy_PR;
      const Eigen::Matrix<double,3,3> M_tree(get_mass_matrix_Fd());
      for (unsigned es = 0; es < 3; ++es) {
         const double p = Abs(old_MFd(es));
         for (unsigned i1 = 0; i1 < 3; ++i1) {
            for (unsigned i2 = 0; i2 < 3; ++i2) {
               self_energy_1(i1,i2)  = Re(self_energy_Fd_1(p,
                  i1,i2));
               self_energy_PL(i1,i2) = Re(self_energy_Fd_PL(p
                  ,i1,i2));
               self_energy_PR(i1,i2) = Re(self_energy_Fd_PR(p
                  ,i1,i2));
            }
         }
         const Eigen::Matrix<double,3,3> delta_M(- self_energy_PR *
            M_tree - M_tree * self_energy_PL - self_energy_1);
         const Eigen::Matrix<double,3,3> M_loop(M_tree + delta_M);
         Eigen::Array<double,3,1> eigen_values;
         decltype(ZDL) mix_ZDL;
         decltype(ZDR) mix_ZDR;
      #ifdef CHECK_EIGENVALUE_ERROR
         double eigenvalue_error;
         fs_svd(M_loop, eigen_values, mix_ZDL, mix_ZDR,
            eigenvalue_error);
         problems.flag_bad_mass(E6SSMtower_info::Fd,
            eigenvalue_error > precision * Abs(eigen_values(0)));
      #else
         fs_svd(M_loop, eigen_values, mix_ZDL, mix_ZDR);
      #endif
         if (es == 0) {
            PHYSICAL(ZDL) = mix_ZDL;
            PHYSICAL(ZDR) = mix_ZDR;
         }
         PHYSICAL(MFd(es)) = Abs(eigen_values(es));
      }

      new_MFd = PHYSICAL(MFd);
      diff = MaxRelDiff(new_MFd, old_MFd);
      old_MFd = new_MFd;
      iteration++;
   } while (diff > precision
            && iteration < number_of_mass_iterations);

   if (diff > precision)
      problems.flag_no_pole_mass_convergence(E6SSMtower_info::Fd);
   else
      problems.unflag_no_pole_mass_convergence(E6SSMtower_info::Fd);
}

void CLASSNAME::calculate_MFu_pole()
{
   // diagonalization with high precision
   unsigned iteration = 0;
   double diff = 0.0;
   decltype(MFu) old_MFu(MFu), new_MFu(MFu);

   do {
      double qcd_1l = 0.;

      {
         const double currentScale = get_scale();
         qcd_1l = -0.008443431970194815*(5. - 3.*Log(Sqr(MFu(2))
            /Sqr(currentScale)))*Sqr(g3);
      }

      double qcd_2l = 0.;

      if (pole_mass_loop_order > 1 && TOP_POLE_QCD_CORRECTION > 0) {
         const double currentScale = get_scale();
         qcd_2l = -0.005191204615668296*Power(g3,4) -
            0.0032883224409535764*Power(g3,4)*Log(Sqr(currentScale)/Sqr(MFu(2))
            ) - 0.0008822328500119351*Power(g3,4)*Sqr(Log(Power(currentScale,2)
            /Sqr(MFu(2))));
      }

      double qcd_3l = 0.;

      if (pole_mass_loop_order > 2 && TOP_POLE_QCD_CORRECTION > 1) {
         const double currentScale = get_scale();
         qcd_3l = 0;
      }

      Eigen::Matrix<double,3,3> self_energy_1;
      Eigen::Matrix<double,3,3> self_energy_PL;
      Eigen::Matrix<double,3,3> self_energy_PR;
      const Eigen::Matrix<double,3,3> M_tree(get_mass_matrix_Fu());
      for (unsigned es = 0; es < 3; ++es) {
         const double p = Abs(old_MFu(es));
         for (unsigned i1 = 0; i1 < 3; ++i1) {
            for (unsigned i2 = 0; i2 < 3; ++i2) {
               if (i1 == 2 && i2 == 2) {
                  self_energy_1(i1,i2)  = Re(
                     self_energy_Fu_1_heavy(p,i1,i2));
                  self_energy_PL(i1,i2) = Re(
                     self_energy_Fu_PL_heavy(p,i1,i2));
                  self_energy_PR(i1,i2) = Re(
                     self_energy_Fu_PR_heavy(p,i1,i2));
               } else {
                  self_energy_1(i1,i2)  = Re(
                     self_energy_Fu_1(p,i1,i2));
                  self_energy_PL(i1,i2) = Re(
                     self_energy_Fu_PL(p,i1,i2));
                  self_energy_PR(i1,i2) = Re(
                     self_energy_Fu_PR(p,i1,i2));
               }
            }
         }
         Eigen::Matrix<double,3,3> delta_M(- self_energy_PR *
            M_tree - M_tree * self_energy_PL - self_energy_1);
         delta_M(2,2) -= M_tree(2,2) * (qcd_1l + qcd_2l + qcd_3l);
         const Eigen::Matrix<double,3,3> M_loop(M_tree + delta_M);
         Eigen::Array<double,3,1> eigen_values;
         decltype(ZUL) mix_ZUL;
         decltype(ZUR) mix_ZUR;
      #ifdef CHECK_EIGENVALUE_ERROR
         double eigenvalue_error;
         fs_svd(M_loop, eigen_values, mix_ZUL, mix_ZUR,
            eigenvalue_error);
         problems.flag_bad_mass(E6SSMtower_info::Fu,
            eigenvalue_error > precision * Abs(eigen_values(0)));
      #else
         fs_svd(M_loop, eigen_values, mix_ZUL, mix_ZUR);
      #endif
         if (es == 0) {
            PHYSICAL(ZUL) = mix_ZUL;
            PHYSICAL(ZUR) = mix_ZUR;
         }
         PHYSICAL(MFu(es)) = Abs(eigen_values(es));
      }

      new_MFu = PHYSICAL(MFu);
      diff = MaxRelDiff(new_MFu, old_MFu);
      old_MFu = new_MFu;
      iteration++;
   } while (diff > precision
            && iteration < number_of_mass_iterations);

   if (diff > precision)
      problems.flag_no_pole_mass_convergence(E6SSMtower_info::Fu);
   else
      problems.unflag_no_pole_mass_convergence(E6SSMtower_info::Fu);
}

void CLASSNAME::calculate_MFDX_pole()
{
   // diagonalization with high precision
   unsigned iteration = 0;
   double diff = 0.0;
   decltype(MFDX) old_MFDX(MFDX), new_MFDX(MFDX);

   do {
      Eigen::Matrix<double,3,3> self_energy_1;
      Eigen::Matrix<double,3,3> self_energy_PL;
      Eigen::Matrix<double,3,3> self_energy_PR;
      const Eigen::Matrix<double,3,3> M_tree(get_mass_matrix_FDX());
      for (unsigned es = 0; es < 3; ++es) {
         const double p = Abs(old_MFDX(es));
         for (unsigned i1 = 0; i1 < 3; ++i1) {
            for (unsigned i2 = 0; i2 < 3; ++i2) {
               self_energy_1(i1,i2)  = Re(self_energy_FDX_1(p
                  ,i1,i2));
               self_energy_PL(i1,i2) = Re(self_energy_FDX_PL(
                  p,i1,i2));
               self_energy_PR(i1,i2) = Re(self_energy_FDX_PR(
                  p,i1,i2));
            }
         }
         const Eigen::Matrix<double,3,3> delta_M(- self_energy_PR *
            M_tree - M_tree * self_energy_PL - self_energy_1);
         const Eigen::Matrix<double,3,3> M_loop(M_tree + delta_M);
         Eigen::Array<double,3,1> eigen_values;
         decltype(ZDXL) mix_ZDXL;
         decltype(ZDXR) mix_ZDXR;
      #ifdef CHECK_EIGENVALUE_ERROR
         double eigenvalue_error;
         fs_svd(M_loop, eigen_values, mix_ZDXL, mix_ZDXR,
            eigenvalue_error);
         problems.flag_bad_mass(E6SSMtower_info::FDX,
            eigenvalue_error > precision * Abs(eigen_values(0)));
      #else
         fs_svd(M_loop, eigen_values, mix_ZDXL, mix_ZDXR);
      #endif
         if (es == 0) {
            PHYSICAL(ZDXL) = mix_ZDXL;
            PHYSICAL(ZDXR) = mix_ZDXR;
         }
         PHYSICAL(MFDX(es)) = Abs(eigen_values(es));
      }

      new_MFDX = PHYSICAL(MFDX);
      diff = MaxRelDiff(new_MFDX, old_MFDX);
      old_MFDX = new_MFDX;
      iteration++;
   } while (diff > precision
            && iteration < number_of_mass_iterations);

   if (diff > precision)
      problems.flag_no_pole_mass_convergence(E6SSMtower_info::FDX);
   else
      problems.unflag_no_pole_mass_convergence(E6SSMtower_info::FDX);
}

void CLASSNAME::calculate_MSHI0_pole()
{
   if (!force_output && problems.is_tachyon(E6SSMtower_info::SHI0))
      return;

   // diagonalization with high precision
   unsigned iteration = 0;
   double diff = 0.0;
   decltype(MSHI0) old_MSHI0(MSHI0), new_MSHI0(MSHI0);

   do {
      Eigen::Matrix<double,4,4> self_energy;
      const Eigen::Matrix<double,4,4> M_tree(get_mass_matrix_SHI0());

      for (unsigned es = 0; es < 4; ++es) {
         const double p = Abs(old_MSHI0(es));
         for (unsigned i1 = 0; i1 < 4; ++i1) {
            for (unsigned i2 = i1; i2 < 4; ++i2) {
               self_energy(i1,i2) = Re(self_energy_SHI0(p,i1,
                  i2));
            }
         }

         Symmetrize(self_energy);
         const Eigen::Matrix<double,4,4> M_loop(M_tree -
            self_energy);
         Eigen::Array<double,4,1> eigen_values;
         Eigen::Matrix<double,4,4> mix_UHI0;
         #ifdef CHECK_EIGENVALUE_ERROR
            double eigenvalue_error;
            fs_diagonalize_hermitian(M_loop, eigen_values,
               mix_UHI0, eigenvalue_error);
            problems.flag_bad_mass(E6SSMtower_info::SHI0,
               eigenvalue_error > precision * Abs(eigen_values(0)));
         #else
            fs_diagonalize_hermitian(M_loop, eigen_values,
               mix_UHI0);
         #endif

         PHYSICAL(MSHI0(es)) = SignedAbsSqrt(eigen_values(es));
         if (es == 0)
            PHYSICAL(UHI0) = mix_UHI0;
      }

      new_MSHI0 = PHYSICAL(MSHI0);
      diff = MaxRelDiff(new_MSHI0, old_MSHI0);
      old_MSHI0 = new_MSHI0;
      iteration++;
   } while (diff > precision
            && iteration < number_of_mass_iterations);

   if (diff > precision)
      problems.flag_no_pole_mass_convergence(E6SSMtower_info::SHI0);
   else
      problems.unflag_no_pole_mass_convergence(E6SSMtower_info::SHI0);
}

void CLASSNAME::calculate_MSHIp_pole()
{
   if (!force_output && problems.is_tachyon(E6SSMtower_info::SHIp))
      return;

   // diagonalization with high precision
   unsigned iteration = 0;
   double diff = 0.0;
   decltype(MSHIp) old_MSHIp(MSHIp), new_MSHIp(MSHIp);

   do {
      Eigen::Matrix<double,4,4> self_energy;
      const Eigen::Matrix<double,4,4> M_tree(get_mass_matrix_SHIp());

      for (unsigned es = 0; es < 4; ++es) {
         const double p = Abs(old_MSHIp(es));
         for (unsigned i1 = 0; i1 < 4; ++i1) {
            for (unsigned i2 = i1; i2 < 4; ++i2) {
               self_energy(i1,i2) = Re(self_energy_SHIp(p,i1,
                  i2));
            }
         }

         Symmetrize(self_energy);
         const Eigen::Matrix<double,4,4> M_loop(M_tree -
            self_energy);
         Eigen::Array<double,4,1> eigen_values;
         Eigen::Matrix<double,4,4> mix_UHIp;
         #ifdef CHECK_EIGENVALUE_ERROR
            double eigenvalue_error;
            fs_diagonalize_hermitian(M_loop, eigen_values,
               mix_UHIp, eigenvalue_error);
            problems.flag_bad_mass(E6SSMtower_info::SHIp,
               eigenvalue_error > precision * Abs(eigen_values(0)));
         #else
            fs_diagonalize_hermitian(M_loop, eigen_values,
               mix_UHIp);
         #endif

         PHYSICAL(MSHIp(es)) = SignedAbsSqrt(eigen_values(es));
         if (es == 0)
            PHYSICAL(UHIp) = mix_UHIp;
      }

      new_MSHIp = PHYSICAL(MSHIp);
      diff = MaxRelDiff(new_MSHIp, old_MSHIp);
      old_MSHIp = new_MSHIp;
      iteration++;
   } while (diff > precision
            && iteration < number_of_mass_iterations);

   if (diff > precision)
      problems.flag_no_pole_mass_convergence(E6SSMtower_info::SHIp);
   else
      problems.unflag_no_pole_mass_convergence(E6SSMtower_info::SHIp);
}

void CLASSNAME::calculate_MChaI_pole()
{
   // diagonalization with high precision
   unsigned iteration = 0;
   double diff = 0.0;
   decltype(MChaI) old_MChaI(MChaI), new_MChaI(MChaI);

   do {
      Eigen::Matrix<double,2,2> self_energy_1;
      Eigen::Matrix<double,2,2> self_energy_PL;
      Eigen::Matrix<double,2,2> self_energy_PR;
      const Eigen::Matrix<double,2,2> M_tree(get_mass_matrix_ChaI());
      for (unsigned es = 0; es < 2; ++es) {
         const double p = Abs(old_MChaI(es));
         for (unsigned i1 = 0; i1 < 2; ++i1) {
            for (unsigned i2 = 0; i2 < 2; ++i2) {
               self_energy_1(i1,i2)  = Re(self_energy_ChaI_1(
                  p,i1,i2));
               self_energy_PL(i1,i2) = Re(self_energy_ChaI_PL
                  (p,i1,i2));
               self_energy_PR(i1,i2) = Re(self_energy_ChaI_PR
                  (p,i1,i2));
            }
         }
         const Eigen::Matrix<double,2,2> delta_M(- self_energy_PR *
            M_tree - M_tree * self_energy_PL - self_energy_1);
         const Eigen::Matrix<double,2,2> M_loop(M_tree + delta_M);
         Eigen::Array<double,2,1> eigen_values;
         decltype(ZMI) mix_ZMI;
         decltype(ZPI) mix_ZPI;
      #ifdef CHECK_EIGENVALUE_ERROR
         double eigenvalue_error;
         fs_svd(M_loop, eigen_values, mix_ZMI, mix_ZPI,
            eigenvalue_error);
         problems.flag_bad_mass(E6SSMtower_info::ChaI,
            eigenvalue_error > precision * Abs(eigen_values(0)));
      #else
         fs_svd(M_loop, eigen_values, mix_ZMI, mix_ZPI);
      #endif
         if (es == 0) {
            PHYSICAL(ZMI) = mix_ZMI;
            PHYSICAL(ZPI) = mix_ZPI;
         }
         PHYSICAL(MChaI(es)) = Abs(eigen_values(es));
      }

      new_MChaI = PHYSICAL(MChaI);
      diff = MaxRelDiff(new_MChaI, old_MChaI);
      old_MChaI = new_MChaI;
      iteration++;
   } while (diff > precision
            && iteration < number_of_mass_iterations);

   if (diff > precision)
      problems.flag_no_pole_mass_convergence(E6SSMtower_info::ChaI);
   else
      problems.unflag_no_pole_mass_convergence(E6SSMtower_info::ChaI);
}

void CLASSNAME::calculate_MChiI_pole()
{
   // diagonalization with high precision
   unsigned iteration = 0;
   double diff = 0.0;
   decltype(MChiI) old_MChiI(MChiI), new_MChiI(MChiI);

   do {
      Eigen::Matrix<double,4,4> self_energy_1;
      Eigen::Matrix<double,4,4> self_energy_PL;
      Eigen::Matrix<double,4,4> self_energy_PR;
      const Eigen::Matrix<double,4,4> M_tree(get_mass_matrix_ChiI());
      for (unsigned es = 0; es < 4; ++es) {
         const double p = Abs(old_MChiI(es));
         for (unsigned i1 = 0; i1 < 4; ++i1) {
            for (unsigned i2 = 0; i2 < 4; ++i2) {
               self_energy_1(i1,i2)  = Re(self_energy_ChiI_1(
                  p,i1,i2));
               self_energy_PL(i1,i2) = Re(self_energy_ChiI_PL
                  (p,i1,i2));
               self_energy_PR(i1,i2) = Re(self_energy_ChiI_PR
                  (p,i1,i2));
            }
         }
         const Eigen::Matrix<double,4,4> delta_M(- self_energy_PR *
            M_tree - M_tree * self_energy_PL - self_energy_1);
         const Eigen::Matrix<double,4,4> M_loop(M_tree + 0.5 * (
            delta_M + delta_M.transpose()));
         Eigen::Array<double,4,1> eigen_values;
         decltype(ZNI) mix_ZNI;
         #ifdef CHECK_EIGENVALUE_ERROR
            double eigenvalue_error;
            fs_diagonalize_symmetric(M_loop, eigen_values,
               mix_ZNI, eigenvalue_error);
            problems.flag_bad_mass(E6SSMtower_info::ChiI,
               eigenvalue_error > precision * Abs(eigen_values(0)));
         #else
            fs_diagonalize_symmetric(M_loop, eigen_values,
               mix_ZNI);
         #endif
         if (es == 0)
            PHYSICAL(ZNI) = mix_ZNI;
         PHYSICAL(MChiI(es)) = Abs(eigen_values(es));
      }

      new_MChiI = PHYSICAL(MChiI);
      diff = MaxRelDiff(new_MChiI, old_MChiI);
      old_MChiI = new_MChiI;
      iteration++;
   } while (diff > precision
            && iteration < number_of_mass_iterations);

   if (diff > precision)
      problems.flag_no_pole_mass_convergence(E6SSMtower_info::ChiI);
   else
      problems.unflag_no_pole_mass_convergence(E6SSMtower_info::ChiI);
}

void CLASSNAME::calculate_MSSI0_pole()
{
   if (!force_output && problems.is_tachyon(E6SSMtower_info::SSI0))
      return;

   // diagonalization with high precision
   unsigned iteration = 0;
   double diff = 0.0;
   decltype(MSSI0) old_MSSI0(MSSI0), new_MSSI0(MSSI0);

   do {
      Eigen::Matrix<double,2,2> self_energy;
      const Eigen::Matrix<double,2,2> M_tree(get_mass_matrix_SSI0());

      for (unsigned es = 0; es < 2; ++es) {
         const double p = Abs(old_MSSI0(es));
         for (unsigned i1 = 0; i1 < 2; ++i1) {
            for (unsigned i2 = i1; i2 < 2; ++i2) {
               self_energy(i1,i2) = Re(self_energy_SSI0(p,i1,
                  i2));
            }
         }

         Symmetrize(self_energy);
         const Eigen::Matrix<double,2,2> M_loop(M_tree -
            self_energy);
         Eigen::Array<double,2,1> eigen_values;
         Eigen::Matrix<double,2,2> mix_ZSSI;
         #ifdef CHECK_EIGENVALUE_ERROR
            double eigenvalue_error;
            fs_diagonalize_hermitian(M_loop, eigen_values,
               mix_ZSSI, eigenvalue_error);
            problems.flag_bad_mass(E6SSMtower_info::SSI0,
               eigenvalue_error > precision * Abs(eigen_values(0)));
         #else
            fs_diagonalize_hermitian(M_loop, eigen_values,
               mix_ZSSI);
         #endif

         PHYSICAL(MSSI0(es)) = SignedAbsSqrt(eigen_values(es));
         if (es == 0)
            PHYSICAL(ZSSI) = mix_ZSSI;
      }

      new_MSSI0 = PHYSICAL(MSSI0);
      diff = MaxRelDiff(new_MSSI0, old_MSSI0);
      old_MSSI0 = new_MSSI0;
      iteration++;
   } while (diff > precision
            && iteration < number_of_mass_iterations);

   if (diff > precision)
      problems.flag_no_pole_mass_convergence(E6SSMtower_info::SSI0);
   else
      problems.unflag_no_pole_mass_convergence(E6SSMtower_info::SSI0);
}

void CLASSNAME::calculate_MFSI_pole()
{
   // diagonalization with high precision
   unsigned iteration = 0;
   double diff = 0.0;
   decltype(MFSI) old_MFSI(MFSI), new_MFSI(MFSI);

   do {
      Eigen::Matrix<double,2,2> self_energy_1;
      Eigen::Matrix<double,2,2> self_energy_PL;
      Eigen::Matrix<double,2,2> self_energy_PR;
      const Eigen::Matrix<double,2,2> M_tree(get_mass_matrix_FSI());
      for (unsigned es = 0; es < 2; ++es) {
         const double p = Abs(old_MFSI(es));
         for (unsigned i1 = 0; i1 < 2; ++i1) {
            for (unsigned i2 = 0; i2 < 2; ++i2) {
               self_energy_1(i1,i2)  = Re(self_energy_FSI_1(p
                  ,i1,i2));
               self_energy_PL(i1,i2) = Re(self_energy_FSI_PL(
                  p,i1,i2));
               self_energy_PR(i1,i2) = Re(self_energy_FSI_PR(
                  p,i1,i2));
            }
         }
         const Eigen::Matrix<double,2,2> delta_M(- self_energy_PR *
            M_tree - M_tree * self_energy_PL - self_energy_1);
         const Eigen::Matrix<double,2,2> M_loop(M_tree + 0.5 * (
            delta_M + delta_M.transpose()));
         Eigen::Array<double,2,1> eigen_values;
         decltype(ZFSI) mix_ZFSI;
         #ifdef CHECK_EIGENVALUE_ERROR
            double eigenvalue_error;
            fs_diagonalize_symmetric(M_loop, eigen_values,
               mix_ZFSI, eigenvalue_error);
            problems.flag_bad_mass(E6SSMtower_info::FSI,
               eigenvalue_error > precision * Abs(eigen_values(0)));
         #else
            fs_diagonalize_symmetric(M_loop, eigen_values,
               mix_ZFSI);
         #endif
         if (es == 0)
            PHYSICAL(ZFSI) = mix_ZFSI;
         PHYSICAL(MFSI(es)) = Abs(eigen_values(es));
      }

      new_MFSI = PHYSICAL(MFSI);
      diff = MaxRelDiff(new_MFSI, old_MFSI);
      old_MFSI = new_MFSI;
      iteration++;
   } while (diff > precision
            && iteration < number_of_mass_iterations);

   if (diff > precision)
      problems.flag_no_pole_mass_convergence(E6SSMtower_info::FSI);
   else
      problems.unflag_no_pole_mass_convergence(E6SSMtower_info::FSI);
}

void CLASSNAME::calculate_MSHp0_pole()
{
   if (!force_output && problems.is_tachyon(E6SSMtower_info::SHp0))
      return;

   // diagonalization with high precision
   unsigned iteration = 0;
   double diff = 0.0;
   decltype(MSHp0) old_MSHp0(MSHp0), new_MSHp0(MSHp0);

   do {
      Eigen::Matrix<double,2,2> self_energy;
      const Eigen::Matrix<double,2,2> M_tree(get_mass_matrix_SHp0());

      for (unsigned es = 0; es < 2; ++es) {
         const double p = Abs(old_MSHp0(es));
         for (unsigned i1 = 0; i1 < 2; ++i1) {
            for (unsigned i2 = i1; i2 < 2; ++i2) {
               self_energy(i1,i2) = Re(self_energy_SHp0(p,i1,
                  i2));
            }
         }

         Symmetrize(self_energy);
         const Eigen::Matrix<double,2,2> M_loop(M_tree -
            self_energy);
         Eigen::Array<double,2,1> eigen_values;
         Eigen::Matrix<double,2,2> mix_UHp0;
         #ifdef CHECK_EIGENVALUE_ERROR
            double eigenvalue_error;
            fs_diagonalize_hermitian(M_loop, eigen_values,
               mix_UHp0, eigenvalue_error);
            problems.flag_bad_mass(E6SSMtower_info::SHp0,
               eigenvalue_error > precision * Abs(eigen_values(0)));
         #else
            fs_diagonalize_hermitian(M_loop, eigen_values,
               mix_UHp0);
         #endif

         PHYSICAL(MSHp0(es)) = SignedAbsSqrt(eigen_values(es));
         if (es == 0)
            PHYSICAL(UHp0) = mix_UHp0;
      }

      new_MSHp0 = PHYSICAL(MSHp0);
      diff = MaxRelDiff(new_MSHp0, old_MSHp0);
      old_MSHp0 = new_MSHp0;
      iteration++;
   } while (diff > precision
            && iteration < number_of_mass_iterations);

   if (diff > precision)
      problems.flag_no_pole_mass_convergence(E6SSMtower_info::SHp0);
   else
      problems.unflag_no_pole_mass_convergence(E6SSMtower_info::SHp0);
}

void CLASSNAME::calculate_MSHpp_pole()
{
   if (!force_output && problems.is_tachyon(E6SSMtower_info::SHpp))
      return;

   // diagonalization with high precision
   unsigned iteration = 0;
   double diff = 0.0;
   decltype(MSHpp) old_MSHpp(MSHpp), new_MSHpp(MSHpp);

   do {
      Eigen::Matrix<double,2,2> self_energy;
      const Eigen::Matrix<double,2,2> M_tree(get_mass_matrix_SHpp());

      for (unsigned es = 0; es < 2; ++es) {
         const double p = Abs(old_MSHpp(es));
         for (unsigned i1 = 0; i1 < 2; ++i1) {
            for (unsigned i2 = i1; i2 < 2; ++i2) {
               self_energy(i1,i2) = Re(self_energy_SHpp(p,i1,
                  i2));
            }
         }

         Symmetrize(self_energy);
         const Eigen::Matrix<double,2,2> M_loop(M_tree -
            self_energy);
         Eigen::Array<double,2,1> eigen_values;
         Eigen::Matrix<double,2,2> mix_UHpp;
         #ifdef CHECK_EIGENVALUE_ERROR
            double eigenvalue_error;
            fs_diagonalize_hermitian(M_loop, eigen_values,
               mix_UHpp, eigenvalue_error);
            problems.flag_bad_mass(E6SSMtower_info::SHpp,
               eigenvalue_error > precision * Abs(eigen_values(0)));
         #else
            fs_diagonalize_hermitian(M_loop, eigen_values,
               mix_UHpp);
         #endif

         PHYSICAL(MSHpp(es)) = SignedAbsSqrt(eigen_values(es));
         if (es == 0)
            PHYSICAL(UHpp) = mix_UHpp;
      }

      new_MSHpp = PHYSICAL(MSHpp);
      diff = MaxRelDiff(new_MSHpp, old_MSHpp);
      old_MSHpp = new_MSHpp;
      iteration++;
   } while (diff > precision
            && iteration < number_of_mass_iterations);

   if (diff > precision)
      problems.flag_no_pole_mass_convergence(E6SSMtower_info::SHpp);
   else
      problems.unflag_no_pole_mass_convergence(E6SSMtower_info::SHpp);
}

void CLASSNAME::calculate_MChiP_pole()
{
   // diagonalization with high precision
   unsigned iteration = 0;
   double diff = 0.0;
   decltype(MChiP) old_MChiP(MChiP), new_MChiP(MChiP);

   do {
      Eigen::Matrix<double,2,2> self_energy_1;
      Eigen::Matrix<double,2,2> self_energy_PL;
      Eigen::Matrix<double,2,2> self_energy_PR;
      const Eigen::Matrix<double,2,2> M_tree(get_mass_matrix_ChiP());
      for (unsigned es = 0; es < 2; ++es) {
         const double p = Abs(old_MChiP(es));
         for (unsigned i1 = 0; i1 < 2; ++i1) {
            for (unsigned i2 = 0; i2 < 2; ++i2) {
               self_energy_1(i1,i2)  = Re(self_energy_ChiP_1(
                  p,i1,i2));
               self_energy_PL(i1,i2) = Re(self_energy_ChiP_PL
                  (p,i1,i2));
               self_energy_PR(i1,i2) = Re(self_energy_ChiP_PR
                  (p,i1,i2));
            }
         }
         const Eigen::Matrix<double,2,2> delta_M(- self_energy_PR *
            M_tree - M_tree * self_energy_PL - self_energy_1);
         const Eigen::Matrix<double,2,2> M_loop(M_tree + 0.5 * (
            delta_M + delta_M.transpose()));
         Eigen::Array<double,2,1> eigen_values;
         decltype(ZNp) mix_ZNp;
         #ifdef CHECK_EIGENVALUE_ERROR
            double eigenvalue_error;
            fs_diagonalize_symmetric(M_loop, eigen_values,
               mix_ZNp, eigenvalue_error);
            problems.flag_bad_mass(E6SSMtower_info::ChiP,
               eigenvalue_error > precision * Abs(eigen_values(0)));
         #else
            fs_diagonalize_symmetric(M_loop, eigen_values,
               mix_ZNp);
         #endif
         if (es == 0)
            PHYSICAL(ZNp) = mix_ZNp;
         PHYSICAL(MChiP(es)) = Abs(eigen_values(es));
      }

      new_MChiP = PHYSICAL(MChiP);
      diff = MaxRelDiff(new_MChiP, old_MChiP);
      old_MChiP = new_MChiP;
      iteration++;
   } while (diff > precision
            && iteration < number_of_mass_iterations);

   if (diff > precision)
      problems.flag_no_pole_mass_convergence(E6SSMtower_info::ChiP);
   else
      problems.unflag_no_pole_mass_convergence(E6SSMtower_info::ChiP);
}

void CLASSNAME::calculate_MVWm_pole()
{
   if (!force_output && problems.is_tachyon(E6SSMtower_info::VWm))
      return;

   // diagonalization with high precision
   unsigned iteration = 0;
   double diff = 0.0;
   decltype(MVWm) old_MVWm(MVWm), new_MVWm(MVWm);

   do {
      const double M_tree(Sqr(MVWm));
      const double p = old_MVWm;
      const double self_energy = Re(self_energy_VWm(p));
      const double mass_sqr = M_tree - self_energy;

      if (mass_sqr < 0.)
         problems.flag_tachyon(E6SSMtower_info::VWm);

      PHYSICAL(MVWm) = AbsSqrt(mass_sqr);

      new_MVWm = PHYSICAL(MVWm);
      diff = MaxRelDiff(new_MVWm, old_MVWm);
      old_MVWm = new_MVWm;
      iteration++;
   } while (diff > precision
            && iteration < number_of_mass_iterations);

   if (diff > precision)
      problems.flag_no_pole_mass_convergence(E6SSMtower_info::VWm);
   else
      problems.unflag_no_pole_mass_convergence(E6SSMtower_info::VWm);
}

double CLASSNAME::calculate_MVWm_pole(double p)
{
   if (!force_output && problems.is_tachyon(E6SSMtower_info::VWm))
      return 0.;

   const double self_energy = Re(self_energy_VWm(p));
   const double mass_sqr = Sqr(MVWm) - self_energy;

   if (mass_sqr < 0.)
      problems.flag_tachyon(E6SSMtower_info::VWm);

   return AbsSqrt(mass_sqr);
}

double CLASSNAME::calculate_MVZ_pole(double p)
{
   if (!force_output && problems.is_tachyon(E6SSMtower_info::VZ))
      return 0.;

   const double self_energy = Re(self_energy_VZ(p));
   const double mass_sqr = Sqr(MVZ) - self_energy;

   if (mass_sqr < 0.)
      problems.flag_tachyon(E6SSMtower_info::VZ);

   return AbsSqrt(mass_sqr);
}


double CLASSNAME::calculate_MFv_DRbar(double, int) const
{
   return 0.0;
}

double CLASSNAME::calculate_MFe_DRbar(double m_sm_msbar, int idx) const
{
   const double p = m_sm_msbar;
   const double self_energy_1  = Re(self_energy_Fe_1_heavy_rotated(p, idx
      , idx));
   const double self_energy_PL = Re(self_energy_Fe_PL_heavy_rotated(p,
      idx, idx));
   const double self_energy_PR = Re(self_energy_Fe_PR_heavy_rotated(p,
      idx, idx));
   const double drbar_conversion = 1 - 0.0023747152416172916*(0.6*Sqr(g1)
      - Sqr(g2));
   const double m_sm_drbar = m_sm_msbar * drbar_conversion;

   const double m_susy_drbar = m_sm_drbar + self_energy_1 + m_sm_drbar *
      (self_energy_PL + self_energy_PR);

   return m_susy_drbar;
}

double CLASSNAME::calculate_MFu_DRbar(double m_pole, int idx) const
{
   const double p = m_pole;
   const double self_energy_1  = Re(self_energy_Fu_1_heavy_rotated(p, idx
      , idx));
   const double self_energy_PL = Re(self_energy_Fu_PL_heavy_rotated(p,
      idx, idx));
   const double self_energy_PR = Re(self_energy_Fu_PR_heavy_rotated(p,
      idx, idx));

   const double currentScale = get_scale();
   const double qcd_1l = -0.008443431970194815*(5. - 3.*Log(Sqr(MFu(idx))
      /Sqr(currentScale)))*Sqr(g3);
   double qcd_2l = 0., qcd_3l = 0.;

   if (get_thresholds() > 1) {
      qcd_2l = -0.003408916029785599*Power(g3,4) -
         0.0011495761378943394*Power(g3,4)*Log(Sqr(currentScale)/Sqr(MFu(idx)))
         - 0.00024060895909416413*Power(g3,4)*Sqr(Log(Power(currentScale,2)
         /Sqr(MFu(idx))));
   }

   const double m_susy_drbar = m_pole + self_energy_1 + m_pole * (
      self_energy_PL + self_energy_PR + qcd_1l + qcd_2l + qcd_3l);

   return m_susy_drbar;
}

double CLASSNAME::calculate_MFd_DRbar(double m_sm_msbar, int idx) const
{
   const double p = m_sm_msbar;
   const double self_energy_1  = Re(self_energy_Fd_1_heavy_rotated(p, idx
      , idx));
   const double self_energy_PL = Re(self_energy_Fd_PL_heavy_rotated(p,
      idx, idx));
   const double self_energy_PR = Re(self_energy_Fd_PR_heavy_rotated(p,
      idx, idx));
   const double m_tree = MFd(idx);
   const double drbar_conversion = 1 - 0.00020496318737651018*Power(g3,4)
      + 0.0006860288475783287*Sqr(g1) + 0.0023747152416172916*Sqr(g2) -
      0.008443431970194815*Sqr(g3);
   const double m_sm_drbar = m_sm_msbar * drbar_conversion;

   const double m_susy_drbar = m_sm_drbar / (1.0 - self_energy_1/m_tree -
      self_energy_PL - self_energy_PR);

   return m_susy_drbar;
}

double CLASSNAME::calculate_MVP_DRbar(double)
{
   return 0.0;
}

double CLASSNAME::calculate_MVZ_DRbar(double m_pole)
{
   const double p = m_pole;
   const double self_energy = Re(self_energy_VZ(p));
   const double mass_sqr = Sqr(m_pole) + self_energy;

   if (mass_sqr < 0.) {
      problems.flag_tachyon(E6SSMtower_info::VZ);
      return m_pole;
   }

   return AbsSqrt(mass_sqr);
}

double CLASSNAME::calculate_MVWm_DRbar(double m_pole)
{
   const double p = m_pole;
   const double self_energy = Re(self_energy_VWm(p));
   const double mass_sqr = Sqr(m_pole) + self_energy;

   if (mass_sqr < 0.) {
      problems.flag_tachyon(E6SSMtower_info::VWm);
      return m_pole;
   }

   return AbsSqrt(mass_sqr);
}


double CLASSNAME::v() const
{
   return Sqrt(Sqr(vd) + Sqr(vu));
}

double CLASSNAME::Betax() const
{
   return -ArcSin(ZA(0,1));
}

double CLASSNAME::ThetaW() const
{
   return ArcCos(Abs(ZZ(0,0)));
}

double CLASSNAME::ThetaWp() const
{
   return ArcCos(Abs(ZZ(2,2)));
}


std::ostream& operator<<(std::ostream& ostr, const E6SSMtower_mass_eigenstates& model)
{
   model.print(ostr);
   return ostr;
}

} // namespace flexiblesusy
